-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation putNetworks_Id_
module HCloud.Operations.PutNetworksId_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > PUT /networks/{id}
-- 
-- Updates the network properties.
-- 
-- Note that when updating labels, the network’s current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.
-- 
-- Note: if the network object changes during the request, the response will be a “conflict” error.
putNetworks_Id_ :: forall m . HCloud.Common.MonadHTTP m => GHC.Types.Int -- ^ id: ID of the network
  -> GHC.Maybe.Maybe PutNetworksIdRequestBody -- ^ The request body to send
  -> HCloud.Common.HttpT m (Network.HTTP.Client.Types.Response PutNetworksIdResponse) -- ^ Monadic computation which returns the result of the operation
putNetworks_Id_ id
                body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PutNetworksIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PutNetworksIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                            PutNetworksIdResponseBody200)
                                                                                                                                                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack ("/networks/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) GHC.Base.mempty body HCloud.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/networks\/{id}.PUT.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data PutNetworksIdRequestBody = PutNetworksIdRequestBody {
  -- | labels: User-defined labels (key-value pairs)
  putNetworksIdRequestBodyLabels :: (GHC.Maybe.Maybe PutNetworksIdRequestBodyLabels)
  -- | name: New network name
  , putNetworksIdRequestBodyName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PutNetworksIdRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("labels" Data.Aeson.Types.ToJSON..= putNetworksIdRequestBodyLabels obj : "name" Data.Aeson.Types.ToJSON..= putNetworksIdRequestBodyName obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("labels" Data.Aeson.Types.ToJSON..= putNetworksIdRequestBodyLabels obj) GHC.Base.<> ("name" Data.Aeson.Types.ToJSON..= putNetworksIdRequestBodyName obj))
instance Data.Aeson.Types.FromJSON.FromJSON PutNetworksIdRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutNetworksIdRequestBody" (\obj -> (GHC.Base.pure PutNetworksIdRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "labels")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name"))
-- | Create a new 'PutNetworksIdRequestBody' with all required fields.
mkPutNetworksIdRequestBody :: PutNetworksIdRequestBody
mkPutNetworksIdRequestBody = PutNetworksIdRequestBody{putNetworksIdRequestBodyLabels = GHC.Maybe.Nothing,
                                                      putNetworksIdRequestBodyName = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/networks\/{id}.PUT.requestBody.content.application\/json.schema.properties.labels@ in the specification.
-- 
-- User-defined labels (key-value pairs)
data PutNetworksIdRequestBodyLabels = PutNetworksIdRequestBodyLabels {
  -- | labelkey
  putNetworksIdRequestBodyLabelsLabelkey :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PutNetworksIdRequestBodyLabels
    where toJSON obj = Data.Aeson.Types.Internal.object ("labelkey" Data.Aeson.Types.ToJSON..= putNetworksIdRequestBodyLabelsLabelkey obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("labelkey" Data.Aeson.Types.ToJSON..= putNetworksIdRequestBodyLabelsLabelkey obj)
instance Data.Aeson.Types.FromJSON.FromJSON PutNetworksIdRequestBodyLabels
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutNetworksIdRequestBodyLabels" (\obj -> GHC.Base.pure PutNetworksIdRequestBodyLabels GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "labelkey"))
-- | Create a new 'PutNetworksIdRequestBodyLabels' with all required fields.
mkPutNetworksIdRequestBodyLabels :: PutNetworksIdRequestBodyLabels
mkPutNetworksIdRequestBodyLabels = PutNetworksIdRequestBodyLabels{putNetworksIdRequestBodyLabelsLabelkey = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'putNetworks_Id_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PutNetworksIdResponseError' is used.
data PutNetworksIdResponse =
   PutNetworksIdResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PutNetworksIdResponse200 PutNetworksIdResponseBody200 -- ^ The \`network\` key contains the updated network
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/networks\/{id}.PUT.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data PutNetworksIdResponseBody200 = PutNetworksIdResponseBody200 {
  -- | network
  putNetworksIdResponseBody200Network :: (GHC.Maybe.Maybe PutNetworksIdResponseBody200Network)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PutNetworksIdResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("network" Data.Aeson.Types.ToJSON..= putNetworksIdResponseBody200Network obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("network" Data.Aeson.Types.ToJSON..= putNetworksIdResponseBody200Network obj)
instance Data.Aeson.Types.FromJSON.FromJSON PutNetworksIdResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutNetworksIdResponseBody200" (\obj -> GHC.Base.pure PutNetworksIdResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "network"))
-- | Create a new 'PutNetworksIdResponseBody200' with all required fields.
mkPutNetworksIdResponseBody200 :: PutNetworksIdResponseBody200
mkPutNetworksIdResponseBody200 = PutNetworksIdResponseBody200{putNetworksIdResponseBody200Network = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/networks\/{id}.PUT.responses.200.content.application\/json.schema.properties.network@ in the specification.
-- 
-- 
data PutNetworksIdResponseBody200Network = PutNetworksIdResponseBody200Network {
  -- | created: Point in time when the Network was created (in ISO-8601 format)
  putNetworksIdResponseBody200NetworkCreated :: Data.Text.Internal.Text
  -- | id: ID of the Network
  , putNetworksIdResponseBody200NetworkId :: GHC.Types.Int
  -- | ip_range: IPv4 prefix of the whole Network
  , putNetworksIdResponseBody200NetworkIpRange :: Data.Text.Internal.Text
  -- | labels: User-defined labels (key-value pairs)
  , putNetworksIdResponseBody200NetworkLabels :: Data.Aeson.Types.Internal.Object
  -- | load_balancers: Array of IDs of Load Balancers attached to this Network
  , putNetworksIdResponseBody200NetworkLoadBalancers :: (GHC.Maybe.Maybe ([GHC.Types.Int]))
  -- | name: Name of the Network
  , putNetworksIdResponseBody200NetworkName :: Data.Text.Internal.Text
  -- | protection: Protection configuration for the Network
  , putNetworksIdResponseBody200NetworkProtection :: PutNetworksIdResponseBody200NetworkProtection
  -- | routes: Array of routes set in this Network
  , putNetworksIdResponseBody200NetworkRoutes :: ([PutNetworksIdResponseBody200NetworkRoutes])
  -- | servers: Array of IDs of Servers attached to this Network
  , putNetworksIdResponseBody200NetworkServers :: ([GHC.Types.Int])
  -- | subnets: Array subnets allocated in this Network
  , putNetworksIdResponseBody200NetworkSubnets :: ([PutNetworksIdResponseBody200NetworkSubnets])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PutNetworksIdResponseBody200Network
    where toJSON obj = Data.Aeson.Types.Internal.object ("created" Data.Aeson.Types.ToJSON..= putNetworksIdResponseBody200NetworkCreated obj : "id" Data.Aeson.Types.ToJSON..= putNetworksIdResponseBody200NetworkId obj : "ip_range" Data.Aeson.Types.ToJSON..= putNetworksIdResponseBody200NetworkIpRange obj : "labels" Data.Aeson.Types.ToJSON..= putNetworksIdResponseBody200NetworkLabels obj : "load_balancers" Data.Aeson.Types.ToJSON..= putNetworksIdResponseBody200NetworkLoadBalancers obj : "name" Data.Aeson.Types.ToJSON..= putNetworksIdResponseBody200NetworkName obj : "protection" Data.Aeson.Types.ToJSON..= putNetworksIdResponseBody200NetworkProtection obj : "routes" Data.Aeson.Types.ToJSON..= putNetworksIdResponseBody200NetworkRoutes obj : "servers" Data.Aeson.Types.ToJSON..= putNetworksIdResponseBody200NetworkServers obj : "subnets" Data.Aeson.Types.ToJSON..= putNetworksIdResponseBody200NetworkSubnets obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("created" Data.Aeson.Types.ToJSON..= putNetworksIdResponseBody200NetworkCreated obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= putNetworksIdResponseBody200NetworkId obj) GHC.Base.<> (("ip_range" Data.Aeson.Types.ToJSON..= putNetworksIdResponseBody200NetworkIpRange obj) GHC.Base.<> (("labels" Data.Aeson.Types.ToJSON..= putNetworksIdResponseBody200NetworkLabels obj) GHC.Base.<> (("load_balancers" Data.Aeson.Types.ToJSON..= putNetworksIdResponseBody200NetworkLoadBalancers obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= putNetworksIdResponseBody200NetworkName obj) GHC.Base.<> (("protection" Data.Aeson.Types.ToJSON..= putNetworksIdResponseBody200NetworkProtection obj) GHC.Base.<> (("routes" Data.Aeson.Types.ToJSON..= putNetworksIdResponseBody200NetworkRoutes obj) GHC.Base.<> (("servers" Data.Aeson.Types.ToJSON..= putNetworksIdResponseBody200NetworkServers obj) GHC.Base.<> ("subnets" Data.Aeson.Types.ToJSON..= putNetworksIdResponseBody200NetworkSubnets obj))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PutNetworksIdResponseBody200Network
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutNetworksIdResponseBody200Network" (\obj -> (((((((((GHC.Base.pure PutNetworksIdResponseBody200Network GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ip_range")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "labels")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "load_balancers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "protection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "routes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "servers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "subnets"))
-- | Create a new 'PutNetworksIdResponseBody200Network' with all required fields.
mkPutNetworksIdResponseBody200Network :: Data.Text.Internal.Text -- ^ 'putNetworksIdResponseBody200NetworkCreated'
  -> GHC.Types.Int -- ^ 'putNetworksIdResponseBody200NetworkId'
  -> Data.Text.Internal.Text -- ^ 'putNetworksIdResponseBody200NetworkIpRange'
  -> Data.Aeson.Types.Internal.Object -- ^ 'putNetworksIdResponseBody200NetworkLabels'
  -> Data.Text.Internal.Text -- ^ 'putNetworksIdResponseBody200NetworkName'
  -> PutNetworksIdResponseBody200NetworkProtection -- ^ 'putNetworksIdResponseBody200NetworkProtection'
  -> [PutNetworksIdResponseBody200NetworkRoutes] -- ^ 'putNetworksIdResponseBody200NetworkRoutes'
  -> [GHC.Types.Int] -- ^ 'putNetworksIdResponseBody200NetworkServers'
  -> [PutNetworksIdResponseBody200NetworkSubnets] -- ^ 'putNetworksIdResponseBody200NetworkSubnets'
  -> PutNetworksIdResponseBody200Network
mkPutNetworksIdResponseBody200Network putNetworksIdResponseBody200NetworkCreated putNetworksIdResponseBody200NetworkId putNetworksIdResponseBody200NetworkIpRange putNetworksIdResponseBody200NetworkLabels putNetworksIdResponseBody200NetworkName putNetworksIdResponseBody200NetworkProtection putNetworksIdResponseBody200NetworkRoutes putNetworksIdResponseBody200NetworkServers putNetworksIdResponseBody200NetworkSubnets = PutNetworksIdResponseBody200Network{putNetworksIdResponseBody200NetworkCreated = putNetworksIdResponseBody200NetworkCreated,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        putNetworksIdResponseBody200NetworkId = putNetworksIdResponseBody200NetworkId,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        putNetworksIdResponseBody200NetworkIpRange = putNetworksIdResponseBody200NetworkIpRange,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        putNetworksIdResponseBody200NetworkLabels = putNetworksIdResponseBody200NetworkLabels,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        putNetworksIdResponseBody200NetworkLoadBalancers = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        putNetworksIdResponseBody200NetworkName = putNetworksIdResponseBody200NetworkName,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        putNetworksIdResponseBody200NetworkProtection = putNetworksIdResponseBody200NetworkProtection,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        putNetworksIdResponseBody200NetworkRoutes = putNetworksIdResponseBody200NetworkRoutes,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        putNetworksIdResponseBody200NetworkServers = putNetworksIdResponseBody200NetworkServers,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        putNetworksIdResponseBody200NetworkSubnets = putNetworksIdResponseBody200NetworkSubnets}
-- | Defines the object schema located at @paths.\/networks\/{id}.PUT.responses.200.content.application\/json.schema.properties.network.properties.protection@ in the specification.
-- 
-- Protection configuration for the Network
data PutNetworksIdResponseBody200NetworkProtection = PutNetworksIdResponseBody200NetworkProtection {
  -- | delete: If true, prevents the Network from being deleted
  putNetworksIdResponseBody200NetworkProtectionDelete :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PutNetworksIdResponseBody200NetworkProtection
    where toJSON obj = Data.Aeson.Types.Internal.object ("delete" Data.Aeson.Types.ToJSON..= putNetworksIdResponseBody200NetworkProtectionDelete obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("delete" Data.Aeson.Types.ToJSON..= putNetworksIdResponseBody200NetworkProtectionDelete obj)
instance Data.Aeson.Types.FromJSON.FromJSON PutNetworksIdResponseBody200NetworkProtection
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutNetworksIdResponseBody200NetworkProtection" (\obj -> GHC.Base.pure PutNetworksIdResponseBody200NetworkProtection GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "delete"))
-- | Create a new 'PutNetworksIdResponseBody200NetworkProtection' with all required fields.
mkPutNetworksIdResponseBody200NetworkProtection :: GHC.Types.Bool -- ^ 'putNetworksIdResponseBody200NetworkProtectionDelete'
  -> PutNetworksIdResponseBody200NetworkProtection
mkPutNetworksIdResponseBody200NetworkProtection putNetworksIdResponseBody200NetworkProtectionDelete = PutNetworksIdResponseBody200NetworkProtection{putNetworksIdResponseBody200NetworkProtectionDelete = putNetworksIdResponseBody200NetworkProtectionDelete}
-- | Defines the object schema located at @paths.\/networks\/{id}.PUT.responses.200.content.application\/json.schema.properties.network.properties.routes.items@ in the specification.
-- 
-- 
data PutNetworksIdResponseBody200NetworkRoutes = PutNetworksIdResponseBody200NetworkRoutes {
  -- | destination: Destination network or host of this route. Must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first IP of the networks ip_range or with 172.31.1.1. Must be one of the private IPv4 ranges of RFC1918.
  putNetworksIdResponseBody200NetworkRoutesDestination :: Data.Text.Internal.Text
  -- | gateway: Gateway for the route. Cannot be the first IP of the networks ip_range and also cannot be 172.31.1.1 as this IP is being used as a gateway for the public network interface of Servers.
  , putNetworksIdResponseBody200NetworkRoutesGateway :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PutNetworksIdResponseBody200NetworkRoutes
    where toJSON obj = Data.Aeson.Types.Internal.object ("destination" Data.Aeson.Types.ToJSON..= putNetworksIdResponseBody200NetworkRoutesDestination obj : "gateway" Data.Aeson.Types.ToJSON..= putNetworksIdResponseBody200NetworkRoutesGateway obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("destination" Data.Aeson.Types.ToJSON..= putNetworksIdResponseBody200NetworkRoutesDestination obj) GHC.Base.<> ("gateway" Data.Aeson.Types.ToJSON..= putNetworksIdResponseBody200NetworkRoutesGateway obj))
instance Data.Aeson.Types.FromJSON.FromJSON PutNetworksIdResponseBody200NetworkRoutes
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutNetworksIdResponseBody200NetworkRoutes" (\obj -> (GHC.Base.pure PutNetworksIdResponseBody200NetworkRoutes GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "destination")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "gateway"))
-- | Create a new 'PutNetworksIdResponseBody200NetworkRoutes' with all required fields.
mkPutNetworksIdResponseBody200NetworkRoutes :: Data.Text.Internal.Text -- ^ 'putNetworksIdResponseBody200NetworkRoutesDestination'
  -> Data.Text.Internal.Text -- ^ 'putNetworksIdResponseBody200NetworkRoutesGateway'
  -> PutNetworksIdResponseBody200NetworkRoutes
mkPutNetworksIdResponseBody200NetworkRoutes putNetworksIdResponseBody200NetworkRoutesDestination putNetworksIdResponseBody200NetworkRoutesGateway = PutNetworksIdResponseBody200NetworkRoutes{putNetworksIdResponseBody200NetworkRoutesDestination = putNetworksIdResponseBody200NetworkRoutesDestination,
                                                                                                                                                                                              putNetworksIdResponseBody200NetworkRoutesGateway = putNetworksIdResponseBody200NetworkRoutesGateway}
-- | Defines the object schema located at @paths.\/networks\/{id}.PUT.responses.200.content.application\/json.schema.properties.network.properties.subnets.items@ in the specification.
-- 
-- 
data PutNetworksIdResponseBody200NetworkSubnets = PutNetworksIdResponseBody200NetworkSubnets {
  -- | gateway: Gateway for Servers attached to this subnet. For subnets of type Server this is always the first IP of the network IP range.
  putNetworksIdResponseBody200NetworkSubnetsGateway :: Data.Text.Internal.Text
  -- | ip_range: Range to allocate IPs from. Must be a Subnet of the ip_range of the parent network object and must not overlap with any other subnets or with any destinations in routes. Minimum Network size is \/30. We suggest that you pick a bigger Network with a \/24 netmask.
  , putNetworksIdResponseBody200NetworkSubnetsIpRange :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | network_zone: Name of Network zone. Currently eu-central is the only available zone.
  , putNetworksIdResponseBody200NetworkSubnetsNetworkZone :: Data.Text.Internal.Text
  -- | type: Type of Subnetwork
  , putNetworksIdResponseBody200NetworkSubnetsType :: PutNetworksIdResponseBody200NetworkSubnetsType
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PutNetworksIdResponseBody200NetworkSubnets
    where toJSON obj = Data.Aeson.Types.Internal.object ("gateway" Data.Aeson.Types.ToJSON..= putNetworksIdResponseBody200NetworkSubnetsGateway obj : "ip_range" Data.Aeson.Types.ToJSON..= putNetworksIdResponseBody200NetworkSubnetsIpRange obj : "network_zone" Data.Aeson.Types.ToJSON..= putNetworksIdResponseBody200NetworkSubnetsNetworkZone obj : "type" Data.Aeson.Types.ToJSON..= putNetworksIdResponseBody200NetworkSubnetsType obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("gateway" Data.Aeson.Types.ToJSON..= putNetworksIdResponseBody200NetworkSubnetsGateway obj) GHC.Base.<> (("ip_range" Data.Aeson.Types.ToJSON..= putNetworksIdResponseBody200NetworkSubnetsIpRange obj) GHC.Base.<> (("network_zone" Data.Aeson.Types.ToJSON..= putNetworksIdResponseBody200NetworkSubnetsNetworkZone obj) GHC.Base.<> ("type" Data.Aeson.Types.ToJSON..= putNetworksIdResponseBody200NetworkSubnetsType obj))))
instance Data.Aeson.Types.FromJSON.FromJSON PutNetworksIdResponseBody200NetworkSubnets
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutNetworksIdResponseBody200NetworkSubnets" (\obj -> (((GHC.Base.pure PutNetworksIdResponseBody200NetworkSubnets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "gateway")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip_range")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "network_zone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Create a new 'PutNetworksIdResponseBody200NetworkSubnets' with all required fields.
mkPutNetworksIdResponseBody200NetworkSubnets :: Data.Text.Internal.Text -- ^ 'putNetworksIdResponseBody200NetworkSubnetsGateway'
  -> Data.Text.Internal.Text -- ^ 'putNetworksIdResponseBody200NetworkSubnetsNetworkZone'
  -> PutNetworksIdResponseBody200NetworkSubnetsType -- ^ 'putNetworksIdResponseBody200NetworkSubnetsType'
  -> PutNetworksIdResponseBody200NetworkSubnets
mkPutNetworksIdResponseBody200NetworkSubnets putNetworksIdResponseBody200NetworkSubnetsGateway putNetworksIdResponseBody200NetworkSubnetsNetworkZone putNetworksIdResponseBody200NetworkSubnetsType = PutNetworksIdResponseBody200NetworkSubnets{putNetworksIdResponseBody200NetworkSubnetsGateway = putNetworksIdResponseBody200NetworkSubnetsGateway,
                                                                                                                                                                                                                                                 putNetworksIdResponseBody200NetworkSubnetsIpRange = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                 putNetworksIdResponseBody200NetworkSubnetsNetworkZone = putNetworksIdResponseBody200NetworkSubnetsNetworkZone,
                                                                                                                                                                                                                                                 putNetworksIdResponseBody200NetworkSubnetsType = putNetworksIdResponseBody200NetworkSubnetsType}
-- | Defines the enum schema located at @paths.\/networks\/{id}.PUT.responses.200.content.application\/json.schema.properties.network.properties.subnets.items.properties.type@ in the specification.
-- 
-- Type of Subnetwork
data PutNetworksIdResponseBody200NetworkSubnetsType =
   PutNetworksIdResponseBody200NetworkSubnetsTypeOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PutNetworksIdResponseBody200NetworkSubnetsTypeTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PutNetworksIdResponseBody200NetworkSubnetsTypeEnumCloud -- ^ Represents the JSON value @"cloud"@
  | PutNetworksIdResponseBody200NetworkSubnetsTypeEnumServer -- ^ Represents the JSON value @"server"@
  | PutNetworksIdResponseBody200NetworkSubnetsTypeEnumVswitch -- ^ Represents the JSON value @"vswitch"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PutNetworksIdResponseBody200NetworkSubnetsType
    where toJSON (PutNetworksIdResponseBody200NetworkSubnetsTypeOther val) = val
          toJSON (PutNetworksIdResponseBody200NetworkSubnetsTypeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PutNetworksIdResponseBody200NetworkSubnetsTypeEnumCloud) = "cloud"
          toJSON (PutNetworksIdResponseBody200NetworkSubnetsTypeEnumServer) = "server"
          toJSON (PutNetworksIdResponseBody200NetworkSubnetsTypeEnumVswitch) = "vswitch"
instance Data.Aeson.Types.FromJSON.FromJSON PutNetworksIdResponseBody200NetworkSubnetsType
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "cloud" -> PutNetworksIdResponseBody200NetworkSubnetsTypeEnumCloud
                                            | val GHC.Classes.== "server" -> PutNetworksIdResponseBody200NetworkSubnetsTypeEnumServer
                                            | val GHC.Classes.== "vswitch" -> PutNetworksIdResponseBody200NetworkSubnetsTypeEnumVswitch
                                            | GHC.Base.otherwise -> PutNetworksIdResponseBody200NetworkSubnetsTypeOther val)
-- | > PUT /networks/{id}
-- 
-- The same as 'putNetworks_Id_' but accepts an explicit configuration.
putNetworks_Id_WithConfiguration :: forall m . HCloud.Common.MonadHTTP m => HCloud.Common.Configuration -- ^ The configuration to use in the request
  -> GHC.Types.Int -- ^ id: ID of the network
  -> GHC.Maybe.Maybe PutNetworksIdRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response PutNetworksIdResponse) -- ^ Monadic computation which returns the result of the operation
putNetworks_Id_WithConfiguration config
                                 id
                                 body = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PutNetworksIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PutNetworksIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                             PutNetworksIdResponseBody200)
                                                                                                                                                                                | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack ("/networks/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) GHC.Base.mempty body HCloud.Common.RequestBodyEncodingJSON)
-- | > PUT /networks/{id}
-- 
-- The same as 'putNetworks_Id_' but returns the raw 'Data.ByteString.Char8.ByteString'.
putNetworks_Id_Raw :: forall m . HCloud.Common.MonadHTTP m => GHC.Types.Int -- ^ id: ID of the network
  -> GHC.Maybe.Maybe PutNetworksIdRequestBody -- ^ The request body to send
  -> HCloud.Common.HttpT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
putNetworks_Id_Raw id
                   body = GHC.Base.id (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack ("/networks/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) GHC.Base.mempty body HCloud.Common.RequestBodyEncodingJSON)
-- | > PUT /networks/{id}
-- 
-- The same as 'putNetworks_Id_' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
putNetworks_Id_WithConfigurationRaw :: forall m . HCloud.Common.MonadHTTP m => HCloud.Common.Configuration -- ^ The configuration to use in the request
  -> GHC.Types.Int -- ^ id: ID of the network
  -> GHC.Maybe.Maybe PutNetworksIdRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
putNetworks_Id_WithConfigurationRaw config
                                    id
                                    body = GHC.Base.id (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack ("/networks/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) GHC.Base.mempty body HCloud.Common.RequestBodyEncodingJSON)
