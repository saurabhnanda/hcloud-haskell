-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation getLoadBalancers
module HCloud.Operations.GetLoadBalancers where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > GET /load_balancers
-- 
-- Gets all existing Load Balancers that you have available.
getLoadBalancers :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Maybe.Maybe Data.Text.Internal.Text                                                                                      -- ^ sort: Can be used multiple times.
  -> GHC.Maybe.Maybe Data.Text.Internal.Text                                                                                      -- ^ name: Can be used to filter resources by their name. The response will only contain the resources matching the specified name
  -> GHC.Maybe.Maybe Data.Text.Internal.Text                                                                                      -- ^ label_selector: Can be used to filter resources by labels. The response will only contain resources matching the label selector.
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response GetLoadBalancersResponse)) -- ^ Monad containing the result of the operation
getLoadBalancers config
                 sort
                 name
                 labelSelector = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetLoadBalancersResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetLoadBalancersResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                           GetLoadBalancersResponseBody200)
                                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/load_balancers") ((Data.Text.pack "sort",
                                                                                                                                                                                                                                                                                                                                                                                                                                      HCloud.Common.stringifyModel Data.Functor.<$> sort) : ((Data.Text.pack "name",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               HCloud.Common.stringifyModel Data.Functor.<$> name) : ((Data.Text.pack "label_selector",
loud.Common.stringifyModel Data.Functor.<$> labelSelector) : []))))
-- | > GET /load_balancers
-- 
-- The same as 'getLoadBalancers' but returns the raw 'Data.ByteString.Char8.ByteString'
getLoadBalancersRaw :: forall m s . (HCloud.Common.MonadHTTP m,
                                     HCloud.Common.SecurityScheme s) =>
                       HCloud.Common.Configuration s ->
                       GHC.Maybe.Maybe Data.Text.Internal.Text ->
                       GHC.Maybe.Maybe Data.Text.Internal.Text ->
                       GHC.Maybe.Maybe Data.Text.Internal.Text ->
                       m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                             (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getLoadBalancersRaw config
                    sort
                    name
                    labelSelector = GHC.Base.id (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/load_balancers") ((Data.Text.pack "sort",
                                                                                                                                                                                        HCloud.Common.stringifyModel Data.Functor.<$> sort) : ((Data.Text.pack "name",
                                                                                                                                                                                                                                                 HCloud.Common.stringifyModel Data.Functor.<$> name) : ((Data.Text.pack "label_selector",
                                                                                                                                                                                                                                                                                                          HCloud.Common.stringifyModel Data.Functor.<$> labelSelector) : []))))
-- | > GET /load_balancers
-- 
-- Monadic version of 'getLoadBalancers' (use with 'HCloud.Common.runWithConfiguration')
getLoadBalancersM :: forall m s . (HCloud.Common.MonadHTTP m,
                                   HCloud.Common.SecurityScheme s) =>
                     GHC.Maybe.Maybe Data.Text.Internal.Text ->
                     GHC.Maybe.Maybe Data.Text.Internal.Text ->
                     GHC.Maybe.Maybe Data.Text.Internal.Text ->
                     Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                        m
                                                        (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                            (Network.HTTP.Client.Types.Response GetLoadBalancersResponse))
getLoadBalancersM sort
                  name
                  labelSelector = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetLoadBalancersResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetLoadBalancersResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                            GetLoadBalancersResponseBody200)
                                                                                                                                                                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/load_balancers") ((Data.Text.pack "sort",
                                                                                                                                                                                                                                                                                                                                                                                                                                 HCloud.Common.stringifyModel Data.Functor.<$> sort) : ((Data.Text.pack "name",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          HCloud.Common.stringifyModel Data.Functor.<$> name) : ((Data.Text.pack "label_selector",
loud.Common.stringifyModel Data.Functor.<$> labelSelector) : []))))
-- | > GET /load_balancers
-- 
-- Monadic version of 'getLoadBalancersRaw' (use with 'HCloud.Common.runWithConfiguration')
getLoadBalancersRawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                      HCloud.Common.SecurityScheme s) =>
                        GHC.Maybe.Maybe Data.Text.Internal.Text ->
                        GHC.Maybe.Maybe Data.Text.Internal.Text ->
                        GHC.Maybe.Maybe Data.Text.Internal.Text ->
                        Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                           m
                                                           (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                               (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getLoadBalancersRawM sort
                     name
                     labelSelector = GHC.Base.id (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/load_balancers") ((Data.Text.pack "sort",
                                                                                                                                                                                   HCloud.Common.stringifyModel Data.Functor.<$> sort) : ((Data.Text.pack "name",
                                                                                                                                                                                                                                            HCloud.Common.stringifyModel Data.Functor.<$> name) : ((Data.Text.pack "label_selector",
                                                                                                                                                                                                                                                                                                     HCloud.Common.stringifyModel Data.Functor.<$> labelSelector) : []))))
-- | Represents a response of the operation 'getLoadBalancers'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetLoadBalancersResponseError' is used.
data GetLoadBalancersResponse =                                  
   GetLoadBalancersResponseError GHC.Base.String                 -- ^ Means either no matching case available or a parse error
  | GetLoadBalancersResponse200 GetLoadBalancersResponseBody200  -- ^ The \`load_balancers\` key contains a list of Load Balancers
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema GetLoadBalancersResponseBody200
-- 
-- 
data GetLoadBalancersResponseBody200 = GetLoadBalancersResponseBody200 {
  -- | load_balancers
  getLoadBalancersResponseBody200LoadBalancers :: ([] GetLoadBalancersResponseBody200LoadBalancers)
  -- | meta
  , getLoadBalancersResponseBody200Meta :: (GHC.Maybe.Maybe GetLoadBalancersResponseBody200Meta)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersResponseBody200
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "load_balancers" (getLoadBalancersResponseBody200LoadBalancers obj) : (Data.Aeson..=) "meta" (getLoadBalancersResponseBody200Meta obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "load_balancers" (getLoadBalancersResponseBody200LoadBalancers obj) GHC.Base.<> (Data.Aeson..=) "meta" (getLoadBalancersResponseBody200Meta obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersResponseBody200" (\obj -> (GHC.Base.pure GetLoadBalancersResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "load_balancers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "meta"))
-- | Defines the data type for the schema GetLoadBalancersResponseBody200Load_balancers
-- 
-- 
data GetLoadBalancersResponseBody200LoadBalancers = GetLoadBalancersResponseBody200LoadBalancers {
  -- | algorithm: Algorithm of the Load Balancer
  getLoadBalancersResponseBody200LoadBalancersAlgorithm :: GetLoadBalancersResponseBody200LoadBalancersAlgorithm
  -- | created: Point in time when the Resource was created (in ISO-8601 format)
  , getLoadBalancersResponseBody200LoadBalancersCreated :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , getLoadBalancersResponseBody200LoadBalancersId :: GHC.Integer.Type.Integer
  -- | included_traffic: Free Traffic for the current billing period in bytes
  , getLoadBalancersResponseBody200LoadBalancersIncludedTraffic :: GHC.Integer.Type.Integer
  -- | ingoing_traffic: Inbound Traffic for the current billing period in bytes
  , getLoadBalancersResponseBody200LoadBalancersIngoingTraffic :: GHC.Integer.Type.Integer
  -- | labels: User-defined labels (key-value pairs)
  , getLoadBalancersResponseBody200LoadBalancersLabels :: GetLoadBalancersResponseBody200LoadBalancersLabels
  -- | load_balancer_type
  , getLoadBalancersResponseBody200LoadBalancersLoadBalancerType :: GetLoadBalancersResponseBody200LoadBalancersLoadBalancerType
  -- | location
  , getLoadBalancersResponseBody200LoadBalancersLocation :: GetLoadBalancersResponseBody200LoadBalancersLocation
  -- | name: Name of the Resource. Must be unique per Project.
  , getLoadBalancersResponseBody200LoadBalancersName :: Data.Text.Internal.Text
  -- | outgoing_traffic: Outbound Traffic for the current billing period in bytes
  , getLoadBalancersResponseBody200LoadBalancersOutgoingTraffic :: GHC.Integer.Type.Integer
  -- | private_net: Private networks information
  , getLoadBalancersResponseBody200LoadBalancersPrivateNet :: ([] GetLoadBalancersResponseBody200LoadBalancersPrivateNet)
  -- | protection: Protection configuration for the Resource
  , getLoadBalancersResponseBody200LoadBalancersProtection :: GetLoadBalancersResponseBody200LoadBalancersProtection
  -- | public_net: Public network information
  , getLoadBalancersResponseBody200LoadBalancersPublicNet :: GetLoadBalancersResponseBody200LoadBalancersPublicNet
  -- | services: List of services that belong to this Load Balancer
  , getLoadBalancersResponseBody200LoadBalancersServices :: ([] GetLoadBalancersResponseBody200LoadBalancersServices)
  -- | targets: List of targets that belong to this Load Balancer
  , getLoadBalancersResponseBody200LoadBalancersTargets :: ([] GetLoadBalancersResponseBody200LoadBalancersTargets)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersResponseBody200LoadBalancers
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "algorithm" (getLoadBalancersResponseBody200LoadBalancersAlgorithm obj) : (Data.Aeson..=) "created" (getLoadBalancersResponseBody200LoadBalancersCreated obj) : (Data.Aeson..=) "id" (getLoadBalancersResponseBody200LoadBalancersId obj) : (Data.Aeson..=) "included_traffic" (getLoadBalancersResponseBody200LoadBalancersIncludedTraffic obj) : (Data.Aeson..=) "ingoing_traffic" (getLoadBalancersResponseBody200LoadBalancersIngoingTraffic obj) : (Data.Aeson..=) "labels" (getLoadBalancersResponseBody200LoadBalancersLabels obj) : (Data.Aeson..=) "load_balancer_type" (getLoadBalancersResponseBody200LoadBalancersLoadBalancerType obj) : (Data.Aeson..=) "location" (getLoadBalancersResponseBody200LoadBalancersLocation obj) : (Data.Aeson..=) "name" (getLoadBalancersResponseBody200LoadBalancersName obj) : (Data.Aeson..=) "outgoing_traffic" (getLoadBalancersResponseBody200LoadBalancersOutgoingTraffic obj) : (Data.Aeson..=) "private_net" (getLoadBalancersResponseBody200LoadBalancersPrivateNet obj) : (Data.Aeson..=) "protection" (getLoadBalancersResponseBody200LoadBalancersProtection obj) : (Data.Aeson..=) "public_net" (getLoadBalancersResponseBody200LoadBalancersPublicNet obj) : (Data.Aeson..=) "services" (getLoadBalancersResponseBody200LoadBalancersServices obj) : (Data.Aeson..=) "targets" (getLoadBalancersResponseBody200LoadBalancersTargets obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "algorithm" (getLoadBalancersResponseBody200LoadBalancersAlgorithm obj) GHC.Base.<> ((Data.Aeson..=) "created" (getLoadBalancersResponseBody200LoadBalancersCreated obj) GHC.Base.<> ((Data.Aeson..=) "id" (getLoadBalancersResponseBody200LoadBalancersId obj) GHC.Base.<> ((Data.Aeson..=) "included_traffic" (getLoadBalancersResponseBody200LoadBalancersIncludedTraffic obj) GHC.Base.<> ((Data.Aeson..=) "ingoing_traffic" (getLoadBalancersResponseBody200LoadBalancersIngoingTraffic obj) GHC.Base.<> ((Data.Aeson..=) "labels" (getLoadBalancersResponseBody200LoadBalancersLabels obj) GHC.Base.<> ((Data.Aeson..=) "load_balancer_type" (getLoadBalancersResponseBody200LoadBalancersLoadBalancerType obj) GHC.Base.<> ((Data.Aeson..=) "location" (getLoadBalancersResponseBody200LoadBalancersLocation obj) GHC.Base.<> ((Data.Aeson..=) "name" (getLoadBalancersResponseBody200LoadBalancersName obj) GHC.Base.<> ((Data.Aeson..=) "outgoing_traffic" (getLoadBalancersResponseBody200LoadBalancersOutgoingTraffic obj) GHC.Base.<> ((Data.Aeson..=) "private_net" (getLoadBalancersResponseBody200LoadBalancersPrivateNet obj) GHC.Base.<> ((Data.Aeson..=) "protection" (getLoadBalancersResponseBody200LoadBalancersProtection obj) GHC.Base.<> ((Data.Aeson..=) "public_net" (getLoadBalancersResponseBody200LoadBalancersPublicNet obj) GHC.Base.<> ((Data.Aeson..=) "services" (getLoadBalancersResponseBody200LoadBalancersServices obj) GHC.Base.<> (Data.Aeson..=) "targets" (getLoadBalancersResponseBody200LoadBalancersTargets obj)))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersResponseBody200LoadBalancers
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersResponseBody200LoadBalancers" (\obj -> ((((((((((((((GHC.Base.pure GetLoadBalancersResponseBody200LoadBalancers GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "algorithm")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "included_traffic")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ingoing_traffic")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "labels")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "load_balancer_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "location")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "outgoing_traffic")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "private_net")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "protection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "public_net")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "services")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "targets"))
-- | Defines the data type for the schema GetLoadBalancersResponseBody200Load_balancersAlgorithm
-- 
-- Algorithm of the Load Balancer
data GetLoadBalancersResponseBody200LoadBalancersAlgorithm = GetLoadBalancersResponseBody200LoadBalancersAlgorithm {
  -- | type: Type of the algorithm
  getLoadBalancersResponseBody200LoadBalancersAlgorithmType :: GetLoadBalancersResponseBody200LoadBalancersAlgorithmType
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersResponseBody200LoadBalancersAlgorithm
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "type" (getLoadBalancersResponseBody200LoadBalancersAlgorithmType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "type" (getLoadBalancersResponseBody200LoadBalancersAlgorithmType obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersResponseBody200LoadBalancersAlgorithm
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersResponseBody200LoadBalancersAlgorithm" (\obj -> GHC.Base.pure GetLoadBalancersResponseBody200LoadBalancersAlgorithm GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema GetLoadBalancersResponseBody200Load_balancersAlgorithmType
-- 
-- Type of the algorithm
data GetLoadBalancersResponseBody200LoadBalancersAlgorithmType
    = GetLoadBalancersResponseBody200LoadBalancersAlgorithmTypeEnumOther Data.Aeson.Types.Internal.Value
    | GetLoadBalancersResponseBody200LoadBalancersAlgorithmTypeEnumTyped Data.Text.Internal.Text
    | GetLoadBalancersResponseBody200LoadBalancersAlgorithmTypeEnumStringLeastConnections
    | GetLoadBalancersResponseBody200LoadBalancersAlgorithmTypeEnumStringRoundRobin
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersResponseBody200LoadBalancersAlgorithmType
    where toJSON (GetLoadBalancersResponseBody200LoadBalancersAlgorithmTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetLoadBalancersResponseBody200LoadBalancersAlgorithmTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetLoadBalancersResponseBody200LoadBalancersAlgorithmTypeEnumStringLeastConnections) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "least_connections"
          toJSON (GetLoadBalancersResponseBody200LoadBalancersAlgorithmTypeEnumStringRoundRobin) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "round_robin"
instance Data.Aeson.FromJSON GetLoadBalancersResponseBody200LoadBalancersAlgorithmType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "least_connections")
                                          then GetLoadBalancersResponseBody200LoadBalancersAlgorithmTypeEnumStringLeastConnections
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "round_robin")
                                                then GetLoadBalancersResponseBody200LoadBalancersAlgorithmTypeEnumStringRoundRobin
                                                else GetLoadBalancersResponseBody200LoadBalancersAlgorithmTypeEnumOther val)
-- | Defines the data type for the schema GetLoadBalancersResponseBody200Load_balancersLabels
-- 
-- User-defined labels (key-value pairs)
data GetLoadBalancersResponseBody200LoadBalancersLabels = GetLoadBalancersResponseBody200LoadBalancersLabels {
  
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersResponseBody200LoadBalancersLabels
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersResponseBody200LoadBalancersLabels
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersResponseBody200LoadBalancersLabels" (\obj -> GHC.Base.pure GetLoadBalancersResponseBody200LoadBalancersLabels)
-- | Defines the data type for the schema GetLoadBalancersResponseBody200Load_balancersLoad_balancer_type
-- 
-- 
data GetLoadBalancersResponseBody200LoadBalancersLoadBalancerType = GetLoadBalancersResponseBody200LoadBalancersLoadBalancerType {
  -- | deprecated: Point in time when the Load Balancer type is deprecated (in ISO-8601 format)
  getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypeDeprecated :: Data.Text.Internal.Text
  -- | description: Description of the Load Balancer type
  , getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypeDescription :: Data.Text.Internal.Text
  -- | id: ID of the Load Balancer type
  , getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypeId :: GHC.Types.Double
  -- | max_assigned_certificates: Number of SSL Certificates that can be assigned to a single Load Balancer
  , getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypeMaxAssignedCertificates :: GHC.Types.Double
  -- | max_connections: Number of maximum simultaneous open connections
  , getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypeMaxConnections :: GHC.Types.Double
  -- | max_services: Number of services a Load Balancer of this type can have
  , getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypeMaxServices :: GHC.Types.Double
  -- | max_targets: Number of targets a single Load Balancer can have
  , getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypeMaxTargets :: GHC.Types.Double
  -- | name: Unique identifier of the Load Balancer type
  , getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypeName :: Data.Text.Internal.Text
  -- | prices: Prices in different network zones
  , getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePrices :: ([] GetLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePrices)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersResponseBody200LoadBalancersLoadBalancerType
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "deprecated" (getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypeDeprecated obj) : (Data.Aeson..=) "description" (getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypeDescription obj) : (Data.Aeson..=) "id" (getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypeId obj) : (Data.Aeson..=) "max_assigned_certificates" (getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypeMaxAssignedCertificates obj) : (Data.Aeson..=) "max_connections" (getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypeMaxConnections obj) : (Data.Aeson..=) "max_services" (getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypeMaxServices obj) : (Data.Aeson..=) "max_targets" (getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypeMaxTargets obj) : (Data.Aeson..=) "name" (getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypeName obj) : (Data.Aeson..=) "prices" (getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePrices obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "deprecated" (getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypeDeprecated obj) GHC.Base.<> ((Data.Aeson..=) "description" (getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypeDescription obj) GHC.Base.<> ((Data.Aeson..=) "id" (getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypeId obj) GHC.Base.<> ((Data.Aeson..=) "max_assigned_certificates" (getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypeMaxAssignedCertificates obj) GHC.Base.<> ((Data.Aeson..=) "max_connections" (getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypeMaxConnections obj) GHC.Base.<> ((Data.Aeson..=) "max_services" (getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypeMaxServices obj) GHC.Base.<> ((Data.Aeson..=) "max_targets" (getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypeMaxTargets obj) GHC.Base.<> ((Data.Aeson..=) "name" (getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypeName obj) GHC.Base.<> (Data.Aeson..=) "prices" (getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePrices obj)))))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersResponseBody200LoadBalancersLoadBalancerType
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersResponseBody200LoadBalancersLoadBalancerType" (\obj -> ((((((((GHC.Base.pure GetLoadBalancersResponseBody200LoadBalancersLoadBalancerType GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "deprecated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "max_assigned_certificates")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "max_connections")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "max_services")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "max_targets")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "prices"))
-- | Defines the data type for the schema GetLoadBalancersResponseBody200Load_balancersLoad_balancer_typePrices
-- 
-- 
data GetLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePrices = GetLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePrices {
  -- | location: Name of the Location the price is for
  getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePricesLocation :: Data.Text.Internal.Text
  -- | price_hourly: Hourly costs for a Resource in this Location
  , getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePricesPriceHourly :: GetLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePricesPriceHourly
  -- | price_monthly: Monthly costs for a Resource in this Location
  , getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePricesPriceMonthly :: GetLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePricesPriceMonthly
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePrices
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "location" (getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePricesLocation obj) : (Data.Aeson..=) "price_hourly" (getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePricesPriceHourly obj) : (Data.Aeson..=) "price_monthly" (getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePricesPriceMonthly obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "location" (getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePricesLocation obj) GHC.Base.<> ((Data.Aeson..=) "price_hourly" (getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePricesPriceHourly obj) GHC.Base.<> (Data.Aeson..=) "price_monthly" (getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePricesPriceMonthly obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePrices
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePrices" (\obj -> ((GHC.Base.pure GetLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePrices GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "location")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price_hourly")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price_monthly"))
-- | Defines the data type for the schema GetLoadBalancersResponseBody200Load_balancersLoad_balancer_typePricesPrice_hourly
-- 
-- Hourly costs for a Resource in this Location
data GetLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePricesPriceHourly = GetLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePricesPriceHourly {
  -- | gross: Price with VAT added
  getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePricesPriceHourlyGross :: Data.Text.Internal.Text
  -- | net: Price without VAT
  , getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePricesPriceHourlyNet :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePricesPriceHourly
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "gross" (getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePricesPriceHourlyGross obj) : (Data.Aeson..=) "net" (getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePricesPriceHourlyNet obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "gross" (getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePricesPriceHourlyGross obj) GHC.Base.<> (Data.Aeson..=) "net" (getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePricesPriceHourlyNet obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePricesPriceHourly
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePricesPriceHourly" (\obj -> (GHC.Base.pure GetLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePricesPriceHourly GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "gross")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "net"))
-- | Defines the data type for the schema GetLoadBalancersResponseBody200Load_balancersLoad_balancer_typePricesPrice_monthly
-- 
-- Monthly costs for a Resource in this Location
data GetLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePricesPriceMonthly = GetLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePricesPriceMonthly {
  -- | gross: Price with VAT added
  getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePricesPriceMonthlyGross :: Data.Text.Internal.Text
  -- | net: Price without VAT
  , getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePricesPriceMonthlyNet :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePricesPriceMonthly
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "gross" (getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePricesPriceMonthlyGross obj) : (Data.Aeson..=) "net" (getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePricesPriceMonthlyNet obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "gross" (getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePricesPriceMonthlyGross obj) GHC.Base.<> (Data.Aeson..=) "net" (getLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePricesPriceMonthlyNet obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePricesPriceMonthly
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePricesPriceMonthly" (\obj -> (GHC.Base.pure GetLoadBalancersResponseBody200LoadBalancersLoadBalancerTypePricesPriceMonthly GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "gross")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "net"))
-- | Defines the data type for the schema GetLoadBalancersResponseBody200Load_balancersLocation
-- 
-- 
data GetLoadBalancersResponseBody200LoadBalancersLocation = GetLoadBalancersResponseBody200LoadBalancersLocation {
  -- | city: City the Location is closest to
  getLoadBalancersResponseBody200LoadBalancersLocationCity :: Data.Text.Internal.Text
  -- | country: ISO 3166-1 alpha-2 code of the country the Location resides in
  , getLoadBalancersResponseBody200LoadBalancersLocationCountry :: Data.Text.Internal.Text
  -- | description: Description of the Location
  , getLoadBalancersResponseBody200LoadBalancersLocationDescription :: Data.Text.Internal.Text
  -- | id: ID of the Location
  , getLoadBalancersResponseBody200LoadBalancersLocationId :: GHC.Types.Double
  -- | latitude: Latitude of the city closest to the Location
  , getLoadBalancersResponseBody200LoadBalancersLocationLatitude :: GHC.Types.Double
  -- | longitude: Longitude of the city closest to the Location
  , getLoadBalancersResponseBody200LoadBalancersLocationLongitude :: GHC.Types.Double
  -- | name: Unique identifier of the Location
  , getLoadBalancersResponseBody200LoadBalancersLocationName :: Data.Text.Internal.Text
  -- | network_zone: Name of network zone this Location resides in
  , getLoadBalancersResponseBody200LoadBalancersLocationNetworkZone :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersResponseBody200LoadBalancersLocation
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (getLoadBalancersResponseBody200LoadBalancersLocationCity obj) : (Data.Aeson..=) "country" (getLoadBalancersResponseBody200LoadBalancersLocationCountry obj) : (Data.Aeson..=) "description" (getLoadBalancersResponseBody200LoadBalancersLocationDescription obj) : (Data.Aeson..=) "id" (getLoadBalancersResponseBody200LoadBalancersLocationId obj) : (Data.Aeson..=) "latitude" (getLoadBalancersResponseBody200LoadBalancersLocationLatitude obj) : (Data.Aeson..=) "longitude" (getLoadBalancersResponseBody200LoadBalancersLocationLongitude obj) : (Data.Aeson..=) "name" (getLoadBalancersResponseBody200LoadBalancersLocationName obj) : (Data.Aeson..=) "network_zone" (getLoadBalancersResponseBody200LoadBalancersLocationNetworkZone obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (getLoadBalancersResponseBody200LoadBalancersLocationCity obj) GHC.Base.<> ((Data.Aeson..=) "country" (getLoadBalancersResponseBody200LoadBalancersLocationCountry obj) GHC.Base.<> ((Data.Aeson..=) "description" (getLoadBalancersResponseBody200LoadBalancersLocationDescription obj) GHC.Base.<> ((Data.Aeson..=) "id" (getLoadBalancersResponseBody200LoadBalancersLocationId obj) GHC.Base.<> ((Data.Aeson..=) "latitude" (getLoadBalancersResponseBody200LoadBalancersLocationLatitude obj) GHC.Base.<> ((Data.Aeson..=) "longitude" (getLoadBalancersResponseBody200LoadBalancersLocationLongitude obj) GHC.Base.<> ((Data.Aeson..=) "name" (getLoadBalancersResponseBody200LoadBalancersLocationName obj) GHC.Base.<> (Data.Aeson..=) "network_zone" (getLoadBalancersResponseBody200LoadBalancersLocationNetworkZone obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersResponseBody200LoadBalancersLocation
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersResponseBody200LoadBalancersLocation" (\obj -> (((((((GHC.Base.pure GetLoadBalancersResponseBody200LoadBalancersLocation GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "latitude")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "longitude")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "network_zone"))
-- | Defines the data type for the schema GetLoadBalancersResponseBody200Load_balancersPrivate_net
-- 
-- 
data GetLoadBalancersResponseBody200LoadBalancersPrivateNet = GetLoadBalancersResponseBody200LoadBalancersPrivateNet {
  -- | ip
  getLoadBalancersResponseBody200LoadBalancersPrivateNetIp :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | network
  , getLoadBalancersResponseBody200LoadBalancersPrivateNetNetwork :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersResponseBody200LoadBalancersPrivateNet
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "ip" (getLoadBalancersResponseBody200LoadBalancersPrivateNetIp obj) : (Data.Aeson..=) "network" (getLoadBalancersResponseBody200LoadBalancersPrivateNetNetwork obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "ip" (getLoadBalancersResponseBody200LoadBalancersPrivateNetIp obj) GHC.Base.<> (Data.Aeson..=) "network" (getLoadBalancersResponseBody200LoadBalancersPrivateNetNetwork obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersResponseBody200LoadBalancersPrivateNet
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersResponseBody200LoadBalancersPrivateNet" (\obj -> (GHC.Base.pure GetLoadBalancersResponseBody200LoadBalancersPrivateNet GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "network"))
-- | Defines the data type for the schema GetLoadBalancersResponseBody200Load_balancersProtection
-- 
-- Protection configuration for the Resource
data GetLoadBalancersResponseBody200LoadBalancersProtection = GetLoadBalancersResponseBody200LoadBalancersProtection {
  -- | delete: If true, prevents the Resource from being deleted
  getLoadBalancersResponseBody200LoadBalancersProtectionDelete :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersResponseBody200LoadBalancersProtection
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "delete" (getLoadBalancersResponseBody200LoadBalancersProtectionDelete obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "delete" (getLoadBalancersResponseBody200LoadBalancersProtectionDelete obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersResponseBody200LoadBalancersProtection
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersResponseBody200LoadBalancersProtection" (\obj -> GHC.Base.pure GetLoadBalancersResponseBody200LoadBalancersProtection GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "delete"))
-- | Defines the data type for the schema GetLoadBalancersResponseBody200Load_balancersPublic_net
-- 
-- Public network information
data GetLoadBalancersResponseBody200LoadBalancersPublicNet = GetLoadBalancersResponseBody200LoadBalancersPublicNet {
  -- | enabled: Public Interface enabled or not
  getLoadBalancersResponseBody200LoadBalancersPublicNetEnabled :: GHC.Types.Bool
  -- | ipv4: IP address (v4)
  , getLoadBalancersResponseBody200LoadBalancersPublicNetIpv4 :: GetLoadBalancersResponseBody200LoadBalancersPublicNetIpv4
  -- | ipv6: IP address (v6)
  , getLoadBalancersResponseBody200LoadBalancersPublicNetIpv6 :: GetLoadBalancersResponseBody200LoadBalancersPublicNetIpv6
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersResponseBody200LoadBalancersPublicNet
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "enabled" (getLoadBalancersResponseBody200LoadBalancersPublicNetEnabled obj) : (Data.Aeson..=) "ipv4" (getLoadBalancersResponseBody200LoadBalancersPublicNetIpv4 obj) : (Data.Aeson..=) "ipv6" (getLoadBalancersResponseBody200LoadBalancersPublicNetIpv6 obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "enabled" (getLoadBalancersResponseBody200LoadBalancersPublicNetEnabled obj) GHC.Base.<> ((Data.Aeson..=) "ipv4" (getLoadBalancersResponseBody200LoadBalancersPublicNetIpv4 obj) GHC.Base.<> (Data.Aeson..=) "ipv6" (getLoadBalancersResponseBody200LoadBalancersPublicNetIpv6 obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersResponseBody200LoadBalancersPublicNet
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersResponseBody200LoadBalancersPublicNet" (\obj -> ((GHC.Base.pure GetLoadBalancersResponseBody200LoadBalancersPublicNet GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ipv4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ipv6"))
-- | Defines the data type for the schema GetLoadBalancersResponseBody200Load_balancersPublic_netIpv4
-- 
-- IP address (v4)
data GetLoadBalancersResponseBody200LoadBalancersPublicNetIpv4 = GetLoadBalancersResponseBody200LoadBalancersPublicNetIpv4 {
  -- | dns_ptr: Reverse DNS PTR entry for the IPv4 address of this Load Balancer
  getLoadBalancersResponseBody200LoadBalancersPublicNetIpv4DnsPtr :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | ip: IP address (v4) of this Load Balancer
  , getLoadBalancersResponseBody200LoadBalancersPublicNetIpv4Ip :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersResponseBody200LoadBalancersPublicNetIpv4
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "dns_ptr" (getLoadBalancersResponseBody200LoadBalancersPublicNetIpv4DnsPtr obj) : (Data.Aeson..=) "ip" (getLoadBalancersResponseBody200LoadBalancersPublicNetIpv4Ip obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "dns_ptr" (getLoadBalancersResponseBody200LoadBalancersPublicNetIpv4DnsPtr obj) GHC.Base.<> (Data.Aeson..=) "ip" (getLoadBalancersResponseBody200LoadBalancersPublicNetIpv4Ip obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersResponseBody200LoadBalancersPublicNetIpv4
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersResponseBody200LoadBalancersPublicNetIpv4" (\obj -> (GHC.Base.pure GetLoadBalancersResponseBody200LoadBalancersPublicNetIpv4 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dns_ptr")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip"))
-- | Defines the data type for the schema GetLoadBalancersResponseBody200Load_balancersPublic_netIpv6
-- 
-- IP address (v6)
data GetLoadBalancersResponseBody200LoadBalancersPublicNetIpv6 = GetLoadBalancersResponseBody200LoadBalancersPublicNetIpv6 {
  -- | dns_ptr: Reverse DNS PTR entry for the IPv6 address of this Load Balancer
  getLoadBalancersResponseBody200LoadBalancersPublicNetIpv6DnsPtr :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | ip: IP address (v6) of this Load Balancer
  , getLoadBalancersResponseBody200LoadBalancersPublicNetIpv6Ip :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersResponseBody200LoadBalancersPublicNetIpv6
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "dns_ptr" (getLoadBalancersResponseBody200LoadBalancersPublicNetIpv6DnsPtr obj) : (Data.Aeson..=) "ip" (getLoadBalancersResponseBody200LoadBalancersPublicNetIpv6Ip obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "dns_ptr" (getLoadBalancersResponseBody200LoadBalancersPublicNetIpv6DnsPtr obj) GHC.Base.<> (Data.Aeson..=) "ip" (getLoadBalancersResponseBody200LoadBalancersPublicNetIpv6Ip obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersResponseBody200LoadBalancersPublicNetIpv6
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersResponseBody200LoadBalancersPublicNetIpv6" (\obj -> (GHC.Base.pure GetLoadBalancersResponseBody200LoadBalancersPublicNetIpv6 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dns_ptr")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip"))
-- | Defines the data type for the schema GetLoadBalancersResponseBody200Load_balancersServices
-- 
-- 
data GetLoadBalancersResponseBody200LoadBalancersServices = GetLoadBalancersResponseBody200LoadBalancersServices {
  -- | destination_port: Port the Load Balancer will balance to
  getLoadBalancersResponseBody200LoadBalancersServicesDestinationPort :: GHC.Integer.Type.Integer
  -- | health_check: Service health check
  , getLoadBalancersResponseBody200LoadBalancersServicesHealthCheck :: GetLoadBalancersResponseBody200LoadBalancersServicesHealthCheck
  -- | http: Configuration option for protocols http and https
  , getLoadBalancersResponseBody200LoadBalancersServicesHttp :: (GHC.Maybe.Maybe GetLoadBalancersResponseBody200LoadBalancersServicesHttp)
  -- | listen_port: Port the Load Balancer listens on
  , getLoadBalancersResponseBody200LoadBalancersServicesListenPort :: GHC.Integer.Type.Integer
  -- | protocol: Protocol of the Load Balancer
  , getLoadBalancersResponseBody200LoadBalancersServicesProtocol :: GetLoadBalancersResponseBody200LoadBalancersServicesProtocol
  -- | proxyprotocol: Is Proxyprotocol enabled or not
  , getLoadBalancersResponseBody200LoadBalancersServicesProxyprotocol :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersResponseBody200LoadBalancersServices
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "destination_port" (getLoadBalancersResponseBody200LoadBalancersServicesDestinationPort obj) : (Data.Aeson..=) "health_check" (getLoadBalancersResponseBody200LoadBalancersServicesHealthCheck obj) : (Data.Aeson..=) "http" (getLoadBalancersResponseBody200LoadBalancersServicesHttp obj) : (Data.Aeson..=) "listen_port" (getLoadBalancersResponseBody200LoadBalancersServicesListenPort obj) : (Data.Aeson..=) "protocol" (getLoadBalancersResponseBody200LoadBalancersServicesProtocol obj) : (Data.Aeson..=) "proxyprotocol" (getLoadBalancersResponseBody200LoadBalancersServicesProxyprotocol obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "destination_port" (getLoadBalancersResponseBody200LoadBalancersServicesDestinationPort obj) GHC.Base.<> ((Data.Aeson..=) "health_check" (getLoadBalancersResponseBody200LoadBalancersServicesHealthCheck obj) GHC.Base.<> ((Data.Aeson..=) "http" (getLoadBalancersResponseBody200LoadBalancersServicesHttp obj) GHC.Base.<> ((Data.Aeson..=) "listen_port" (getLoadBalancersResponseBody200LoadBalancersServicesListenPort obj) GHC.Base.<> ((Data.Aeson..=) "protocol" (getLoadBalancersResponseBody200LoadBalancersServicesProtocol obj) GHC.Base.<> (Data.Aeson..=) "proxyprotocol" (getLoadBalancersResponseBody200LoadBalancersServicesProxyprotocol obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersResponseBody200LoadBalancersServices
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersResponseBody200LoadBalancersServices" (\obj -> (((((GHC.Base.pure GetLoadBalancersResponseBody200LoadBalancersServices GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "destination_port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "health_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "http")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "listen_port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "protocol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "proxyprotocol"))
-- | Defines the data type for the schema GetLoadBalancersResponseBody200Load_balancersServicesHealth_check
-- 
-- Service health check
data GetLoadBalancersResponseBody200LoadBalancersServicesHealthCheck = GetLoadBalancersResponseBody200LoadBalancersServicesHealthCheck {
  -- | http: Additional configuration for protocol http
  getLoadBalancersResponseBody200LoadBalancersServicesHealthCheckHttp :: (GHC.Maybe.Maybe GetLoadBalancersResponseBody200LoadBalancersServicesHealthCheckHttp)
  -- | interval: Time interval in seconds health checks are performed
  , getLoadBalancersResponseBody200LoadBalancersServicesHealthCheckInterval :: GHC.Integer.Type.Integer
  -- | port: Port the health check will be performed on
  , getLoadBalancersResponseBody200LoadBalancersServicesHealthCheckPort :: GHC.Integer.Type.Integer
  -- | protocol: Type of the health check
  , getLoadBalancersResponseBody200LoadBalancersServicesHealthCheckProtocol :: GetLoadBalancersResponseBody200LoadBalancersServicesHealthCheckProtocol
  -- | retries: Unsuccessful retries needed until a target is considered unhealthy; an unhealthy target needs the same number of successful retries to become healthy again
  , getLoadBalancersResponseBody200LoadBalancersServicesHealthCheckRetries :: GHC.Integer.Type.Integer
  -- | timeout: Time in seconds after an attempt is considered a timeout
  , getLoadBalancersResponseBody200LoadBalancersServicesHealthCheckTimeout :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersResponseBody200LoadBalancersServicesHealthCheck
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "http" (getLoadBalancersResponseBody200LoadBalancersServicesHealthCheckHttp obj) : (Data.Aeson..=) "interval" (getLoadBalancersResponseBody200LoadBalancersServicesHealthCheckInterval obj) : (Data.Aeson..=) "port" (getLoadBalancersResponseBody200LoadBalancersServicesHealthCheckPort obj) : (Data.Aeson..=) "protocol" (getLoadBalancersResponseBody200LoadBalancersServicesHealthCheckProtocol obj) : (Data.Aeson..=) "retries" (getLoadBalancersResponseBody200LoadBalancersServicesHealthCheckRetries obj) : (Data.Aeson..=) "timeout" (getLoadBalancersResponseBody200LoadBalancersServicesHealthCheckTimeout obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "http" (getLoadBalancersResponseBody200LoadBalancersServicesHealthCheckHttp obj) GHC.Base.<> ((Data.Aeson..=) "interval" (getLoadBalancersResponseBody200LoadBalancersServicesHealthCheckInterval obj) GHC.Base.<> ((Data.Aeson..=) "port" (getLoadBalancersResponseBody200LoadBalancersServicesHealthCheckPort obj) GHC.Base.<> ((Data.Aeson..=) "protocol" (getLoadBalancersResponseBody200LoadBalancersServicesHealthCheckProtocol obj) GHC.Base.<> ((Data.Aeson..=) "retries" (getLoadBalancersResponseBody200LoadBalancersServicesHealthCheckRetries obj) GHC.Base.<> (Data.Aeson..=) "timeout" (getLoadBalancersResponseBody200LoadBalancersServicesHealthCheckTimeout obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersResponseBody200LoadBalancersServicesHealthCheck
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersResponseBody200LoadBalancersServicesHealthCheck" (\obj -> (((((GHC.Base.pure GetLoadBalancersResponseBody200LoadBalancersServicesHealthCheck GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "http")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "protocol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "retries")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "timeout"))
-- | Defines the data type for the schema GetLoadBalancersResponseBody200Load_balancersServicesHealth_checkHttp
-- 
-- Additional configuration for protocol http
data GetLoadBalancersResponseBody200LoadBalancersServicesHealthCheckHttp = GetLoadBalancersResponseBody200LoadBalancersServicesHealthCheckHttp {
  -- | domain: Host header to send in the HTTP request. May not contain spaces, percent or backslash symbols. Can be null, in that case no host header is sent.
  getLoadBalancersResponseBody200LoadBalancersServicesHealthCheckHttpDomain :: Data.Text.Internal.Text
  -- | path: HTTP path to use for health checks
  , getLoadBalancersResponseBody200LoadBalancersServicesHealthCheckHttpPath :: Data.Text.Internal.Text
  -- | response: String that must be contained in HTTP response in order to pass the health check
  , getLoadBalancersResponseBody200LoadBalancersServicesHealthCheckHttpResponse :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | status_codes: List of returned HTTP status codes in order to pass the health check. Supports the wildcards \`?\` for exactly one character and \`*\` for multiple ones. The default is to pass the health check for any status code between 2?? and 3??.
  , getLoadBalancersResponseBody200LoadBalancersServicesHealthCheckHttpStatusCodes :: (GHC.Maybe.Maybe ([] Data.Text.Internal.Text))
  -- | tls: Use HTTPS for health check
  , getLoadBalancersResponseBody200LoadBalancersServicesHealthCheckHttpTls :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersResponseBody200LoadBalancersServicesHealthCheckHttp
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "domain" (getLoadBalancersResponseBody200LoadBalancersServicesHealthCheckHttpDomain obj) : (Data.Aeson..=) "path" (getLoadBalancersResponseBody200LoadBalancersServicesHealthCheckHttpPath obj) : (Data.Aeson..=) "response" (getLoadBalancersResponseBody200LoadBalancersServicesHealthCheckHttpResponse obj) : (Data.Aeson..=) "status_codes" (getLoadBalancersResponseBody200LoadBalancersServicesHealthCheckHttpStatusCodes obj) : (Data.Aeson..=) "tls" (getLoadBalancersResponseBody200LoadBalancersServicesHealthCheckHttpTls obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "domain" (getLoadBalancersResponseBody200LoadBalancersServicesHealthCheckHttpDomain obj) GHC.Base.<> ((Data.Aeson..=) "path" (getLoadBalancersResponseBody200LoadBalancersServicesHealthCheckHttpPath obj) GHC.Base.<> ((Data.Aeson..=) "response" (getLoadBalancersResponseBody200LoadBalancersServicesHealthCheckHttpResponse obj) GHC.Base.<> ((Data.Aeson..=) "status_codes" (getLoadBalancersResponseBody200LoadBalancersServicesHealthCheckHttpStatusCodes obj) GHC.Base.<> (Data.Aeson..=) "tls" (getLoadBalancersResponseBody200LoadBalancersServicesHealthCheckHttpTls obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersResponseBody200LoadBalancersServicesHealthCheckHttp
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersResponseBody200LoadBalancersServicesHealthCheckHttp" (\obj -> ((((GHC.Base.pure GetLoadBalancersResponseBody200LoadBalancersServicesHealthCheckHttp GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "domain")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "path")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "response")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status_codes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tls"))
-- | Defines the enum schema GetLoadBalancersResponseBody200Load_balancersServicesHealth_checkProtocol
-- 
-- Type of the health check
data GetLoadBalancersResponseBody200LoadBalancersServicesHealthCheckProtocol
    = GetLoadBalancersResponseBody200LoadBalancersServicesHealthCheckProtocolEnumOther Data.Aeson.Types.Internal.Value
    | GetLoadBalancersResponseBody200LoadBalancersServicesHealthCheckProtocolEnumTyped Data.Text.Internal.Text
    | GetLoadBalancersResponseBody200LoadBalancersServicesHealthCheckProtocolEnumStringHttp
    | GetLoadBalancersResponseBody200LoadBalancersServicesHealthCheckProtocolEnumStringTcp
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersResponseBody200LoadBalancersServicesHealthCheckProtocol
    where toJSON (GetLoadBalancersResponseBody200LoadBalancersServicesHealthCheckProtocolEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetLoadBalancersResponseBody200LoadBalancersServicesHealthCheckProtocolEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetLoadBalancersResponseBody200LoadBalancersServicesHealthCheckProtocolEnumStringHttp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http"
          toJSON (GetLoadBalancersResponseBody200LoadBalancersServicesHealthCheckProtocolEnumStringTcp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tcp"
instance Data.Aeson.FromJSON GetLoadBalancersResponseBody200LoadBalancersServicesHealthCheckProtocol
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http")
                                          then GetLoadBalancersResponseBody200LoadBalancersServicesHealthCheckProtocolEnumStringHttp
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tcp")
                                                then GetLoadBalancersResponseBody200LoadBalancersServicesHealthCheckProtocolEnumStringTcp
                                                else GetLoadBalancersResponseBody200LoadBalancersServicesHealthCheckProtocolEnumOther val)
-- | Defines the data type for the schema GetLoadBalancersResponseBody200Load_balancersServicesHttp
-- 
-- Configuration option for protocols http and https
data GetLoadBalancersResponseBody200LoadBalancersServicesHttp = GetLoadBalancersResponseBody200LoadBalancersServicesHttp {
  -- | certificates: IDs of the Certificates to use for TLS\/SSL termination by the Load Balancer; empty for TLS\/SSL passthrough or if \`protocol\` is \"http\"
  getLoadBalancersResponseBody200LoadBalancersServicesHttpCertificates :: (GHC.Maybe.Maybe ([] GHC.Integer.Type.Integer))
  -- | cookie_lifetime: Lifetime of the cookie used for sticky sessions
  , getLoadBalancersResponseBody200LoadBalancersServicesHttpCookieLifetime :: GHC.Integer.Type.Integer
  -- | cookie_name: Name of the cookie used for sticky sessions
  , getLoadBalancersResponseBody200LoadBalancersServicesHttpCookieName :: Data.Text.Internal.Text
  -- | redirect_http: Redirect HTTP requests to HTTPS. Only available if protocol is \"https\". Default \`false\`
  , getLoadBalancersResponseBody200LoadBalancersServicesHttpRedirectHttp :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | sticky_sessions: Use sticky sessions. Only available if protocol is \"http\" or \"https\". Default \`false\`
  , getLoadBalancersResponseBody200LoadBalancersServicesHttpStickySessions :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersResponseBody200LoadBalancersServicesHttp
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "certificates" (getLoadBalancersResponseBody200LoadBalancersServicesHttpCertificates obj) : (Data.Aeson..=) "cookie_lifetime" (getLoadBalancersResponseBody200LoadBalancersServicesHttpCookieLifetime obj) : (Data.Aeson..=) "cookie_name" (getLoadBalancersResponseBody200LoadBalancersServicesHttpCookieName obj) : (Data.Aeson..=) "redirect_http" (getLoadBalancersResponseBody200LoadBalancersServicesHttpRedirectHttp obj) : (Data.Aeson..=) "sticky_sessions" (getLoadBalancersResponseBody200LoadBalancersServicesHttpStickySessions obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "certificates" (getLoadBalancersResponseBody200LoadBalancersServicesHttpCertificates obj) GHC.Base.<> ((Data.Aeson..=) "cookie_lifetime" (getLoadBalancersResponseBody200LoadBalancersServicesHttpCookieLifetime obj) GHC.Base.<> ((Data.Aeson..=) "cookie_name" (getLoadBalancersResponseBody200LoadBalancersServicesHttpCookieName obj) GHC.Base.<> ((Data.Aeson..=) "redirect_http" (getLoadBalancersResponseBody200LoadBalancersServicesHttpRedirectHttp obj) GHC.Base.<> (Data.Aeson..=) "sticky_sessions" (getLoadBalancersResponseBody200LoadBalancersServicesHttpStickySessions obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersResponseBody200LoadBalancersServicesHttp
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersResponseBody200LoadBalancersServicesHttp" (\obj -> ((((GHC.Base.pure GetLoadBalancersResponseBody200LoadBalancersServicesHttp GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "certificates")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cookie_lifetime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cookie_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "redirect_http")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sticky_sessions"))
-- | Defines the enum schema GetLoadBalancersResponseBody200Load_balancersServicesProtocol
-- 
-- Protocol of the Load Balancer
data GetLoadBalancersResponseBody200LoadBalancersServicesProtocol
    = GetLoadBalancersResponseBody200LoadBalancersServicesProtocolEnumOther Data.Aeson.Types.Internal.Value
    | GetLoadBalancersResponseBody200LoadBalancersServicesProtocolEnumTyped Data.Text.Internal.Text
    | GetLoadBalancersResponseBody200LoadBalancersServicesProtocolEnumStringHttp
    | GetLoadBalancersResponseBody200LoadBalancersServicesProtocolEnumStringHttps
    | GetLoadBalancersResponseBody200LoadBalancersServicesProtocolEnumStringTcp
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersResponseBody200LoadBalancersServicesProtocol
    where toJSON (GetLoadBalancersResponseBody200LoadBalancersServicesProtocolEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetLoadBalancersResponseBody200LoadBalancersServicesProtocolEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetLoadBalancersResponseBody200LoadBalancersServicesProtocolEnumStringHttp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http"
          toJSON (GetLoadBalancersResponseBody200LoadBalancersServicesProtocolEnumStringHttps) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "https"
          toJSON (GetLoadBalancersResponseBody200LoadBalancersServicesProtocolEnumStringTcp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tcp"
instance Data.Aeson.FromJSON GetLoadBalancersResponseBody200LoadBalancersServicesProtocol
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http")
                                          then GetLoadBalancersResponseBody200LoadBalancersServicesProtocolEnumStringHttp
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "https")
                                                then GetLoadBalancersResponseBody200LoadBalancersServicesProtocolEnumStringHttps
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tcp")
                                                      then GetLoadBalancersResponseBody200LoadBalancersServicesProtocolEnumStringTcp
                                                      else GetLoadBalancersResponseBody200LoadBalancersServicesProtocolEnumOther val)
-- | Defines the data type for the schema GetLoadBalancersResponseBody200Load_balancersTargets
-- 
-- 
data GetLoadBalancersResponseBody200LoadBalancersTargets = GetLoadBalancersResponseBody200LoadBalancersTargets {
  -- | health_status: List of health statuses of the services on this target
  getLoadBalancersResponseBody200LoadBalancersTargetsHealthStatus :: (GHC.Maybe.Maybe ([] GetLoadBalancersResponseBody200LoadBalancersTargetsHealthStatus))
  -- | ip: IP targets where the traffic should be routed through. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well.
  , getLoadBalancersResponseBody200LoadBalancersTargetsIp :: (GHC.Maybe.Maybe GetLoadBalancersResponseBody200LoadBalancersTargetsIp)
  -- | label_selector: Label selector and a list of selected targets
  , getLoadBalancersResponseBody200LoadBalancersTargetsLabelSelector :: (GHC.Maybe.Maybe GetLoadBalancersResponseBody200LoadBalancersTargetsLabelSelector)
  -- | server: Server where the traffic should be routed through
  , getLoadBalancersResponseBody200LoadBalancersTargetsServer :: (GHC.Maybe.Maybe GetLoadBalancersResponseBody200LoadBalancersTargetsServer)
  -- | targets: List of selected targets
  , getLoadBalancersResponseBody200LoadBalancersTargetsTargets :: (GHC.Maybe.Maybe ([] GetLoadBalancersResponseBody200LoadBalancersTargetsTargets))
  -- | type: Type of the resource
  , getLoadBalancersResponseBody200LoadBalancersTargetsType :: GetLoadBalancersResponseBody200LoadBalancersTargetsType
  -- | use_private_ip: Use the private network IP instead of the public IP. Default value is false.
  , getLoadBalancersResponseBody200LoadBalancersTargetsUsePrivateIp :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersResponseBody200LoadBalancersTargets
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "health_status" (getLoadBalancersResponseBody200LoadBalancersTargetsHealthStatus obj) : (Data.Aeson..=) "ip" (getLoadBalancersResponseBody200LoadBalancersTargetsIp obj) : (Data.Aeson..=) "label_selector" (getLoadBalancersResponseBody200LoadBalancersTargetsLabelSelector obj) : (Data.Aeson..=) "server" (getLoadBalancersResponseBody200LoadBalancersTargetsServer obj) : (Data.Aeson..=) "targets" (getLoadBalancersResponseBody200LoadBalancersTargetsTargets obj) : (Data.Aeson..=) "type" (getLoadBalancersResponseBody200LoadBalancersTargetsType obj) : (Data.Aeson..=) "use_private_ip" (getLoadBalancersResponseBody200LoadBalancersTargetsUsePrivateIp obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "health_status" (getLoadBalancersResponseBody200LoadBalancersTargetsHealthStatus obj) GHC.Base.<> ((Data.Aeson..=) "ip" (getLoadBalancersResponseBody200LoadBalancersTargetsIp obj) GHC.Base.<> ((Data.Aeson..=) "label_selector" (getLoadBalancersResponseBody200LoadBalancersTargetsLabelSelector obj) GHC.Base.<> ((Data.Aeson..=) "server" (getLoadBalancersResponseBody200LoadBalancersTargetsServer obj) GHC.Base.<> ((Data.Aeson..=) "targets" (getLoadBalancersResponseBody200LoadBalancersTargetsTargets obj) GHC.Base.<> ((Data.Aeson..=) "type" (getLoadBalancersResponseBody200LoadBalancersTargetsType obj) GHC.Base.<> (Data.Aeson..=) "use_private_ip" (getLoadBalancersResponseBody200LoadBalancersTargetsUsePrivateIp obj)))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersResponseBody200LoadBalancersTargets
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersResponseBody200LoadBalancersTargets" (\obj -> ((((((GHC.Base.pure GetLoadBalancersResponseBody200LoadBalancersTargets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "health_status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label_selector")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "server")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "targets")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "use_private_ip"))
-- | Defines the data type for the schema GetLoadBalancersResponseBody200Load_balancersTargetsHealth_status
-- 
-- 
data GetLoadBalancersResponseBody200LoadBalancersTargetsHealthStatus = GetLoadBalancersResponseBody200LoadBalancersTargetsHealthStatus {
  -- | listen_port
  getLoadBalancersResponseBody200LoadBalancersTargetsHealthStatusListenPort :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | status
  , getLoadBalancersResponseBody200LoadBalancersTargetsHealthStatusStatus :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersResponseBody200LoadBalancersTargetsHealthStatus
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "listen_port" (getLoadBalancersResponseBody200LoadBalancersTargetsHealthStatusListenPort obj) : (Data.Aeson..=) "status" (getLoadBalancersResponseBody200LoadBalancersTargetsHealthStatusStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "listen_port" (getLoadBalancersResponseBody200LoadBalancersTargetsHealthStatusListenPort obj) GHC.Base.<> (Data.Aeson..=) "status" (getLoadBalancersResponseBody200LoadBalancersTargetsHealthStatusStatus obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersResponseBody200LoadBalancersTargetsHealthStatus
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersResponseBody200LoadBalancersTargetsHealthStatus" (\obj -> (GHC.Base.pure GetLoadBalancersResponseBody200LoadBalancersTargetsHealthStatus GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "listen_port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status"))
-- | Defines the data type for the schema GetLoadBalancersResponseBody200Load_balancersTargetsIp
-- 
-- IP targets where the traffic should be routed through. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well.
data GetLoadBalancersResponseBody200LoadBalancersTargetsIp = GetLoadBalancersResponseBody200LoadBalancersTargetsIp {
  -- | ip: IP of a server that belongs to the same customer (public IPv4\/IPv6) or private IP in a Subnetwork type vswitch.
  getLoadBalancersResponseBody200LoadBalancersTargetsIpIp :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersResponseBody200LoadBalancersTargetsIp
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "ip" (getLoadBalancersResponseBody200LoadBalancersTargetsIpIp obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "ip" (getLoadBalancersResponseBody200LoadBalancersTargetsIpIp obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersResponseBody200LoadBalancersTargetsIp
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersResponseBody200LoadBalancersTargetsIp" (\obj -> GHC.Base.pure GetLoadBalancersResponseBody200LoadBalancersTargetsIp GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ip"))
-- | Defines the data type for the schema GetLoadBalancersResponseBody200Load_balancersTargetsLabel_selector
-- 
-- Label selector and a list of selected targets
data GetLoadBalancersResponseBody200LoadBalancersTargetsLabelSelector = GetLoadBalancersResponseBody200LoadBalancersTargetsLabelSelector {
  -- | selector: Label selector
  getLoadBalancersResponseBody200LoadBalancersTargetsLabelSelectorSelector :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersResponseBody200LoadBalancersTargetsLabelSelector
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "selector" (getLoadBalancersResponseBody200LoadBalancersTargetsLabelSelectorSelector obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "selector" (getLoadBalancersResponseBody200LoadBalancersTargetsLabelSelectorSelector obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersResponseBody200LoadBalancersTargetsLabelSelector
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersResponseBody200LoadBalancersTargetsLabelSelector" (\obj -> GHC.Base.pure GetLoadBalancersResponseBody200LoadBalancersTargetsLabelSelector GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "selector"))
-- | Defines the data type for the schema GetLoadBalancersResponseBody200Load_balancersTargetsServer
-- 
-- Server where the traffic should be routed through
data GetLoadBalancersResponseBody200LoadBalancersTargetsServer = GetLoadBalancersResponseBody200LoadBalancersTargetsServer {
  -- | id: ID of the Server
  getLoadBalancersResponseBody200LoadBalancersTargetsServerId :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersResponseBody200LoadBalancersTargetsServer
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (getLoadBalancersResponseBody200LoadBalancersTargetsServerId obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (getLoadBalancersResponseBody200LoadBalancersTargetsServerId obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersResponseBody200LoadBalancersTargetsServer
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersResponseBody200LoadBalancersTargetsServer" (\obj -> GHC.Base.pure GetLoadBalancersResponseBody200LoadBalancersTargetsServer GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id"))
-- | Defines the data type for the schema GetLoadBalancersResponseBody200Load_balancersTargetsTargets
-- 
-- 
data GetLoadBalancersResponseBody200LoadBalancersTargetsTargets = GetLoadBalancersResponseBody200LoadBalancersTargetsTargets {
  -- | health_status
  getLoadBalancersResponseBody200LoadBalancersTargetsTargetsHealthStatus :: (GHC.Maybe.Maybe ([] GetLoadBalancersResponseBody200LoadBalancersTargetsTargetsHealthStatus))
  -- | server
  , getLoadBalancersResponseBody200LoadBalancersTargetsTargetsServer :: (GHC.Maybe.Maybe GetLoadBalancersResponseBody200LoadBalancersTargetsTargetsServer)
  -- | type
  , getLoadBalancersResponseBody200LoadBalancersTargetsTargetsType :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | use_private_ip
  , getLoadBalancersResponseBody200LoadBalancersTargetsTargetsUsePrivateIp :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersResponseBody200LoadBalancersTargetsTargets
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "health_status" (getLoadBalancersResponseBody200LoadBalancersTargetsTargetsHealthStatus obj) : (Data.Aeson..=) "server" (getLoadBalancersResponseBody200LoadBalancersTargetsTargetsServer obj) : (Data.Aeson..=) "type" (getLoadBalancersResponseBody200LoadBalancersTargetsTargetsType obj) : (Data.Aeson..=) "use_private_ip" (getLoadBalancersResponseBody200LoadBalancersTargetsTargetsUsePrivateIp obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "health_status" (getLoadBalancersResponseBody200LoadBalancersTargetsTargetsHealthStatus obj) GHC.Base.<> ((Data.Aeson..=) "server" (getLoadBalancersResponseBody200LoadBalancersTargetsTargetsServer obj) GHC.Base.<> ((Data.Aeson..=) "type" (getLoadBalancersResponseBody200LoadBalancersTargetsTargetsType obj) GHC.Base.<> (Data.Aeson..=) "use_private_ip" (getLoadBalancersResponseBody200LoadBalancersTargetsTargetsUsePrivateIp obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersResponseBody200LoadBalancersTargetsTargets
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersResponseBody200LoadBalancersTargetsTargets" (\obj -> (((GHC.Base.pure GetLoadBalancersResponseBody200LoadBalancersTargetsTargets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "health_status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "server")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "use_private_ip"))
-- | Defines the data type for the schema GetLoadBalancersResponseBody200Load_balancersTargetsTargetsHealth_status
-- 
-- 
data GetLoadBalancersResponseBody200LoadBalancersTargetsTargetsHealthStatus = GetLoadBalancersResponseBody200LoadBalancersTargetsTargetsHealthStatus {
  -- | listen_port
  getLoadBalancersResponseBody200LoadBalancersTargetsTargetsHealthStatusListenPort :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | status
  , getLoadBalancersResponseBody200LoadBalancersTargetsTargetsHealthStatusStatus :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersResponseBody200LoadBalancersTargetsTargetsHealthStatus
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "listen_port" (getLoadBalancersResponseBody200LoadBalancersTargetsTargetsHealthStatusListenPort obj) : (Data.Aeson..=) "status" (getLoadBalancersResponseBody200LoadBalancersTargetsTargetsHealthStatusStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "listen_port" (getLoadBalancersResponseBody200LoadBalancersTargetsTargetsHealthStatusListenPort obj) GHC.Base.<> (Data.Aeson..=) "status" (getLoadBalancersResponseBody200LoadBalancersTargetsTargetsHealthStatusStatus obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersResponseBody200LoadBalancersTargetsTargetsHealthStatus
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersResponseBody200LoadBalancersTargetsTargetsHealthStatus" (\obj -> (GHC.Base.pure GetLoadBalancersResponseBody200LoadBalancersTargetsTargetsHealthStatus GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "listen_port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status"))
-- | Defines the data type for the schema GetLoadBalancersResponseBody200Load_balancersTargetsTargetsServer
-- 
-- 
data GetLoadBalancersResponseBody200LoadBalancersTargetsTargetsServer = GetLoadBalancersResponseBody200LoadBalancersTargetsTargetsServer {
  -- | id: ID of the Server
  getLoadBalancersResponseBody200LoadBalancersTargetsTargetsServerId :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersResponseBody200LoadBalancersTargetsTargetsServer
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (getLoadBalancersResponseBody200LoadBalancersTargetsTargetsServerId obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (getLoadBalancersResponseBody200LoadBalancersTargetsTargetsServerId obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersResponseBody200LoadBalancersTargetsTargetsServer
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersResponseBody200LoadBalancersTargetsTargetsServer" (\obj -> GHC.Base.pure GetLoadBalancersResponseBody200LoadBalancersTargetsTargetsServer GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id"))
-- | Defines the enum schema GetLoadBalancersResponseBody200Load_balancersTargetsType
-- 
-- Type of the resource
data GetLoadBalancersResponseBody200LoadBalancersTargetsType
    = GetLoadBalancersResponseBody200LoadBalancersTargetsTypeEnumOther Data.Aeson.Types.Internal.Value
    | GetLoadBalancersResponseBody200LoadBalancersTargetsTypeEnumTyped Data.Text.Internal.Text
    | GetLoadBalancersResponseBody200LoadBalancersTargetsTypeEnumStringIp
    | GetLoadBalancersResponseBody200LoadBalancersTargetsTypeEnumStringLabelSelector
    | GetLoadBalancersResponseBody200LoadBalancersTargetsTypeEnumStringServer
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersResponseBody200LoadBalancersTargetsType
    where toJSON (GetLoadBalancersResponseBody200LoadBalancersTargetsTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetLoadBalancersResponseBody200LoadBalancersTargetsTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetLoadBalancersResponseBody200LoadBalancersTargetsTypeEnumStringIp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ip"
          toJSON (GetLoadBalancersResponseBody200LoadBalancersTargetsTypeEnumStringLabelSelector) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "label_selector"
          toJSON (GetLoadBalancersResponseBody200LoadBalancersTargetsTypeEnumStringServer) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "server"
instance Data.Aeson.FromJSON GetLoadBalancersResponseBody200LoadBalancersTargetsType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ip")
                                          then GetLoadBalancersResponseBody200LoadBalancersTargetsTypeEnumStringIp
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "label_selector")
                                                then GetLoadBalancersResponseBody200LoadBalancersTargetsTypeEnumStringLabelSelector
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "server")
                                                      then GetLoadBalancersResponseBody200LoadBalancersTargetsTypeEnumStringServer
                                                      else GetLoadBalancersResponseBody200LoadBalancersTargetsTypeEnumOther val)
-- | Defines the data type for the schema GetLoadBalancersResponseBody200Meta
-- 
-- 
data GetLoadBalancersResponseBody200Meta = GetLoadBalancersResponseBody200Meta {
  -- | pagination
  getLoadBalancersResponseBody200MetaPagination :: GetLoadBalancersResponseBody200MetaPagination
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersResponseBody200Meta
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "pagination" (getLoadBalancersResponseBody200MetaPagination obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "pagination" (getLoadBalancersResponseBody200MetaPagination obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersResponseBody200Meta
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersResponseBody200Meta" (\obj -> GHC.Base.pure GetLoadBalancersResponseBody200Meta GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pagination"))
-- | Defines the data type for the schema GetLoadBalancersResponseBody200MetaPagination
-- 
-- 
data GetLoadBalancersResponseBody200MetaPagination = GetLoadBalancersResponseBody200MetaPagination {
  -- | last_page: ID of the last page available. Can be null if the current page is the last one.
  getLoadBalancersResponseBody200MetaPaginationLastPage :: GHC.Types.Double
  -- | next_page: ID of the next page. Can be null if the current page is the last one.
  , getLoadBalancersResponseBody200MetaPaginationNextPage :: GHC.Types.Double
  -- | page: Current page number
  , getLoadBalancersResponseBody200MetaPaginationPage :: GHC.Types.Double
  -- | per_page: Maximum number of items shown per page in the response
  , getLoadBalancersResponseBody200MetaPaginationPerPage :: GHC.Types.Double
  -- | previous_page: ID of the previous page. Can be null if the current page is the first one.
  , getLoadBalancersResponseBody200MetaPaginationPreviousPage :: GHC.Types.Double
  -- | total_entries: The total number of entries that exist in the database for this query. Nullable if unknown.
  , getLoadBalancersResponseBody200MetaPaginationTotalEntries :: GHC.Types.Double
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersResponseBody200MetaPagination
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "last_page" (getLoadBalancersResponseBody200MetaPaginationLastPage obj) : (Data.Aeson..=) "next_page" (getLoadBalancersResponseBody200MetaPaginationNextPage obj) : (Data.Aeson..=) "page" (getLoadBalancersResponseBody200MetaPaginationPage obj) : (Data.Aeson..=) "per_page" (getLoadBalancersResponseBody200MetaPaginationPerPage obj) : (Data.Aeson..=) "previous_page" (getLoadBalancersResponseBody200MetaPaginationPreviousPage obj) : (Data.Aeson..=) "total_entries" (getLoadBalancersResponseBody200MetaPaginationTotalEntries obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "last_page" (getLoadBalancersResponseBody200MetaPaginationLastPage obj) GHC.Base.<> ((Data.Aeson..=) "next_page" (getLoadBalancersResponseBody200MetaPaginationNextPage obj) GHC.Base.<> ((Data.Aeson..=) "page" (getLoadBalancersResponseBody200MetaPaginationPage obj) GHC.Base.<> ((Data.Aeson..=) "per_page" (getLoadBalancersResponseBody200MetaPaginationPerPage obj) GHC.Base.<> ((Data.Aeson..=) "previous_page" (getLoadBalancersResponseBody200MetaPaginationPreviousPage obj) GHC.Base.<> (Data.Aeson..=) "total_entries" (getLoadBalancersResponseBody200MetaPaginationTotalEntries obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersResponseBody200MetaPagination
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersResponseBody200MetaPagination" (\obj -> (((((GHC.Base.pure GetLoadBalancersResponseBody200MetaPagination GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "last_page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "next_page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "per_page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "previous_page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "total_entries"))
