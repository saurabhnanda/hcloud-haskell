-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation postServers_Id_ActionsChangeAliasIps
module HCloud.Operations.PostServersIdActionsChangeAliasIps where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > POST /servers/{id}/actions/change_alias_ips
-- 
-- Changes the alias IPs of an already attached Network. Note that the existing aliases for the specified Network will be replaced with these provided in the request body. So if you want to add an alias IP, you have to provide the existing ones from the Network plus the new alias IP in the request body.
postServers_Id_ActionsChangeAliasIps :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer                                                                                                                         -- ^ id: ID of the Server
  -> GHC.Maybe.Maybe PostServersIdActionsChangeAliasIpsRequestBody                                                                                    -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response PostServersIdActionsChangeAliasIpsResponse))   -- ^ Monad containing the result of the operation
postServers_Id_ActionsChangeAliasIps config
                                     id
                                     body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostServersIdActionsChangeAliasIpsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostServersIdActionsChangeAliasIpsResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          PostServersIdActionsChangeAliasIpsResponseBody201)
                                                                                                                                                                                                                        | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/servers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/change_alias_ips"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /servers/{id}/actions/change_alias_ips
-- 
-- The same as 'postServers_Id_ActionsChangeAliasIps' but returns the raw 'Data.ByteString.Char8.ByteString'
postServers_Id_ActionsChangeAliasIpsRaw :: forall m s . (HCloud.Common.MonadHTTP m,
                                                         HCloud.Common.SecurityScheme s) =>
                                           HCloud.Common.Configuration s ->
                                           GHC.Integer.Type.Integer ->
                                           GHC.Maybe.Maybe PostServersIdActionsChangeAliasIpsRequestBody ->
                                           m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                 (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postServers_Id_ActionsChangeAliasIpsRaw config
                                        id
                                        body = GHC.Base.id (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/servers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/change_alias_ips"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /servers/{id}/actions/change_alias_ips
-- 
-- Monadic version of 'postServers_Id_ActionsChangeAliasIps' (use with 'HCloud.Common.runWithConfiguration')
postServers_Id_ActionsChangeAliasIpsM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                       HCloud.Common.SecurityScheme s) =>
                                         GHC.Integer.Type.Integer ->
                                         GHC.Maybe.Maybe PostServersIdActionsChangeAliasIpsRequestBody ->
                                         Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                            m
                                                                            (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                                (Network.HTTP.Client.Types.Response PostServersIdActionsChangeAliasIpsResponse))
postServers_Id_ActionsChangeAliasIpsM id
                                      body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostServersIdActionsChangeAliasIpsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostServersIdActionsChangeAliasIpsResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           PostServersIdActionsChangeAliasIpsResponseBody201)
                                                                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/servers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/change_alias_ips"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /servers/{id}/actions/change_alias_ips
-- 
-- Monadic version of 'postServers_Id_ActionsChangeAliasIpsRaw' (use with 'HCloud.Common.runWithConfiguration')
postServers_Id_ActionsChangeAliasIpsRawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                          HCloud.Common.SecurityScheme s) =>
                                            GHC.Integer.Type.Integer ->
                                            GHC.Maybe.Maybe PostServersIdActionsChangeAliasIpsRequestBody ->
                                            Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                               m
                                                                               (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                                   (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postServers_Id_ActionsChangeAliasIpsRawM id
                                         body = GHC.Base.id (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/servers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/change_alias_ips"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema postServers_Id_ActionsChangeAliasIpsRequestBody
-- 
-- 
data PostServersIdActionsChangeAliasIpsRequestBody = PostServersIdActionsChangeAliasIpsRequestBody {
  -- | alias_ips: New alias IPs to set for this Server
  postServersIdActionsChangeAliasIpsRequestBodyAliasIps :: ([] Data.Text.Internal.Text)
  -- | network: ID of an existing Network already attached to the Server
  , postServersIdActionsChangeAliasIpsRequestBodyNetwork :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsChangeAliasIpsRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "alias_ips" (postServersIdActionsChangeAliasIpsRequestBodyAliasIps obj) : (Data.Aeson..=) "network" (postServersIdActionsChangeAliasIpsRequestBodyNetwork obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "alias_ips" (postServersIdActionsChangeAliasIpsRequestBodyAliasIps obj) GHC.Base.<> (Data.Aeson..=) "network" (postServersIdActionsChangeAliasIpsRequestBodyNetwork obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersIdActionsChangeAliasIpsRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersIdActionsChangeAliasIpsRequestBody" (\obj -> (GHC.Base.pure PostServersIdActionsChangeAliasIpsRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "alias_ips")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "network"))
-- | Represents a response of the operation 'postServers_Id_ActionsChangeAliasIps'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostServersIdActionsChangeAliasIpsResponseError' is used.
data PostServersIdActionsChangeAliasIpsResponse =                                                    
   PostServersIdActionsChangeAliasIpsResponseError GHC.Base.String                                   -- ^ Means either no matching case available or a parse error
  | PostServersIdActionsChangeAliasIpsResponse201 PostServersIdActionsChangeAliasIpsResponseBody201  -- ^ The \`action\` key in the reply contains an Action object with this structure
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema PostServersIdActionsChangeAliasIpsResponseBody201
-- 
-- 
data PostServersIdActionsChangeAliasIpsResponseBody201 = PostServersIdActionsChangeAliasIpsResponseBody201 {
  -- | action
  postServersIdActionsChangeAliasIpsResponseBody201Action :: PostServersIdActionsChangeAliasIpsResponseBody201Action
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsChangeAliasIpsResponseBody201
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "action" (postServersIdActionsChangeAliasIpsResponseBody201Action obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "action" (postServersIdActionsChangeAliasIpsResponseBody201Action obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersIdActionsChangeAliasIpsResponseBody201
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersIdActionsChangeAliasIpsResponseBody201" (\obj -> GHC.Base.pure PostServersIdActionsChangeAliasIpsResponseBody201 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "action"))
-- | Defines the data type for the schema PostServersIdActionsChangeAliasIpsResponseBody201Action
-- 
-- 
data PostServersIdActionsChangeAliasIpsResponseBody201Action = PostServersIdActionsChangeAliasIpsResponseBody201Action {
  -- | command: Command executed in the Action
  postServersIdActionsChangeAliasIpsResponseBody201ActionCommand :: Data.Text.Internal.Text
  -- | error: Error message for the Action if error occurred, otherwise null
  , postServersIdActionsChangeAliasIpsResponseBody201ActionError :: PostServersIdActionsChangeAliasIpsResponseBody201ActionError
  -- | finished: Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
  , postServersIdActionsChangeAliasIpsResponseBody201ActionFinished :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , postServersIdActionsChangeAliasIpsResponseBody201ActionId :: GHC.Integer.Type.Integer
  -- | progress: Progress of Action in percent
  , postServersIdActionsChangeAliasIpsResponseBody201ActionProgress :: GHC.Types.Double
  -- | resources: Resources the Action relates to
  , postServersIdActionsChangeAliasIpsResponseBody201ActionResources :: ([] PostServersIdActionsChangeAliasIpsResponseBody201ActionResources)
  -- | started: Point in time when the Action was started (in ISO-8601 format)
  , postServersIdActionsChangeAliasIpsResponseBody201ActionStarted :: Data.Text.Internal.Text
  -- | status: Status of the Action
  , postServersIdActionsChangeAliasIpsResponseBody201ActionStatus :: PostServersIdActionsChangeAliasIpsResponseBody201ActionStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsChangeAliasIpsResponseBody201Action
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "command" (postServersIdActionsChangeAliasIpsResponseBody201ActionCommand obj) : (Data.Aeson..=) "error" (postServersIdActionsChangeAliasIpsResponseBody201ActionError obj) : (Data.Aeson..=) "finished" (postServersIdActionsChangeAliasIpsResponseBody201ActionFinished obj) : (Data.Aeson..=) "id" (postServersIdActionsChangeAliasIpsResponseBody201ActionId obj) : (Data.Aeson..=) "progress" (postServersIdActionsChangeAliasIpsResponseBody201ActionProgress obj) : (Data.Aeson..=) "resources" (postServersIdActionsChangeAliasIpsResponseBody201ActionResources obj) : (Data.Aeson..=) "started" (postServersIdActionsChangeAliasIpsResponseBody201ActionStarted obj) : (Data.Aeson..=) "status" (postServersIdActionsChangeAliasIpsResponseBody201ActionStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "command" (postServersIdActionsChangeAliasIpsResponseBody201ActionCommand obj) GHC.Base.<> ((Data.Aeson..=) "error" (postServersIdActionsChangeAliasIpsResponseBody201ActionError obj) GHC.Base.<> ((Data.Aeson..=) "finished" (postServersIdActionsChangeAliasIpsResponseBody201ActionFinished obj) GHC.Base.<> ((Data.Aeson..=) "id" (postServersIdActionsChangeAliasIpsResponseBody201ActionId obj) GHC.Base.<> ((Data.Aeson..=) "progress" (postServersIdActionsChangeAliasIpsResponseBody201ActionProgress obj) GHC.Base.<> ((Data.Aeson..=) "resources" (postServersIdActionsChangeAliasIpsResponseBody201ActionResources obj) GHC.Base.<> ((Data.Aeson..=) "started" (postServersIdActionsChangeAliasIpsResponseBody201ActionStarted obj) GHC.Base.<> (Data.Aeson..=) "status" (postServersIdActionsChangeAliasIpsResponseBody201ActionStatus obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersIdActionsChangeAliasIpsResponseBody201Action
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersIdActionsChangeAliasIpsResponseBody201Action" (\obj -> (((((((GHC.Base.pure PostServersIdActionsChangeAliasIpsResponseBody201Action GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "command")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "finished")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "started")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Defines the data type for the schema PostServersIdActionsChangeAliasIpsResponseBody201ActionError
-- 
-- Error message for the Action if error occurred, otherwise null
data PostServersIdActionsChangeAliasIpsResponseBody201ActionError = PostServersIdActionsChangeAliasIpsResponseBody201ActionError {
  -- | code: Fixed machine readable code
  postServersIdActionsChangeAliasIpsResponseBody201ActionErrorCode :: Data.Text.Internal.Text
  -- | message: Humanized error message
  , postServersIdActionsChangeAliasIpsResponseBody201ActionErrorMessage :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsChangeAliasIpsResponseBody201ActionError
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "code" (postServersIdActionsChangeAliasIpsResponseBody201ActionErrorCode obj) : (Data.Aeson..=) "message" (postServersIdActionsChangeAliasIpsResponseBody201ActionErrorMessage obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "code" (postServersIdActionsChangeAliasIpsResponseBody201ActionErrorCode obj) GHC.Base.<> (Data.Aeson..=) "message" (postServersIdActionsChangeAliasIpsResponseBody201ActionErrorMessage obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersIdActionsChangeAliasIpsResponseBody201ActionError
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersIdActionsChangeAliasIpsResponseBody201ActionError" (\obj -> (GHC.Base.pure PostServersIdActionsChangeAliasIpsResponseBody201ActionError GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Defines the data type for the schema PostServersIdActionsChangeAliasIpsResponseBody201ActionResources
-- 
-- 
data PostServersIdActionsChangeAliasIpsResponseBody201ActionResources = PostServersIdActionsChangeAliasIpsResponseBody201ActionResources {
  -- | id: ID of the Resource
  postServersIdActionsChangeAliasIpsResponseBody201ActionResourcesId :: GHC.Integer.Type.Integer
  -- | type: Type of resource referenced
  , postServersIdActionsChangeAliasIpsResponseBody201ActionResourcesType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsChangeAliasIpsResponseBody201ActionResources
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (postServersIdActionsChangeAliasIpsResponseBody201ActionResourcesId obj) : (Data.Aeson..=) "type" (postServersIdActionsChangeAliasIpsResponseBody201ActionResourcesType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (postServersIdActionsChangeAliasIpsResponseBody201ActionResourcesId obj) GHC.Base.<> (Data.Aeson..=) "type" (postServersIdActionsChangeAliasIpsResponseBody201ActionResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersIdActionsChangeAliasIpsResponseBody201ActionResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersIdActionsChangeAliasIpsResponseBody201ActionResources" (\obj -> (GHC.Base.pure PostServersIdActionsChangeAliasIpsResponseBody201ActionResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema PostServersIdActionsChangeAliasIpsResponseBody201ActionStatus
-- 
-- Status of the Action
data PostServersIdActionsChangeAliasIpsResponseBody201ActionStatus
    = PostServersIdActionsChangeAliasIpsResponseBody201ActionStatusEnumOther Data.Aeson.Types.Internal.Value
    | PostServersIdActionsChangeAliasIpsResponseBody201ActionStatusEnumTyped Data.Text.Internal.Text
    | PostServersIdActionsChangeAliasIpsResponseBody201ActionStatusEnumStringError
    | PostServersIdActionsChangeAliasIpsResponseBody201ActionStatusEnumStringRunning
    | PostServersIdActionsChangeAliasIpsResponseBody201ActionStatusEnumStringSuccess
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsChangeAliasIpsResponseBody201ActionStatus
    where toJSON (PostServersIdActionsChangeAliasIpsResponseBody201ActionStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostServersIdActionsChangeAliasIpsResponseBody201ActionStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostServersIdActionsChangeAliasIpsResponseBody201ActionStatusEnumStringError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error"
          toJSON (PostServersIdActionsChangeAliasIpsResponseBody201ActionStatusEnumStringRunning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running"
          toJSON (PostServersIdActionsChangeAliasIpsResponseBody201ActionStatusEnumStringSuccess) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success"
instance Data.Aeson.FromJSON PostServersIdActionsChangeAliasIpsResponseBody201ActionStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error")
                                          then PostServersIdActionsChangeAliasIpsResponseBody201ActionStatusEnumStringError
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running")
                                                then PostServersIdActionsChangeAliasIpsResponseBody201ActionStatusEnumStringRunning
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success")
                                                      then PostServersIdActionsChangeAliasIpsResponseBody201ActionStatusEnumStringSuccess
                                                      else PostServersIdActionsChangeAliasIpsResponseBody201ActionStatusEnumOther val)
