-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation postNetworks_Id_ActionsAddSubnet
module HCloud.Operations.PostNetworksIdActionsAddSubnet where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > POST /networks/{id}/actions/add_subnet
-- 
-- Adds a new subnet object to the Network. If you do not specify an \`ip_range\` for the subnet we will automatically pick the first available \/24 range for you if possible.
-- 
-- Note: if the parent Network object changes during the request, the response will be a “conflict” error.
postNetworks_Id_ActionsAddSubnet :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer                                                                                                                     -- ^ id: ID of the Network
  -> GHC.Maybe.Maybe PostNetworksIdActionsAddSubnetRequestBody                                                                                    -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response PostNetworksIdActionsAddSubnetResponse))   -- ^ Monad containing the result of the operation
postNetworks_Id_ActionsAddSubnet config
                                 id
                                 body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostNetworksIdActionsAddSubnetResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostNetworksIdActionsAddSubnetResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              PostNetworksIdActionsAddSubnetResponseBody201)
                                                                                                                                                                                                                | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/networks/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/add_subnet"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /networks/{id}/actions/add_subnet
-- 
-- The same as 'postNetworks_Id_ActionsAddSubnet' but returns the raw 'Data.ByteString.Char8.ByteString'
postNetworks_Id_ActionsAddSubnetRaw :: forall m s . (HCloud.Common.MonadHTTP m,
                                                     HCloud.Common.SecurityScheme s) =>
                                       HCloud.Common.Configuration s ->
                                       GHC.Integer.Type.Integer ->
                                       GHC.Maybe.Maybe PostNetworksIdActionsAddSubnetRequestBody ->
                                       m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                             (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postNetworks_Id_ActionsAddSubnetRaw config
                                    id
                                    body = GHC.Base.id (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/networks/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/add_subnet"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /networks/{id}/actions/add_subnet
-- 
-- Monadic version of 'postNetworks_Id_ActionsAddSubnet' (use with 'HCloud.Common.runWithConfiguration')
postNetworks_Id_ActionsAddSubnetM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                   HCloud.Common.SecurityScheme s) =>
                                     GHC.Integer.Type.Integer ->
                                     GHC.Maybe.Maybe PostNetworksIdActionsAddSubnetRequestBody ->
                                     Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                        m
                                                                        (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                            (Network.HTTP.Client.Types.Response PostNetworksIdActionsAddSubnetResponse))
postNetworks_Id_ActionsAddSubnetM id
                                  body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostNetworksIdActionsAddSubnetResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostNetworksIdActionsAddSubnetResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               PostNetworksIdActionsAddSubnetResponseBody201)
                                                                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/networks/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/add_subnet"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /networks/{id}/actions/add_subnet
-- 
-- Monadic version of 'postNetworks_Id_ActionsAddSubnetRaw' (use with 'HCloud.Common.runWithConfiguration')
postNetworks_Id_ActionsAddSubnetRawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                      HCloud.Common.SecurityScheme s) =>
                                        GHC.Integer.Type.Integer ->
                                        GHC.Maybe.Maybe PostNetworksIdActionsAddSubnetRequestBody ->
                                        Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                           m
                                                                           (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                               (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postNetworks_Id_ActionsAddSubnetRawM id
                                     body = GHC.Base.id (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/networks/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/add_subnet"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema postNetworks_Id_ActionsAddSubnetRequestBody
-- 
-- 
data PostNetworksIdActionsAddSubnetRequestBody = PostNetworksIdActionsAddSubnetRequestBody {
  -- | ip_range: Range to allocate IPs from. Must be a Subnet of the ip_range of the parent network object and must not overlap with any other subnets or with any destinations in routes. If the Subnet is of type vSwitch, it also can not overlap with any gateway in routes. Minimum Network size is \/30. We suggest that you pick a bigger Network with a \/24 netmask.
  postNetworksIdActionsAddSubnetRequestBodyIpRange :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | network_zone: Name of Network zone. Currently eu-central is the only available zone.
  , postNetworksIdActionsAddSubnetRequestBodyNetworkZone :: Data.Text.Internal.Text
  -- | type: Type of Subnetwork
  , postNetworksIdActionsAddSubnetRequestBodyType :: PostNetworksIdActionsAddSubnetRequestBodyType
  -- | vswitch_id: ID of the robot vSwitch. Must be supplied if the subnet is of type vswitch.
  , postNetworksIdActionsAddSubnetRequestBodyVswitchId :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostNetworksIdActionsAddSubnetRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "ip_range" (postNetworksIdActionsAddSubnetRequestBodyIpRange obj) : (Data.Aeson..=) "network_zone" (postNetworksIdActionsAddSubnetRequestBodyNetworkZone obj) : (Data.Aeson..=) "type" (postNetworksIdActionsAddSubnetRequestBodyType obj) : (Data.Aeson..=) "vswitch_id" (postNetworksIdActionsAddSubnetRequestBodyVswitchId obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "ip_range" (postNetworksIdActionsAddSubnetRequestBodyIpRange obj) GHC.Base.<> ((Data.Aeson..=) "network_zone" (postNetworksIdActionsAddSubnetRequestBodyNetworkZone obj) GHC.Base.<> ((Data.Aeson..=) "type" (postNetworksIdActionsAddSubnetRequestBodyType obj) GHC.Base.<> (Data.Aeson..=) "vswitch_id" (postNetworksIdActionsAddSubnetRequestBodyVswitchId obj))))
instance Data.Aeson.Types.FromJSON.FromJSON PostNetworksIdActionsAddSubnetRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostNetworksIdActionsAddSubnetRequestBody" (\obj -> (((GHC.Base.pure PostNetworksIdActionsAddSubnetRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip_range")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "network_zone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "vswitch_id"))
-- | Defines the enum schema postNetworks_Id_ActionsAddSubnetRequestBodyType
-- 
-- Type of Subnetwork
data PostNetworksIdActionsAddSubnetRequestBodyType
    = PostNetworksIdActionsAddSubnetRequestBodyTypeEnumOther Data.Aeson.Types.Internal.Value
    | PostNetworksIdActionsAddSubnetRequestBodyTypeEnumTyped Data.Text.Internal.Text
    | PostNetworksIdActionsAddSubnetRequestBodyTypeEnumStringCloud
    | PostNetworksIdActionsAddSubnetRequestBodyTypeEnumStringServer
    | PostNetworksIdActionsAddSubnetRequestBodyTypeEnumStringVswitch
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostNetworksIdActionsAddSubnetRequestBodyType
    where toJSON (PostNetworksIdActionsAddSubnetRequestBodyTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostNetworksIdActionsAddSubnetRequestBodyTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostNetworksIdActionsAddSubnetRequestBodyTypeEnumStringCloud) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cloud"
          toJSON (PostNetworksIdActionsAddSubnetRequestBodyTypeEnumStringServer) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "server"
          toJSON (PostNetworksIdActionsAddSubnetRequestBodyTypeEnumStringVswitch) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "vswitch"
instance Data.Aeson.FromJSON PostNetworksIdActionsAddSubnetRequestBodyType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cloud")
                                          then PostNetworksIdActionsAddSubnetRequestBodyTypeEnumStringCloud
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "server")
                                                then PostNetworksIdActionsAddSubnetRequestBodyTypeEnumStringServer
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "vswitch")
                                                      then PostNetworksIdActionsAddSubnetRequestBodyTypeEnumStringVswitch
                                                      else PostNetworksIdActionsAddSubnetRequestBodyTypeEnumOther val)
-- | Represents a response of the operation 'postNetworks_Id_ActionsAddSubnet'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostNetworksIdActionsAddSubnetResponseError' is used.
data PostNetworksIdActionsAddSubnetResponse =                                                
   PostNetworksIdActionsAddSubnetResponseError GHC.Base.String                               -- ^ Means either no matching case available or a parse error
  | PostNetworksIdActionsAddSubnetResponse201 PostNetworksIdActionsAddSubnetResponseBody201  -- ^ The \`action\` key contains the \`add_subnet\` Action
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema PostNetworksIdActionsAddSubnetResponseBody201
-- 
-- 
data PostNetworksIdActionsAddSubnetResponseBody201 = PostNetworksIdActionsAddSubnetResponseBody201 {
  -- | action
  postNetworksIdActionsAddSubnetResponseBody201Action :: PostNetworksIdActionsAddSubnetResponseBody201Action
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostNetworksIdActionsAddSubnetResponseBody201
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "action" (postNetworksIdActionsAddSubnetResponseBody201Action obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "action" (postNetworksIdActionsAddSubnetResponseBody201Action obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostNetworksIdActionsAddSubnetResponseBody201
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostNetworksIdActionsAddSubnetResponseBody201" (\obj -> GHC.Base.pure PostNetworksIdActionsAddSubnetResponseBody201 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "action"))
-- | Defines the data type for the schema PostNetworksIdActionsAddSubnetResponseBody201Action
-- 
-- 
data PostNetworksIdActionsAddSubnetResponseBody201Action = PostNetworksIdActionsAddSubnetResponseBody201Action {
  -- | command: Command executed in the Action
  postNetworksIdActionsAddSubnetResponseBody201ActionCommand :: Data.Text.Internal.Text
  -- | error: Error message for the Action if error occurred, otherwise null
  , postNetworksIdActionsAddSubnetResponseBody201ActionError :: PostNetworksIdActionsAddSubnetResponseBody201ActionError
  -- | finished: Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
  , postNetworksIdActionsAddSubnetResponseBody201ActionFinished :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , postNetworksIdActionsAddSubnetResponseBody201ActionId :: GHC.Integer.Type.Integer
  -- | progress: Progress of Action in percent
  , postNetworksIdActionsAddSubnetResponseBody201ActionProgress :: GHC.Types.Double
  -- | resources: Resources the Action relates to
  , postNetworksIdActionsAddSubnetResponseBody201ActionResources :: ([] PostNetworksIdActionsAddSubnetResponseBody201ActionResources)
  -- | started: Point in time when the Action was started (in ISO-8601 format)
  , postNetworksIdActionsAddSubnetResponseBody201ActionStarted :: Data.Text.Internal.Text
  -- | status: Status of the Action
  , postNetworksIdActionsAddSubnetResponseBody201ActionStatus :: PostNetworksIdActionsAddSubnetResponseBody201ActionStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostNetworksIdActionsAddSubnetResponseBody201Action
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "command" (postNetworksIdActionsAddSubnetResponseBody201ActionCommand obj) : (Data.Aeson..=) "error" (postNetworksIdActionsAddSubnetResponseBody201ActionError obj) : (Data.Aeson..=) "finished" (postNetworksIdActionsAddSubnetResponseBody201ActionFinished obj) : (Data.Aeson..=) "id" (postNetworksIdActionsAddSubnetResponseBody201ActionId obj) : (Data.Aeson..=) "progress" (postNetworksIdActionsAddSubnetResponseBody201ActionProgress obj) : (Data.Aeson..=) "resources" (postNetworksIdActionsAddSubnetResponseBody201ActionResources obj) : (Data.Aeson..=) "started" (postNetworksIdActionsAddSubnetResponseBody201ActionStarted obj) : (Data.Aeson..=) "status" (postNetworksIdActionsAddSubnetResponseBody201ActionStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "command" (postNetworksIdActionsAddSubnetResponseBody201ActionCommand obj) GHC.Base.<> ((Data.Aeson..=) "error" (postNetworksIdActionsAddSubnetResponseBody201ActionError obj) GHC.Base.<> ((Data.Aeson..=) "finished" (postNetworksIdActionsAddSubnetResponseBody201ActionFinished obj) GHC.Base.<> ((Data.Aeson..=) "id" (postNetworksIdActionsAddSubnetResponseBody201ActionId obj) GHC.Base.<> ((Data.Aeson..=) "progress" (postNetworksIdActionsAddSubnetResponseBody201ActionProgress obj) GHC.Base.<> ((Data.Aeson..=) "resources" (postNetworksIdActionsAddSubnetResponseBody201ActionResources obj) GHC.Base.<> ((Data.Aeson..=) "started" (postNetworksIdActionsAddSubnetResponseBody201ActionStarted obj) GHC.Base.<> (Data.Aeson..=) "status" (postNetworksIdActionsAddSubnetResponseBody201ActionStatus obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostNetworksIdActionsAddSubnetResponseBody201Action
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostNetworksIdActionsAddSubnetResponseBody201Action" (\obj -> (((((((GHC.Base.pure PostNetworksIdActionsAddSubnetResponseBody201Action GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "command")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "finished")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "started")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Defines the data type for the schema PostNetworksIdActionsAddSubnetResponseBody201ActionError
-- 
-- Error message for the Action if error occurred, otherwise null
data PostNetworksIdActionsAddSubnetResponseBody201ActionError = PostNetworksIdActionsAddSubnetResponseBody201ActionError {
  -- | code: Fixed machine readable code
  postNetworksIdActionsAddSubnetResponseBody201ActionErrorCode :: Data.Text.Internal.Text
  -- | message: Humanized error message
  , postNetworksIdActionsAddSubnetResponseBody201ActionErrorMessage :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostNetworksIdActionsAddSubnetResponseBody201ActionError
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "code" (postNetworksIdActionsAddSubnetResponseBody201ActionErrorCode obj) : (Data.Aeson..=) "message" (postNetworksIdActionsAddSubnetResponseBody201ActionErrorMessage obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "code" (postNetworksIdActionsAddSubnetResponseBody201ActionErrorCode obj) GHC.Base.<> (Data.Aeson..=) "message" (postNetworksIdActionsAddSubnetResponseBody201ActionErrorMessage obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostNetworksIdActionsAddSubnetResponseBody201ActionError
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostNetworksIdActionsAddSubnetResponseBody201ActionError" (\obj -> (GHC.Base.pure PostNetworksIdActionsAddSubnetResponseBody201ActionError GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Defines the data type for the schema PostNetworksIdActionsAddSubnetResponseBody201ActionResources
-- 
-- 
data PostNetworksIdActionsAddSubnetResponseBody201ActionResources = PostNetworksIdActionsAddSubnetResponseBody201ActionResources {
  -- | id: ID of the Resource
  postNetworksIdActionsAddSubnetResponseBody201ActionResourcesId :: GHC.Integer.Type.Integer
  -- | type: Type of resource referenced
  , postNetworksIdActionsAddSubnetResponseBody201ActionResourcesType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostNetworksIdActionsAddSubnetResponseBody201ActionResources
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (postNetworksIdActionsAddSubnetResponseBody201ActionResourcesId obj) : (Data.Aeson..=) "type" (postNetworksIdActionsAddSubnetResponseBody201ActionResourcesType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (postNetworksIdActionsAddSubnetResponseBody201ActionResourcesId obj) GHC.Base.<> (Data.Aeson..=) "type" (postNetworksIdActionsAddSubnetResponseBody201ActionResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostNetworksIdActionsAddSubnetResponseBody201ActionResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostNetworksIdActionsAddSubnetResponseBody201ActionResources" (\obj -> (GHC.Base.pure PostNetworksIdActionsAddSubnetResponseBody201ActionResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema PostNetworksIdActionsAddSubnetResponseBody201ActionStatus
-- 
-- Status of the Action
data PostNetworksIdActionsAddSubnetResponseBody201ActionStatus
    = PostNetworksIdActionsAddSubnetResponseBody201ActionStatusEnumOther Data.Aeson.Types.Internal.Value
    | PostNetworksIdActionsAddSubnetResponseBody201ActionStatusEnumTyped Data.Text.Internal.Text
    | PostNetworksIdActionsAddSubnetResponseBody201ActionStatusEnumStringError
    | PostNetworksIdActionsAddSubnetResponseBody201ActionStatusEnumStringRunning
    | PostNetworksIdActionsAddSubnetResponseBody201ActionStatusEnumStringSuccess
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostNetworksIdActionsAddSubnetResponseBody201ActionStatus
    where toJSON (PostNetworksIdActionsAddSubnetResponseBody201ActionStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostNetworksIdActionsAddSubnetResponseBody201ActionStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostNetworksIdActionsAddSubnetResponseBody201ActionStatusEnumStringError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error"
          toJSON (PostNetworksIdActionsAddSubnetResponseBody201ActionStatusEnumStringRunning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running"
          toJSON (PostNetworksIdActionsAddSubnetResponseBody201ActionStatusEnumStringSuccess) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success"
instance Data.Aeson.FromJSON PostNetworksIdActionsAddSubnetResponseBody201ActionStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error")
                                          then PostNetworksIdActionsAddSubnetResponseBody201ActionStatusEnumStringError
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running")
                                                then PostNetworksIdActionsAddSubnetResponseBody201ActionStatusEnumStringRunning
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success")
                                                      then PostNetworksIdActionsAddSubnetResponseBody201ActionStatusEnumStringSuccess
                                                      else PostNetworksIdActionsAddSubnetResponseBody201ActionStatusEnumOther val)
