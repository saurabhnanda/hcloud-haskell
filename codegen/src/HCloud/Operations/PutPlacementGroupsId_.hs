-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation putPlacementGroups_Id_
module HCloud.Operations.PutPlacementGroupsId_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > PUT /placement_groups/{id}
-- 
-- Updates the PlacementGroup properties.
-- 
-- Note that when updating labels, the PlacementGroup’s current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.
-- 
-- Note: if the PlacementGroup object changes during the request, the response will be a “conflict” error.
putPlacementGroups_Id_ :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer                                                                                                           -- ^ id: ID of the resource
  -> GHC.Maybe.Maybe PutPlacementGroupsIdRequestBody                                                                                    -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response PutPlacementGroupsIdResponse))   -- ^ Monad containing the result of the operation
putPlacementGroups_Id_ config
                       id
                       body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PutPlacementGroupsIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PutPlacementGroupsIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                PutPlacementGroupsIdResponseBody200)
                                                                                                                                                                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack ("/placement_groups/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > PUT /placement_groups/{id}
-- 
-- The same as 'putPlacementGroups_Id_' but returns the raw 'Data.ByteString.Char8.ByteString'
putPlacementGroups_Id_Raw :: forall m s . (HCloud.Common.MonadHTTP m,
                                           HCloud.Common.SecurityScheme s) =>
                             HCloud.Common.Configuration s ->
                             GHC.Integer.Type.Integer ->
                             GHC.Maybe.Maybe PutPlacementGroupsIdRequestBody ->
                             m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                   (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
putPlacementGroups_Id_Raw config
                          id
                          body = GHC.Base.id (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack ("/placement_groups/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > PUT /placement_groups/{id}
-- 
-- Monadic version of 'putPlacementGroups_Id_' (use with 'HCloud.Common.runWithConfiguration')
putPlacementGroups_Id_M :: forall m s . (HCloud.Common.MonadHTTP m,
                                         HCloud.Common.SecurityScheme s) =>
                           GHC.Integer.Type.Integer ->
                           GHC.Maybe.Maybe PutPlacementGroupsIdRequestBody ->
                           Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                              m
                                                              (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                  (Network.HTTP.Client.Types.Response PutPlacementGroupsIdResponse))
putPlacementGroups_Id_M id
                        body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PutPlacementGroupsIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PutPlacementGroupsIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                 PutPlacementGroupsIdResponseBody200)
                                                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack ("/placement_groups/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > PUT /placement_groups/{id}
-- 
-- Monadic version of 'putPlacementGroups_Id_Raw' (use with 'HCloud.Common.runWithConfiguration')
putPlacementGroups_Id_RawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                            HCloud.Common.SecurityScheme s) =>
                              GHC.Integer.Type.Integer ->
                              GHC.Maybe.Maybe PutPlacementGroupsIdRequestBody ->
                              Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                 m
                                                                 (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                     (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
putPlacementGroups_Id_RawM id
                           body = GHC.Base.id (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack ("/placement_groups/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema putPlacementGroups_Id_RequestBody
-- 
-- 
data PutPlacementGroupsIdRequestBody = PutPlacementGroupsIdRequestBody {
  -- | labels: User-defined labels (key-value pairs)
  putPlacementGroupsIdRequestBodyLabels :: (GHC.Maybe.Maybe PutPlacementGroupsIdRequestBodyLabels)
  -- | name: New PlacementGroup name
  , putPlacementGroupsIdRequestBodyName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutPlacementGroupsIdRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "labels" (putPlacementGroupsIdRequestBodyLabels obj) : (Data.Aeson..=) "name" (putPlacementGroupsIdRequestBodyName obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "labels" (putPlacementGroupsIdRequestBodyLabels obj) GHC.Base.<> (Data.Aeson..=) "name" (putPlacementGroupsIdRequestBodyName obj))
instance Data.Aeson.Types.FromJSON.FromJSON PutPlacementGroupsIdRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutPlacementGroupsIdRequestBody" (\obj -> (GHC.Base.pure PutPlacementGroupsIdRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "labels")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name"))
-- | Defines the data type for the schema putPlacementGroups_Id_RequestBodyLabels
-- 
-- User-defined labels (key-value pairs)
data PutPlacementGroupsIdRequestBodyLabels = PutPlacementGroupsIdRequestBodyLabels {
  
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutPlacementGroupsIdRequestBodyLabels
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON PutPlacementGroupsIdRequestBodyLabels
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutPlacementGroupsIdRequestBodyLabels" (\obj -> GHC.Base.pure PutPlacementGroupsIdRequestBodyLabels)
-- | Represents a response of the operation 'putPlacementGroups_Id_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PutPlacementGroupsIdResponseError' is used.
data PutPlacementGroupsIdResponse =                                      
   PutPlacementGroupsIdResponseError GHC.Base.String                     -- ^ Means either no matching case available or a parse error
  | PutPlacementGroupsIdResponse200 PutPlacementGroupsIdResponseBody200  -- ^ The \`certificate\` key contains the PlacementGroup that was just updated
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema PutPlacementGroupsIdResponseBody200
-- 
-- 
data PutPlacementGroupsIdResponseBody200 = PutPlacementGroupsIdResponseBody200 {
  -- | placement_group
  putPlacementGroupsIdResponseBody200PlacementGroup :: PutPlacementGroupsIdResponseBody200PlacementGroup
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutPlacementGroupsIdResponseBody200
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "placement_group" (putPlacementGroupsIdResponseBody200PlacementGroup obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "placement_group" (putPlacementGroupsIdResponseBody200PlacementGroup obj))
instance Data.Aeson.Types.FromJSON.FromJSON PutPlacementGroupsIdResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutPlacementGroupsIdResponseBody200" (\obj -> GHC.Base.pure PutPlacementGroupsIdResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "placement_group"))
-- | Defines the data type for the schema PutPlacementGroupsIdResponseBody200Placement_group
-- 
-- 
data PutPlacementGroupsIdResponseBody200PlacementGroup = PutPlacementGroupsIdResponseBody200PlacementGroup {
  -- | created: Point in time when the Resource was created (in ISO-8601 format)
  putPlacementGroupsIdResponseBody200PlacementGroupCreated :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , putPlacementGroupsIdResponseBody200PlacementGroupId :: GHC.Integer.Type.Integer
  -- | labels: User-defined labels (key-value pairs)
  , putPlacementGroupsIdResponseBody200PlacementGroupLabels :: PutPlacementGroupsIdResponseBody200PlacementGroupLabels
  -- | name: Name of the Resource. Must be unique per Project.
  , putPlacementGroupsIdResponseBody200PlacementGroupName :: Data.Text.Internal.Text
  -- | servers: Array of IDs of Servers that are part of this Placement Group
  , putPlacementGroupsIdResponseBody200PlacementGroupServers :: ([] GHC.Integer.Type.Integer)
  -- | type: Type of the Placement Group
  , putPlacementGroupsIdResponseBody200PlacementGroupType :: PutPlacementGroupsIdResponseBody200PlacementGroupType
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutPlacementGroupsIdResponseBody200PlacementGroup
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "created" (putPlacementGroupsIdResponseBody200PlacementGroupCreated obj) : (Data.Aeson..=) "id" (putPlacementGroupsIdResponseBody200PlacementGroupId obj) : (Data.Aeson..=) "labels" (putPlacementGroupsIdResponseBody200PlacementGroupLabels obj) : (Data.Aeson..=) "name" (putPlacementGroupsIdResponseBody200PlacementGroupName obj) : (Data.Aeson..=) "servers" (putPlacementGroupsIdResponseBody200PlacementGroupServers obj) : (Data.Aeson..=) "type" (putPlacementGroupsIdResponseBody200PlacementGroupType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "created" (putPlacementGroupsIdResponseBody200PlacementGroupCreated obj) GHC.Base.<> ((Data.Aeson..=) "id" (putPlacementGroupsIdResponseBody200PlacementGroupId obj) GHC.Base.<> ((Data.Aeson..=) "labels" (putPlacementGroupsIdResponseBody200PlacementGroupLabels obj) GHC.Base.<> ((Data.Aeson..=) "name" (putPlacementGroupsIdResponseBody200PlacementGroupName obj) GHC.Base.<> ((Data.Aeson..=) "servers" (putPlacementGroupsIdResponseBody200PlacementGroupServers obj) GHC.Base.<> (Data.Aeson..=) "type" (putPlacementGroupsIdResponseBody200PlacementGroupType obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON PutPlacementGroupsIdResponseBody200PlacementGroup
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutPlacementGroupsIdResponseBody200PlacementGroup" (\obj -> (((((GHC.Base.pure PutPlacementGroupsIdResponseBody200PlacementGroup GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "labels")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "servers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the data type for the schema PutPlacementGroupsIdResponseBody200Placement_groupLabels
-- 
-- User-defined labels (key-value pairs)
data PutPlacementGroupsIdResponseBody200PlacementGroupLabels = PutPlacementGroupsIdResponseBody200PlacementGroupLabels {
  
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutPlacementGroupsIdResponseBody200PlacementGroupLabels
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON PutPlacementGroupsIdResponseBody200PlacementGroupLabels
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutPlacementGroupsIdResponseBody200PlacementGroupLabels" (\obj -> GHC.Base.pure PutPlacementGroupsIdResponseBody200PlacementGroupLabels)
-- | Defines the enum schema PutPlacementGroupsIdResponseBody200Placement_groupType
-- 
-- Type of the Placement Group
data PutPlacementGroupsIdResponseBody200PlacementGroupType
    = PutPlacementGroupsIdResponseBody200PlacementGroupTypeEnumOther Data.Aeson.Types.Internal.Value
    | PutPlacementGroupsIdResponseBody200PlacementGroupTypeEnumTyped Data.Text.Internal.Text
    | PutPlacementGroupsIdResponseBody200PlacementGroupTypeEnumStringSpread
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutPlacementGroupsIdResponseBody200PlacementGroupType
    where toJSON (PutPlacementGroupsIdResponseBody200PlacementGroupTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PutPlacementGroupsIdResponseBody200PlacementGroupTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PutPlacementGroupsIdResponseBody200PlacementGroupTypeEnumStringSpread) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "spread"
instance Data.Aeson.FromJSON PutPlacementGroupsIdResponseBody200PlacementGroupType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "spread")
                                          then PutPlacementGroupsIdResponseBody200PlacementGroupTypeEnumStringSpread
                                          else PutPlacementGroupsIdResponseBody200PlacementGroupTypeEnumOther val)
