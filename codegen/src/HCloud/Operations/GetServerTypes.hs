-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation getServerTypes
module HCloud.Operations.GetServerTypes where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > GET /server_types
-- 
-- Gets all Server type objects.
getServerTypes :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Maybe.Maybe Data.Text.Internal.Text                                                                                    -- ^ name: Can be used to filter Server types by their name. The response will only contain the Server type matching the specified name.
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response GetServerTypesResponse)) -- ^ Monad containing the result of the operation
getServerTypes config
               name = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetServerTypesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetServerTypesResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                            GetServerTypesResponseBody200)
                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/server_types") ((Data.Text.pack "name",
                                                                                                                                                                                                                                                                                                                                                                                                                       HCloud.Common.stringifyModel Data.Functor.<$> name) : []))
-- | > GET /server_types
-- 
-- The same as 'getServerTypes' but returns the raw 'Data.ByteString.Char8.ByteString'
getServerTypesRaw :: forall m s . (HCloud.Common.MonadHTTP m,
                                   HCloud.Common.SecurityScheme s) =>
                     HCloud.Common.Configuration s ->
                     GHC.Maybe.Maybe Data.Text.Internal.Text ->
                     m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                           (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getServerTypesRaw config
                  name = GHC.Base.id (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/server_types") ((Data.Text.pack "name",
                                                                                                                                                                           HCloud.Common.stringifyModel Data.Functor.<$> name) : []))
-- | > GET /server_types
-- 
-- Monadic version of 'getServerTypes' (use with 'HCloud.Common.runWithConfiguration')
getServerTypesM :: forall m s . (HCloud.Common.MonadHTTP m,
                                 HCloud.Common.SecurityScheme s) =>
                   GHC.Maybe.Maybe Data.Text.Internal.Text ->
                   Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                      m
                                                      (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                          (Network.HTTP.Client.Types.Response GetServerTypesResponse))
getServerTypesM name = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetServerTypesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetServerTypesResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                             GetServerTypesResponseBody200)
                                                                                                                                                                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/server_types") ((Data.Text.pack "name",
                                                                                                                                                                                                                                                                                                                                                                                                                  HCloud.Common.stringifyModel Data.Functor.<$> name) : []))
-- | > GET /server_types
-- 
-- Monadic version of 'getServerTypesRaw' (use with 'HCloud.Common.runWithConfiguration')
getServerTypesRawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                    HCloud.Common.SecurityScheme s) =>
                      GHC.Maybe.Maybe Data.Text.Internal.Text ->
                      Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                         m
                                                         (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                             (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getServerTypesRawM name = GHC.Base.id (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/server_types") ((Data.Text.pack "name",
                                                                                                                                                                      HCloud.Common.stringifyModel Data.Functor.<$> name) : []))
-- | Represents a response of the operation 'getServerTypes'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetServerTypesResponseError' is used.
data GetServerTypesResponse =                                
   GetServerTypesResponseError GHC.Base.String               -- ^ Means either no matching case available or a parse error
  | GetServerTypesResponse200 GetServerTypesResponseBody200  -- ^ The \`server_types\` key in the reply contains an array of Server type objects with this structure
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema GetServerTypesResponseBody200
-- 
-- 
data GetServerTypesResponseBody200 = GetServerTypesResponseBody200 {
  -- | server_types
  getServerTypesResponseBody200ServerTypes :: ([] GetServerTypesResponseBody200ServerTypes)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetServerTypesResponseBody200
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "server_types" (getServerTypesResponseBody200ServerTypes obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "server_types" (getServerTypesResponseBody200ServerTypes obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetServerTypesResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetServerTypesResponseBody200" (\obj -> GHC.Base.pure GetServerTypesResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "server_types"))
-- | Defines the data type for the schema GetServerTypesResponseBody200Server_types
-- 
-- 
data GetServerTypesResponseBody200ServerTypes = GetServerTypesResponseBody200ServerTypes {
  -- | cores: Number of cpu cores a Server of this type will have
  getServerTypesResponseBody200ServerTypesCores :: GHC.Types.Double
  -- | cpu_type: Type of cpu
  , getServerTypesResponseBody200ServerTypesCpuType :: GetServerTypesResponseBody200ServerTypesCpuType
  -- | deprecated: True if Server type is deprecated
  , getServerTypesResponseBody200ServerTypesDeprecated :: GHC.Types.Bool
  -- | description: Description of the Server type
  , getServerTypesResponseBody200ServerTypesDescription :: Data.Text.Internal.Text
  -- | disk: Disk size a Server of this type will have in GB
  , getServerTypesResponseBody200ServerTypesDisk :: GHC.Types.Double
  -- | id: ID of the Server type
  , getServerTypesResponseBody200ServerTypesId :: GHC.Types.Double
  -- | memory: Memory a Server of this type will have in GB
  , getServerTypesResponseBody200ServerTypesMemory :: GHC.Types.Double
  -- | name: Unique identifier of the Server type
  , getServerTypesResponseBody200ServerTypesName :: Data.Text.Internal.Text
  -- | prices: Prices in different Locations
  , getServerTypesResponseBody200ServerTypesPrices :: ([] GetServerTypesResponseBody200ServerTypesPrices)
  -- | storage_type: Type of Server boot drive. Local has higher speed. Network has better availability.
  , getServerTypesResponseBody200ServerTypesStorageType :: GetServerTypesResponseBody200ServerTypesStorageType
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetServerTypesResponseBody200ServerTypes
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "cores" (getServerTypesResponseBody200ServerTypesCores obj) : (Data.Aeson..=) "cpu_type" (getServerTypesResponseBody200ServerTypesCpuType obj) : (Data.Aeson..=) "deprecated" (getServerTypesResponseBody200ServerTypesDeprecated obj) : (Data.Aeson..=) "description" (getServerTypesResponseBody200ServerTypesDescription obj) : (Data.Aeson..=) "disk" (getServerTypesResponseBody200ServerTypesDisk obj) : (Data.Aeson..=) "id" (getServerTypesResponseBody200ServerTypesId obj) : (Data.Aeson..=) "memory" (getServerTypesResponseBody200ServerTypesMemory obj) : (Data.Aeson..=) "name" (getServerTypesResponseBody200ServerTypesName obj) : (Data.Aeson..=) "prices" (getServerTypesResponseBody200ServerTypesPrices obj) : (Data.Aeson..=) "storage_type" (getServerTypesResponseBody200ServerTypesStorageType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "cores" (getServerTypesResponseBody200ServerTypesCores obj) GHC.Base.<> ((Data.Aeson..=) "cpu_type" (getServerTypesResponseBody200ServerTypesCpuType obj) GHC.Base.<> ((Data.Aeson..=) "deprecated" (getServerTypesResponseBody200ServerTypesDeprecated obj) GHC.Base.<> ((Data.Aeson..=) "description" (getServerTypesResponseBody200ServerTypesDescription obj) GHC.Base.<> ((Data.Aeson..=) "disk" (getServerTypesResponseBody200ServerTypesDisk obj) GHC.Base.<> ((Data.Aeson..=) "id" (getServerTypesResponseBody200ServerTypesId obj) GHC.Base.<> ((Data.Aeson..=) "memory" (getServerTypesResponseBody200ServerTypesMemory obj) GHC.Base.<> ((Data.Aeson..=) "name" (getServerTypesResponseBody200ServerTypesName obj) GHC.Base.<> ((Data.Aeson..=) "prices" (getServerTypesResponseBody200ServerTypesPrices obj) GHC.Base.<> (Data.Aeson..=) "storage_type" (getServerTypesResponseBody200ServerTypesStorageType obj))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetServerTypesResponseBody200ServerTypes
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetServerTypesResponseBody200ServerTypes" (\obj -> (((((((((GHC.Base.pure GetServerTypesResponseBody200ServerTypes GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cores")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cpu_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "deprecated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "disk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "memory")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "prices")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "storage_type"))
-- | Defines the enum schema GetServerTypesResponseBody200Server_typesCpu_type
-- 
-- Type of cpu
data GetServerTypesResponseBody200ServerTypesCpuType
    = GetServerTypesResponseBody200ServerTypesCpuTypeEnumOther Data.Aeson.Types.Internal.Value
    | GetServerTypesResponseBody200ServerTypesCpuTypeEnumTyped Data.Text.Internal.Text
    | GetServerTypesResponseBody200ServerTypesCpuTypeEnumStringDedicated
    | GetServerTypesResponseBody200ServerTypesCpuTypeEnumStringShared
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetServerTypesResponseBody200ServerTypesCpuType
    where toJSON (GetServerTypesResponseBody200ServerTypesCpuTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetServerTypesResponseBody200ServerTypesCpuTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetServerTypesResponseBody200ServerTypesCpuTypeEnumStringDedicated) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dedicated"
          toJSON (GetServerTypesResponseBody200ServerTypesCpuTypeEnumStringShared) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "shared"
instance Data.Aeson.FromJSON GetServerTypesResponseBody200ServerTypesCpuType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dedicated")
                                          then GetServerTypesResponseBody200ServerTypesCpuTypeEnumStringDedicated
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "shared")
                                                then GetServerTypesResponseBody200ServerTypesCpuTypeEnumStringShared
                                                else GetServerTypesResponseBody200ServerTypesCpuTypeEnumOther val)
-- | Defines the data type for the schema GetServerTypesResponseBody200Server_typesPrices
-- 
-- 
data GetServerTypesResponseBody200ServerTypesPrices = GetServerTypesResponseBody200ServerTypesPrices {
  -- | location: Name of the Location the price is for
  getServerTypesResponseBody200ServerTypesPricesLocation :: Data.Text.Internal.Text
  -- | price_hourly: Hourly costs for a Server type in this Location
  , getServerTypesResponseBody200ServerTypesPricesPriceHourly :: GetServerTypesResponseBody200ServerTypesPricesPriceHourly
  -- | price_monthly: Monthly costs for a Server type in this Location
  , getServerTypesResponseBody200ServerTypesPricesPriceMonthly :: GetServerTypesResponseBody200ServerTypesPricesPriceMonthly
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetServerTypesResponseBody200ServerTypesPrices
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "location" (getServerTypesResponseBody200ServerTypesPricesLocation obj) : (Data.Aeson..=) "price_hourly" (getServerTypesResponseBody200ServerTypesPricesPriceHourly obj) : (Data.Aeson..=) "price_monthly" (getServerTypesResponseBody200ServerTypesPricesPriceMonthly obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "location" (getServerTypesResponseBody200ServerTypesPricesLocation obj) GHC.Base.<> ((Data.Aeson..=) "price_hourly" (getServerTypesResponseBody200ServerTypesPricesPriceHourly obj) GHC.Base.<> (Data.Aeson..=) "price_monthly" (getServerTypesResponseBody200ServerTypesPricesPriceMonthly obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetServerTypesResponseBody200ServerTypesPrices
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetServerTypesResponseBody200ServerTypesPrices" (\obj -> ((GHC.Base.pure GetServerTypesResponseBody200ServerTypesPrices GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "location")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price_hourly")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price_monthly"))
-- | Defines the data type for the schema GetServerTypesResponseBody200Server_typesPricesPrice_hourly
-- 
-- Hourly costs for a Server type in this Location
data GetServerTypesResponseBody200ServerTypesPricesPriceHourly = GetServerTypesResponseBody200ServerTypesPricesPriceHourly {
  -- | gross: Price with VAT added
  getServerTypesResponseBody200ServerTypesPricesPriceHourlyGross :: Data.Text.Internal.Text
  -- | net: Price without VAT
  , getServerTypesResponseBody200ServerTypesPricesPriceHourlyNet :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetServerTypesResponseBody200ServerTypesPricesPriceHourly
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "gross" (getServerTypesResponseBody200ServerTypesPricesPriceHourlyGross obj) : (Data.Aeson..=) "net" (getServerTypesResponseBody200ServerTypesPricesPriceHourlyNet obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "gross" (getServerTypesResponseBody200ServerTypesPricesPriceHourlyGross obj) GHC.Base.<> (Data.Aeson..=) "net" (getServerTypesResponseBody200ServerTypesPricesPriceHourlyNet obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetServerTypesResponseBody200ServerTypesPricesPriceHourly
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetServerTypesResponseBody200ServerTypesPricesPriceHourly" (\obj -> (GHC.Base.pure GetServerTypesResponseBody200ServerTypesPricesPriceHourly GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "gross")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "net"))
-- | Defines the data type for the schema GetServerTypesResponseBody200Server_typesPricesPrice_monthly
-- 
-- Monthly costs for a Server type in this Location
data GetServerTypesResponseBody200ServerTypesPricesPriceMonthly = GetServerTypesResponseBody200ServerTypesPricesPriceMonthly {
  -- | gross: Price with VAT added
  getServerTypesResponseBody200ServerTypesPricesPriceMonthlyGross :: Data.Text.Internal.Text
  -- | net: Price without VAT
  , getServerTypesResponseBody200ServerTypesPricesPriceMonthlyNet :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetServerTypesResponseBody200ServerTypesPricesPriceMonthly
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "gross" (getServerTypesResponseBody200ServerTypesPricesPriceMonthlyGross obj) : (Data.Aeson..=) "net" (getServerTypesResponseBody200ServerTypesPricesPriceMonthlyNet obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "gross" (getServerTypesResponseBody200ServerTypesPricesPriceMonthlyGross obj) GHC.Base.<> (Data.Aeson..=) "net" (getServerTypesResponseBody200ServerTypesPricesPriceMonthlyNet obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetServerTypesResponseBody200ServerTypesPricesPriceMonthly
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetServerTypesResponseBody200ServerTypesPricesPriceMonthly" (\obj -> (GHC.Base.pure GetServerTypesResponseBody200ServerTypesPricesPriceMonthly GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "gross")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "net"))
-- | Defines the enum schema GetServerTypesResponseBody200Server_typesStorage_type
-- 
-- Type of Server boot drive. Local has higher speed. Network has better availability.
data GetServerTypesResponseBody200ServerTypesStorageType
    = GetServerTypesResponseBody200ServerTypesStorageTypeEnumOther Data.Aeson.Types.Internal.Value
    | GetServerTypesResponseBody200ServerTypesStorageTypeEnumTyped Data.Text.Internal.Text
    | GetServerTypesResponseBody200ServerTypesStorageTypeEnumStringLocal
    | GetServerTypesResponseBody200ServerTypesStorageTypeEnumStringNetwork
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetServerTypesResponseBody200ServerTypesStorageType
    where toJSON (GetServerTypesResponseBody200ServerTypesStorageTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetServerTypesResponseBody200ServerTypesStorageTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetServerTypesResponseBody200ServerTypesStorageTypeEnumStringLocal) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "local"
          toJSON (GetServerTypesResponseBody200ServerTypesStorageTypeEnumStringNetwork) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "network"
instance Data.Aeson.FromJSON GetServerTypesResponseBody200ServerTypesStorageType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "local")
                                          then GetServerTypesResponseBody200ServerTypesStorageTypeEnumStringLocal
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "network")
                                                then GetServerTypesResponseBody200ServerTypesStorageTypeEnumStringNetwork
                                                else GetServerTypesResponseBody200ServerTypesStorageTypeEnumOther val)
