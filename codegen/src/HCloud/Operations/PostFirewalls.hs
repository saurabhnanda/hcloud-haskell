-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation postFirewalls
module HCloud.Operations.PostFirewalls where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > POST /firewalls
-- 
-- Creates a new Firewall.
-- 
-- \#\#\#\# Call specific error codes
-- 
-- | Code                        | Description                                             |
-- |-----------------------------|---------------------------------------------------------|
-- | \`server_already_added\`      | Server added more than one time to resource             |
-- | \`incompatible_network_type\` | The Network type is incompatible for the given resource |
postFirewalls :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Maybe.Maybe PostFirewallsRequestBody                                                                                  -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response PostFirewallsResponse)) -- ^ Monad containing the result of the operation
postFirewalls config
              body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostFirewallsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostFirewallsResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                         PostFirewallsResponseBody201)
                                                                                                                                                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/firewalls") [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /firewalls
-- 
-- The same as 'postFirewalls' but returns the raw 'Data.ByteString.Char8.ByteString'
postFirewallsRaw :: forall m s . (HCloud.Common.MonadHTTP m,
                                  HCloud.Common.SecurityScheme s) =>
                    HCloud.Common.Configuration s ->
                    GHC.Maybe.Maybe PostFirewallsRequestBody ->
                    m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                          (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postFirewallsRaw config
                 body = GHC.Base.id (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/firewalls") [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /firewalls
-- 
-- Monadic version of 'postFirewalls' (use with 'HCloud.Common.runWithConfiguration')
postFirewallsM :: forall m s . (HCloud.Common.MonadHTTP m,
                                HCloud.Common.SecurityScheme s) =>
                  GHC.Maybe.Maybe PostFirewallsRequestBody ->
                  Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                     m
                                                     (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                         (Network.HTTP.Client.Types.Response PostFirewallsResponse))
postFirewallsM body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostFirewallsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostFirewallsResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                          PostFirewallsResponseBody201)
                                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/firewalls") [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /firewalls
-- 
-- Monadic version of 'postFirewallsRaw' (use with 'HCloud.Common.runWithConfiguration')
postFirewallsRawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                   HCloud.Common.SecurityScheme s) =>
                     GHC.Maybe.Maybe PostFirewallsRequestBody ->
                     Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                        m
                                                        (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                            (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postFirewallsRawM body = GHC.Base.id (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/firewalls") [] body HCloud.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema postFirewallsRequestBody
-- 
-- 
data PostFirewallsRequestBody = PostFirewallsRequestBody {
  -- | apply_to: Resources the Firewall should be applied to after creation
  postFirewallsRequestBodyApplyTo :: (GHC.Maybe.Maybe ([] PostFirewallsRequestBodyApplyTo))
  -- | labels: User-defined labels (key-value pairs)
  , postFirewallsRequestBodyLabels :: (GHC.Maybe.Maybe PostFirewallsRequestBodyLabels)
  -- | name: Name of the Firewall
  , postFirewallsRequestBodyName :: Data.Text.Internal.Text
  -- | rules: Array of rules
  , postFirewallsRequestBodyRules :: (GHC.Maybe.Maybe ([] PostFirewallsRequestBodyRules))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFirewallsRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "apply_to" (postFirewallsRequestBodyApplyTo obj) : (Data.Aeson..=) "labels" (postFirewallsRequestBodyLabels obj) : (Data.Aeson..=) "name" (postFirewallsRequestBodyName obj) : (Data.Aeson..=) "rules" (postFirewallsRequestBodyRules obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "apply_to" (postFirewallsRequestBodyApplyTo obj) GHC.Base.<> ((Data.Aeson..=) "labels" (postFirewallsRequestBodyLabels obj) GHC.Base.<> ((Data.Aeson..=) "name" (postFirewallsRequestBodyName obj) GHC.Base.<> (Data.Aeson..=) "rules" (postFirewallsRequestBodyRules obj))))
instance Data.Aeson.Types.FromJSON.FromJSON PostFirewallsRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFirewallsRequestBody" (\obj -> (((GHC.Base.pure PostFirewallsRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "apply_to")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "labels")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "rules"))
-- | Defines the data type for the schema postFirewallsRequestBodyApply_to
-- 
-- 
data PostFirewallsRequestBodyApplyTo = PostFirewallsRequestBodyApplyTo {
  -- | label_selector: Configuration for type LabelSelector, required if type is \`label_selector\`
  postFirewallsRequestBodyApplyToLabelSelector :: (GHC.Maybe.Maybe PostFirewallsRequestBodyApplyToLabelSelector)
  -- | server: Configuration for type Server, required if type is \`server\`
  , postFirewallsRequestBodyApplyToServer :: (GHC.Maybe.Maybe PostFirewallsRequestBodyApplyToServer)
  -- | type: Type of the resource
  , postFirewallsRequestBodyApplyToType :: PostFirewallsRequestBodyApplyToType
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFirewallsRequestBodyApplyTo
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "label_selector" (postFirewallsRequestBodyApplyToLabelSelector obj) : (Data.Aeson..=) "server" (postFirewallsRequestBodyApplyToServer obj) : (Data.Aeson..=) "type" (postFirewallsRequestBodyApplyToType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "label_selector" (postFirewallsRequestBodyApplyToLabelSelector obj) GHC.Base.<> ((Data.Aeson..=) "server" (postFirewallsRequestBodyApplyToServer obj) GHC.Base.<> (Data.Aeson..=) "type" (postFirewallsRequestBodyApplyToType obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PostFirewallsRequestBodyApplyTo
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFirewallsRequestBodyApplyTo" (\obj -> ((GHC.Base.pure PostFirewallsRequestBodyApplyTo GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label_selector")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "server")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the data type for the schema postFirewallsRequestBodyApply_toLabel_selector
-- 
-- Configuration for type LabelSelector, required if type is \`label_selector\`
data PostFirewallsRequestBodyApplyToLabelSelector = PostFirewallsRequestBodyApplyToLabelSelector {
  -- | selector: Label selector
  postFirewallsRequestBodyApplyToLabelSelectorSelector :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFirewallsRequestBodyApplyToLabelSelector
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "selector" (postFirewallsRequestBodyApplyToLabelSelectorSelector obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "selector" (postFirewallsRequestBodyApplyToLabelSelectorSelector obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostFirewallsRequestBodyApplyToLabelSelector
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFirewallsRequestBodyApplyToLabelSelector" (\obj -> GHC.Base.pure PostFirewallsRequestBodyApplyToLabelSelector GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "selector"))
-- | Defines the data type for the schema postFirewallsRequestBodyApply_toServer
-- 
-- Configuration for type Server, required if type is \`server\`
data PostFirewallsRequestBodyApplyToServer = PostFirewallsRequestBodyApplyToServer {
  -- | id: ID of the Server
  postFirewallsRequestBodyApplyToServerId :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFirewallsRequestBodyApplyToServer
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (postFirewallsRequestBodyApplyToServerId obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (postFirewallsRequestBodyApplyToServerId obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostFirewallsRequestBodyApplyToServer
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFirewallsRequestBodyApplyToServer" (\obj -> GHC.Base.pure PostFirewallsRequestBodyApplyToServer GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id"))
-- | Defines the enum schema postFirewallsRequestBodyApply_toType
-- 
-- Type of the resource
data PostFirewallsRequestBodyApplyToType
    = PostFirewallsRequestBodyApplyToTypeEnumOther Data.Aeson.Types.Internal.Value
    | PostFirewallsRequestBodyApplyToTypeEnumTyped Data.Text.Internal.Text
    | PostFirewallsRequestBodyApplyToTypeEnumStringLabelSelector
    | PostFirewallsRequestBodyApplyToTypeEnumStringServer
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFirewallsRequestBodyApplyToType
    where toJSON (PostFirewallsRequestBodyApplyToTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostFirewallsRequestBodyApplyToTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostFirewallsRequestBodyApplyToTypeEnumStringLabelSelector) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "label_selector"
          toJSON (PostFirewallsRequestBodyApplyToTypeEnumStringServer) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "server"
instance Data.Aeson.FromJSON PostFirewallsRequestBodyApplyToType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "label_selector")
                                          then PostFirewallsRequestBodyApplyToTypeEnumStringLabelSelector
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "server")
                                                then PostFirewallsRequestBodyApplyToTypeEnumStringServer
                                                else PostFirewallsRequestBodyApplyToTypeEnumOther val)
-- | Defines the data type for the schema postFirewallsRequestBodyLabels
-- 
-- User-defined labels (key-value pairs)
data PostFirewallsRequestBodyLabels = PostFirewallsRequestBodyLabels {
  
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFirewallsRequestBodyLabels
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON PostFirewallsRequestBodyLabels
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFirewallsRequestBodyLabels" (\obj -> GHC.Base.pure PostFirewallsRequestBodyLabels)
-- | Defines the data type for the schema postFirewallsRequestBodyRules
-- 
-- 
data PostFirewallsRequestBodyRules = PostFirewallsRequestBodyRules {
  -- | description: Description of the Rule
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 255
  postFirewallsRequestBodyRulesDescription :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | destination_ips: List of permitted IPv4\/IPv6 addresses in CIDR notation. Use \`0.0.0.0\/0\` to allow all IPv4 addresses and \`::\/0\` to allow all IPv6 addresses. You can specify 100 CIDRs at most.
  , postFirewallsRequestBodyRulesDestinationIps :: (GHC.Maybe.Maybe ([] Data.Text.Internal.Text))
  -- | direction: Select traffic direction on which rule should be applied. Use \`source_ips\` for direction \`in\` and \`destination_ips\` for direction \`out\`.
  , postFirewallsRequestBodyRulesDirection :: PostFirewallsRequestBodyRulesDirection
  -- | port: Port or port range to which traffic will be allowed, only applicable for protocols TCP and UDP. A port range can be specified by separating two ports with a dash, e.g \`1024-5000\`.
  , postFirewallsRequestBodyRulesPort :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | protocol: Type of traffic to allow
  , postFirewallsRequestBodyRulesProtocol :: PostFirewallsRequestBodyRulesProtocol
  -- | source_ips: List of permitted IPv4\/IPv6 addresses in CIDR notation. Use \`0.0.0.0\/0\` to allow all IPv4 addresses and \`::\/0\` to allow all IPv6 addresses. You can specify 100 CIDRs at most.
  , postFirewallsRequestBodyRulesSourceIps :: (GHC.Maybe.Maybe ([] Data.Text.Internal.Text))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFirewallsRequestBodyRules
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "description" (postFirewallsRequestBodyRulesDescription obj) : (Data.Aeson..=) "destination_ips" (postFirewallsRequestBodyRulesDestinationIps obj) : (Data.Aeson..=) "direction" (postFirewallsRequestBodyRulesDirection obj) : (Data.Aeson..=) "port" (postFirewallsRequestBodyRulesPort obj) : (Data.Aeson..=) "protocol" (postFirewallsRequestBodyRulesProtocol obj) : (Data.Aeson..=) "source_ips" (postFirewallsRequestBodyRulesSourceIps obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "description" (postFirewallsRequestBodyRulesDescription obj) GHC.Base.<> ((Data.Aeson..=) "destination_ips" (postFirewallsRequestBodyRulesDestinationIps obj) GHC.Base.<> ((Data.Aeson..=) "direction" (postFirewallsRequestBodyRulesDirection obj) GHC.Base.<> ((Data.Aeson..=) "port" (postFirewallsRequestBodyRulesPort obj) GHC.Base.<> ((Data.Aeson..=) "protocol" (postFirewallsRequestBodyRulesProtocol obj) GHC.Base.<> (Data.Aeson..=) "source_ips" (postFirewallsRequestBodyRulesSourceIps obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostFirewallsRequestBodyRules
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFirewallsRequestBodyRules" (\obj -> (((((GHC.Base.pure PostFirewallsRequestBodyRules GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "destination_ips")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "direction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "protocol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "source_ips"))
-- | Defines the enum schema postFirewallsRequestBodyRulesDirection
-- 
-- Select traffic direction on which rule should be applied. Use \`source_ips\` for direction \`in\` and \`destination_ips\` for direction \`out\`.
data PostFirewallsRequestBodyRulesDirection
    = PostFirewallsRequestBodyRulesDirectionEnumOther Data.Aeson.Types.Internal.Value
    | PostFirewallsRequestBodyRulesDirectionEnumTyped Data.Text.Internal.Text
    | PostFirewallsRequestBodyRulesDirectionEnumStringIn
    | PostFirewallsRequestBodyRulesDirectionEnumStringOut
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFirewallsRequestBodyRulesDirection
    where toJSON (PostFirewallsRequestBodyRulesDirectionEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostFirewallsRequestBodyRulesDirectionEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostFirewallsRequestBodyRulesDirectionEnumStringIn) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "in"
          toJSON (PostFirewallsRequestBodyRulesDirectionEnumStringOut) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "out"
instance Data.Aeson.FromJSON PostFirewallsRequestBodyRulesDirection
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "in")
                                          then PostFirewallsRequestBodyRulesDirectionEnumStringIn
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "out")
                                                then PostFirewallsRequestBodyRulesDirectionEnumStringOut
                                                else PostFirewallsRequestBodyRulesDirectionEnumOther val)
-- | Defines the enum schema postFirewallsRequestBodyRulesProtocol
-- 
-- Type of traffic to allow
data PostFirewallsRequestBodyRulesProtocol
    = PostFirewallsRequestBodyRulesProtocolEnumOther Data.Aeson.Types.Internal.Value
    | PostFirewallsRequestBodyRulesProtocolEnumTyped Data.Text.Internal.Text
    | PostFirewallsRequestBodyRulesProtocolEnumStringEsp
    | PostFirewallsRequestBodyRulesProtocolEnumStringGre
    | PostFirewallsRequestBodyRulesProtocolEnumStringIcmp
    | PostFirewallsRequestBodyRulesProtocolEnumStringTcp
    | PostFirewallsRequestBodyRulesProtocolEnumStringUdp
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFirewallsRequestBodyRulesProtocol
    where toJSON (PostFirewallsRequestBodyRulesProtocolEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostFirewallsRequestBodyRulesProtocolEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostFirewallsRequestBodyRulesProtocolEnumStringEsp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "esp"
          toJSON (PostFirewallsRequestBodyRulesProtocolEnumStringGre) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "gre"
          toJSON (PostFirewallsRequestBodyRulesProtocolEnumStringIcmp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "icmp"
          toJSON (PostFirewallsRequestBodyRulesProtocolEnumStringTcp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tcp"
          toJSON (PostFirewallsRequestBodyRulesProtocolEnumStringUdp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "udp"
instance Data.Aeson.FromJSON PostFirewallsRequestBodyRulesProtocol
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "esp")
                                          then PostFirewallsRequestBodyRulesProtocolEnumStringEsp
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "gre")
                                                then PostFirewallsRequestBodyRulesProtocolEnumStringGre
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "icmp")
                                                      then PostFirewallsRequestBodyRulesProtocolEnumStringIcmp
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tcp")
                                                            then PostFirewallsRequestBodyRulesProtocolEnumStringTcp
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "udp")
                                                                  then PostFirewallsRequestBodyRulesProtocolEnumStringUdp
                                                                  else PostFirewallsRequestBodyRulesProtocolEnumOther val)
-- | Represents a response of the operation 'postFirewalls'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostFirewallsResponseError' is used.
data PostFirewallsResponse =                               
   PostFirewallsResponseError GHC.Base.String              -- ^ Means either no matching case available or a parse error
  | PostFirewallsResponse201 PostFirewallsResponseBody201  -- ^ The \`firewall\` key contains the Firewall that was just created
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema PostFirewallsResponseBody201
-- 
-- 
data PostFirewallsResponseBody201 = PostFirewallsResponseBody201 {
  -- | actions
  postFirewallsResponseBody201Actions :: (GHC.Maybe.Maybe ([] PostFirewallsResponseBody201Actions))
  -- | firewall
  , postFirewallsResponseBody201Firewall :: (GHC.Maybe.Maybe PostFirewallsResponseBody201Firewall)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFirewallsResponseBody201
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "actions" (postFirewallsResponseBody201Actions obj) : (Data.Aeson..=) "firewall" (postFirewallsResponseBody201Firewall obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "actions" (postFirewallsResponseBody201Actions obj) GHC.Base.<> (Data.Aeson..=) "firewall" (postFirewallsResponseBody201Firewall obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostFirewallsResponseBody201
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFirewallsResponseBody201" (\obj -> (GHC.Base.pure PostFirewallsResponseBody201 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "actions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "firewall"))
-- | Defines the data type for the schema PostFirewallsResponseBody201Actions
-- 
-- 
data PostFirewallsResponseBody201Actions = PostFirewallsResponseBody201Actions {
  -- | command: Command executed in the Action
  postFirewallsResponseBody201ActionsCommand :: Data.Text.Internal.Text
  -- | error: Error message for the Action if error occurred, otherwise null
  , postFirewallsResponseBody201ActionsError :: PostFirewallsResponseBody201ActionsError
  -- | finished: Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
  , postFirewallsResponseBody201ActionsFinished :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , postFirewallsResponseBody201ActionsId :: GHC.Integer.Type.Integer
  -- | progress: Progress of Action in percent
  , postFirewallsResponseBody201ActionsProgress :: GHC.Types.Double
  -- | resources: Resources the Action relates to
  , postFirewallsResponseBody201ActionsResources :: ([] PostFirewallsResponseBody201ActionsResources)
  -- | started: Point in time when the Action was started (in ISO-8601 format)
  , postFirewallsResponseBody201ActionsStarted :: Data.Text.Internal.Text
  -- | status: Status of the Action
  , postFirewallsResponseBody201ActionsStatus :: PostFirewallsResponseBody201ActionsStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFirewallsResponseBody201Actions
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "command" (postFirewallsResponseBody201ActionsCommand obj) : (Data.Aeson..=) "error" (postFirewallsResponseBody201ActionsError obj) : (Data.Aeson..=) "finished" (postFirewallsResponseBody201ActionsFinished obj) : (Data.Aeson..=) "id" (postFirewallsResponseBody201ActionsId obj) : (Data.Aeson..=) "progress" (postFirewallsResponseBody201ActionsProgress obj) : (Data.Aeson..=) "resources" (postFirewallsResponseBody201ActionsResources obj) : (Data.Aeson..=) "started" (postFirewallsResponseBody201ActionsStarted obj) : (Data.Aeson..=) "status" (postFirewallsResponseBody201ActionsStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "command" (postFirewallsResponseBody201ActionsCommand obj) GHC.Base.<> ((Data.Aeson..=) "error" (postFirewallsResponseBody201ActionsError obj) GHC.Base.<> ((Data.Aeson..=) "finished" (postFirewallsResponseBody201ActionsFinished obj) GHC.Base.<> ((Data.Aeson..=) "id" (postFirewallsResponseBody201ActionsId obj) GHC.Base.<> ((Data.Aeson..=) "progress" (postFirewallsResponseBody201ActionsProgress obj) GHC.Base.<> ((Data.Aeson..=) "resources" (postFirewallsResponseBody201ActionsResources obj) GHC.Base.<> ((Data.Aeson..=) "started" (postFirewallsResponseBody201ActionsStarted obj) GHC.Base.<> (Data.Aeson..=) "status" (postFirewallsResponseBody201ActionsStatus obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostFirewallsResponseBody201Actions
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFirewallsResponseBody201Actions" (\obj -> (((((((GHC.Base.pure PostFirewallsResponseBody201Actions GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "command")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "finished")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "started")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Defines the data type for the schema PostFirewallsResponseBody201ActionsError
-- 
-- Error message for the Action if error occurred, otherwise null
data PostFirewallsResponseBody201ActionsError = PostFirewallsResponseBody201ActionsError {
  -- | code: Fixed machine readable code
  postFirewallsResponseBody201ActionsErrorCode :: Data.Text.Internal.Text
  -- | message: Humanized error message
  , postFirewallsResponseBody201ActionsErrorMessage :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFirewallsResponseBody201ActionsError
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "code" (postFirewallsResponseBody201ActionsErrorCode obj) : (Data.Aeson..=) "message" (postFirewallsResponseBody201ActionsErrorMessage obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "code" (postFirewallsResponseBody201ActionsErrorCode obj) GHC.Base.<> (Data.Aeson..=) "message" (postFirewallsResponseBody201ActionsErrorMessage obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostFirewallsResponseBody201ActionsError
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFirewallsResponseBody201ActionsError" (\obj -> (GHC.Base.pure PostFirewallsResponseBody201ActionsError GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Defines the data type for the schema PostFirewallsResponseBody201ActionsResources
-- 
-- 
data PostFirewallsResponseBody201ActionsResources = PostFirewallsResponseBody201ActionsResources {
  -- | id: ID of the Resource
  postFirewallsResponseBody201ActionsResourcesId :: GHC.Integer.Type.Integer
  -- | type: Type of resource referenced
  , postFirewallsResponseBody201ActionsResourcesType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFirewallsResponseBody201ActionsResources
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (postFirewallsResponseBody201ActionsResourcesId obj) : (Data.Aeson..=) "type" (postFirewallsResponseBody201ActionsResourcesType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (postFirewallsResponseBody201ActionsResourcesId obj) GHC.Base.<> (Data.Aeson..=) "type" (postFirewallsResponseBody201ActionsResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostFirewallsResponseBody201ActionsResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFirewallsResponseBody201ActionsResources" (\obj -> (GHC.Base.pure PostFirewallsResponseBody201ActionsResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema PostFirewallsResponseBody201ActionsStatus
-- 
-- Status of the Action
data PostFirewallsResponseBody201ActionsStatus
    = PostFirewallsResponseBody201ActionsStatusEnumOther Data.Aeson.Types.Internal.Value
    | PostFirewallsResponseBody201ActionsStatusEnumTyped Data.Text.Internal.Text
    | PostFirewallsResponseBody201ActionsStatusEnumStringError
    | PostFirewallsResponseBody201ActionsStatusEnumStringRunning
    | PostFirewallsResponseBody201ActionsStatusEnumStringSuccess
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFirewallsResponseBody201ActionsStatus
    where toJSON (PostFirewallsResponseBody201ActionsStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostFirewallsResponseBody201ActionsStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostFirewallsResponseBody201ActionsStatusEnumStringError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error"
          toJSON (PostFirewallsResponseBody201ActionsStatusEnumStringRunning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running"
          toJSON (PostFirewallsResponseBody201ActionsStatusEnumStringSuccess) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success"
instance Data.Aeson.FromJSON PostFirewallsResponseBody201ActionsStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error")
                                          then PostFirewallsResponseBody201ActionsStatusEnumStringError
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running")
                                                then PostFirewallsResponseBody201ActionsStatusEnumStringRunning
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success")
                                                      then PostFirewallsResponseBody201ActionsStatusEnumStringSuccess
                                                      else PostFirewallsResponseBody201ActionsStatusEnumOther val)
-- | Defines the data type for the schema PostFirewallsResponseBody201Firewall
-- 
-- 
data PostFirewallsResponseBody201Firewall = PostFirewallsResponseBody201Firewall {
  -- | applied_to
  postFirewallsResponseBody201FirewallAppliedTo :: ([] PostFirewallsResponseBody201FirewallAppliedTo)
  -- | created: Point in time when the Resource was created (in ISO-8601 format)
  , postFirewallsResponseBody201FirewallCreated :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , postFirewallsResponseBody201FirewallId :: GHC.Integer.Type.Integer
  -- | labels: User-defined labels (key-value pairs)
  , postFirewallsResponseBody201FirewallLabels :: (GHC.Maybe.Maybe PostFirewallsResponseBody201FirewallLabels)
  -- | name: Name of the Resource. Must be unique per Project.
  , postFirewallsResponseBody201FirewallName :: Data.Text.Internal.Text
  -- | rules
  , postFirewallsResponseBody201FirewallRules :: ([] PostFirewallsResponseBody201FirewallRules)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFirewallsResponseBody201Firewall
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "applied_to" (postFirewallsResponseBody201FirewallAppliedTo obj) : (Data.Aeson..=) "created" (postFirewallsResponseBody201FirewallCreated obj) : (Data.Aeson..=) "id" (postFirewallsResponseBody201FirewallId obj) : (Data.Aeson..=) "labels" (postFirewallsResponseBody201FirewallLabels obj) : (Data.Aeson..=) "name" (postFirewallsResponseBody201FirewallName obj) : (Data.Aeson..=) "rules" (postFirewallsResponseBody201FirewallRules obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "applied_to" (postFirewallsResponseBody201FirewallAppliedTo obj) GHC.Base.<> ((Data.Aeson..=) "created" (postFirewallsResponseBody201FirewallCreated obj) GHC.Base.<> ((Data.Aeson..=) "id" (postFirewallsResponseBody201FirewallId obj) GHC.Base.<> ((Data.Aeson..=) "labels" (postFirewallsResponseBody201FirewallLabels obj) GHC.Base.<> ((Data.Aeson..=) "name" (postFirewallsResponseBody201FirewallName obj) GHC.Base.<> (Data.Aeson..=) "rules" (postFirewallsResponseBody201FirewallRules obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostFirewallsResponseBody201Firewall
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFirewallsResponseBody201Firewall" (\obj -> (((((GHC.Base.pure PostFirewallsResponseBody201Firewall GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "applied_to")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "labels")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "rules"))
-- | Defines the data type for the schema PostFirewallsResponseBody201FirewallApplied_to
-- 
-- 
data PostFirewallsResponseBody201FirewallAppliedTo = PostFirewallsResponseBody201FirewallAppliedTo {
  -- | applied_to_resources
  postFirewallsResponseBody201FirewallAppliedToAppliedToResources :: (GHC.Maybe.Maybe ([] PostFirewallsResponseBody201FirewallAppliedToAppliedToResources))
  -- | label_selector
  , postFirewallsResponseBody201FirewallAppliedToLabelSelector :: (GHC.Maybe.Maybe PostFirewallsResponseBody201FirewallAppliedToLabelSelector)
  -- | server
  , postFirewallsResponseBody201FirewallAppliedToServer :: (GHC.Maybe.Maybe PostFirewallsResponseBody201FirewallAppliedToServer)
  -- | type: Type of resource referenced
  , postFirewallsResponseBody201FirewallAppliedToType :: PostFirewallsResponseBody201FirewallAppliedToType
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFirewallsResponseBody201FirewallAppliedTo
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "applied_to_resources" (postFirewallsResponseBody201FirewallAppliedToAppliedToResources obj) : (Data.Aeson..=) "label_selector" (postFirewallsResponseBody201FirewallAppliedToLabelSelector obj) : (Data.Aeson..=) "server" (postFirewallsResponseBody201FirewallAppliedToServer obj) : (Data.Aeson..=) "type" (postFirewallsResponseBody201FirewallAppliedToType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "applied_to_resources" (postFirewallsResponseBody201FirewallAppliedToAppliedToResources obj) GHC.Base.<> ((Data.Aeson..=) "label_selector" (postFirewallsResponseBody201FirewallAppliedToLabelSelector obj) GHC.Base.<> ((Data.Aeson..=) "server" (postFirewallsResponseBody201FirewallAppliedToServer obj) GHC.Base.<> (Data.Aeson..=) "type" (postFirewallsResponseBody201FirewallAppliedToType obj))))
instance Data.Aeson.Types.FromJSON.FromJSON PostFirewallsResponseBody201FirewallAppliedTo
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFirewallsResponseBody201FirewallAppliedTo" (\obj -> (((GHC.Base.pure PostFirewallsResponseBody201FirewallAppliedTo GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "applied_to_resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label_selector")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "server")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the data type for the schema PostFirewallsResponseBody201FirewallApplied_toApplied_to_resources
-- 
-- 
data PostFirewallsResponseBody201FirewallAppliedToAppliedToResources = PostFirewallsResponseBody201FirewallAppliedToAppliedToResources {
  -- | server
  postFirewallsResponseBody201FirewallAppliedToAppliedToResourcesServer :: (GHC.Maybe.Maybe PostFirewallsResponseBody201FirewallAppliedToAppliedToResourcesServer)
  -- | type: Type of resource referenced
  , postFirewallsResponseBody201FirewallAppliedToAppliedToResourcesType :: (GHC.Maybe.Maybe PostFirewallsResponseBody201FirewallAppliedToAppliedToResourcesType)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFirewallsResponseBody201FirewallAppliedToAppliedToResources
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "server" (postFirewallsResponseBody201FirewallAppliedToAppliedToResourcesServer obj) : (Data.Aeson..=) "type" (postFirewallsResponseBody201FirewallAppliedToAppliedToResourcesType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "server" (postFirewallsResponseBody201FirewallAppliedToAppliedToResourcesServer obj) GHC.Base.<> (Data.Aeson..=) "type" (postFirewallsResponseBody201FirewallAppliedToAppliedToResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostFirewallsResponseBody201FirewallAppliedToAppliedToResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFirewallsResponseBody201FirewallAppliedToAppliedToResources" (\obj -> (GHC.Base.pure PostFirewallsResponseBody201FirewallAppliedToAppliedToResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "server")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))
-- | Defines the data type for the schema PostFirewallsResponseBody201FirewallApplied_toApplied_to_resourcesServer
-- 
-- 
data PostFirewallsResponseBody201FirewallAppliedToAppliedToResourcesServer = PostFirewallsResponseBody201FirewallAppliedToAppliedToResourcesServer {
  -- | id: ID of the Resource
  postFirewallsResponseBody201FirewallAppliedToAppliedToResourcesServerId :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFirewallsResponseBody201FirewallAppliedToAppliedToResourcesServer
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (postFirewallsResponseBody201FirewallAppliedToAppliedToResourcesServerId obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (postFirewallsResponseBody201FirewallAppliedToAppliedToResourcesServerId obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostFirewallsResponseBody201FirewallAppliedToAppliedToResourcesServer
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFirewallsResponseBody201FirewallAppliedToAppliedToResourcesServer" (\obj -> GHC.Base.pure PostFirewallsResponseBody201FirewallAppliedToAppliedToResourcesServer GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id"))
-- | Defines the enum schema PostFirewallsResponseBody201FirewallApplied_toApplied_to_resourcesType
-- 
-- Type of resource referenced
data PostFirewallsResponseBody201FirewallAppliedToAppliedToResourcesType
    = PostFirewallsResponseBody201FirewallAppliedToAppliedToResourcesTypeEnumOther Data.Aeson.Types.Internal.Value
    | PostFirewallsResponseBody201FirewallAppliedToAppliedToResourcesTypeEnumTyped Data.Text.Internal.Text
    | PostFirewallsResponseBody201FirewallAppliedToAppliedToResourcesTypeEnumStringServer
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFirewallsResponseBody201FirewallAppliedToAppliedToResourcesType
    where toJSON (PostFirewallsResponseBody201FirewallAppliedToAppliedToResourcesTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostFirewallsResponseBody201FirewallAppliedToAppliedToResourcesTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostFirewallsResponseBody201FirewallAppliedToAppliedToResourcesTypeEnumStringServer) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "server"
instance Data.Aeson.FromJSON PostFirewallsResponseBody201FirewallAppliedToAppliedToResourcesType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "server")
                                          then PostFirewallsResponseBody201FirewallAppliedToAppliedToResourcesTypeEnumStringServer
                                          else PostFirewallsResponseBody201FirewallAppliedToAppliedToResourcesTypeEnumOther val)
-- | Defines the data type for the schema PostFirewallsResponseBody201FirewallApplied_toLabel_selector
-- 
-- 
data PostFirewallsResponseBody201FirewallAppliedToLabelSelector = PostFirewallsResponseBody201FirewallAppliedToLabelSelector {
  -- | selector: Label selector
  postFirewallsResponseBody201FirewallAppliedToLabelSelectorSelector :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFirewallsResponseBody201FirewallAppliedToLabelSelector
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "selector" (postFirewallsResponseBody201FirewallAppliedToLabelSelectorSelector obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "selector" (postFirewallsResponseBody201FirewallAppliedToLabelSelectorSelector obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostFirewallsResponseBody201FirewallAppliedToLabelSelector
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFirewallsResponseBody201FirewallAppliedToLabelSelector" (\obj -> GHC.Base.pure PostFirewallsResponseBody201FirewallAppliedToLabelSelector GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "selector"))
-- | Defines the data type for the schema PostFirewallsResponseBody201FirewallApplied_toServer
-- 
-- 
data PostFirewallsResponseBody201FirewallAppliedToServer = PostFirewallsResponseBody201FirewallAppliedToServer {
  -- | id: ID of the Resource
  postFirewallsResponseBody201FirewallAppliedToServerId :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFirewallsResponseBody201FirewallAppliedToServer
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (postFirewallsResponseBody201FirewallAppliedToServerId obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (postFirewallsResponseBody201FirewallAppliedToServerId obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostFirewallsResponseBody201FirewallAppliedToServer
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFirewallsResponseBody201FirewallAppliedToServer" (\obj -> GHC.Base.pure PostFirewallsResponseBody201FirewallAppliedToServer GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id"))
-- | Defines the enum schema PostFirewallsResponseBody201FirewallApplied_toType
-- 
-- Type of resource referenced
data PostFirewallsResponseBody201FirewallAppliedToType
    = PostFirewallsResponseBody201FirewallAppliedToTypeEnumOther Data.Aeson.Types.Internal.Value
    | PostFirewallsResponseBody201FirewallAppliedToTypeEnumTyped Data.Text.Internal.Text
    | PostFirewallsResponseBody201FirewallAppliedToTypeEnumStringLabelSelector
    | PostFirewallsResponseBody201FirewallAppliedToTypeEnumStringServer
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFirewallsResponseBody201FirewallAppliedToType
    where toJSON (PostFirewallsResponseBody201FirewallAppliedToTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostFirewallsResponseBody201FirewallAppliedToTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostFirewallsResponseBody201FirewallAppliedToTypeEnumStringLabelSelector) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "label_selector"
          toJSON (PostFirewallsResponseBody201FirewallAppliedToTypeEnumStringServer) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "server"
instance Data.Aeson.FromJSON PostFirewallsResponseBody201FirewallAppliedToType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "label_selector")
                                          then PostFirewallsResponseBody201FirewallAppliedToTypeEnumStringLabelSelector
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "server")
                                                then PostFirewallsResponseBody201FirewallAppliedToTypeEnumStringServer
                                                else PostFirewallsResponseBody201FirewallAppliedToTypeEnumOther val)
-- | Defines the data type for the schema PostFirewallsResponseBody201FirewallLabels
-- 
-- User-defined labels (key-value pairs)
data PostFirewallsResponseBody201FirewallLabels = PostFirewallsResponseBody201FirewallLabels {
  
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFirewallsResponseBody201FirewallLabels
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON PostFirewallsResponseBody201FirewallLabels
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFirewallsResponseBody201FirewallLabels" (\obj -> GHC.Base.pure PostFirewallsResponseBody201FirewallLabels)
-- | Defines the data type for the schema PostFirewallsResponseBody201FirewallRules
-- 
-- 
data PostFirewallsResponseBody201FirewallRules = PostFirewallsResponseBody201FirewallRules {
  -- | description: Description of the Rule
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 255
  postFirewallsResponseBody201FirewallRulesDescription :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | destination_ips: List of permitted IPv4\/IPv6 addresses in CIDR notation. Use \`0.0.0.0\/0\` to allow all IPv4 addresses and \`::\/0\` to allow all IPv6 addresses. You can specify 100 CIDRs at most.
  , postFirewallsResponseBody201FirewallRulesDestinationIps :: (GHC.Maybe.Maybe ([] Data.Text.Internal.Text))
  -- | direction: Select traffic direction on which rule should be applied. Use \`source_ips\` for direction \`in\` and \`destination_ips\` for direction \`out\`.
  , postFirewallsResponseBody201FirewallRulesDirection :: PostFirewallsResponseBody201FirewallRulesDirection
  -- | port: Port or port range to which traffic will be allowed, only applicable for protocols TCP and UDP. A port range can be specified by separating two ports with a dash, e.g \`1024-5000\`.
  , postFirewallsResponseBody201FirewallRulesPort :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | protocol: Type of traffic to allow
  , postFirewallsResponseBody201FirewallRulesProtocol :: PostFirewallsResponseBody201FirewallRulesProtocol
  -- | source_ips: List of permitted IPv4\/IPv6 addresses in CIDR notation. Use \`0.0.0.0\/0\` to allow all IPv4 addresses and \`::\/0\` to allow all IPv6 addresses. You can specify 100 CIDRs at most.
  , postFirewallsResponseBody201FirewallRulesSourceIps :: (GHC.Maybe.Maybe ([] Data.Text.Internal.Text))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFirewallsResponseBody201FirewallRules
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "description" (postFirewallsResponseBody201FirewallRulesDescription obj) : (Data.Aeson..=) "destination_ips" (postFirewallsResponseBody201FirewallRulesDestinationIps obj) : (Data.Aeson..=) "direction" (postFirewallsResponseBody201FirewallRulesDirection obj) : (Data.Aeson..=) "port" (postFirewallsResponseBody201FirewallRulesPort obj) : (Data.Aeson..=) "protocol" (postFirewallsResponseBody201FirewallRulesProtocol obj) : (Data.Aeson..=) "source_ips" (postFirewallsResponseBody201FirewallRulesSourceIps obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "description" (postFirewallsResponseBody201FirewallRulesDescription obj) GHC.Base.<> ((Data.Aeson..=) "destination_ips" (postFirewallsResponseBody201FirewallRulesDestinationIps obj) GHC.Base.<> ((Data.Aeson..=) "direction" (postFirewallsResponseBody201FirewallRulesDirection obj) GHC.Base.<> ((Data.Aeson..=) "port" (postFirewallsResponseBody201FirewallRulesPort obj) GHC.Base.<> ((Data.Aeson..=) "protocol" (postFirewallsResponseBody201FirewallRulesProtocol obj) GHC.Base.<> (Data.Aeson..=) "source_ips" (postFirewallsResponseBody201FirewallRulesSourceIps obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostFirewallsResponseBody201FirewallRules
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFirewallsResponseBody201FirewallRules" (\obj -> (((((GHC.Base.pure PostFirewallsResponseBody201FirewallRules GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "destination_ips")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "direction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "protocol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "source_ips"))
-- | Defines the enum schema PostFirewallsResponseBody201FirewallRulesDirection
-- 
-- Select traffic direction on which rule should be applied. Use \`source_ips\` for direction \`in\` and \`destination_ips\` for direction \`out\`.
data PostFirewallsResponseBody201FirewallRulesDirection
    = PostFirewallsResponseBody201FirewallRulesDirectionEnumOther Data.Aeson.Types.Internal.Value
    | PostFirewallsResponseBody201FirewallRulesDirectionEnumTyped Data.Text.Internal.Text
    | PostFirewallsResponseBody201FirewallRulesDirectionEnumStringIn
    | PostFirewallsResponseBody201FirewallRulesDirectionEnumStringOut
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFirewallsResponseBody201FirewallRulesDirection
    where toJSON (PostFirewallsResponseBody201FirewallRulesDirectionEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostFirewallsResponseBody201FirewallRulesDirectionEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostFirewallsResponseBody201FirewallRulesDirectionEnumStringIn) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "in"
          toJSON (PostFirewallsResponseBody201FirewallRulesDirectionEnumStringOut) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "out"
instance Data.Aeson.FromJSON PostFirewallsResponseBody201FirewallRulesDirection
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "in")
                                          then PostFirewallsResponseBody201FirewallRulesDirectionEnumStringIn
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "out")
                                                then PostFirewallsResponseBody201FirewallRulesDirectionEnumStringOut
                                                else PostFirewallsResponseBody201FirewallRulesDirectionEnumOther val)
-- | Defines the enum schema PostFirewallsResponseBody201FirewallRulesProtocol
-- 
-- Type of traffic to allow
data PostFirewallsResponseBody201FirewallRulesProtocol
    = PostFirewallsResponseBody201FirewallRulesProtocolEnumOther Data.Aeson.Types.Internal.Value
    | PostFirewallsResponseBody201FirewallRulesProtocolEnumTyped Data.Text.Internal.Text
    | PostFirewallsResponseBody201FirewallRulesProtocolEnumStringEsp
    | PostFirewallsResponseBody201FirewallRulesProtocolEnumStringGre
    | PostFirewallsResponseBody201FirewallRulesProtocolEnumStringIcmp
    | PostFirewallsResponseBody201FirewallRulesProtocolEnumStringTcp
    | PostFirewallsResponseBody201FirewallRulesProtocolEnumStringUdp
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFirewallsResponseBody201FirewallRulesProtocol
    where toJSON (PostFirewallsResponseBody201FirewallRulesProtocolEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostFirewallsResponseBody201FirewallRulesProtocolEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostFirewallsResponseBody201FirewallRulesProtocolEnumStringEsp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "esp"
          toJSON (PostFirewallsResponseBody201FirewallRulesProtocolEnumStringGre) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "gre"
          toJSON (PostFirewallsResponseBody201FirewallRulesProtocolEnumStringIcmp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "icmp"
          toJSON (PostFirewallsResponseBody201FirewallRulesProtocolEnumStringTcp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tcp"
          toJSON (PostFirewallsResponseBody201FirewallRulesProtocolEnumStringUdp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "udp"
instance Data.Aeson.FromJSON PostFirewallsResponseBody201FirewallRulesProtocol
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "esp")
                                          then PostFirewallsResponseBody201FirewallRulesProtocolEnumStringEsp
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "gre")
                                                then PostFirewallsResponseBody201FirewallRulesProtocolEnumStringGre
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "icmp")
                                                      then PostFirewallsResponseBody201FirewallRulesProtocolEnumStringIcmp
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tcp")
                                                            then PostFirewallsResponseBody201FirewallRulesProtocolEnumStringTcp
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "udp")
                                                                  then PostFirewallsResponseBody201FirewallRulesProtocolEnumStringUdp
                                                                  else PostFirewallsResponseBody201FirewallRulesProtocolEnumOther val)
