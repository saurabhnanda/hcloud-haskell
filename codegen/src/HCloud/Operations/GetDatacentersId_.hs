-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation getDatacenters_Id_
module HCloud.Operations.GetDatacentersId_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > GET /datacenters/{id}
-- 
-- Returns a specific Datacenter object.
getDatacenters_Id_ :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer                                                                                                       -- ^ id: ID of Datacenter
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response GetDatacentersIdResponse))   -- ^ Monad containing the result of the operation
getDatacenters_Id_ config
                   id = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetDatacentersIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetDatacentersIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                  GetDatacentersIdResponseBody200)
                                                                                                                                                                                  | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/datacenters/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) [])
-- | > GET /datacenters/{id}
-- 
-- The same as 'getDatacenters_Id_' but returns the raw 'Data.ByteString.Char8.ByteString'
getDatacenters_Id_Raw :: forall m s . (HCloud.Common.MonadHTTP m,
                                       HCloud.Common.SecurityScheme s) =>
                         HCloud.Common.Configuration s ->
                         GHC.Integer.Type.Integer ->
                         m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                               (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getDatacenters_Id_Raw config
                      id = GHC.Base.id (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/datacenters/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) [])
-- | > GET /datacenters/{id}
-- 
-- Monadic version of 'getDatacenters_Id_' (use with 'HCloud.Common.runWithConfiguration')
getDatacenters_Id_M :: forall m s . (HCloud.Common.MonadHTTP m,
                                     HCloud.Common.SecurityScheme s) =>
                       GHC.Integer.Type.Integer ->
                       Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                          m
                                                          (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                              (Network.HTTP.Client.Types.Response GetDatacentersIdResponse))
getDatacenters_Id_M id = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetDatacentersIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetDatacentersIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                   GetDatacentersIdResponseBody200)
                                                                                                                                                                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/datacenters/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) [])
-- | > GET /datacenters/{id}
-- 
-- Monadic version of 'getDatacenters_Id_Raw' (use with 'HCloud.Common.runWithConfiguration')
getDatacenters_Id_RawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                        HCloud.Common.SecurityScheme s) =>
                          GHC.Integer.Type.Integer ->
                          Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                             m
                                                             (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                 (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getDatacenters_Id_RawM id = GHC.Base.id (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/datacenters/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) [])
-- | Represents a response of the operation 'getDatacenters_Id_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetDatacentersIdResponseError' is used.
data GetDatacentersIdResponse =                                  
   GetDatacentersIdResponseError GHC.Base.String                 -- ^ Means either no matching case available or a parse error
  | GetDatacentersIdResponse200 GetDatacentersIdResponseBody200  -- ^ The \`datacenter\` key in the reply contains a Datacenter object with this structure
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema GetDatacentersIdResponseBody200
-- 
-- 
data GetDatacentersIdResponseBody200 = GetDatacentersIdResponseBody200 {
  -- | datacenter
  getDatacentersIdResponseBody200Datacenter :: GetDatacentersIdResponseBody200Datacenter
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetDatacentersIdResponseBody200
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "datacenter" (getDatacentersIdResponseBody200Datacenter obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "datacenter" (getDatacentersIdResponseBody200Datacenter obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetDatacentersIdResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetDatacentersIdResponseBody200" (\obj -> GHC.Base.pure GetDatacentersIdResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "datacenter"))
-- | Defines the data type for the schema GetDatacentersIdResponseBody200Datacenter
-- 
-- 
data GetDatacentersIdResponseBody200Datacenter = GetDatacentersIdResponseBody200Datacenter {
  -- | description: Description of the Datacenter
  getDatacentersIdResponseBody200DatacenterDescription :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , getDatacentersIdResponseBody200DatacenterId :: GHC.Integer.Type.Integer
  -- | location
  , getDatacentersIdResponseBody200DatacenterLocation :: GetDatacentersIdResponseBody200DatacenterLocation
  -- | name: Unique identifier of the Datacenter
  , getDatacentersIdResponseBody200DatacenterName :: Data.Text.Internal.Text
  -- | server_types: The Server types the Datacenter can handle
  , getDatacentersIdResponseBody200DatacenterServerTypes :: GetDatacentersIdResponseBody200DatacenterServerTypes
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetDatacentersIdResponseBody200Datacenter
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "description" (getDatacentersIdResponseBody200DatacenterDescription obj) : (Data.Aeson..=) "id" (getDatacentersIdResponseBody200DatacenterId obj) : (Data.Aeson..=) "location" (getDatacentersIdResponseBody200DatacenterLocation obj) : (Data.Aeson..=) "name" (getDatacentersIdResponseBody200DatacenterName obj) : (Data.Aeson..=) "server_types" (getDatacentersIdResponseBody200DatacenterServerTypes obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "description" (getDatacentersIdResponseBody200DatacenterDescription obj) GHC.Base.<> ((Data.Aeson..=) "id" (getDatacentersIdResponseBody200DatacenterId obj) GHC.Base.<> ((Data.Aeson..=) "location" (getDatacentersIdResponseBody200DatacenterLocation obj) GHC.Base.<> ((Data.Aeson..=) "name" (getDatacentersIdResponseBody200DatacenterName obj) GHC.Base.<> (Data.Aeson..=) "server_types" (getDatacentersIdResponseBody200DatacenterServerTypes obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON GetDatacentersIdResponseBody200Datacenter
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetDatacentersIdResponseBody200Datacenter" (\obj -> ((((GHC.Base.pure GetDatacentersIdResponseBody200Datacenter GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "location")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "server_types"))
-- | Defines the data type for the schema GetDatacentersIdResponseBody200DatacenterLocation
-- 
-- 
data GetDatacentersIdResponseBody200DatacenterLocation = GetDatacentersIdResponseBody200DatacenterLocation {
  -- | city: City the Location is closest to
  getDatacentersIdResponseBody200DatacenterLocationCity :: Data.Text.Internal.Text
  -- | country: ISO 3166-1 alpha-2 code of the country the Location resides in
  , getDatacentersIdResponseBody200DatacenterLocationCountry :: Data.Text.Internal.Text
  -- | description: Description of the Location
  , getDatacentersIdResponseBody200DatacenterLocationDescription :: Data.Text.Internal.Text
  -- | id: ID of the Location
  , getDatacentersIdResponseBody200DatacenterLocationId :: GHC.Types.Double
  -- | latitude: Latitude of the city closest to the Location
  , getDatacentersIdResponseBody200DatacenterLocationLatitude :: GHC.Types.Double
  -- | longitude: Longitude of the city closest to the Location
  , getDatacentersIdResponseBody200DatacenterLocationLongitude :: GHC.Types.Double
  -- | name: Unique identifier of the Location
  , getDatacentersIdResponseBody200DatacenterLocationName :: Data.Text.Internal.Text
  -- | network_zone: Name of network zone this Location resides in
  , getDatacentersIdResponseBody200DatacenterLocationNetworkZone :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetDatacentersIdResponseBody200DatacenterLocation
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (getDatacentersIdResponseBody200DatacenterLocationCity obj) : (Data.Aeson..=) "country" (getDatacentersIdResponseBody200DatacenterLocationCountry obj) : (Data.Aeson..=) "description" (getDatacentersIdResponseBody200DatacenterLocationDescription obj) : (Data.Aeson..=) "id" (getDatacentersIdResponseBody200DatacenterLocationId obj) : (Data.Aeson..=) "latitude" (getDatacentersIdResponseBody200DatacenterLocationLatitude obj) : (Data.Aeson..=) "longitude" (getDatacentersIdResponseBody200DatacenterLocationLongitude obj) : (Data.Aeson..=) "name" (getDatacentersIdResponseBody200DatacenterLocationName obj) : (Data.Aeson..=) "network_zone" (getDatacentersIdResponseBody200DatacenterLocationNetworkZone obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (getDatacentersIdResponseBody200DatacenterLocationCity obj) GHC.Base.<> ((Data.Aeson..=) "country" (getDatacentersIdResponseBody200DatacenterLocationCountry obj) GHC.Base.<> ((Data.Aeson..=) "description" (getDatacentersIdResponseBody200DatacenterLocationDescription obj) GHC.Base.<> ((Data.Aeson..=) "id" (getDatacentersIdResponseBody200DatacenterLocationId obj) GHC.Base.<> ((Data.Aeson..=) "latitude" (getDatacentersIdResponseBody200DatacenterLocationLatitude obj) GHC.Base.<> ((Data.Aeson..=) "longitude" (getDatacentersIdResponseBody200DatacenterLocationLongitude obj) GHC.Base.<> ((Data.Aeson..=) "name" (getDatacentersIdResponseBody200DatacenterLocationName obj) GHC.Base.<> (Data.Aeson..=) "network_zone" (getDatacentersIdResponseBody200DatacenterLocationNetworkZone obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetDatacentersIdResponseBody200DatacenterLocation
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetDatacentersIdResponseBody200DatacenterLocation" (\obj -> (((((((GHC.Base.pure GetDatacentersIdResponseBody200DatacenterLocation GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "latitude")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "longitude")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "network_zone"))
-- | Defines the data type for the schema GetDatacentersIdResponseBody200DatacenterServer_types
-- 
-- The Server types the Datacenter can handle
data GetDatacentersIdResponseBody200DatacenterServerTypes = GetDatacentersIdResponseBody200DatacenterServerTypes {
  -- | available: IDs of Server types that are supported and for which the Datacenter has enough resources left
  getDatacentersIdResponseBody200DatacenterServerTypesAvailable :: ([] GHC.Types.Double)
  -- | available_for_migration: IDs of Server types that are supported and for which the Datacenter has enough resources left
  , getDatacentersIdResponseBody200DatacenterServerTypesAvailableForMigration :: ([] GHC.Types.Double)
  -- | supported: IDs of Server types that are supported in the Datacenter
  , getDatacentersIdResponseBody200DatacenterServerTypesSupported :: ([] GHC.Types.Double)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetDatacentersIdResponseBody200DatacenterServerTypes
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "available" (getDatacentersIdResponseBody200DatacenterServerTypesAvailable obj) : (Data.Aeson..=) "available_for_migration" (getDatacentersIdResponseBody200DatacenterServerTypesAvailableForMigration obj) : (Data.Aeson..=) "supported" (getDatacentersIdResponseBody200DatacenterServerTypesSupported obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "available" (getDatacentersIdResponseBody200DatacenterServerTypesAvailable obj) GHC.Base.<> ((Data.Aeson..=) "available_for_migration" (getDatacentersIdResponseBody200DatacenterServerTypesAvailableForMigration obj) GHC.Base.<> (Data.Aeson..=) "supported" (getDatacentersIdResponseBody200DatacenterServerTypesSupported obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetDatacentersIdResponseBody200DatacenterServerTypes
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetDatacentersIdResponseBody200DatacenterServerTypes" (\obj -> ((GHC.Base.pure GetDatacentersIdResponseBody200DatacenterServerTypes GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "available")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "available_for_migration")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "supported"))
