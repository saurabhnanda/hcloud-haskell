-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getLocations_Id_
module HCloud.Operations.GetLocationsId_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > GET /locations/{id}
-- 
-- Returns a specific Location object.
getLocations_Id_ :: forall m . HCloud.Common.MonadHTTP m => GHC.Types.Int -- ^ id: ID of Location
  -> HCloud.Common.HttpT m (Network.HTTP.Client.Types.Response GetLocationsIdResponse) -- ^ Monadic computation which returns the result of the operation
getLocations_Id_ id = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetLocationsIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetLocationsIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                             GetLocationsIdResponseBody200)
                                                                                                                                                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/locations/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) GHC.Base.mempty)
-- | Represents a response of the operation 'getLocations_Id_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetLocationsIdResponseError' is used.
data GetLocationsIdResponse =
   GetLocationsIdResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetLocationsIdResponse200 GetLocationsIdResponseBody200 -- ^ The \`location\` key in the reply contains a Location object with this structure
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/locations\/{id}.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetLocationsIdResponseBody200 = GetLocationsIdResponseBody200 {
  -- | location
  getLocationsIdResponseBody200Location :: GetLocationsIdResponseBody200Location
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetLocationsIdResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("location" Data.Aeson.Types.ToJSON..= getLocationsIdResponseBody200Location obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("location" Data.Aeson.Types.ToJSON..= getLocationsIdResponseBody200Location obj)
instance Data.Aeson.Types.FromJSON.FromJSON GetLocationsIdResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLocationsIdResponseBody200" (\obj -> GHC.Base.pure GetLocationsIdResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "location"))
-- | Create a new 'GetLocationsIdResponseBody200' with all required fields.
mkGetLocationsIdResponseBody200 :: GetLocationsIdResponseBody200Location -- ^ 'getLocationsIdResponseBody200Location'
  -> GetLocationsIdResponseBody200
mkGetLocationsIdResponseBody200 getLocationsIdResponseBody200Location = GetLocationsIdResponseBody200{getLocationsIdResponseBody200Location = getLocationsIdResponseBody200Location}
-- | Defines the object schema located at @paths.\/locations\/{id}.GET.responses.200.content.application\/json.schema.properties.location@ in the specification.
-- 
-- 
data GetLocationsIdResponseBody200Location = GetLocationsIdResponseBody200Location {
  -- | city: City the Location is closest to
  getLocationsIdResponseBody200LocationCity :: Data.Text.Internal.Text
  -- | country: ISO 3166-1 alpha-2 code of the country the Location resides in
  , getLocationsIdResponseBody200LocationCountry :: Data.Text.Internal.Text
  -- | description: Description of the Location
  , getLocationsIdResponseBody200LocationDescription :: Data.Text.Internal.Text
  -- | id: ID of the Location
  , getLocationsIdResponseBody200LocationId :: GHC.Types.Double
  -- | latitude: Latitude of the city closest to the Location
  , getLocationsIdResponseBody200LocationLatitude :: GHC.Types.Double
  -- | longitude: Longitude of the city closest to the Location
  , getLocationsIdResponseBody200LocationLongitude :: GHC.Types.Double
  -- | name: Unique identifier of the Location
  , getLocationsIdResponseBody200LocationName :: Data.Text.Internal.Text
  -- | network_zone: Name of network zone this Location resides in
  , getLocationsIdResponseBody200LocationNetworkZone :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetLocationsIdResponseBody200Location
    where toJSON obj = Data.Aeson.Types.Internal.object ("city" Data.Aeson.Types.ToJSON..= getLocationsIdResponseBody200LocationCity obj : "country" Data.Aeson.Types.ToJSON..= getLocationsIdResponseBody200LocationCountry obj : "description" Data.Aeson.Types.ToJSON..= getLocationsIdResponseBody200LocationDescription obj : "id" Data.Aeson.Types.ToJSON..= getLocationsIdResponseBody200LocationId obj : "latitude" Data.Aeson.Types.ToJSON..= getLocationsIdResponseBody200LocationLatitude obj : "longitude" Data.Aeson.Types.ToJSON..= getLocationsIdResponseBody200LocationLongitude obj : "name" Data.Aeson.Types.ToJSON..= getLocationsIdResponseBody200LocationName obj : "network_zone" Data.Aeson.Types.ToJSON..= getLocationsIdResponseBody200LocationNetworkZone obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("city" Data.Aeson.Types.ToJSON..= getLocationsIdResponseBody200LocationCity obj) GHC.Base.<> (("country" Data.Aeson.Types.ToJSON..= getLocationsIdResponseBody200LocationCountry obj) GHC.Base.<> (("description" Data.Aeson.Types.ToJSON..= getLocationsIdResponseBody200LocationDescription obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= getLocationsIdResponseBody200LocationId obj) GHC.Base.<> (("latitude" Data.Aeson.Types.ToJSON..= getLocationsIdResponseBody200LocationLatitude obj) GHC.Base.<> (("longitude" Data.Aeson.Types.ToJSON..= getLocationsIdResponseBody200LocationLongitude obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= getLocationsIdResponseBody200LocationName obj) GHC.Base.<> ("network_zone" Data.Aeson.Types.ToJSON..= getLocationsIdResponseBody200LocationNetworkZone obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetLocationsIdResponseBody200Location
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLocationsIdResponseBody200Location" (\obj -> (((((((GHC.Base.pure GetLocationsIdResponseBody200Location GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "latitude")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "longitude")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "network_zone"))
-- | Create a new 'GetLocationsIdResponseBody200Location' with all required fields.
mkGetLocationsIdResponseBody200Location :: Data.Text.Internal.Text -- ^ 'getLocationsIdResponseBody200LocationCity'
  -> Data.Text.Internal.Text -- ^ 'getLocationsIdResponseBody200LocationCountry'
  -> Data.Text.Internal.Text -- ^ 'getLocationsIdResponseBody200LocationDescription'
  -> GHC.Types.Double -- ^ 'getLocationsIdResponseBody200LocationId'
  -> GHC.Types.Double -- ^ 'getLocationsIdResponseBody200LocationLatitude'
  -> GHC.Types.Double -- ^ 'getLocationsIdResponseBody200LocationLongitude'
  -> Data.Text.Internal.Text -- ^ 'getLocationsIdResponseBody200LocationName'
  -> Data.Text.Internal.Text -- ^ 'getLocationsIdResponseBody200LocationNetworkZone'
  -> GetLocationsIdResponseBody200Location
mkGetLocationsIdResponseBody200Location getLocationsIdResponseBody200LocationCity getLocationsIdResponseBody200LocationCountry getLocationsIdResponseBody200LocationDescription getLocationsIdResponseBody200LocationId getLocationsIdResponseBody200LocationLatitude getLocationsIdResponseBody200LocationLongitude getLocationsIdResponseBody200LocationName getLocationsIdResponseBody200LocationNetworkZone = GetLocationsIdResponseBody200Location{getLocationsIdResponseBody200LocationCity = getLocationsIdResponseBody200LocationCity,
                                                                                                                                                                                                                                                                                                                                                                                                                                                        getLocationsIdResponseBody200LocationCountry = getLocationsIdResponseBody200LocationCountry,
                                                                                                                                                                                                                                                                                                                                                                                                                                                        getLocationsIdResponseBody200LocationDescription = getLocationsIdResponseBody200LocationDescription,
                                                                                                                                                                                                                                                                                                                                                                                                                                                        getLocationsIdResponseBody200LocationId = getLocationsIdResponseBody200LocationId,
                                                                                                                                                                                                                                                                                                                                                                                                                                                        getLocationsIdResponseBody200LocationLatitude = getLocationsIdResponseBody200LocationLatitude,
                                                                                                                                                                                                                                                                                                                                                                                                                                                        getLocationsIdResponseBody200LocationLongitude = getLocationsIdResponseBody200LocationLongitude,
                                                                                                                                                                                                                                                                                                                                                                                                                                                        getLocationsIdResponseBody200LocationName = getLocationsIdResponseBody200LocationName,
                                                                                                                                                                                                                                                                                                                                                                                                                                                        getLocationsIdResponseBody200LocationNetworkZone = getLocationsIdResponseBody200LocationNetworkZone}
-- | > GET /locations/{id}
-- 
-- The same as 'getLocations_Id_' but accepts an explicit configuration.
getLocations_Id_WithConfiguration :: forall m . HCloud.Common.MonadHTTP m => HCloud.Common.Configuration -- ^ The configuration to use in the request
  -> GHC.Types.Int -- ^ id: ID of Location
  -> m (Network.HTTP.Client.Types.Response GetLocationsIdResponse) -- ^ Monadic computation which returns the result of the operation
getLocations_Id_WithConfiguration config
                                  id = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetLocationsIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetLocationsIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                              GetLocationsIdResponseBody200)
                                                                                                                                                                                | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/locations/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) GHC.Base.mempty)
-- | > GET /locations/{id}
-- 
-- The same as 'getLocations_Id_' but returns the raw 'Data.ByteString.Char8.ByteString'.
getLocations_Id_Raw :: forall m . HCloud.Common.MonadHTTP m => GHC.Types.Int -- ^ id: ID of Location
  -> HCloud.Common.HttpT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getLocations_Id_Raw id = GHC.Base.id (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/locations/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) GHC.Base.mempty)
-- | > GET /locations/{id}
-- 
-- The same as 'getLocations_Id_' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getLocations_Id_WithConfigurationRaw :: forall m . HCloud.Common.MonadHTTP m => HCloud.Common.Configuration -- ^ The configuration to use in the request
  -> GHC.Types.Int -- ^ id: ID of Location
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getLocations_Id_WithConfigurationRaw config
                                     id = GHC.Base.id (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/locations/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) GHC.Base.mempty)
