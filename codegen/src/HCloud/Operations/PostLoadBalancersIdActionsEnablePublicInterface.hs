-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation postLoadBalancers_Id_ActionsEnablePublicInterface
module HCloud.Operations.PostLoadBalancersIdActionsEnablePublicInterface where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > POST /load_balancers/{id}/actions/enable_public_interface
-- 
-- Enable the public interface of a Load Balancer. The Load Balancer will be accessible from the internet via its public IPs.
postLoadBalancers_Id_ActionsEnablePublicInterface :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer                                                                                                                                      -- ^ id: ID of the Load Balancer
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response PostLoadBalancersIdActionsEnablePublicInterfaceResponse))   -- ^ Monad containing the result of the operation
postLoadBalancers_Id_ActionsEnablePublicInterface config
                                                  id = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostLoadBalancersIdActionsEnablePublicInterfaceResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostLoadBalancersIdActionsEnablePublicInterfaceResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201)
                                                                                                                                                                                                                                                | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/load_balancers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/enable_public_interface"))) [])
-- | > POST /load_balancers/{id}/actions/enable_public_interface
-- 
-- The same as 'postLoadBalancers_Id_ActionsEnablePublicInterface' but returns the raw 'Data.ByteString.Char8.ByteString'
postLoadBalancers_Id_ActionsEnablePublicInterfaceRaw :: forall m s . (HCloud.Common.MonadHTTP m,
                                                                      HCloud.Common.SecurityScheme s) =>
                                                        HCloud.Common.Configuration s ->
                                                        GHC.Integer.Type.Integer ->
                                                        m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                              (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postLoadBalancers_Id_ActionsEnablePublicInterfaceRaw config
                                                     id = GHC.Base.id (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/load_balancers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/enable_public_interface"))) [])
-- | > POST /load_balancers/{id}/actions/enable_public_interface
-- 
-- Monadic version of 'postLoadBalancers_Id_ActionsEnablePublicInterface' (use with 'HCloud.Common.runWithConfiguration')
postLoadBalancers_Id_ActionsEnablePublicInterfaceM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                                    HCloud.Common.SecurityScheme s) =>
                                                      GHC.Integer.Type.Integer ->
                                                      Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                                         m
                                                                                         (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                                             (Network.HTTP.Client.Types.Response PostLoadBalancersIdActionsEnablePublicInterfaceResponse))
postLoadBalancers_Id_ActionsEnablePublicInterfaceM id = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostLoadBalancersIdActionsEnablePublicInterfaceResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostLoadBalancersIdActionsEnablePublicInterfaceResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
ostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201)
                                                                                                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/load_balancers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/enable_public_interface"))) [])
-- | > POST /load_balancers/{id}/actions/enable_public_interface
-- 
-- Monadic version of 'postLoadBalancers_Id_ActionsEnablePublicInterfaceRaw' (use with 'HCloud.Common.runWithConfiguration')
postLoadBalancers_Id_ActionsEnablePublicInterfaceRawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                                       HCloud.Common.SecurityScheme s) =>
                                                         GHC.Integer.Type.Integer ->
                                                         Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                                            m
                                                                                            (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                                                (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postLoadBalancers_Id_ActionsEnablePublicInterfaceRawM id = GHC.Base.id (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/load_balancers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/enable_public_interface"))) [])
-- | Represents a response of the operation 'postLoadBalancers_Id_ActionsEnablePublicInterface'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostLoadBalancersIdActionsEnablePublicInterfaceResponseError' is used.
data PostLoadBalancersIdActionsEnablePublicInterfaceResponse =                                                                 
   PostLoadBalancersIdActionsEnablePublicInterfaceResponseError GHC.Base.String                                                -- ^ Means either no matching case available or a parse error
  | PostLoadBalancersIdActionsEnablePublicInterfaceResponse201 PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201  -- ^ The \`action\` key contains the \`enable_public_interface\` Action
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201
-- 
-- 
data PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201 = PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201 {
  -- | action
  postLoadBalancersIdActionsEnablePublicInterfaceResponseBody201Action :: PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201Action
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "action" (postLoadBalancersIdActionsEnablePublicInterfaceResponseBody201Action obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "action" (postLoadBalancersIdActionsEnablePublicInterfaceResponseBody201Action obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201" (\obj -> GHC.Base.pure PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "action"))
-- | Defines the data type for the schema PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201Action
-- 
-- 
data PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201Action = PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201Action {
  -- | command: Command executed in the Action
  postLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionCommand :: Data.Text.Internal.Text
  -- | error: Error message for the Action if error occurred, otherwise null
  , postLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionError :: PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionError
  -- | finished: Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
  , postLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionFinished :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , postLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionId :: GHC.Integer.Type.Integer
  -- | progress: Progress of Action in percent
  , postLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionProgress :: GHC.Types.Double
  -- | resources: Resources the Action relates to
  , postLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionResources :: ([] PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionResources)
  -- | started: Point in time when the Action was started (in ISO-8601 format)
  , postLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionStarted :: Data.Text.Internal.Text
  -- | status: Status of the Action
  , postLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionStatus :: PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201Action
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "command" (postLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionCommand obj) : (Data.Aeson..=) "error" (postLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionError obj) : (Data.Aeson..=) "finished" (postLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionFinished obj) : (Data.Aeson..=) "id" (postLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionId obj) : (Data.Aeson..=) "progress" (postLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionProgress obj) : (Data.Aeson..=) "resources" (postLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionResources obj) : (Data.Aeson..=) "started" (postLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionStarted obj) : (Data.Aeson..=) "status" (postLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "command" (postLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionCommand obj) GHC.Base.<> ((Data.Aeson..=) "error" (postLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionError obj) GHC.Base.<> ((Data.Aeson..=) "finished" (postLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionFinished obj) GHC.Base.<> ((Data.Aeson..=) "id" (postLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionId obj) GHC.Base.<> ((Data.Aeson..=) "progress" (postLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionProgress obj) GHC.Base.<> ((Data.Aeson..=) "resources" (postLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionResources obj) GHC.Base.<> ((Data.Aeson..=) "started" (postLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionStarted obj) GHC.Base.<> (Data.Aeson..=) "status" (postLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionStatus obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201Action
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201Action" (\obj -> (((((((GHC.Base.pure PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201Action GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "command")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "finished")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "started")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Defines the data type for the schema PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionError
-- 
-- Error message for the Action if error occurred, otherwise null
data PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionError = PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionError {
  -- | code: Fixed machine readable code
  postLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionErrorCode :: Data.Text.Internal.Text
  -- | message: Humanized error message
  , postLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionErrorMessage :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionError
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "code" (postLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionErrorCode obj) : (Data.Aeson..=) "message" (postLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionErrorMessage obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "code" (postLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionErrorCode obj) GHC.Base.<> (Data.Aeson..=) "message" (postLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionErrorMessage obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionError
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionError" (\obj -> (GHC.Base.pure PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionError GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Defines the data type for the schema PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionResources
-- 
-- 
data PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionResources = PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionResources {
  -- | id: ID of the Resource
  postLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionResourcesId :: GHC.Integer.Type.Integer
  -- | type: Type of resource referenced
  , postLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionResourcesType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionResources
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (postLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionResourcesId obj) : (Data.Aeson..=) "type" (postLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionResourcesType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (postLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionResourcesId obj) GHC.Base.<> (Data.Aeson..=) "type" (postLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionResources" (\obj -> (GHC.Base.pure PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionStatus
-- 
-- Status of the Action
data PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionStatus
    = PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionStatusEnumOther Data.Aeson.Types.Internal.Value
    | PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionStatusEnumTyped Data.Text.Internal.Text
    | PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionStatusEnumStringError
    | PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionStatusEnumStringRunning
    | PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionStatusEnumStringSuccess
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionStatus
    where toJSON (PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionStatusEnumStringError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error"
          toJSON (PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionStatusEnumStringRunning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running"
          toJSON (PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionStatusEnumStringSuccess) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success"
instance Data.Aeson.FromJSON PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error")
                                          then PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionStatusEnumStringError
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running")
                                                then PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionStatusEnumStringRunning
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success")
                                                      then PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionStatusEnumStringSuccess
                                                      else PostLoadBalancersIdActionsEnablePublicInterfaceResponseBody201ActionStatusEnumOther val)
