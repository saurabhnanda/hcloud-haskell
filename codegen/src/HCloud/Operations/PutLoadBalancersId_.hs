-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation putLoadBalancers_Id_
module HCloud.Operations.PutLoadBalancersId_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > PUT /load_balancers/{id}
-- 
-- Updates a Load Balancer. You can update a Load Balancer’s name and a Load Balancer’s labels.
-- 
-- Note that when updating labels, the Load Balancer’s current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.
-- 
-- Note: if the Load Balancer object changes during the request, the response will be a “conflict” error.
putLoadBalancers_Id_ :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer                                                                                                         -- ^ id: ID of the Load Balancer
  -> GHC.Maybe.Maybe PutLoadBalancersIdRequestBody                                                                                    -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response PutLoadBalancersIdResponse))   -- ^ Monad containing the result of the operation
putLoadBalancers_Id_ config
                     id
                     body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PutLoadBalancersIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PutLoadBalancersIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          PutLoadBalancersIdResponseBody200)
                                                                                                                                                                                        | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack ("/load_balancers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > PUT /load_balancers/{id}
-- 
-- The same as 'putLoadBalancers_Id_' but returns the raw 'Data.ByteString.Char8.ByteString'
putLoadBalancers_Id_Raw :: forall m s . (HCloud.Common.MonadHTTP m,
                                         HCloud.Common.SecurityScheme s) =>
                           HCloud.Common.Configuration s ->
                           GHC.Integer.Type.Integer ->
                           GHC.Maybe.Maybe PutLoadBalancersIdRequestBody ->
                           m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                 (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
putLoadBalancers_Id_Raw config
                        id
                        body = GHC.Base.id (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack ("/load_balancers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > PUT /load_balancers/{id}
-- 
-- Monadic version of 'putLoadBalancers_Id_' (use with 'HCloud.Common.runWithConfiguration')
putLoadBalancers_Id_M :: forall m s . (HCloud.Common.MonadHTTP m,
                                       HCloud.Common.SecurityScheme s) =>
                         GHC.Integer.Type.Integer ->
                         GHC.Maybe.Maybe PutLoadBalancersIdRequestBody ->
                         Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                            m
                                                            (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                (Network.HTTP.Client.Types.Response PutLoadBalancersIdResponse))
putLoadBalancers_Id_M id
                      body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PutLoadBalancersIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PutLoadBalancersIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                           PutLoadBalancersIdResponseBody200)
                                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack ("/load_balancers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > PUT /load_balancers/{id}
-- 
-- Monadic version of 'putLoadBalancers_Id_Raw' (use with 'HCloud.Common.runWithConfiguration')
putLoadBalancers_Id_RawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                          HCloud.Common.SecurityScheme s) =>
                            GHC.Integer.Type.Integer ->
                            GHC.Maybe.Maybe PutLoadBalancersIdRequestBody ->
                            Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                               m
                                                               (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                   (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
putLoadBalancers_Id_RawM id
                         body = GHC.Base.id (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack ("/load_balancers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema putLoadBalancers_Id_RequestBody
-- 
-- 
data PutLoadBalancersIdRequestBody = PutLoadBalancersIdRequestBody {
  -- | labels: User-defined labels (key-value pairs)
  putLoadBalancersIdRequestBodyLabels :: (GHC.Maybe.Maybe PutLoadBalancersIdRequestBodyLabels)
  -- | name: New Load Balancer name
  , putLoadBalancersIdRequestBodyName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutLoadBalancersIdRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "labels" (putLoadBalancersIdRequestBodyLabels obj) : (Data.Aeson..=) "name" (putLoadBalancersIdRequestBodyName obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "labels" (putLoadBalancersIdRequestBodyLabels obj) GHC.Base.<> (Data.Aeson..=) "name" (putLoadBalancersIdRequestBodyName obj))
instance Data.Aeson.Types.FromJSON.FromJSON PutLoadBalancersIdRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutLoadBalancersIdRequestBody" (\obj -> (GHC.Base.pure PutLoadBalancersIdRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "labels")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name"))
-- | Defines the data type for the schema putLoadBalancers_Id_RequestBodyLabels
-- 
-- User-defined labels (key-value pairs)
data PutLoadBalancersIdRequestBodyLabels = PutLoadBalancersIdRequestBodyLabels {
  
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutLoadBalancersIdRequestBodyLabels
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON PutLoadBalancersIdRequestBodyLabels
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutLoadBalancersIdRequestBodyLabels" (\obj -> GHC.Base.pure PutLoadBalancersIdRequestBodyLabels)
-- | Represents a response of the operation 'putLoadBalancers_Id_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PutLoadBalancersIdResponseError' is used.
data PutLoadBalancersIdResponse =                                    
   PutLoadBalancersIdResponseError GHC.Base.String                   -- ^ Means either no matching case available or a parse error
  | PutLoadBalancersIdResponse200 PutLoadBalancersIdResponseBody200  -- ^ The \`load_balancer\` key contains the updated Load Balancer
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema PutLoadBalancersIdResponseBody200
-- 
-- 
data PutLoadBalancersIdResponseBody200 = PutLoadBalancersIdResponseBody200 {
  -- | load_balancer
  putLoadBalancersIdResponseBody200LoadBalancer :: PutLoadBalancersIdResponseBody200LoadBalancer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutLoadBalancersIdResponseBody200
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "load_balancer" (putLoadBalancersIdResponseBody200LoadBalancer obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "load_balancer" (putLoadBalancersIdResponseBody200LoadBalancer obj))
instance Data.Aeson.Types.FromJSON.FromJSON PutLoadBalancersIdResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutLoadBalancersIdResponseBody200" (\obj -> GHC.Base.pure PutLoadBalancersIdResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "load_balancer"))
-- | Defines the data type for the schema PutLoadBalancersIdResponseBody200Load_balancer
-- 
-- 
data PutLoadBalancersIdResponseBody200LoadBalancer = PutLoadBalancersIdResponseBody200LoadBalancer {
  -- | algorithm: Algorithm of the Load Balancer
  putLoadBalancersIdResponseBody200LoadBalancerAlgorithm :: PutLoadBalancersIdResponseBody200LoadBalancerAlgorithm
  -- | created: Point in time when the Resource was created (in ISO-8601 format)
  , putLoadBalancersIdResponseBody200LoadBalancerCreated :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , putLoadBalancersIdResponseBody200LoadBalancerId :: GHC.Integer.Type.Integer
  -- | included_traffic: Free Traffic for the current billing period in bytes
  , putLoadBalancersIdResponseBody200LoadBalancerIncludedTraffic :: GHC.Integer.Type.Integer
  -- | ingoing_traffic: Inbound Traffic for the current billing period in bytes
  , putLoadBalancersIdResponseBody200LoadBalancerIngoingTraffic :: GHC.Integer.Type.Integer
  -- | labels: User-defined labels (key-value pairs)
  , putLoadBalancersIdResponseBody200LoadBalancerLabels :: PutLoadBalancersIdResponseBody200LoadBalancerLabels
  -- | load_balancer_type
  , putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerType :: PutLoadBalancersIdResponseBody200LoadBalancerLoadBalancerType
  -- | location
  , putLoadBalancersIdResponseBody200LoadBalancerLocation :: PutLoadBalancersIdResponseBody200LoadBalancerLocation
  -- | name: Name of the Resource. Must be unique per Project.
  , putLoadBalancersIdResponseBody200LoadBalancerName :: Data.Text.Internal.Text
  -- | outgoing_traffic: Outbound Traffic for the current billing period in bytes
  , putLoadBalancersIdResponseBody200LoadBalancerOutgoingTraffic :: GHC.Integer.Type.Integer
  -- | private_net: Private networks information
  , putLoadBalancersIdResponseBody200LoadBalancerPrivateNet :: ([] PutLoadBalancersIdResponseBody200LoadBalancerPrivateNet)
  -- | protection: Protection configuration for the Resource
  , putLoadBalancersIdResponseBody200LoadBalancerProtection :: PutLoadBalancersIdResponseBody200LoadBalancerProtection
  -- | public_net: Public network information
  , putLoadBalancersIdResponseBody200LoadBalancerPublicNet :: PutLoadBalancersIdResponseBody200LoadBalancerPublicNet
  -- | services: List of services that belong to this Load Balancer
  , putLoadBalancersIdResponseBody200LoadBalancerServices :: ([] PutLoadBalancersIdResponseBody200LoadBalancerServices)
  -- | targets: List of targets that belong to this Load Balancer
  , putLoadBalancersIdResponseBody200LoadBalancerTargets :: ([] PutLoadBalancersIdResponseBody200LoadBalancerTargets)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutLoadBalancersIdResponseBody200LoadBalancer
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "algorithm" (putLoadBalancersIdResponseBody200LoadBalancerAlgorithm obj) : (Data.Aeson..=) "created" (putLoadBalancersIdResponseBody200LoadBalancerCreated obj) : (Data.Aeson..=) "id" (putLoadBalancersIdResponseBody200LoadBalancerId obj) : (Data.Aeson..=) "included_traffic" (putLoadBalancersIdResponseBody200LoadBalancerIncludedTraffic obj) : (Data.Aeson..=) "ingoing_traffic" (putLoadBalancersIdResponseBody200LoadBalancerIngoingTraffic obj) : (Data.Aeson..=) "labels" (putLoadBalancersIdResponseBody200LoadBalancerLabels obj) : (Data.Aeson..=) "load_balancer_type" (putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerType obj) : (Data.Aeson..=) "location" (putLoadBalancersIdResponseBody200LoadBalancerLocation obj) : (Data.Aeson..=) "name" (putLoadBalancersIdResponseBody200LoadBalancerName obj) : (Data.Aeson..=) "outgoing_traffic" (putLoadBalancersIdResponseBody200LoadBalancerOutgoingTraffic obj) : (Data.Aeson..=) "private_net" (putLoadBalancersIdResponseBody200LoadBalancerPrivateNet obj) : (Data.Aeson..=) "protection" (putLoadBalancersIdResponseBody200LoadBalancerProtection obj) : (Data.Aeson..=) "public_net" (putLoadBalancersIdResponseBody200LoadBalancerPublicNet obj) : (Data.Aeson..=) "services" (putLoadBalancersIdResponseBody200LoadBalancerServices obj) : (Data.Aeson..=) "targets" (putLoadBalancersIdResponseBody200LoadBalancerTargets obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "algorithm" (putLoadBalancersIdResponseBody200LoadBalancerAlgorithm obj) GHC.Base.<> ((Data.Aeson..=) "created" (putLoadBalancersIdResponseBody200LoadBalancerCreated obj) GHC.Base.<> ((Data.Aeson..=) "id" (putLoadBalancersIdResponseBody200LoadBalancerId obj) GHC.Base.<> ((Data.Aeson..=) "included_traffic" (putLoadBalancersIdResponseBody200LoadBalancerIncludedTraffic obj) GHC.Base.<> ((Data.Aeson..=) "ingoing_traffic" (putLoadBalancersIdResponseBody200LoadBalancerIngoingTraffic obj) GHC.Base.<> ((Data.Aeson..=) "labels" (putLoadBalancersIdResponseBody200LoadBalancerLabels obj) GHC.Base.<> ((Data.Aeson..=) "load_balancer_type" (putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerType obj) GHC.Base.<> ((Data.Aeson..=) "location" (putLoadBalancersIdResponseBody200LoadBalancerLocation obj) GHC.Base.<> ((Data.Aeson..=) "name" (putLoadBalancersIdResponseBody200LoadBalancerName obj) GHC.Base.<> ((Data.Aeson..=) "outgoing_traffic" (putLoadBalancersIdResponseBody200LoadBalancerOutgoingTraffic obj) GHC.Base.<> ((Data.Aeson..=) "private_net" (putLoadBalancersIdResponseBody200LoadBalancerPrivateNet obj) GHC.Base.<> ((Data.Aeson..=) "protection" (putLoadBalancersIdResponseBody200LoadBalancerProtection obj) GHC.Base.<> ((Data.Aeson..=) "public_net" (putLoadBalancersIdResponseBody200LoadBalancerPublicNet obj) GHC.Base.<> ((Data.Aeson..=) "services" (putLoadBalancersIdResponseBody200LoadBalancerServices obj) GHC.Base.<> (Data.Aeson..=) "targets" (putLoadBalancersIdResponseBody200LoadBalancerTargets obj)))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PutLoadBalancersIdResponseBody200LoadBalancer
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutLoadBalancersIdResponseBody200LoadBalancer" (\obj -> ((((((((((((((GHC.Base.pure PutLoadBalancersIdResponseBody200LoadBalancer GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "algorithm")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "included_traffic")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ingoing_traffic")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "labels")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "load_balancer_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "location")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "outgoing_traffic")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "private_net")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "protection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "public_net")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "services")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "targets"))
-- | Defines the data type for the schema PutLoadBalancersIdResponseBody200Load_balancerAlgorithm
-- 
-- Algorithm of the Load Balancer
data PutLoadBalancersIdResponseBody200LoadBalancerAlgorithm = PutLoadBalancersIdResponseBody200LoadBalancerAlgorithm {
  -- | type: Type of the algorithm
  putLoadBalancersIdResponseBody200LoadBalancerAlgorithmType :: PutLoadBalancersIdResponseBody200LoadBalancerAlgorithmType
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutLoadBalancersIdResponseBody200LoadBalancerAlgorithm
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "type" (putLoadBalancersIdResponseBody200LoadBalancerAlgorithmType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "type" (putLoadBalancersIdResponseBody200LoadBalancerAlgorithmType obj))
instance Data.Aeson.Types.FromJSON.FromJSON PutLoadBalancersIdResponseBody200LoadBalancerAlgorithm
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutLoadBalancersIdResponseBody200LoadBalancerAlgorithm" (\obj -> GHC.Base.pure PutLoadBalancersIdResponseBody200LoadBalancerAlgorithm GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema PutLoadBalancersIdResponseBody200Load_balancerAlgorithmType
-- 
-- Type of the algorithm
data PutLoadBalancersIdResponseBody200LoadBalancerAlgorithmType
    = PutLoadBalancersIdResponseBody200LoadBalancerAlgorithmTypeEnumOther Data.Aeson.Types.Internal.Value
    | PutLoadBalancersIdResponseBody200LoadBalancerAlgorithmTypeEnumTyped Data.Text.Internal.Text
    | PutLoadBalancersIdResponseBody200LoadBalancerAlgorithmTypeEnumStringLeastConnections
    | PutLoadBalancersIdResponseBody200LoadBalancerAlgorithmTypeEnumStringRoundRobin
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutLoadBalancersIdResponseBody200LoadBalancerAlgorithmType
    where toJSON (PutLoadBalancersIdResponseBody200LoadBalancerAlgorithmTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PutLoadBalancersIdResponseBody200LoadBalancerAlgorithmTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PutLoadBalancersIdResponseBody200LoadBalancerAlgorithmTypeEnumStringLeastConnections) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "least_connections"
          toJSON (PutLoadBalancersIdResponseBody200LoadBalancerAlgorithmTypeEnumStringRoundRobin) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "round_robin"
instance Data.Aeson.FromJSON PutLoadBalancersIdResponseBody200LoadBalancerAlgorithmType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "least_connections")
                                          then PutLoadBalancersIdResponseBody200LoadBalancerAlgorithmTypeEnumStringLeastConnections
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "round_robin")
                                                then PutLoadBalancersIdResponseBody200LoadBalancerAlgorithmTypeEnumStringRoundRobin
                                                else PutLoadBalancersIdResponseBody200LoadBalancerAlgorithmTypeEnumOther val)
-- | Defines the data type for the schema PutLoadBalancersIdResponseBody200Load_balancerLabels
-- 
-- User-defined labels (key-value pairs)
data PutLoadBalancersIdResponseBody200LoadBalancerLabels = PutLoadBalancersIdResponseBody200LoadBalancerLabels {
  
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutLoadBalancersIdResponseBody200LoadBalancerLabels
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON PutLoadBalancersIdResponseBody200LoadBalancerLabels
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutLoadBalancersIdResponseBody200LoadBalancerLabels" (\obj -> GHC.Base.pure PutLoadBalancersIdResponseBody200LoadBalancerLabels)
-- | Defines the data type for the schema PutLoadBalancersIdResponseBody200Load_balancerLoad_balancer_type
-- 
-- 
data PutLoadBalancersIdResponseBody200LoadBalancerLoadBalancerType = PutLoadBalancersIdResponseBody200LoadBalancerLoadBalancerType {
  -- | deprecated: Point in time when the Load Balancer type is deprecated (in ISO-8601 format)
  putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeDeprecated :: Data.Text.Internal.Text
  -- | description: Description of the Load Balancer type
  , putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeDescription :: Data.Text.Internal.Text
  -- | id: ID of the Load Balancer type
  , putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeId :: GHC.Types.Double
  -- | max_assigned_certificates: Number of SSL Certificates that can be assigned to a single Load Balancer
  , putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeMaxAssignedCertificates :: GHC.Types.Double
  -- | max_connections: Number of maximum simultaneous open connections
  , putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeMaxConnections :: GHC.Types.Double
  -- | max_services: Number of services a Load Balancer of this type can have
  , putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeMaxServices :: GHC.Types.Double
  -- | max_targets: Number of targets a single Load Balancer can have
  , putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeMaxTargets :: GHC.Types.Double
  -- | name: Unique identifier of the Load Balancer type
  , putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeName :: Data.Text.Internal.Text
  -- | prices: Prices in different network zones
  , putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePrices :: ([] PutLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePrices)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutLoadBalancersIdResponseBody200LoadBalancerLoadBalancerType
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "deprecated" (putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeDeprecated obj) : (Data.Aeson..=) "description" (putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeDescription obj) : (Data.Aeson..=) "id" (putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeId obj) : (Data.Aeson..=) "max_assigned_certificates" (putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeMaxAssignedCertificates obj) : (Data.Aeson..=) "max_connections" (putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeMaxConnections obj) : (Data.Aeson..=) "max_services" (putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeMaxServices obj) : (Data.Aeson..=) "max_targets" (putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeMaxTargets obj) : (Data.Aeson..=) "name" (putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeName obj) : (Data.Aeson..=) "prices" (putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePrices obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "deprecated" (putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeDeprecated obj) GHC.Base.<> ((Data.Aeson..=) "description" (putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeDescription obj) GHC.Base.<> ((Data.Aeson..=) "id" (putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeId obj) GHC.Base.<> ((Data.Aeson..=) "max_assigned_certificates" (putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeMaxAssignedCertificates obj) GHC.Base.<> ((Data.Aeson..=) "max_connections" (putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeMaxConnections obj) GHC.Base.<> ((Data.Aeson..=) "max_services" (putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeMaxServices obj) GHC.Base.<> ((Data.Aeson..=) "max_targets" (putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeMaxTargets obj) GHC.Base.<> ((Data.Aeson..=) "name" (putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeName obj) GHC.Base.<> (Data.Aeson..=) "prices" (putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePrices obj)))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PutLoadBalancersIdResponseBody200LoadBalancerLoadBalancerType
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutLoadBalancersIdResponseBody200LoadBalancerLoadBalancerType" (\obj -> ((((((((GHC.Base.pure PutLoadBalancersIdResponseBody200LoadBalancerLoadBalancerType GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "deprecated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "max_assigned_certificates")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "max_connections")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "max_services")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "max_targets")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "prices"))
-- | Defines the data type for the schema PutLoadBalancersIdResponseBody200Load_balancerLoad_balancer_typePrices
-- 
-- 
data PutLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePrices = PutLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePrices {
  -- | location: Name of the Location the price is for
  putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesLocation :: Data.Text.Internal.Text
  -- | price_hourly: Hourly costs for a Resource in this Location
  , putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceHourly :: PutLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceHourly
  -- | price_monthly: Monthly costs for a Resource in this Location
  , putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceMonthly :: PutLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceMonthly
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePrices
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "location" (putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesLocation obj) : (Data.Aeson..=) "price_hourly" (putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceHourly obj) : (Data.Aeson..=) "price_monthly" (putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceMonthly obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "location" (putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesLocation obj) GHC.Base.<> ((Data.Aeson..=) "price_hourly" (putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceHourly obj) GHC.Base.<> (Data.Aeson..=) "price_monthly" (putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceMonthly obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PutLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePrices
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePrices" (\obj -> ((GHC.Base.pure PutLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePrices GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "location")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price_hourly")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price_monthly"))
-- | Defines the data type for the schema PutLoadBalancersIdResponseBody200Load_balancerLoad_balancer_typePricesPrice_hourly
-- 
-- Hourly costs for a Resource in this Location
data PutLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceHourly = PutLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceHourly {
  -- | gross: Price with VAT added
  putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceHourlyGross :: Data.Text.Internal.Text
  -- | net: Price without VAT
  , putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceHourlyNet :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceHourly
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "gross" (putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceHourlyGross obj) : (Data.Aeson..=) "net" (putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceHourlyNet obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "gross" (putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceHourlyGross obj) GHC.Base.<> (Data.Aeson..=) "net" (putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceHourlyNet obj))
instance Data.Aeson.Types.FromJSON.FromJSON PutLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceHourly
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceHourly" (\obj -> (GHC.Base.pure PutLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceHourly GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "gross")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "net"))
-- | Defines the data type for the schema PutLoadBalancersIdResponseBody200Load_balancerLoad_balancer_typePricesPrice_monthly
-- 
-- Monthly costs for a Resource in this Location
data PutLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceMonthly = PutLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceMonthly {
  -- | gross: Price with VAT added
  putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceMonthlyGross :: Data.Text.Internal.Text
  -- | net: Price without VAT
  , putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceMonthlyNet :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceMonthly
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "gross" (putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceMonthlyGross obj) : (Data.Aeson..=) "net" (putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceMonthlyNet obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "gross" (putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceMonthlyGross obj) GHC.Base.<> (Data.Aeson..=) "net" (putLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceMonthlyNet obj))
instance Data.Aeson.Types.FromJSON.FromJSON PutLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceMonthly
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceMonthly" (\obj -> (GHC.Base.pure PutLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceMonthly GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "gross")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "net"))
-- | Defines the data type for the schema PutLoadBalancersIdResponseBody200Load_balancerLocation
-- 
-- 
data PutLoadBalancersIdResponseBody200LoadBalancerLocation = PutLoadBalancersIdResponseBody200LoadBalancerLocation {
  -- | city: City the Location is closest to
  putLoadBalancersIdResponseBody200LoadBalancerLocationCity :: Data.Text.Internal.Text
  -- | country: ISO 3166-1 alpha-2 code of the country the Location resides in
  , putLoadBalancersIdResponseBody200LoadBalancerLocationCountry :: Data.Text.Internal.Text
  -- | description: Description of the Location
  , putLoadBalancersIdResponseBody200LoadBalancerLocationDescription :: Data.Text.Internal.Text
  -- | id: ID of the Location
  , putLoadBalancersIdResponseBody200LoadBalancerLocationId :: GHC.Types.Double
  -- | latitude: Latitude of the city closest to the Location
  , putLoadBalancersIdResponseBody200LoadBalancerLocationLatitude :: GHC.Types.Double
  -- | longitude: Longitude of the city closest to the Location
  , putLoadBalancersIdResponseBody200LoadBalancerLocationLongitude :: GHC.Types.Double
  -- | name: Unique identifier of the Location
  , putLoadBalancersIdResponseBody200LoadBalancerLocationName :: Data.Text.Internal.Text
  -- | network_zone: Name of network zone this Location resides in
  , putLoadBalancersIdResponseBody200LoadBalancerLocationNetworkZone :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutLoadBalancersIdResponseBody200LoadBalancerLocation
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (putLoadBalancersIdResponseBody200LoadBalancerLocationCity obj) : (Data.Aeson..=) "country" (putLoadBalancersIdResponseBody200LoadBalancerLocationCountry obj) : (Data.Aeson..=) "description" (putLoadBalancersIdResponseBody200LoadBalancerLocationDescription obj) : (Data.Aeson..=) "id" (putLoadBalancersIdResponseBody200LoadBalancerLocationId obj) : (Data.Aeson..=) "latitude" (putLoadBalancersIdResponseBody200LoadBalancerLocationLatitude obj) : (Data.Aeson..=) "longitude" (putLoadBalancersIdResponseBody200LoadBalancerLocationLongitude obj) : (Data.Aeson..=) "name" (putLoadBalancersIdResponseBody200LoadBalancerLocationName obj) : (Data.Aeson..=) "network_zone" (putLoadBalancersIdResponseBody200LoadBalancerLocationNetworkZone obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (putLoadBalancersIdResponseBody200LoadBalancerLocationCity obj) GHC.Base.<> ((Data.Aeson..=) "country" (putLoadBalancersIdResponseBody200LoadBalancerLocationCountry obj) GHC.Base.<> ((Data.Aeson..=) "description" (putLoadBalancersIdResponseBody200LoadBalancerLocationDescription obj) GHC.Base.<> ((Data.Aeson..=) "id" (putLoadBalancersIdResponseBody200LoadBalancerLocationId obj) GHC.Base.<> ((Data.Aeson..=) "latitude" (putLoadBalancersIdResponseBody200LoadBalancerLocationLatitude obj) GHC.Base.<> ((Data.Aeson..=) "longitude" (putLoadBalancersIdResponseBody200LoadBalancerLocationLongitude obj) GHC.Base.<> ((Data.Aeson..=) "name" (putLoadBalancersIdResponseBody200LoadBalancerLocationName obj) GHC.Base.<> (Data.Aeson..=) "network_zone" (putLoadBalancersIdResponseBody200LoadBalancerLocationNetworkZone obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PutLoadBalancersIdResponseBody200LoadBalancerLocation
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutLoadBalancersIdResponseBody200LoadBalancerLocation" (\obj -> (((((((GHC.Base.pure PutLoadBalancersIdResponseBody200LoadBalancerLocation GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "latitude")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "longitude")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "network_zone"))
-- | Defines the data type for the schema PutLoadBalancersIdResponseBody200Load_balancerPrivate_net
-- 
-- 
data PutLoadBalancersIdResponseBody200LoadBalancerPrivateNet = PutLoadBalancersIdResponseBody200LoadBalancerPrivateNet {
  -- | ip
  putLoadBalancersIdResponseBody200LoadBalancerPrivateNetIp :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | network
  , putLoadBalancersIdResponseBody200LoadBalancerPrivateNetNetwork :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutLoadBalancersIdResponseBody200LoadBalancerPrivateNet
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "ip" (putLoadBalancersIdResponseBody200LoadBalancerPrivateNetIp obj) : (Data.Aeson..=) "network" (putLoadBalancersIdResponseBody200LoadBalancerPrivateNetNetwork obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "ip" (putLoadBalancersIdResponseBody200LoadBalancerPrivateNetIp obj) GHC.Base.<> (Data.Aeson..=) "network" (putLoadBalancersIdResponseBody200LoadBalancerPrivateNetNetwork obj))
instance Data.Aeson.Types.FromJSON.FromJSON PutLoadBalancersIdResponseBody200LoadBalancerPrivateNet
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutLoadBalancersIdResponseBody200LoadBalancerPrivateNet" (\obj -> (GHC.Base.pure PutLoadBalancersIdResponseBody200LoadBalancerPrivateNet GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "network"))
-- | Defines the data type for the schema PutLoadBalancersIdResponseBody200Load_balancerProtection
-- 
-- Protection configuration for the Resource
data PutLoadBalancersIdResponseBody200LoadBalancerProtection = PutLoadBalancersIdResponseBody200LoadBalancerProtection {
  -- | delete: If true, prevents the Resource from being deleted
  putLoadBalancersIdResponseBody200LoadBalancerProtectionDelete :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutLoadBalancersIdResponseBody200LoadBalancerProtection
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "delete" (putLoadBalancersIdResponseBody200LoadBalancerProtectionDelete obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "delete" (putLoadBalancersIdResponseBody200LoadBalancerProtectionDelete obj))
instance Data.Aeson.Types.FromJSON.FromJSON PutLoadBalancersIdResponseBody200LoadBalancerProtection
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutLoadBalancersIdResponseBody200LoadBalancerProtection" (\obj -> GHC.Base.pure PutLoadBalancersIdResponseBody200LoadBalancerProtection GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "delete"))
-- | Defines the data type for the schema PutLoadBalancersIdResponseBody200Load_balancerPublic_net
-- 
-- Public network information
data PutLoadBalancersIdResponseBody200LoadBalancerPublicNet = PutLoadBalancersIdResponseBody200LoadBalancerPublicNet {
  -- | enabled: Public Interface enabled or not
  putLoadBalancersIdResponseBody200LoadBalancerPublicNetEnabled :: GHC.Types.Bool
  -- | ipv4: IP address (v4)
  , putLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv4 :: PutLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv4
  -- | ipv6: IP address (v6)
  , putLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv6 :: PutLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv6
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutLoadBalancersIdResponseBody200LoadBalancerPublicNet
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "enabled" (putLoadBalancersIdResponseBody200LoadBalancerPublicNetEnabled obj) : (Data.Aeson..=) "ipv4" (putLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv4 obj) : (Data.Aeson..=) "ipv6" (putLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv6 obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "enabled" (putLoadBalancersIdResponseBody200LoadBalancerPublicNetEnabled obj) GHC.Base.<> ((Data.Aeson..=) "ipv4" (putLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv4 obj) GHC.Base.<> (Data.Aeson..=) "ipv6" (putLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv6 obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PutLoadBalancersIdResponseBody200LoadBalancerPublicNet
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutLoadBalancersIdResponseBody200LoadBalancerPublicNet" (\obj -> ((GHC.Base.pure PutLoadBalancersIdResponseBody200LoadBalancerPublicNet GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ipv4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ipv6"))
-- | Defines the data type for the schema PutLoadBalancersIdResponseBody200Load_balancerPublic_netIpv4
-- 
-- IP address (v4)
data PutLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv4 = PutLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv4 {
  -- | dns_ptr: Reverse DNS PTR entry for the IPv4 address of this Load Balancer
  putLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv4DnsPtr :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | ip: IP address (v4) of this Load Balancer
  , putLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv4Ip :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv4
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "dns_ptr" (putLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv4DnsPtr obj) : (Data.Aeson..=) "ip" (putLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv4Ip obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "dns_ptr" (putLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv4DnsPtr obj) GHC.Base.<> (Data.Aeson..=) "ip" (putLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv4Ip obj))
instance Data.Aeson.Types.FromJSON.FromJSON PutLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv4
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv4" (\obj -> (GHC.Base.pure PutLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv4 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dns_ptr")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip"))
-- | Defines the data type for the schema PutLoadBalancersIdResponseBody200Load_balancerPublic_netIpv6
-- 
-- IP address (v6)
data PutLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv6 = PutLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv6 {
  -- | dns_ptr: Reverse DNS PTR entry for the IPv6 address of this Load Balancer
  putLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv6DnsPtr :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | ip: IP address (v6) of this Load Balancer
  , putLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv6Ip :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv6
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "dns_ptr" (putLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv6DnsPtr obj) : (Data.Aeson..=) "ip" (putLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv6Ip obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "dns_ptr" (putLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv6DnsPtr obj) GHC.Base.<> (Data.Aeson..=) "ip" (putLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv6Ip obj))
instance Data.Aeson.Types.FromJSON.FromJSON PutLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv6
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv6" (\obj -> (GHC.Base.pure PutLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv6 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dns_ptr")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip"))
-- | Defines the data type for the schema PutLoadBalancersIdResponseBody200Load_balancerServices
-- 
-- 
data PutLoadBalancersIdResponseBody200LoadBalancerServices = PutLoadBalancersIdResponseBody200LoadBalancerServices {
  -- | destination_port: Port the Load Balancer will balance to
  putLoadBalancersIdResponseBody200LoadBalancerServicesDestinationPort :: GHC.Integer.Type.Integer
  -- | health_check: Service health check
  , putLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheck :: PutLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheck
  -- | http: Configuration option for protocols http and https
  , putLoadBalancersIdResponseBody200LoadBalancerServicesHttp :: (GHC.Maybe.Maybe PutLoadBalancersIdResponseBody200LoadBalancerServicesHttp)
  -- | listen_port: Port the Load Balancer listens on
  , putLoadBalancersIdResponseBody200LoadBalancerServicesListenPort :: GHC.Integer.Type.Integer
  -- | protocol: Protocol of the Load Balancer
  , putLoadBalancersIdResponseBody200LoadBalancerServicesProtocol :: PutLoadBalancersIdResponseBody200LoadBalancerServicesProtocol
  -- | proxyprotocol: Is Proxyprotocol enabled or not
  , putLoadBalancersIdResponseBody200LoadBalancerServicesProxyprotocol :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutLoadBalancersIdResponseBody200LoadBalancerServices
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "destination_port" (putLoadBalancersIdResponseBody200LoadBalancerServicesDestinationPort obj) : (Data.Aeson..=) "health_check" (putLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheck obj) : (Data.Aeson..=) "http" (putLoadBalancersIdResponseBody200LoadBalancerServicesHttp obj) : (Data.Aeson..=) "listen_port" (putLoadBalancersIdResponseBody200LoadBalancerServicesListenPort obj) : (Data.Aeson..=) "protocol" (putLoadBalancersIdResponseBody200LoadBalancerServicesProtocol obj) : (Data.Aeson..=) "proxyprotocol" (putLoadBalancersIdResponseBody200LoadBalancerServicesProxyprotocol obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "destination_port" (putLoadBalancersIdResponseBody200LoadBalancerServicesDestinationPort obj) GHC.Base.<> ((Data.Aeson..=) "health_check" (putLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheck obj) GHC.Base.<> ((Data.Aeson..=) "http" (putLoadBalancersIdResponseBody200LoadBalancerServicesHttp obj) GHC.Base.<> ((Data.Aeson..=) "listen_port" (putLoadBalancersIdResponseBody200LoadBalancerServicesListenPort obj) GHC.Base.<> ((Data.Aeson..=) "protocol" (putLoadBalancersIdResponseBody200LoadBalancerServicesProtocol obj) GHC.Base.<> (Data.Aeson..=) "proxyprotocol" (putLoadBalancersIdResponseBody200LoadBalancerServicesProxyprotocol obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON PutLoadBalancersIdResponseBody200LoadBalancerServices
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutLoadBalancersIdResponseBody200LoadBalancerServices" (\obj -> (((((GHC.Base.pure PutLoadBalancersIdResponseBody200LoadBalancerServices GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "destination_port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "health_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "http")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "listen_port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "protocol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "proxyprotocol"))
-- | Defines the data type for the schema PutLoadBalancersIdResponseBody200Load_balancerServicesHealth_check
-- 
-- Service health check
data PutLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheck = PutLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheck {
  -- | http: Additional configuration for protocol http
  putLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttp :: (GHC.Maybe.Maybe PutLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttp)
  -- | interval: Time interval in seconds health checks are performed
  , putLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckInterval :: GHC.Integer.Type.Integer
  -- | port: Port the health check will be performed on
  , putLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckPort :: GHC.Integer.Type.Integer
  -- | protocol: Type of the health check
  , putLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckProtocol :: PutLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckProtocol
  -- | retries: Unsuccessful retries needed until a target is considered unhealthy; an unhealthy target needs the same number of successful retries to become healthy again
  , putLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckRetries :: GHC.Integer.Type.Integer
  -- | timeout: Time in seconds after an attempt is considered a timeout
  , putLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckTimeout :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheck
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "http" (putLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttp obj) : (Data.Aeson..=) "interval" (putLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckInterval obj) : (Data.Aeson..=) "port" (putLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckPort obj) : (Data.Aeson..=) "protocol" (putLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckProtocol obj) : (Data.Aeson..=) "retries" (putLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckRetries obj) : (Data.Aeson..=) "timeout" (putLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckTimeout obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "http" (putLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttp obj) GHC.Base.<> ((Data.Aeson..=) "interval" (putLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckInterval obj) GHC.Base.<> ((Data.Aeson..=) "port" (putLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckPort obj) GHC.Base.<> ((Data.Aeson..=) "protocol" (putLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckProtocol obj) GHC.Base.<> ((Data.Aeson..=) "retries" (putLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckRetries obj) GHC.Base.<> (Data.Aeson..=) "timeout" (putLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckTimeout obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON PutLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheck
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheck" (\obj -> (((((GHC.Base.pure PutLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheck GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "http")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "protocol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "retries")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "timeout"))
-- | Defines the data type for the schema PutLoadBalancersIdResponseBody200Load_balancerServicesHealth_checkHttp
-- 
-- Additional configuration for protocol http
data PutLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttp = PutLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttp {
  -- | domain: Host header to send in the HTTP request. May not contain spaces, percent or backslash symbols. Can be null, in that case no host header is sent.
  putLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttpDomain :: Data.Text.Internal.Text
  -- | path: HTTP path to use for health checks
  , putLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttpPath :: Data.Text.Internal.Text
  -- | response: String that must be contained in HTTP response in order to pass the health check
  , putLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttpResponse :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | status_codes: List of returned HTTP status codes in order to pass the health check. Supports the wildcards \`?\` for exactly one character and \`*\` for multiple ones. The default is to pass the health check for any status code between 2?? and 3??.
  , putLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttpStatusCodes :: (GHC.Maybe.Maybe ([] Data.Text.Internal.Text))
  -- | tls: Use HTTPS for health check
  , putLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttpTls :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttp
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "domain" (putLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttpDomain obj) : (Data.Aeson..=) "path" (putLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttpPath obj) : (Data.Aeson..=) "response" (putLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttpResponse obj) : (Data.Aeson..=) "status_codes" (putLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttpStatusCodes obj) : (Data.Aeson..=) "tls" (putLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttpTls obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "domain" (putLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttpDomain obj) GHC.Base.<> ((Data.Aeson..=) "path" (putLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttpPath obj) GHC.Base.<> ((Data.Aeson..=) "response" (putLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttpResponse obj) GHC.Base.<> ((Data.Aeson..=) "status_codes" (putLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttpStatusCodes obj) GHC.Base.<> (Data.Aeson..=) "tls" (putLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttpTls obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON PutLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttp
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttp" (\obj -> ((((GHC.Base.pure PutLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttp GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "domain")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "path")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "response")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status_codes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tls"))
-- | Defines the enum schema PutLoadBalancersIdResponseBody200Load_balancerServicesHealth_checkProtocol
-- 
-- Type of the health check
data PutLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckProtocol
    = PutLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckProtocolEnumOther Data.Aeson.Types.Internal.Value
    | PutLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckProtocolEnumTyped Data.Text.Internal.Text
    | PutLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckProtocolEnumStringHttp
    | PutLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckProtocolEnumStringTcp
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckProtocol
    where toJSON (PutLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckProtocolEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PutLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckProtocolEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PutLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckProtocolEnumStringHttp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http"
          toJSON (PutLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckProtocolEnumStringTcp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tcp"
instance Data.Aeson.FromJSON PutLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckProtocol
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http")
                                          then PutLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckProtocolEnumStringHttp
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tcp")
                                                then PutLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckProtocolEnumStringTcp
                                                else PutLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckProtocolEnumOther val)
-- | Defines the data type for the schema PutLoadBalancersIdResponseBody200Load_balancerServicesHttp
-- 
-- Configuration option for protocols http and https
data PutLoadBalancersIdResponseBody200LoadBalancerServicesHttp = PutLoadBalancersIdResponseBody200LoadBalancerServicesHttp {
  -- | certificates: IDs of the Certificates to use for TLS\/SSL termination by the Load Balancer; empty for TLS\/SSL passthrough or if \`protocol\` is \"http\"
  putLoadBalancersIdResponseBody200LoadBalancerServicesHttpCertificates :: (GHC.Maybe.Maybe ([] GHC.Integer.Type.Integer))
  -- | cookie_lifetime: Lifetime of the cookie used for sticky sessions
  , putLoadBalancersIdResponseBody200LoadBalancerServicesHttpCookieLifetime :: GHC.Integer.Type.Integer
  -- | cookie_name: Name of the cookie used for sticky sessions
  , putLoadBalancersIdResponseBody200LoadBalancerServicesHttpCookieName :: Data.Text.Internal.Text
  -- | redirect_http: Redirect HTTP requests to HTTPS. Only available if protocol is \"https\". Default \`false\`
  , putLoadBalancersIdResponseBody200LoadBalancerServicesHttpRedirectHttp :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | sticky_sessions: Use sticky sessions. Only available if protocol is \"http\" or \"https\". Default \`false\`
  , putLoadBalancersIdResponseBody200LoadBalancerServicesHttpStickySessions :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutLoadBalancersIdResponseBody200LoadBalancerServicesHttp
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "certificates" (putLoadBalancersIdResponseBody200LoadBalancerServicesHttpCertificates obj) : (Data.Aeson..=) "cookie_lifetime" (putLoadBalancersIdResponseBody200LoadBalancerServicesHttpCookieLifetime obj) : (Data.Aeson..=) "cookie_name" (putLoadBalancersIdResponseBody200LoadBalancerServicesHttpCookieName obj) : (Data.Aeson..=) "redirect_http" (putLoadBalancersIdResponseBody200LoadBalancerServicesHttpRedirectHttp obj) : (Data.Aeson..=) "sticky_sessions" (putLoadBalancersIdResponseBody200LoadBalancerServicesHttpStickySessions obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "certificates" (putLoadBalancersIdResponseBody200LoadBalancerServicesHttpCertificates obj) GHC.Base.<> ((Data.Aeson..=) "cookie_lifetime" (putLoadBalancersIdResponseBody200LoadBalancerServicesHttpCookieLifetime obj) GHC.Base.<> ((Data.Aeson..=) "cookie_name" (putLoadBalancersIdResponseBody200LoadBalancerServicesHttpCookieName obj) GHC.Base.<> ((Data.Aeson..=) "redirect_http" (putLoadBalancersIdResponseBody200LoadBalancerServicesHttpRedirectHttp obj) GHC.Base.<> (Data.Aeson..=) "sticky_sessions" (putLoadBalancersIdResponseBody200LoadBalancerServicesHttpStickySessions obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON PutLoadBalancersIdResponseBody200LoadBalancerServicesHttp
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutLoadBalancersIdResponseBody200LoadBalancerServicesHttp" (\obj -> ((((GHC.Base.pure PutLoadBalancersIdResponseBody200LoadBalancerServicesHttp GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "certificates")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cookie_lifetime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cookie_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "redirect_http")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sticky_sessions"))
-- | Defines the enum schema PutLoadBalancersIdResponseBody200Load_balancerServicesProtocol
-- 
-- Protocol of the Load Balancer
data PutLoadBalancersIdResponseBody200LoadBalancerServicesProtocol
    = PutLoadBalancersIdResponseBody200LoadBalancerServicesProtocolEnumOther Data.Aeson.Types.Internal.Value
    | PutLoadBalancersIdResponseBody200LoadBalancerServicesProtocolEnumTyped Data.Text.Internal.Text
    | PutLoadBalancersIdResponseBody200LoadBalancerServicesProtocolEnumStringHttp
    | PutLoadBalancersIdResponseBody200LoadBalancerServicesProtocolEnumStringHttps
    | PutLoadBalancersIdResponseBody200LoadBalancerServicesProtocolEnumStringTcp
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutLoadBalancersIdResponseBody200LoadBalancerServicesProtocol
    where toJSON (PutLoadBalancersIdResponseBody200LoadBalancerServicesProtocolEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PutLoadBalancersIdResponseBody200LoadBalancerServicesProtocolEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PutLoadBalancersIdResponseBody200LoadBalancerServicesProtocolEnumStringHttp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http"
          toJSON (PutLoadBalancersIdResponseBody200LoadBalancerServicesProtocolEnumStringHttps) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "https"
          toJSON (PutLoadBalancersIdResponseBody200LoadBalancerServicesProtocolEnumStringTcp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tcp"
instance Data.Aeson.FromJSON PutLoadBalancersIdResponseBody200LoadBalancerServicesProtocol
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http")
                                          then PutLoadBalancersIdResponseBody200LoadBalancerServicesProtocolEnumStringHttp
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "https")
                                                then PutLoadBalancersIdResponseBody200LoadBalancerServicesProtocolEnumStringHttps
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tcp")
                                                      then PutLoadBalancersIdResponseBody200LoadBalancerServicesProtocolEnumStringTcp
                                                      else PutLoadBalancersIdResponseBody200LoadBalancerServicesProtocolEnumOther val)
-- | Defines the data type for the schema PutLoadBalancersIdResponseBody200Load_balancerTargets
-- 
-- 
data PutLoadBalancersIdResponseBody200LoadBalancerTargets = PutLoadBalancersIdResponseBody200LoadBalancerTargets {
  -- | health_status: List of health statuses of the services on this target
  putLoadBalancersIdResponseBody200LoadBalancerTargetsHealthStatus :: (GHC.Maybe.Maybe ([] PutLoadBalancersIdResponseBody200LoadBalancerTargetsHealthStatus))
  -- | ip: IP targets where the traffic should be routed through. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well.
  , putLoadBalancersIdResponseBody200LoadBalancerTargetsIp :: (GHC.Maybe.Maybe PutLoadBalancersIdResponseBody200LoadBalancerTargetsIp)
  -- | label_selector: Label selector and a list of selected targets
  , putLoadBalancersIdResponseBody200LoadBalancerTargetsLabelSelector :: (GHC.Maybe.Maybe PutLoadBalancersIdResponseBody200LoadBalancerTargetsLabelSelector)
  -- | server: Server where the traffic should be routed through
  , putLoadBalancersIdResponseBody200LoadBalancerTargetsServer :: (GHC.Maybe.Maybe PutLoadBalancersIdResponseBody200LoadBalancerTargetsServer)
  -- | targets: List of selected targets
  , putLoadBalancersIdResponseBody200LoadBalancerTargetsTargets :: (GHC.Maybe.Maybe ([] PutLoadBalancersIdResponseBody200LoadBalancerTargetsTargets))
  -- | type: Type of the resource
  , putLoadBalancersIdResponseBody200LoadBalancerTargetsType :: PutLoadBalancersIdResponseBody200LoadBalancerTargetsType
  -- | use_private_ip: Use the private network IP instead of the public IP. Default value is false.
  , putLoadBalancersIdResponseBody200LoadBalancerTargetsUsePrivateIp :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutLoadBalancersIdResponseBody200LoadBalancerTargets
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "health_status" (putLoadBalancersIdResponseBody200LoadBalancerTargetsHealthStatus obj) : (Data.Aeson..=) "ip" (putLoadBalancersIdResponseBody200LoadBalancerTargetsIp obj) : (Data.Aeson..=) "label_selector" (putLoadBalancersIdResponseBody200LoadBalancerTargetsLabelSelector obj) : (Data.Aeson..=) "server" (putLoadBalancersIdResponseBody200LoadBalancerTargetsServer obj) : (Data.Aeson..=) "targets" (putLoadBalancersIdResponseBody200LoadBalancerTargetsTargets obj) : (Data.Aeson..=) "type" (putLoadBalancersIdResponseBody200LoadBalancerTargetsType obj) : (Data.Aeson..=) "use_private_ip" (putLoadBalancersIdResponseBody200LoadBalancerTargetsUsePrivateIp obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "health_status" (putLoadBalancersIdResponseBody200LoadBalancerTargetsHealthStatus obj) GHC.Base.<> ((Data.Aeson..=) "ip" (putLoadBalancersIdResponseBody200LoadBalancerTargetsIp obj) GHC.Base.<> ((Data.Aeson..=) "label_selector" (putLoadBalancersIdResponseBody200LoadBalancerTargetsLabelSelector obj) GHC.Base.<> ((Data.Aeson..=) "server" (putLoadBalancersIdResponseBody200LoadBalancerTargetsServer obj) GHC.Base.<> ((Data.Aeson..=) "targets" (putLoadBalancersIdResponseBody200LoadBalancerTargetsTargets obj) GHC.Base.<> ((Data.Aeson..=) "type" (putLoadBalancersIdResponseBody200LoadBalancerTargetsType obj) GHC.Base.<> (Data.Aeson..=) "use_private_ip" (putLoadBalancersIdResponseBody200LoadBalancerTargetsUsePrivateIp obj)))))))
instance Data.Aeson.Types.FromJSON.FromJSON PutLoadBalancersIdResponseBody200LoadBalancerTargets
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutLoadBalancersIdResponseBody200LoadBalancerTargets" (\obj -> ((((((GHC.Base.pure PutLoadBalancersIdResponseBody200LoadBalancerTargets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "health_status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label_selector")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "server")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "targets")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "use_private_ip"))
-- | Defines the data type for the schema PutLoadBalancersIdResponseBody200Load_balancerTargetsHealth_status
-- 
-- 
data PutLoadBalancersIdResponseBody200LoadBalancerTargetsHealthStatus = PutLoadBalancersIdResponseBody200LoadBalancerTargetsHealthStatus {
  -- | listen_port
  putLoadBalancersIdResponseBody200LoadBalancerTargetsHealthStatusListenPort :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | status
  , putLoadBalancersIdResponseBody200LoadBalancerTargetsHealthStatusStatus :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutLoadBalancersIdResponseBody200LoadBalancerTargetsHealthStatus
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "listen_port" (putLoadBalancersIdResponseBody200LoadBalancerTargetsHealthStatusListenPort obj) : (Data.Aeson..=) "status" (putLoadBalancersIdResponseBody200LoadBalancerTargetsHealthStatusStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "listen_port" (putLoadBalancersIdResponseBody200LoadBalancerTargetsHealthStatusListenPort obj) GHC.Base.<> (Data.Aeson..=) "status" (putLoadBalancersIdResponseBody200LoadBalancerTargetsHealthStatusStatus obj))
instance Data.Aeson.Types.FromJSON.FromJSON PutLoadBalancersIdResponseBody200LoadBalancerTargetsHealthStatus
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutLoadBalancersIdResponseBody200LoadBalancerTargetsHealthStatus" (\obj -> (GHC.Base.pure PutLoadBalancersIdResponseBody200LoadBalancerTargetsHealthStatus GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "listen_port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status"))
-- | Defines the data type for the schema PutLoadBalancersIdResponseBody200Load_balancerTargetsIp
-- 
-- IP targets where the traffic should be routed through. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well.
data PutLoadBalancersIdResponseBody200LoadBalancerTargetsIp = PutLoadBalancersIdResponseBody200LoadBalancerTargetsIp {
  -- | ip: IP of a server that belongs to the same customer (public IPv4\/IPv6) or private IP in a Subnetwork type vswitch.
  putLoadBalancersIdResponseBody200LoadBalancerTargetsIpIp :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutLoadBalancersIdResponseBody200LoadBalancerTargetsIp
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "ip" (putLoadBalancersIdResponseBody200LoadBalancerTargetsIpIp obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "ip" (putLoadBalancersIdResponseBody200LoadBalancerTargetsIpIp obj))
instance Data.Aeson.Types.FromJSON.FromJSON PutLoadBalancersIdResponseBody200LoadBalancerTargetsIp
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutLoadBalancersIdResponseBody200LoadBalancerTargetsIp" (\obj -> GHC.Base.pure PutLoadBalancersIdResponseBody200LoadBalancerTargetsIp GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ip"))
-- | Defines the data type for the schema PutLoadBalancersIdResponseBody200Load_balancerTargetsLabel_selector
-- 
-- Label selector and a list of selected targets
data PutLoadBalancersIdResponseBody200LoadBalancerTargetsLabelSelector = PutLoadBalancersIdResponseBody200LoadBalancerTargetsLabelSelector {
  -- | selector: Label selector
  putLoadBalancersIdResponseBody200LoadBalancerTargetsLabelSelectorSelector :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutLoadBalancersIdResponseBody200LoadBalancerTargetsLabelSelector
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "selector" (putLoadBalancersIdResponseBody200LoadBalancerTargetsLabelSelectorSelector obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "selector" (putLoadBalancersIdResponseBody200LoadBalancerTargetsLabelSelectorSelector obj))
instance Data.Aeson.Types.FromJSON.FromJSON PutLoadBalancersIdResponseBody200LoadBalancerTargetsLabelSelector
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutLoadBalancersIdResponseBody200LoadBalancerTargetsLabelSelector" (\obj -> GHC.Base.pure PutLoadBalancersIdResponseBody200LoadBalancerTargetsLabelSelector GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "selector"))
-- | Defines the data type for the schema PutLoadBalancersIdResponseBody200Load_balancerTargetsServer
-- 
-- Server where the traffic should be routed through
data PutLoadBalancersIdResponseBody200LoadBalancerTargetsServer = PutLoadBalancersIdResponseBody200LoadBalancerTargetsServer {
  -- | id: ID of the Server
  putLoadBalancersIdResponseBody200LoadBalancerTargetsServerId :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutLoadBalancersIdResponseBody200LoadBalancerTargetsServer
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (putLoadBalancersIdResponseBody200LoadBalancerTargetsServerId obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (putLoadBalancersIdResponseBody200LoadBalancerTargetsServerId obj))
instance Data.Aeson.Types.FromJSON.FromJSON PutLoadBalancersIdResponseBody200LoadBalancerTargetsServer
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutLoadBalancersIdResponseBody200LoadBalancerTargetsServer" (\obj -> GHC.Base.pure PutLoadBalancersIdResponseBody200LoadBalancerTargetsServer GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id"))
-- | Defines the data type for the schema PutLoadBalancersIdResponseBody200Load_balancerTargetsTargets
-- 
-- 
data PutLoadBalancersIdResponseBody200LoadBalancerTargetsTargets = PutLoadBalancersIdResponseBody200LoadBalancerTargetsTargets {
  -- | health_status
  putLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsHealthStatus :: (GHC.Maybe.Maybe ([] PutLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsHealthStatus))
  -- | server
  , putLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsServer :: (GHC.Maybe.Maybe PutLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsServer)
  -- | type
  , putLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsType :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | use_private_ip
  , putLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsUsePrivateIp :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutLoadBalancersIdResponseBody200LoadBalancerTargetsTargets
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "health_status" (putLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsHealthStatus obj) : (Data.Aeson..=) "server" (putLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsServer obj) : (Data.Aeson..=) "type" (putLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsType obj) : (Data.Aeson..=) "use_private_ip" (putLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsUsePrivateIp obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "health_status" (putLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsHealthStatus obj) GHC.Base.<> ((Data.Aeson..=) "server" (putLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsServer obj) GHC.Base.<> ((Data.Aeson..=) "type" (putLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsType obj) GHC.Base.<> (Data.Aeson..=) "use_private_ip" (putLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsUsePrivateIp obj))))
instance Data.Aeson.Types.FromJSON.FromJSON PutLoadBalancersIdResponseBody200LoadBalancerTargetsTargets
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutLoadBalancersIdResponseBody200LoadBalancerTargetsTargets" (\obj -> (((GHC.Base.pure PutLoadBalancersIdResponseBody200LoadBalancerTargetsTargets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "health_status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "server")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "use_private_ip"))
-- | Defines the data type for the schema PutLoadBalancersIdResponseBody200Load_balancerTargetsTargetsHealth_status
-- 
-- 
data PutLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsHealthStatus = PutLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsHealthStatus {
  -- | listen_port
  putLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsHealthStatusListenPort :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | status
  , putLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsHealthStatusStatus :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsHealthStatus
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "listen_port" (putLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsHealthStatusListenPort obj) : (Data.Aeson..=) "status" (putLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsHealthStatusStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "listen_port" (putLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsHealthStatusListenPort obj) GHC.Base.<> (Data.Aeson..=) "status" (putLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsHealthStatusStatus obj))
instance Data.Aeson.Types.FromJSON.FromJSON PutLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsHealthStatus
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsHealthStatus" (\obj -> (GHC.Base.pure PutLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsHealthStatus GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "listen_port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status"))
-- | Defines the data type for the schema PutLoadBalancersIdResponseBody200Load_balancerTargetsTargetsServer
-- 
-- 
data PutLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsServer = PutLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsServer {
  -- | id: ID of the Server
  putLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsServerId :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsServer
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (putLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsServerId obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (putLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsServerId obj))
instance Data.Aeson.Types.FromJSON.FromJSON PutLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsServer
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsServer" (\obj -> GHC.Base.pure PutLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsServer GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id"))
-- | Defines the enum schema PutLoadBalancersIdResponseBody200Load_balancerTargetsType
-- 
-- Type of the resource
data PutLoadBalancersIdResponseBody200LoadBalancerTargetsType
    = PutLoadBalancersIdResponseBody200LoadBalancerTargetsTypeEnumOther Data.Aeson.Types.Internal.Value
    | PutLoadBalancersIdResponseBody200LoadBalancerTargetsTypeEnumTyped Data.Text.Internal.Text
    | PutLoadBalancersIdResponseBody200LoadBalancerTargetsTypeEnumStringIp
    | PutLoadBalancersIdResponseBody200LoadBalancerTargetsTypeEnumStringLabelSelector
    | PutLoadBalancersIdResponseBody200LoadBalancerTargetsTypeEnumStringServer
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutLoadBalancersIdResponseBody200LoadBalancerTargetsType
    where toJSON (PutLoadBalancersIdResponseBody200LoadBalancerTargetsTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PutLoadBalancersIdResponseBody200LoadBalancerTargetsTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PutLoadBalancersIdResponseBody200LoadBalancerTargetsTypeEnumStringIp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ip"
          toJSON (PutLoadBalancersIdResponseBody200LoadBalancerTargetsTypeEnumStringLabelSelector) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "label_selector"
          toJSON (PutLoadBalancersIdResponseBody200LoadBalancerTargetsTypeEnumStringServer) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "server"
instance Data.Aeson.FromJSON PutLoadBalancersIdResponseBody200LoadBalancerTargetsType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ip")
                                          then PutLoadBalancersIdResponseBody200LoadBalancerTargetsTypeEnumStringIp
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "label_selector")
                                                then PutLoadBalancersIdResponseBody200LoadBalancerTargetsTypeEnumStringLabelSelector
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "server")
                                                      then PutLoadBalancersIdResponseBody200LoadBalancerTargetsTypeEnumStringServer
                                                      else PutLoadBalancersIdResponseBody200LoadBalancerTargetsTypeEnumOther val)
