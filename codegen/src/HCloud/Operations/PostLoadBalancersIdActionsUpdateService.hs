-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation postLoadBalancers_Id_ActionsUpdateService
module HCloud.Operations.PostLoadBalancersIdActionsUpdateService where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > POST /load_balancers/{id}/actions/update_service
-- 
-- Updates a Load Balancer Service.
-- 
-- \#\#\#\# Call specific error codes
-- 
-- | Code                       | Description                                             |
-- |----------------------------|---------------------------------------------------------|
-- | \`source_port_already_used\` | The source port you are trying to add is already in use |
postLoadBalancers_Id_ActionsUpdateService :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer                                                                                                                              -- ^ id: ID of the Load Balancer
  -> GHC.Maybe.Maybe PostLoadBalancersIdActionsUpdateServiceRequestBody                                                                                    -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response PostLoadBalancersIdActionsUpdateServiceResponse))   -- ^ Monad containing the result of the operation
postLoadBalancers_Id_ActionsUpdateService config
                                          id
                                          body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostLoadBalancersIdActionsUpdateServiceResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostLoadBalancersIdActionsUpdateServiceResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         PostLoadBalancersIdActionsUpdateServiceResponseBody201)
                                                                                                                                                                                                                                  | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/load_balancers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/update_service"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /load_balancers/{id}/actions/update_service
-- 
-- The same as 'postLoadBalancers_Id_ActionsUpdateService' but returns the raw 'Data.ByteString.Char8.ByteString'
postLoadBalancers_Id_ActionsUpdateServiceRaw :: forall m s . (HCloud.Common.MonadHTTP m,
                                                              HCloud.Common.SecurityScheme s) =>
                                                HCloud.Common.Configuration s ->
                                                GHC.Integer.Type.Integer ->
                                                GHC.Maybe.Maybe PostLoadBalancersIdActionsUpdateServiceRequestBody ->
                                                m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                      (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postLoadBalancers_Id_ActionsUpdateServiceRaw config
                                             id
                                             body = GHC.Base.id (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/load_balancers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/update_service"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /load_balancers/{id}/actions/update_service
-- 
-- Monadic version of 'postLoadBalancers_Id_ActionsUpdateService' (use with 'HCloud.Common.runWithConfiguration')
postLoadBalancers_Id_ActionsUpdateServiceM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                            HCloud.Common.SecurityScheme s) =>
                                              GHC.Integer.Type.Integer ->
                                              GHC.Maybe.Maybe PostLoadBalancersIdActionsUpdateServiceRequestBody ->
                                              Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                                 m
                                                                                 (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                                     (Network.HTTP.Client.Types.Response PostLoadBalancersIdActionsUpdateServiceResponse))
postLoadBalancers_Id_ActionsUpdateServiceM id
                                           body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostLoadBalancersIdActionsUpdateServiceResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostLoadBalancersIdActionsUpdateServiceResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          PostLoadBalancersIdActionsUpdateServiceResponseBody201)
                                                                                                                                                                                                                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/load_balancers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/update_service"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /load_balancers/{id}/actions/update_service
-- 
-- Monadic version of 'postLoadBalancers_Id_ActionsUpdateServiceRaw' (use with 'HCloud.Common.runWithConfiguration')
postLoadBalancers_Id_ActionsUpdateServiceRawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                               HCloud.Common.SecurityScheme s) =>
                                                 GHC.Integer.Type.Integer ->
                                                 GHC.Maybe.Maybe PostLoadBalancersIdActionsUpdateServiceRequestBody ->
                                                 Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                                    m
                                                                                    (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                                        (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postLoadBalancers_Id_ActionsUpdateServiceRawM id
                                              body = GHC.Base.id (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/load_balancers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/update_service"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema postLoadBalancers_Id_ActionsUpdateServiceRequestBody
-- 
-- 
data PostLoadBalancersIdActionsUpdateServiceRequestBody = PostLoadBalancersIdActionsUpdateServiceRequestBody {
  -- | destination_port: Port the Load Balancer will balance to
  postLoadBalancersIdActionsUpdateServiceRequestBodyDestinationPort :: GHC.Integer.Type.Integer
  -- | health_check: Service health check
  , postLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheck :: PostLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheck
  -- | http: Configuration option for protocols http and https
  , postLoadBalancersIdActionsUpdateServiceRequestBodyHttp :: (GHC.Maybe.Maybe PostLoadBalancersIdActionsUpdateServiceRequestBodyHttp)
  -- | listen_port: Port the Load Balancer listens on
  , postLoadBalancersIdActionsUpdateServiceRequestBodyListenPort :: GHC.Integer.Type.Integer
  -- | protocol: Protocol of the Load Balancer
  , postLoadBalancersIdActionsUpdateServiceRequestBodyProtocol :: PostLoadBalancersIdActionsUpdateServiceRequestBodyProtocol
  -- | proxyprotocol: Is Proxyprotocol enabled or not
  , postLoadBalancersIdActionsUpdateServiceRequestBodyProxyprotocol :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersIdActionsUpdateServiceRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "destination_port" (postLoadBalancersIdActionsUpdateServiceRequestBodyDestinationPort obj) : (Data.Aeson..=) "health_check" (postLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheck obj) : (Data.Aeson..=) "http" (postLoadBalancersIdActionsUpdateServiceRequestBodyHttp obj) : (Data.Aeson..=) "listen_port" (postLoadBalancersIdActionsUpdateServiceRequestBodyListenPort obj) : (Data.Aeson..=) "protocol" (postLoadBalancersIdActionsUpdateServiceRequestBodyProtocol obj) : (Data.Aeson..=) "proxyprotocol" (postLoadBalancersIdActionsUpdateServiceRequestBodyProxyprotocol obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "destination_port" (postLoadBalancersIdActionsUpdateServiceRequestBodyDestinationPort obj) GHC.Base.<> ((Data.Aeson..=) "health_check" (postLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheck obj) GHC.Base.<> ((Data.Aeson..=) "http" (postLoadBalancersIdActionsUpdateServiceRequestBodyHttp obj) GHC.Base.<> ((Data.Aeson..=) "listen_port" (postLoadBalancersIdActionsUpdateServiceRequestBodyListenPort obj) GHC.Base.<> ((Data.Aeson..=) "protocol" (postLoadBalancersIdActionsUpdateServiceRequestBodyProtocol obj) GHC.Base.<> (Data.Aeson..=) "proxyprotocol" (postLoadBalancersIdActionsUpdateServiceRequestBodyProxyprotocol obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersIdActionsUpdateServiceRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersIdActionsUpdateServiceRequestBody" (\obj -> (((((GHC.Base.pure PostLoadBalancersIdActionsUpdateServiceRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "destination_port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "health_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "http")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "listen_port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "protocol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "proxyprotocol"))
-- | Defines the data type for the schema postLoadBalancers_Id_ActionsUpdateServiceRequestBodyHealth_check
-- 
-- Service health check
data PostLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheck = PostLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheck {
  -- | http: Additional configuration for protocol http
  postLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckHttp :: (GHC.Maybe.Maybe PostLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckHttp)
  -- | interval: Time interval in seconds health checks are performed
  , postLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckInterval :: GHC.Integer.Type.Integer
  -- | port: Port the health check will be performed on
  , postLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckPort :: GHC.Integer.Type.Integer
  -- | protocol: Type of the health check
  , postLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckProtocol :: PostLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckProtocol
  -- | retries: Unsuccessful retries needed until a target is considered unhealthy; an unhealthy target needs the same number of successful retries to become healthy again
  , postLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckRetries :: GHC.Integer.Type.Integer
  -- | timeout: Time in seconds after an attempt is considered a timeout
  , postLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckTimeout :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheck
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "http" (postLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckHttp obj) : (Data.Aeson..=) "interval" (postLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckInterval obj) : (Data.Aeson..=) "port" (postLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckPort obj) : (Data.Aeson..=) "protocol" (postLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckProtocol obj) : (Data.Aeson..=) "retries" (postLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckRetries obj) : (Data.Aeson..=) "timeout" (postLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckTimeout obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "http" (postLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckHttp obj) GHC.Base.<> ((Data.Aeson..=) "interval" (postLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckInterval obj) GHC.Base.<> ((Data.Aeson..=) "port" (postLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckPort obj) GHC.Base.<> ((Data.Aeson..=) "protocol" (postLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckProtocol obj) GHC.Base.<> ((Data.Aeson..=) "retries" (postLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckRetries obj) GHC.Base.<> (Data.Aeson..=) "timeout" (postLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckTimeout obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheck
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheck" (\obj -> (((((GHC.Base.pure PostLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheck GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "http")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "protocol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "retries")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "timeout"))
-- | Defines the data type for the schema postLoadBalancers_Id_ActionsUpdateServiceRequestBodyHealth_checkHttp
-- 
-- Additional configuration for protocol http
data PostLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckHttp = PostLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckHttp {
  -- | domain: Host header to send in the HTTP request. May not contain spaces, percent or backslash symbols. Can be null, in that case no host header is sent.
  postLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckHttpDomain :: Data.Text.Internal.Text
  -- | path: HTTP path to use for health checks
  , postLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckHttpPath :: Data.Text.Internal.Text
  -- | response: String that must be contained in HTTP response in order to pass the health check
  , postLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckHttpResponse :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | status_codes: List of returned HTTP status codes in order to pass the health check. Supports the wildcards \`?\` for exactly one character and \`*\` for multiple ones. The default is to pass the health check for any status code between 2?? and 3??.
  , postLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckHttpStatusCodes :: (GHC.Maybe.Maybe ([] Data.Text.Internal.Text))
  -- | tls: Use HTTPS for health check
  , postLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckHttpTls :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckHttp
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "domain" (postLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckHttpDomain obj) : (Data.Aeson..=) "path" (postLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckHttpPath obj) : (Data.Aeson..=) "response" (postLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckHttpResponse obj) : (Data.Aeson..=) "status_codes" (postLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckHttpStatusCodes obj) : (Data.Aeson..=) "tls" (postLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckHttpTls obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "domain" (postLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckHttpDomain obj) GHC.Base.<> ((Data.Aeson..=) "path" (postLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckHttpPath obj) GHC.Base.<> ((Data.Aeson..=) "response" (postLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckHttpResponse obj) GHC.Base.<> ((Data.Aeson..=) "status_codes" (postLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckHttpStatusCodes obj) GHC.Base.<> (Data.Aeson..=) "tls" (postLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckHttpTls obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckHttp
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckHttp" (\obj -> ((((GHC.Base.pure PostLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckHttp GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "domain")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "path")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "response")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status_codes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tls"))
-- | Defines the enum schema postLoadBalancers_Id_ActionsUpdateServiceRequestBodyHealth_checkProtocol
-- 
-- Type of the health check
data PostLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckProtocol
    = PostLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckProtocolEnumOther Data.Aeson.Types.Internal.Value
    | PostLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckProtocolEnumTyped Data.Text.Internal.Text
    | PostLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckProtocolEnumStringHttp
    | PostLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckProtocolEnumStringTcp
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckProtocol
    where toJSON (PostLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckProtocolEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckProtocolEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckProtocolEnumStringHttp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http"
          toJSON (PostLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckProtocolEnumStringTcp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tcp"
instance Data.Aeson.FromJSON PostLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckProtocol
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http")
                                          then PostLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckProtocolEnumStringHttp
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tcp")
                                                then PostLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckProtocolEnumStringTcp
                                                else PostLoadBalancersIdActionsUpdateServiceRequestBodyHealthCheckProtocolEnumOther val)
-- | Defines the data type for the schema postLoadBalancers_Id_ActionsUpdateServiceRequestBodyHttp
-- 
-- Configuration option for protocols http and https
data PostLoadBalancersIdActionsUpdateServiceRequestBodyHttp = PostLoadBalancersIdActionsUpdateServiceRequestBodyHttp {
  -- | certificates: IDs of the Certificates to use for TLS\/SSL termination by the Load Balancer; empty for TLS\/SSL passthrough or if \`protocol\` is \"http\"
  postLoadBalancersIdActionsUpdateServiceRequestBodyHttpCertificates :: (GHC.Maybe.Maybe ([] GHC.Integer.Type.Integer))
  -- | cookie_lifetime: Lifetime of the cookie used for sticky sessions
  , postLoadBalancersIdActionsUpdateServiceRequestBodyHttpCookieLifetime :: GHC.Integer.Type.Integer
  -- | cookie_name: Name of the cookie used for sticky sessions
  , postLoadBalancersIdActionsUpdateServiceRequestBodyHttpCookieName :: Data.Text.Internal.Text
  -- | redirect_http: Redirect HTTP requests to HTTPS. Only available if protocol is \"https\". Default \`false\`
  , postLoadBalancersIdActionsUpdateServiceRequestBodyHttpRedirectHttp :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | sticky_sessions: Use sticky sessions. Only available if protocol is \"http\" or \"https\". Default \`false\`
  , postLoadBalancersIdActionsUpdateServiceRequestBodyHttpStickySessions :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersIdActionsUpdateServiceRequestBodyHttp
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "certificates" (postLoadBalancersIdActionsUpdateServiceRequestBodyHttpCertificates obj) : (Data.Aeson..=) "cookie_lifetime" (postLoadBalancersIdActionsUpdateServiceRequestBodyHttpCookieLifetime obj) : (Data.Aeson..=) "cookie_name" (postLoadBalancersIdActionsUpdateServiceRequestBodyHttpCookieName obj) : (Data.Aeson..=) "redirect_http" (postLoadBalancersIdActionsUpdateServiceRequestBodyHttpRedirectHttp obj) : (Data.Aeson..=) "sticky_sessions" (postLoadBalancersIdActionsUpdateServiceRequestBodyHttpStickySessions obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "certificates" (postLoadBalancersIdActionsUpdateServiceRequestBodyHttpCertificates obj) GHC.Base.<> ((Data.Aeson..=) "cookie_lifetime" (postLoadBalancersIdActionsUpdateServiceRequestBodyHttpCookieLifetime obj) GHC.Base.<> ((Data.Aeson..=) "cookie_name" (postLoadBalancersIdActionsUpdateServiceRequestBodyHttpCookieName obj) GHC.Base.<> ((Data.Aeson..=) "redirect_http" (postLoadBalancersIdActionsUpdateServiceRequestBodyHttpRedirectHttp obj) GHC.Base.<> (Data.Aeson..=) "sticky_sessions" (postLoadBalancersIdActionsUpdateServiceRequestBodyHttpStickySessions obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersIdActionsUpdateServiceRequestBodyHttp
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersIdActionsUpdateServiceRequestBodyHttp" (\obj -> ((((GHC.Base.pure PostLoadBalancersIdActionsUpdateServiceRequestBodyHttp GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "certificates")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cookie_lifetime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cookie_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "redirect_http")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sticky_sessions"))
-- | Defines the enum schema postLoadBalancers_Id_ActionsUpdateServiceRequestBodyProtocol
-- 
-- Protocol of the Load Balancer
data PostLoadBalancersIdActionsUpdateServiceRequestBodyProtocol
    = PostLoadBalancersIdActionsUpdateServiceRequestBodyProtocolEnumOther Data.Aeson.Types.Internal.Value
    | PostLoadBalancersIdActionsUpdateServiceRequestBodyProtocolEnumTyped Data.Text.Internal.Text
    | PostLoadBalancersIdActionsUpdateServiceRequestBodyProtocolEnumStringHttp
    | PostLoadBalancersIdActionsUpdateServiceRequestBodyProtocolEnumStringHttps
    | PostLoadBalancersIdActionsUpdateServiceRequestBodyProtocolEnumStringTcp
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersIdActionsUpdateServiceRequestBodyProtocol
    where toJSON (PostLoadBalancersIdActionsUpdateServiceRequestBodyProtocolEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostLoadBalancersIdActionsUpdateServiceRequestBodyProtocolEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostLoadBalancersIdActionsUpdateServiceRequestBodyProtocolEnumStringHttp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http"
          toJSON (PostLoadBalancersIdActionsUpdateServiceRequestBodyProtocolEnumStringHttps) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "https"
          toJSON (PostLoadBalancersIdActionsUpdateServiceRequestBodyProtocolEnumStringTcp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tcp"
instance Data.Aeson.FromJSON PostLoadBalancersIdActionsUpdateServiceRequestBodyProtocol
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http")
                                          then PostLoadBalancersIdActionsUpdateServiceRequestBodyProtocolEnumStringHttp
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "https")
                                                then PostLoadBalancersIdActionsUpdateServiceRequestBodyProtocolEnumStringHttps
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tcp")
                                                      then PostLoadBalancersIdActionsUpdateServiceRequestBodyProtocolEnumStringTcp
                                                      else PostLoadBalancersIdActionsUpdateServiceRequestBodyProtocolEnumOther val)
-- | Represents a response of the operation 'postLoadBalancers_Id_ActionsUpdateService'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostLoadBalancersIdActionsUpdateServiceResponseError' is used.
data PostLoadBalancersIdActionsUpdateServiceResponse =                                                         
   PostLoadBalancersIdActionsUpdateServiceResponseError GHC.Base.String                                        -- ^ Means either no matching case available or a parse error
  | PostLoadBalancersIdActionsUpdateServiceResponse201 PostLoadBalancersIdActionsUpdateServiceResponseBody201  -- ^ The \`action\` key contains the \`update_service\` Action
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema PostLoadBalancersIdActionsUpdateServiceResponseBody201
-- 
-- 
data PostLoadBalancersIdActionsUpdateServiceResponseBody201 = PostLoadBalancersIdActionsUpdateServiceResponseBody201 {
  -- | action
  postLoadBalancersIdActionsUpdateServiceResponseBody201Action :: PostLoadBalancersIdActionsUpdateServiceResponseBody201Action
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersIdActionsUpdateServiceResponseBody201
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "action" (postLoadBalancersIdActionsUpdateServiceResponseBody201Action obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "action" (postLoadBalancersIdActionsUpdateServiceResponseBody201Action obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersIdActionsUpdateServiceResponseBody201
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersIdActionsUpdateServiceResponseBody201" (\obj -> GHC.Base.pure PostLoadBalancersIdActionsUpdateServiceResponseBody201 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "action"))
-- | Defines the data type for the schema PostLoadBalancersIdActionsUpdateServiceResponseBody201Action
-- 
-- 
data PostLoadBalancersIdActionsUpdateServiceResponseBody201Action = PostLoadBalancersIdActionsUpdateServiceResponseBody201Action {
  -- | command: Command executed in the Action
  postLoadBalancersIdActionsUpdateServiceResponseBody201ActionCommand :: Data.Text.Internal.Text
  -- | error: Error message for the Action if error occurred, otherwise null
  , postLoadBalancersIdActionsUpdateServiceResponseBody201ActionError :: PostLoadBalancersIdActionsUpdateServiceResponseBody201ActionError
  -- | finished: Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
  , postLoadBalancersIdActionsUpdateServiceResponseBody201ActionFinished :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , postLoadBalancersIdActionsUpdateServiceResponseBody201ActionId :: GHC.Integer.Type.Integer
  -- | progress: Progress of Action in percent
  , postLoadBalancersIdActionsUpdateServiceResponseBody201ActionProgress :: GHC.Types.Double
  -- | resources: Resources the Action relates to
  , postLoadBalancersIdActionsUpdateServiceResponseBody201ActionResources :: ([] PostLoadBalancersIdActionsUpdateServiceResponseBody201ActionResources)
  -- | started: Point in time when the Action was started (in ISO-8601 format)
  , postLoadBalancersIdActionsUpdateServiceResponseBody201ActionStarted :: Data.Text.Internal.Text
  -- | status: Status of the Action
  , postLoadBalancersIdActionsUpdateServiceResponseBody201ActionStatus :: PostLoadBalancersIdActionsUpdateServiceResponseBody201ActionStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersIdActionsUpdateServiceResponseBody201Action
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "command" (postLoadBalancersIdActionsUpdateServiceResponseBody201ActionCommand obj) : (Data.Aeson..=) "error" (postLoadBalancersIdActionsUpdateServiceResponseBody201ActionError obj) : (Data.Aeson..=) "finished" (postLoadBalancersIdActionsUpdateServiceResponseBody201ActionFinished obj) : (Data.Aeson..=) "id" (postLoadBalancersIdActionsUpdateServiceResponseBody201ActionId obj) : (Data.Aeson..=) "progress" (postLoadBalancersIdActionsUpdateServiceResponseBody201ActionProgress obj) : (Data.Aeson..=) "resources" (postLoadBalancersIdActionsUpdateServiceResponseBody201ActionResources obj) : (Data.Aeson..=) "started" (postLoadBalancersIdActionsUpdateServiceResponseBody201ActionStarted obj) : (Data.Aeson..=) "status" (postLoadBalancersIdActionsUpdateServiceResponseBody201ActionStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "command" (postLoadBalancersIdActionsUpdateServiceResponseBody201ActionCommand obj) GHC.Base.<> ((Data.Aeson..=) "error" (postLoadBalancersIdActionsUpdateServiceResponseBody201ActionError obj) GHC.Base.<> ((Data.Aeson..=) "finished" (postLoadBalancersIdActionsUpdateServiceResponseBody201ActionFinished obj) GHC.Base.<> ((Data.Aeson..=) "id" (postLoadBalancersIdActionsUpdateServiceResponseBody201ActionId obj) GHC.Base.<> ((Data.Aeson..=) "progress" (postLoadBalancersIdActionsUpdateServiceResponseBody201ActionProgress obj) GHC.Base.<> ((Data.Aeson..=) "resources" (postLoadBalancersIdActionsUpdateServiceResponseBody201ActionResources obj) GHC.Base.<> ((Data.Aeson..=) "started" (postLoadBalancersIdActionsUpdateServiceResponseBody201ActionStarted obj) GHC.Base.<> (Data.Aeson..=) "status" (postLoadBalancersIdActionsUpdateServiceResponseBody201ActionStatus obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersIdActionsUpdateServiceResponseBody201Action
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersIdActionsUpdateServiceResponseBody201Action" (\obj -> (((((((GHC.Base.pure PostLoadBalancersIdActionsUpdateServiceResponseBody201Action GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "command")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "finished")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "started")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Defines the data type for the schema PostLoadBalancersIdActionsUpdateServiceResponseBody201ActionError
-- 
-- Error message for the Action if error occurred, otherwise null
data PostLoadBalancersIdActionsUpdateServiceResponseBody201ActionError = PostLoadBalancersIdActionsUpdateServiceResponseBody201ActionError {
  -- | code: Fixed machine readable code
  postLoadBalancersIdActionsUpdateServiceResponseBody201ActionErrorCode :: Data.Text.Internal.Text
  -- | message: Humanized error message
  , postLoadBalancersIdActionsUpdateServiceResponseBody201ActionErrorMessage :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersIdActionsUpdateServiceResponseBody201ActionError
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "code" (postLoadBalancersIdActionsUpdateServiceResponseBody201ActionErrorCode obj) : (Data.Aeson..=) "message" (postLoadBalancersIdActionsUpdateServiceResponseBody201ActionErrorMessage obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "code" (postLoadBalancersIdActionsUpdateServiceResponseBody201ActionErrorCode obj) GHC.Base.<> (Data.Aeson..=) "message" (postLoadBalancersIdActionsUpdateServiceResponseBody201ActionErrorMessage obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersIdActionsUpdateServiceResponseBody201ActionError
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersIdActionsUpdateServiceResponseBody201ActionError" (\obj -> (GHC.Base.pure PostLoadBalancersIdActionsUpdateServiceResponseBody201ActionError GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Defines the data type for the schema PostLoadBalancersIdActionsUpdateServiceResponseBody201ActionResources
-- 
-- 
data PostLoadBalancersIdActionsUpdateServiceResponseBody201ActionResources = PostLoadBalancersIdActionsUpdateServiceResponseBody201ActionResources {
  -- | id: ID of the Resource
  postLoadBalancersIdActionsUpdateServiceResponseBody201ActionResourcesId :: GHC.Integer.Type.Integer
  -- | type: Type of resource referenced
  , postLoadBalancersIdActionsUpdateServiceResponseBody201ActionResourcesType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersIdActionsUpdateServiceResponseBody201ActionResources
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (postLoadBalancersIdActionsUpdateServiceResponseBody201ActionResourcesId obj) : (Data.Aeson..=) "type" (postLoadBalancersIdActionsUpdateServiceResponseBody201ActionResourcesType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (postLoadBalancersIdActionsUpdateServiceResponseBody201ActionResourcesId obj) GHC.Base.<> (Data.Aeson..=) "type" (postLoadBalancersIdActionsUpdateServiceResponseBody201ActionResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersIdActionsUpdateServiceResponseBody201ActionResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersIdActionsUpdateServiceResponseBody201ActionResources" (\obj -> (GHC.Base.pure PostLoadBalancersIdActionsUpdateServiceResponseBody201ActionResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema PostLoadBalancersIdActionsUpdateServiceResponseBody201ActionStatus
-- 
-- Status of the Action
data PostLoadBalancersIdActionsUpdateServiceResponseBody201ActionStatus
    = PostLoadBalancersIdActionsUpdateServiceResponseBody201ActionStatusEnumOther Data.Aeson.Types.Internal.Value
    | PostLoadBalancersIdActionsUpdateServiceResponseBody201ActionStatusEnumTyped Data.Text.Internal.Text
    | PostLoadBalancersIdActionsUpdateServiceResponseBody201ActionStatusEnumStringError
    | PostLoadBalancersIdActionsUpdateServiceResponseBody201ActionStatusEnumStringRunning
    | PostLoadBalancersIdActionsUpdateServiceResponseBody201ActionStatusEnumStringSuccess
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersIdActionsUpdateServiceResponseBody201ActionStatus
    where toJSON (PostLoadBalancersIdActionsUpdateServiceResponseBody201ActionStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostLoadBalancersIdActionsUpdateServiceResponseBody201ActionStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostLoadBalancersIdActionsUpdateServiceResponseBody201ActionStatusEnumStringError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error"
          toJSON (PostLoadBalancersIdActionsUpdateServiceResponseBody201ActionStatusEnumStringRunning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running"
          toJSON (PostLoadBalancersIdActionsUpdateServiceResponseBody201ActionStatusEnumStringSuccess) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success"
instance Data.Aeson.FromJSON PostLoadBalancersIdActionsUpdateServiceResponseBody201ActionStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error")
                                          then PostLoadBalancersIdActionsUpdateServiceResponseBody201ActionStatusEnumStringError
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running")
                                                then PostLoadBalancersIdActionsUpdateServiceResponseBody201ActionStatusEnumStringRunning
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success")
                                                      then PostLoadBalancersIdActionsUpdateServiceResponseBody201ActionStatusEnumStringSuccess
                                                      else PostLoadBalancersIdActionsUpdateServiceResponseBody201ActionStatusEnumOther val)
