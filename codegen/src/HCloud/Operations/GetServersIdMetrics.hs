-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation getServers_Id_Metrics
module HCloud.Operations.GetServersIdMetrics where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > GET /servers/{id}/metrics
-- 
-- Get Metrics for specified Server.
-- 
-- You must specify the type of metric to get: cpu, disk or network. You can also specify more than one type by comma separation, e.g. cpu,disk.
-- 
-- Depending on the type you will get different time series data
-- 
-- | Type    | Timeseries              | Unit      | Description                                          |
-- |---------|-------------------------|-----------|------------------------------------------------------|
-- | cpu     | cpu                     | percent   | Percent CPU usage                                    |
-- | disk    | disk.0.iops.read        | iop\/s     | Number of read IO operations per second              |
-- |         | disk.0.iops.write       | iop\/s     | Number of write IO operations per second             |
-- |         | disk.0.bandwidth.read   | bytes\/s   | Bytes read per second                                |
-- |         | disk.0.bandwidth.write  | bytes\/s   | Bytes written per second                             |
-- | network | network.0.pps.in        | packets\/s | Public Network interface packets per second received |
-- |         | network.0.pps.out       | packets\/s | Public Network interface packets per second sent     |
-- |         | network.0.bandwidth.in  | bytes\/s   | Public Network interface bytes\/s received            |
-- |         | network.0.bandwidth.out | bytes\/s   | Public Network interface bytes\/s sent                |
-- 
-- Metrics are available for the last 30 days only.
-- 
-- If you do not provide the step argument we will automatically adjust it so that a maximum of 200 samples are returned.
-- 
-- We limit the number of samples returned to a maximum of 500 and will adjust the step parameter accordingly.
getServers_Id_Metrics :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer                                                                                                          -- ^ id: ID of the Server
  -> Data.Text.Internal.Text                                                                                                           -- ^ type: Type of metrics to get
  -> Data.Text.Internal.Text                                                                                                           -- ^ start: Start of period to get Metrics for (in ISO-8601 format)
  -> Data.Text.Internal.Text                                                                                                           -- ^ end: End of period to get Metrics for (in ISO-8601 format)
  -> GHC.Maybe.Maybe Data.Text.Internal.Text                                                                                           -- ^ step: Resolution of results in seconds
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response GetServersIdMetricsResponse))   -- ^ Monad containing the result of the operation
getServers_Id_Metrics config
                      id
                      type'
                      start
                      end
                      step = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetServersIdMetricsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetServersIdMetricsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                             GetServersIdMetricsResponseBody200)
                                                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/servers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/metrics"))) ((Data.Text.pack "type",
aybe.Just GHC.Base.$ HCloud.Common.stringifyModel type') : ((Data.Text.pack "start",
aybe.Just GHC.Base.$ HCloud.Common.stringifyModel start) : ((Data.Text.pack "end",
aybe.Just GHC.Base.$ HCloud.Common.stringifyModel end) : ((Data.Text.pack "step",
loud.Common.stringifyModel Data.Functor.<$> step) : [])))))
-- | > GET /servers/{id}/metrics
-- 
-- The same as 'getServers_Id_Metrics' but returns the raw 'Data.ByteString.Char8.ByteString'
getServers_Id_MetricsRaw :: forall m s . (HCloud.Common.MonadHTTP m,
                                          HCloud.Common.SecurityScheme s) =>
                            HCloud.Common.Configuration s ->
                            GHC.Integer.Type.Integer ->
                            Data.Text.Internal.Text ->
                            Data.Text.Internal.Text ->
                            Data.Text.Internal.Text ->
                            GHC.Maybe.Maybe Data.Text.Internal.Text ->
                            m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                  (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getServers_Id_MetricsRaw config
                         id
                         type'
                         start
                         end
                         step = GHC.Base.id (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/servers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/metrics"))) ((Data.Text.pack "type",
                                                                                                                                                                                                                                                                                                                                                                                        GHC.Maybe.Just GHC.Base.$ HCloud.Common.stringifyModel type') : ((Data.Text.pack "start",
                                                                                                                                                                                                                                                                                                                                                                                                                                                           GHC.Maybe.Just GHC.Base.$ HCloud.Common.stringifyModel start) : ((Data.Text.pack "end",
aybe.Just GHC.Base.$ HCloud.Common.stringifyModel end) : ((Data.Text.pack "step",
loud.Common.stringifyModel Data.Functor.<$> step) : [])))))
-- | > GET /servers/{id}/metrics
-- 
-- Monadic version of 'getServers_Id_Metrics' (use with 'HCloud.Common.runWithConfiguration')
getServers_Id_MetricsM :: forall m s . (HCloud.Common.MonadHTTP m,
                                        HCloud.Common.SecurityScheme s) =>
                          GHC.Integer.Type.Integer ->
                          Data.Text.Internal.Text ->
                          Data.Text.Internal.Text ->
                          Data.Text.Internal.Text ->
                          GHC.Maybe.Maybe Data.Text.Internal.Text ->
                          Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                             m
                                                             (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                 (Network.HTTP.Client.Types.Response GetServersIdMetricsResponse))
getServers_Id_MetricsM id
                       type'
                       start
                       end
                       step = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetServersIdMetricsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetServersIdMetricsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                              GetServersIdMetricsResponseBody200)
                                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/servers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/metrics"))) ((Data.Text.pack "type",
aybe.Just GHC.Base.$ HCloud.Common.stringifyModel type') : ((Data.Text.pack "start",
aybe.Just GHC.Base.$ HCloud.Common.stringifyModel start) : ((Data.Text.pack "end",
aybe.Just GHC.Base.$ HCloud.Common.stringifyModel end) : ((Data.Text.pack "step",
loud.Common.stringifyModel Data.Functor.<$> step) : [])))))
-- | > GET /servers/{id}/metrics
-- 
-- Monadic version of 'getServers_Id_MetricsRaw' (use with 'HCloud.Common.runWithConfiguration')
getServers_Id_MetricsRawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                           HCloud.Common.SecurityScheme s) =>
                             GHC.Integer.Type.Integer ->
                             Data.Text.Internal.Text ->
                             Data.Text.Internal.Text ->
                             Data.Text.Internal.Text ->
                             GHC.Maybe.Maybe Data.Text.Internal.Text ->
                             Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                m
                                                                (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                    (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getServers_Id_MetricsRawM id
                          type'
                          start
                          end
                          step = GHC.Base.id (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/servers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/metrics"))) ((Data.Text.pack "type",
                                                                                                                                                                                                                                                                                                                                                                                   GHC.Maybe.Just GHC.Base.$ HCloud.Common.stringifyModel type') : ((Data.Text.pack "start",
                                                                                                                                                                                                                                                                                                                                                                                                                                                      GHC.Maybe.Just GHC.Base.$ HCloud.Common.stringifyModel start) : ((Data.Text.pack "end",
aybe.Just GHC.Base.$ HCloud.Common.stringifyModel end) : ((Data.Text.pack "step",
loud.Common.stringifyModel Data.Functor.<$> step) : [])))))
-- | Represents a response of the operation 'getServers_Id_Metrics'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetServersIdMetricsResponseError' is used.
data GetServersIdMetricsResponse =                                     
   GetServersIdMetricsResponseError GHC.Base.String                    -- ^ Means either no matching case available or a parse error
  | GetServersIdMetricsResponse200 GetServersIdMetricsResponseBody200  -- ^ The \`metrics\` key in the reply contains a metrics object with this structure
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema GetServersIdMetricsResponseBody200
-- 
-- 
data GetServersIdMetricsResponseBody200 = GetServersIdMetricsResponseBody200 {
  -- | metrics
  getServersIdMetricsResponseBody200Metrics :: GetServersIdMetricsResponseBody200Metrics
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetServersIdMetricsResponseBody200
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "metrics" (getServersIdMetricsResponseBody200Metrics obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "metrics" (getServersIdMetricsResponseBody200Metrics obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetServersIdMetricsResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetServersIdMetricsResponseBody200" (\obj -> GHC.Base.pure GetServersIdMetricsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metrics"))
-- | Defines the data type for the schema GetServersIdMetricsResponseBody200Metrics
-- 
-- 
data GetServersIdMetricsResponseBody200Metrics = GetServersIdMetricsResponseBody200Metrics {
  -- | end: End of period of metrics reported (in ISO-8601 format)
  getServersIdMetricsResponseBody200MetricsEnd :: Data.Text.Internal.Text
  -- | start: Start of period of metrics reported (in ISO-8601 format)
  , getServersIdMetricsResponseBody200MetricsStart :: Data.Text.Internal.Text
  -- | step: Resolution of results in seconds.
  , getServersIdMetricsResponseBody200MetricsStep :: GHC.Types.Double
  -- | time_series: Hash with timeseries information, containing the name of timeseries as key
  , getServersIdMetricsResponseBody200MetricsTimeSeries :: GetServersIdMetricsResponseBody200MetricsTimeSeries
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetServersIdMetricsResponseBody200Metrics
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "end" (getServersIdMetricsResponseBody200MetricsEnd obj) : (Data.Aeson..=) "start" (getServersIdMetricsResponseBody200MetricsStart obj) : (Data.Aeson..=) "step" (getServersIdMetricsResponseBody200MetricsStep obj) : (Data.Aeson..=) "time_series" (getServersIdMetricsResponseBody200MetricsTimeSeries obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "end" (getServersIdMetricsResponseBody200MetricsEnd obj) GHC.Base.<> ((Data.Aeson..=) "start" (getServersIdMetricsResponseBody200MetricsStart obj) GHC.Base.<> ((Data.Aeson..=) "step" (getServersIdMetricsResponseBody200MetricsStep obj) GHC.Base.<> (Data.Aeson..=) "time_series" (getServersIdMetricsResponseBody200MetricsTimeSeries obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetServersIdMetricsResponseBody200Metrics
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetServersIdMetricsResponseBody200Metrics" (\obj -> (((GHC.Base.pure GetServersIdMetricsResponseBody200Metrics GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "end")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "start")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "step")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "time_series"))
-- | Defines the data type for the schema GetServersIdMetricsResponseBody200MetricsTime_series
-- 
-- Hash with timeseries information, containing the name of timeseries as key
data GetServersIdMetricsResponseBody200MetricsTimeSeries = GetServersIdMetricsResponseBody200MetricsTimeSeries {
  
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetServersIdMetricsResponseBody200MetricsTimeSeries
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON GetServersIdMetricsResponseBody200MetricsTimeSeries
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetServersIdMetricsResponseBody200MetricsTimeSeries" (\obj -> GHC.Base.pure GetServersIdMetricsResponseBody200MetricsTimeSeries)
