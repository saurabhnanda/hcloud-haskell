-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postVolumes_Id_ActionsAttach
module HCloud.Operations.PostVolumesIdActionsAttach where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > POST /volumes/{id}/actions/attach
-- 
-- Attaches a Volume to a Server. Works only if the Server is in the same Location as the Volume.
postVolumes_Id_ActionsAttach :: forall m . HCloud.Common.MonadHTTP m => GHC.Types.Int -- ^ id: ID of the Volume
  -> GHC.Maybe.Maybe PostVolumesIdActionsAttachRequestBody -- ^ The request body to send
  -> HCloud.Common.HttpT m (Network.HTTP.Client.Types.Response PostVolumesIdActionsAttachResponse) -- ^ Monadic computation which returns the result of the operation
postVolumes_Id_ActionsAttach id
                             body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostVolumesIdActionsAttachResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostVolumesIdActionsAttachResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                   PostVolumesIdActionsAttachResponseBody201)
                                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/volumes/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/attach"))) GHC.Base.mempty body HCloud.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/volumes\/{id}\/actions\/attach.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data PostVolumesIdActionsAttachRequestBody = PostVolumesIdActionsAttachRequestBody {
  -- | automount: Auto-mount the Volume after attaching it
  postVolumesIdActionsAttachRequestBodyAutomount :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | server: ID of the Server the Volume will be attached to
  , postVolumesIdActionsAttachRequestBodyServer :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostVolumesIdActionsAttachRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("automount" Data.Aeson.Types.ToJSON..= postVolumesIdActionsAttachRequestBodyAutomount obj : "server" Data.Aeson.Types.ToJSON..= postVolumesIdActionsAttachRequestBodyServer obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("automount" Data.Aeson.Types.ToJSON..= postVolumesIdActionsAttachRequestBodyAutomount obj) GHC.Base.<> ("server" Data.Aeson.Types.ToJSON..= postVolumesIdActionsAttachRequestBodyServer obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostVolumesIdActionsAttachRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostVolumesIdActionsAttachRequestBody" (\obj -> (GHC.Base.pure PostVolumesIdActionsAttachRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "automount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "server"))
-- | Create a new 'PostVolumesIdActionsAttachRequestBody' with all required fields.
mkPostVolumesIdActionsAttachRequestBody :: GHC.Types.Int -- ^ 'postVolumesIdActionsAttachRequestBodyServer'
  -> PostVolumesIdActionsAttachRequestBody
mkPostVolumesIdActionsAttachRequestBody postVolumesIdActionsAttachRequestBodyServer = PostVolumesIdActionsAttachRequestBody{postVolumesIdActionsAttachRequestBodyAutomount = GHC.Maybe.Nothing,
                                                                                                                            postVolumesIdActionsAttachRequestBodyServer = postVolumesIdActionsAttachRequestBodyServer}
-- | Represents a response of the operation 'postVolumes_Id_ActionsAttach'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostVolumesIdActionsAttachResponseError' is used.
data PostVolumesIdActionsAttachResponse =
   PostVolumesIdActionsAttachResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostVolumesIdActionsAttachResponse201 PostVolumesIdActionsAttachResponseBody201 -- ^ The \`action\` key contains the \`attach_volume\` Action
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/volumes\/{id}\/actions\/attach.POST.responses.201.content.application\/json.schema@ in the specification.
-- 
-- 
data PostVolumesIdActionsAttachResponseBody201 = PostVolumesIdActionsAttachResponseBody201 {
  -- | action
  postVolumesIdActionsAttachResponseBody201Action :: PostVolumesIdActionsAttachResponseBody201Action
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostVolumesIdActionsAttachResponseBody201
    where toJSON obj = Data.Aeson.Types.Internal.object ("action" Data.Aeson.Types.ToJSON..= postVolumesIdActionsAttachResponseBody201Action obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("action" Data.Aeson.Types.ToJSON..= postVolumesIdActionsAttachResponseBody201Action obj)
instance Data.Aeson.Types.FromJSON.FromJSON PostVolumesIdActionsAttachResponseBody201
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostVolumesIdActionsAttachResponseBody201" (\obj -> GHC.Base.pure PostVolumesIdActionsAttachResponseBody201 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "action"))
-- | Create a new 'PostVolumesIdActionsAttachResponseBody201' with all required fields.
mkPostVolumesIdActionsAttachResponseBody201 :: PostVolumesIdActionsAttachResponseBody201Action -- ^ 'postVolumesIdActionsAttachResponseBody201Action'
  -> PostVolumesIdActionsAttachResponseBody201
mkPostVolumesIdActionsAttachResponseBody201 postVolumesIdActionsAttachResponseBody201Action = PostVolumesIdActionsAttachResponseBody201{postVolumesIdActionsAttachResponseBody201Action = postVolumesIdActionsAttachResponseBody201Action}
-- | Defines the object schema located at @paths.\/volumes\/{id}\/actions\/attach.POST.responses.201.content.application\/json.schema.properties.action@ in the specification.
-- 
-- 
data PostVolumesIdActionsAttachResponseBody201Action = PostVolumesIdActionsAttachResponseBody201Action {
  -- | command: Command executed in the Action
  postVolumesIdActionsAttachResponseBody201ActionCommand :: Data.Text.Internal.Text
  -- | error: Error message for the Action if error occurred, otherwise null
  , postVolumesIdActionsAttachResponseBody201ActionError :: (GHC.Maybe.Maybe PostVolumesIdActionsAttachResponseBody201ActionError)
  -- | finished: Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
  , postVolumesIdActionsAttachResponseBody201ActionFinished :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | id: ID of the Resource
  , postVolumesIdActionsAttachResponseBody201ActionId :: GHC.Types.Int
  -- | progress: Progress of Action in percent
  , postVolumesIdActionsAttachResponseBody201ActionProgress :: GHC.Types.Double
  -- | resources: Resources the Action relates to
  , postVolumesIdActionsAttachResponseBody201ActionResources :: ([PostVolumesIdActionsAttachResponseBody201ActionResources])
  -- | started: Point in time when the Action was started (in ISO-8601 format)
  , postVolumesIdActionsAttachResponseBody201ActionStarted :: Data.Text.Internal.Text
  -- | status: Status of the Action
  , postVolumesIdActionsAttachResponseBody201ActionStatus :: PostVolumesIdActionsAttachResponseBody201ActionStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostVolumesIdActionsAttachResponseBody201Action
    where toJSON obj = Data.Aeson.Types.Internal.object ("command" Data.Aeson.Types.ToJSON..= postVolumesIdActionsAttachResponseBody201ActionCommand obj : "error" Data.Aeson.Types.ToJSON..= postVolumesIdActionsAttachResponseBody201ActionError obj : "finished" Data.Aeson.Types.ToJSON..= postVolumesIdActionsAttachResponseBody201ActionFinished obj : "id" Data.Aeson.Types.ToJSON..= postVolumesIdActionsAttachResponseBody201ActionId obj : "progress" Data.Aeson.Types.ToJSON..= postVolumesIdActionsAttachResponseBody201ActionProgress obj : "resources" Data.Aeson.Types.ToJSON..= postVolumesIdActionsAttachResponseBody201ActionResources obj : "started" Data.Aeson.Types.ToJSON..= postVolumesIdActionsAttachResponseBody201ActionStarted obj : "status" Data.Aeson.Types.ToJSON..= postVolumesIdActionsAttachResponseBody201ActionStatus obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("command" Data.Aeson.Types.ToJSON..= postVolumesIdActionsAttachResponseBody201ActionCommand obj) GHC.Base.<> (("error" Data.Aeson.Types.ToJSON..= postVolumesIdActionsAttachResponseBody201ActionError obj) GHC.Base.<> (("finished" Data.Aeson.Types.ToJSON..= postVolumesIdActionsAttachResponseBody201ActionFinished obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= postVolumesIdActionsAttachResponseBody201ActionId obj) GHC.Base.<> (("progress" Data.Aeson.Types.ToJSON..= postVolumesIdActionsAttachResponseBody201ActionProgress obj) GHC.Base.<> (("resources" Data.Aeson.Types.ToJSON..= postVolumesIdActionsAttachResponseBody201ActionResources obj) GHC.Base.<> (("started" Data.Aeson.Types.ToJSON..= postVolumesIdActionsAttachResponseBody201ActionStarted obj) GHC.Base.<> ("status" Data.Aeson.Types.ToJSON..= postVolumesIdActionsAttachResponseBody201ActionStatus obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostVolumesIdActionsAttachResponseBody201Action
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostVolumesIdActionsAttachResponseBody201Action" (\obj -> (((((((GHC.Base.pure PostVolumesIdActionsAttachResponseBody201Action GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "command")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "finished")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "started")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Create a new 'PostVolumesIdActionsAttachResponseBody201Action' with all required fields.
mkPostVolumesIdActionsAttachResponseBody201Action :: Data.Text.Internal.Text -- ^ 'postVolumesIdActionsAttachResponseBody201ActionCommand'
  -> GHC.Maybe.Maybe PostVolumesIdActionsAttachResponseBody201ActionError -- ^ 'postVolumesIdActionsAttachResponseBody201ActionError'
  -> GHC.Maybe.Maybe Data.Text.Internal.Text -- ^ 'postVolumesIdActionsAttachResponseBody201ActionFinished'
  -> GHC.Types.Int -- ^ 'postVolumesIdActionsAttachResponseBody201ActionId'
  -> GHC.Types.Double -- ^ 'postVolumesIdActionsAttachResponseBody201ActionProgress'
  -> [PostVolumesIdActionsAttachResponseBody201ActionResources] -- ^ 'postVolumesIdActionsAttachResponseBody201ActionResources'
  -> Data.Text.Internal.Text -- ^ 'postVolumesIdActionsAttachResponseBody201ActionStarted'
  -> PostVolumesIdActionsAttachResponseBody201ActionStatus -- ^ 'postVolumesIdActionsAttachResponseBody201ActionStatus'
  -> PostVolumesIdActionsAttachResponseBody201Action
mkPostVolumesIdActionsAttachResponseBody201Action postVolumesIdActionsAttachResponseBody201ActionCommand postVolumesIdActionsAttachResponseBody201ActionError postVolumesIdActionsAttachResponseBody201ActionFinished postVolumesIdActionsAttachResponseBody201ActionId postVolumesIdActionsAttachResponseBody201ActionProgress postVolumesIdActionsAttachResponseBody201ActionResources postVolumesIdActionsAttachResponseBody201ActionStarted postVolumesIdActionsAttachResponseBody201ActionStatus = PostVolumesIdActionsAttachResponseBody201Action{postVolumesIdActionsAttachResponseBody201ActionCommand = postVolumesIdActionsAttachResponseBody201ActionCommand,
postVolumesIdActionsAttachResponseBody201ActionError = postVolumesIdActionsAttachResponseBody201ActionError,
postVolumesIdActionsAttachResponseBody201ActionFinished = postVolumesIdActionsAttachResponseBody201ActionFinished,
postVolumesIdActionsAttachResponseBody201ActionId = postVolumesIdActionsAttachResponseBody201ActionId,
postVolumesIdActionsAttachResponseBody201ActionProgress = postVolumesIdActionsAttachResponseBody201ActionProgress,
postVolumesIdActionsAttachResponseBody201ActionResources = postVolumesIdActionsAttachResponseBody201ActionResources,
postVolumesIdActionsAttachResponseBody201ActionStarted = postVolumesIdActionsAttachResponseBody201ActionStarted,
postVolumesIdActionsAttachResponseBody201ActionStatus = postVolumesIdActionsAttachResponseBody201ActionStatus}
-- | Defines the object schema located at @paths.\/volumes\/{id}\/actions\/attach.POST.responses.201.content.application\/json.schema.properties.action.properties.error@ in the specification.
-- 
-- Error message for the Action if error occurred, otherwise null
data PostVolumesIdActionsAttachResponseBody201ActionError = PostVolumesIdActionsAttachResponseBody201ActionError {
  -- | code: Fixed machine readable code
  postVolumesIdActionsAttachResponseBody201ActionErrorCode :: Data.Text.Internal.Text
  -- | message: Humanized error message
  , postVolumesIdActionsAttachResponseBody201ActionErrorMessage :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostVolumesIdActionsAttachResponseBody201ActionError
    where toJSON obj = Data.Aeson.Types.Internal.object ("code" Data.Aeson.Types.ToJSON..= postVolumesIdActionsAttachResponseBody201ActionErrorCode obj : "message" Data.Aeson.Types.ToJSON..= postVolumesIdActionsAttachResponseBody201ActionErrorMessage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("code" Data.Aeson.Types.ToJSON..= postVolumesIdActionsAttachResponseBody201ActionErrorCode obj) GHC.Base.<> ("message" Data.Aeson.Types.ToJSON..= postVolumesIdActionsAttachResponseBody201ActionErrorMessage obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostVolumesIdActionsAttachResponseBody201ActionError
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostVolumesIdActionsAttachResponseBody201ActionError" (\obj -> (GHC.Base.pure PostVolumesIdActionsAttachResponseBody201ActionError GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'PostVolumesIdActionsAttachResponseBody201ActionError' with all required fields.
mkPostVolumesIdActionsAttachResponseBody201ActionError :: Data.Text.Internal.Text -- ^ 'postVolumesIdActionsAttachResponseBody201ActionErrorCode'
  -> Data.Text.Internal.Text -- ^ 'postVolumesIdActionsAttachResponseBody201ActionErrorMessage'
  -> PostVolumesIdActionsAttachResponseBody201ActionError
mkPostVolumesIdActionsAttachResponseBody201ActionError postVolumesIdActionsAttachResponseBody201ActionErrorCode postVolumesIdActionsAttachResponseBody201ActionErrorMessage = PostVolumesIdActionsAttachResponseBody201ActionError{postVolumesIdActionsAttachResponseBody201ActionErrorCode = postVolumesIdActionsAttachResponseBody201ActionErrorCode,
                                                                                                                                                                                                                                   postVolumesIdActionsAttachResponseBody201ActionErrorMessage = postVolumesIdActionsAttachResponseBody201ActionErrorMessage}
-- | Defines the object schema located at @paths.\/volumes\/{id}\/actions\/attach.POST.responses.201.content.application\/json.schema.properties.action.properties.resources.items@ in the specification.
-- 
-- 
data PostVolumesIdActionsAttachResponseBody201ActionResources = PostVolumesIdActionsAttachResponseBody201ActionResources {
  -- | id: ID of the Resource
  postVolumesIdActionsAttachResponseBody201ActionResourcesId :: GHC.Types.Int
  -- | type: Type of resource referenced
  , postVolumesIdActionsAttachResponseBody201ActionResourcesType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostVolumesIdActionsAttachResponseBody201ActionResources
    where toJSON obj = Data.Aeson.Types.Internal.object ("id" Data.Aeson.Types.ToJSON..= postVolumesIdActionsAttachResponseBody201ActionResourcesId obj : "type" Data.Aeson.Types.ToJSON..= postVolumesIdActionsAttachResponseBody201ActionResourcesType obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("id" Data.Aeson.Types.ToJSON..= postVolumesIdActionsAttachResponseBody201ActionResourcesId obj) GHC.Base.<> ("type" Data.Aeson.Types.ToJSON..= postVolumesIdActionsAttachResponseBody201ActionResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostVolumesIdActionsAttachResponseBody201ActionResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostVolumesIdActionsAttachResponseBody201ActionResources" (\obj -> (GHC.Base.pure PostVolumesIdActionsAttachResponseBody201ActionResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Create a new 'PostVolumesIdActionsAttachResponseBody201ActionResources' with all required fields.
mkPostVolumesIdActionsAttachResponseBody201ActionResources :: GHC.Types.Int -- ^ 'postVolumesIdActionsAttachResponseBody201ActionResourcesId'
  -> Data.Text.Internal.Text -- ^ 'postVolumesIdActionsAttachResponseBody201ActionResourcesType'
  -> PostVolumesIdActionsAttachResponseBody201ActionResources
mkPostVolumesIdActionsAttachResponseBody201ActionResources postVolumesIdActionsAttachResponseBody201ActionResourcesId postVolumesIdActionsAttachResponseBody201ActionResourcesType = PostVolumesIdActionsAttachResponseBody201ActionResources{postVolumesIdActionsAttachResponseBody201ActionResourcesId = postVolumesIdActionsAttachResponseBody201ActionResourcesId,
                                                                                                                                                                                                                                              postVolumesIdActionsAttachResponseBody201ActionResourcesType = postVolumesIdActionsAttachResponseBody201ActionResourcesType}
-- | Defines the enum schema located at @paths.\/volumes\/{id}\/actions\/attach.POST.responses.201.content.application\/json.schema.properties.action.properties.status@ in the specification.
-- 
-- Status of the Action
data PostVolumesIdActionsAttachResponseBody201ActionStatus =
   PostVolumesIdActionsAttachResponseBody201ActionStatusOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostVolumesIdActionsAttachResponseBody201ActionStatusTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostVolumesIdActionsAttachResponseBody201ActionStatusEnumSuccess -- ^ Represents the JSON value @"success"@
  | PostVolumesIdActionsAttachResponseBody201ActionStatusEnumRunning -- ^ Represents the JSON value @"running"@
  | PostVolumesIdActionsAttachResponseBody201ActionStatusEnumError -- ^ Represents the JSON value @"error"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostVolumesIdActionsAttachResponseBody201ActionStatus
    where toJSON (PostVolumesIdActionsAttachResponseBody201ActionStatusOther val) = val
          toJSON (PostVolumesIdActionsAttachResponseBody201ActionStatusTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PostVolumesIdActionsAttachResponseBody201ActionStatusEnumSuccess) = "success"
          toJSON (PostVolumesIdActionsAttachResponseBody201ActionStatusEnumRunning) = "running"
          toJSON (PostVolumesIdActionsAttachResponseBody201ActionStatusEnumError) = "error"
instance Data.Aeson.Types.FromJSON.FromJSON PostVolumesIdActionsAttachResponseBody201ActionStatus
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "success" -> PostVolumesIdActionsAttachResponseBody201ActionStatusEnumSuccess
                                            | val GHC.Classes.== "running" -> PostVolumesIdActionsAttachResponseBody201ActionStatusEnumRunning
                                            | val GHC.Classes.== "error" -> PostVolumesIdActionsAttachResponseBody201ActionStatusEnumError
                                            | GHC.Base.otherwise -> PostVolumesIdActionsAttachResponseBody201ActionStatusOther val)
-- | > POST /volumes/{id}/actions/attach
-- 
-- The same as 'postVolumes_Id_ActionsAttach' but accepts an explicit configuration.
postVolumes_Id_ActionsAttachWithConfiguration :: forall m . HCloud.Common.MonadHTTP m => HCloud.Common.Configuration -- ^ The configuration to use in the request
  -> GHC.Types.Int -- ^ id: ID of the Volume
  -> GHC.Maybe.Maybe PostVolumesIdActionsAttachRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response PostVolumesIdActionsAttachResponse) -- ^ Monadic computation which returns the result of the operation
postVolumes_Id_ActionsAttachWithConfiguration config
                                              id
                                              body = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostVolumesIdActionsAttachResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostVolumesIdActionsAttachResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    PostVolumesIdActionsAttachResponseBody201)
                                                                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/volumes/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/attach"))) GHC.Base.mempty body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /volumes/{id}/actions/attach
-- 
-- The same as 'postVolumes_Id_ActionsAttach' but returns the raw 'Data.ByteString.Char8.ByteString'.
postVolumes_Id_ActionsAttachRaw :: forall m . HCloud.Common.MonadHTTP m => GHC.Types.Int -- ^ id: ID of the Volume
  -> GHC.Maybe.Maybe PostVolumesIdActionsAttachRequestBody -- ^ The request body to send
  -> HCloud.Common.HttpT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postVolumes_Id_ActionsAttachRaw id
                                body = GHC.Base.id (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/volumes/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/attach"))) GHC.Base.mempty body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /volumes/{id}/actions/attach
-- 
-- The same as 'postVolumes_Id_ActionsAttach' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postVolumes_Id_ActionsAttachWithConfigurationRaw :: forall m . HCloud.Common.MonadHTTP m => HCloud.Common.Configuration -- ^ The configuration to use in the request
  -> GHC.Types.Int -- ^ id: ID of the Volume
  -> GHC.Maybe.Maybe PostVolumesIdActionsAttachRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postVolumes_Id_ActionsAttachWithConfigurationRaw config
                                                 id
                                                 body = GHC.Base.id (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/volumes/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/attach"))) GHC.Base.mempty body HCloud.Common.RequestBodyEncodingJSON)
