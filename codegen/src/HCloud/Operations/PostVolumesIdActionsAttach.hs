-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation postVolumes_Id_ActionsAttach
module HCloud.Operations.PostVolumesIdActionsAttach where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > POST /volumes/{id}/actions/attach
-- 
-- Attaches a Volume to a Server. Works only if the Server is in the same Location as the Volume.
postVolumes_Id_ActionsAttach :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer                                                                                                                 -- ^ id: ID of the Volume
  -> GHC.Maybe.Maybe PostVolumesIdActionsAttachRequestBody                                                                                    -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response PostVolumesIdActionsAttachResponse))   -- ^ Monad containing the result of the operation
postVolumes_Id_ActionsAttach config
                             id
                             body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostVolumesIdActionsAttachResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostVolumesIdActionsAttachResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  PostVolumesIdActionsAttachResponseBody201)
                                                                                                                                                                                                        | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/volumes/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/attach"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /volumes/{id}/actions/attach
-- 
-- The same as 'postVolumes_Id_ActionsAttach' but returns the raw 'Data.ByteString.Char8.ByteString'
postVolumes_Id_ActionsAttachRaw :: forall m s . (HCloud.Common.MonadHTTP m,
                                                 HCloud.Common.SecurityScheme s) =>
                                   HCloud.Common.Configuration s ->
                                   GHC.Integer.Type.Integer ->
                                   GHC.Maybe.Maybe PostVolumesIdActionsAttachRequestBody ->
                                   m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                         (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postVolumes_Id_ActionsAttachRaw config
                                id
                                body = GHC.Base.id (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/volumes/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/attach"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /volumes/{id}/actions/attach
-- 
-- Monadic version of 'postVolumes_Id_ActionsAttach' (use with 'HCloud.Common.runWithConfiguration')
postVolumes_Id_ActionsAttachM :: forall m s . (HCloud.Common.MonadHTTP m,
                                               HCloud.Common.SecurityScheme s) =>
                                 GHC.Integer.Type.Integer ->
                                 GHC.Maybe.Maybe PostVolumesIdActionsAttachRequestBody ->
                                 Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                    m
                                                                    (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                        (Network.HTTP.Client.Types.Response PostVolumesIdActionsAttachResponse))
postVolumes_Id_ActionsAttachM id
                              body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostVolumesIdActionsAttachResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostVolumesIdActionsAttachResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   PostVolumesIdActionsAttachResponseBody201)
                                                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/volumes/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/attach"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /volumes/{id}/actions/attach
-- 
-- Monadic version of 'postVolumes_Id_ActionsAttachRaw' (use with 'HCloud.Common.runWithConfiguration')
postVolumes_Id_ActionsAttachRawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                  HCloud.Common.SecurityScheme s) =>
                                    GHC.Integer.Type.Integer ->
                                    GHC.Maybe.Maybe PostVolumesIdActionsAttachRequestBody ->
                                    Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                       m
                                                                       (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                           (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postVolumes_Id_ActionsAttachRawM id
                                 body = GHC.Base.id (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/volumes/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/attach"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema postVolumes_Id_ActionsAttachRequestBody
-- 
-- 
data PostVolumesIdActionsAttachRequestBody = PostVolumesIdActionsAttachRequestBody {
  -- | automount: Auto-mount the Volume after attaching it
  postVolumesIdActionsAttachRequestBodyAutomount :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | server: ID of the Server the Volume will be attached to
  , postVolumesIdActionsAttachRequestBodyServer :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostVolumesIdActionsAttachRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "automount" (postVolumesIdActionsAttachRequestBodyAutomount obj) : (Data.Aeson..=) "server" (postVolumesIdActionsAttachRequestBodyServer obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "automount" (postVolumesIdActionsAttachRequestBodyAutomount obj) GHC.Base.<> (Data.Aeson..=) "server" (postVolumesIdActionsAttachRequestBodyServer obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostVolumesIdActionsAttachRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostVolumesIdActionsAttachRequestBody" (\obj -> (GHC.Base.pure PostVolumesIdActionsAttachRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "automount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "server"))
-- | Represents a response of the operation 'postVolumes_Id_ActionsAttach'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostVolumesIdActionsAttachResponseError' is used.
data PostVolumesIdActionsAttachResponse =                                            
   PostVolumesIdActionsAttachResponseError GHC.Base.String                           -- ^ Means either no matching case available or a parse error
  | PostVolumesIdActionsAttachResponse201 PostVolumesIdActionsAttachResponseBody201  -- ^ The \`action\` key contains the \`attach_volume\` Action
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema PostVolumesIdActionsAttachResponseBody201
-- 
-- 
data PostVolumesIdActionsAttachResponseBody201 = PostVolumesIdActionsAttachResponseBody201 {
  -- | action
  postVolumesIdActionsAttachResponseBody201Action :: PostVolumesIdActionsAttachResponseBody201Action
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostVolumesIdActionsAttachResponseBody201
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "action" (postVolumesIdActionsAttachResponseBody201Action obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "action" (postVolumesIdActionsAttachResponseBody201Action obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostVolumesIdActionsAttachResponseBody201
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostVolumesIdActionsAttachResponseBody201" (\obj -> GHC.Base.pure PostVolumesIdActionsAttachResponseBody201 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "action"))
-- | Defines the data type for the schema PostVolumesIdActionsAttachResponseBody201Action
-- 
-- 
data PostVolumesIdActionsAttachResponseBody201Action = PostVolumesIdActionsAttachResponseBody201Action {
  -- | command: Command executed in the Action
  postVolumesIdActionsAttachResponseBody201ActionCommand :: Data.Text.Internal.Text
  -- | error: Error message for the Action if error occurred, otherwise null
  , postVolumesIdActionsAttachResponseBody201ActionError :: PostVolumesIdActionsAttachResponseBody201ActionError
  -- | finished: Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
  , postVolumesIdActionsAttachResponseBody201ActionFinished :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , postVolumesIdActionsAttachResponseBody201ActionId :: GHC.Integer.Type.Integer
  -- | progress: Progress of Action in percent
  , postVolumesIdActionsAttachResponseBody201ActionProgress :: GHC.Types.Double
  -- | resources: Resources the Action relates to
  , postVolumesIdActionsAttachResponseBody201ActionResources :: ([] PostVolumesIdActionsAttachResponseBody201ActionResources)
  -- | started: Point in time when the Action was started (in ISO-8601 format)
  , postVolumesIdActionsAttachResponseBody201ActionStarted :: Data.Text.Internal.Text
  -- | status: Status of the Action
  , postVolumesIdActionsAttachResponseBody201ActionStatus :: PostVolumesIdActionsAttachResponseBody201ActionStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostVolumesIdActionsAttachResponseBody201Action
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "command" (postVolumesIdActionsAttachResponseBody201ActionCommand obj) : (Data.Aeson..=) "error" (postVolumesIdActionsAttachResponseBody201ActionError obj) : (Data.Aeson..=) "finished" (postVolumesIdActionsAttachResponseBody201ActionFinished obj) : (Data.Aeson..=) "id" (postVolumesIdActionsAttachResponseBody201ActionId obj) : (Data.Aeson..=) "progress" (postVolumesIdActionsAttachResponseBody201ActionProgress obj) : (Data.Aeson..=) "resources" (postVolumesIdActionsAttachResponseBody201ActionResources obj) : (Data.Aeson..=) "started" (postVolumesIdActionsAttachResponseBody201ActionStarted obj) : (Data.Aeson..=) "status" (postVolumesIdActionsAttachResponseBody201ActionStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "command" (postVolumesIdActionsAttachResponseBody201ActionCommand obj) GHC.Base.<> ((Data.Aeson..=) "error" (postVolumesIdActionsAttachResponseBody201ActionError obj) GHC.Base.<> ((Data.Aeson..=) "finished" (postVolumesIdActionsAttachResponseBody201ActionFinished obj) GHC.Base.<> ((Data.Aeson..=) "id" (postVolumesIdActionsAttachResponseBody201ActionId obj) GHC.Base.<> ((Data.Aeson..=) "progress" (postVolumesIdActionsAttachResponseBody201ActionProgress obj) GHC.Base.<> ((Data.Aeson..=) "resources" (postVolumesIdActionsAttachResponseBody201ActionResources obj) GHC.Base.<> ((Data.Aeson..=) "started" (postVolumesIdActionsAttachResponseBody201ActionStarted obj) GHC.Base.<> (Data.Aeson..=) "status" (postVolumesIdActionsAttachResponseBody201ActionStatus obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostVolumesIdActionsAttachResponseBody201Action
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostVolumesIdActionsAttachResponseBody201Action" (\obj -> (((((((GHC.Base.pure PostVolumesIdActionsAttachResponseBody201Action GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "command")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "finished")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "started")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Defines the data type for the schema PostVolumesIdActionsAttachResponseBody201ActionError
-- 
-- Error message for the Action if error occurred, otherwise null
data PostVolumesIdActionsAttachResponseBody201ActionError = PostVolumesIdActionsAttachResponseBody201ActionError {
  -- | code: Fixed machine readable code
  postVolumesIdActionsAttachResponseBody201ActionErrorCode :: Data.Text.Internal.Text
  -- | message: Humanized error message
  , postVolumesIdActionsAttachResponseBody201ActionErrorMessage :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostVolumesIdActionsAttachResponseBody201ActionError
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "code" (postVolumesIdActionsAttachResponseBody201ActionErrorCode obj) : (Data.Aeson..=) "message" (postVolumesIdActionsAttachResponseBody201ActionErrorMessage obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "code" (postVolumesIdActionsAttachResponseBody201ActionErrorCode obj) GHC.Base.<> (Data.Aeson..=) "message" (postVolumesIdActionsAttachResponseBody201ActionErrorMessage obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostVolumesIdActionsAttachResponseBody201ActionError
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostVolumesIdActionsAttachResponseBody201ActionError" (\obj -> (GHC.Base.pure PostVolumesIdActionsAttachResponseBody201ActionError GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Defines the data type for the schema PostVolumesIdActionsAttachResponseBody201ActionResources
-- 
-- 
data PostVolumesIdActionsAttachResponseBody201ActionResources = PostVolumesIdActionsAttachResponseBody201ActionResources {
  -- | id: ID of the Resource
  postVolumesIdActionsAttachResponseBody201ActionResourcesId :: GHC.Integer.Type.Integer
  -- | type: Type of resource referenced
  , postVolumesIdActionsAttachResponseBody201ActionResourcesType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostVolumesIdActionsAttachResponseBody201ActionResources
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (postVolumesIdActionsAttachResponseBody201ActionResourcesId obj) : (Data.Aeson..=) "type" (postVolumesIdActionsAttachResponseBody201ActionResourcesType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (postVolumesIdActionsAttachResponseBody201ActionResourcesId obj) GHC.Base.<> (Data.Aeson..=) "type" (postVolumesIdActionsAttachResponseBody201ActionResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostVolumesIdActionsAttachResponseBody201ActionResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostVolumesIdActionsAttachResponseBody201ActionResources" (\obj -> (GHC.Base.pure PostVolumesIdActionsAttachResponseBody201ActionResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema PostVolumesIdActionsAttachResponseBody201ActionStatus
-- 
-- Status of the Action
data PostVolumesIdActionsAttachResponseBody201ActionStatus
    = PostVolumesIdActionsAttachResponseBody201ActionStatusEnumOther Data.Aeson.Types.Internal.Value
    | PostVolumesIdActionsAttachResponseBody201ActionStatusEnumTyped Data.Text.Internal.Text
    | PostVolumesIdActionsAttachResponseBody201ActionStatusEnumStringError
    | PostVolumesIdActionsAttachResponseBody201ActionStatusEnumStringRunning
    | PostVolumesIdActionsAttachResponseBody201ActionStatusEnumStringSuccess
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostVolumesIdActionsAttachResponseBody201ActionStatus
    where toJSON (PostVolumesIdActionsAttachResponseBody201ActionStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostVolumesIdActionsAttachResponseBody201ActionStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostVolumesIdActionsAttachResponseBody201ActionStatusEnumStringError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error"
          toJSON (PostVolumesIdActionsAttachResponseBody201ActionStatusEnumStringRunning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running"
          toJSON (PostVolumesIdActionsAttachResponseBody201ActionStatusEnumStringSuccess) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success"
instance Data.Aeson.FromJSON PostVolumesIdActionsAttachResponseBody201ActionStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error")
                                          then PostVolumesIdActionsAttachResponseBody201ActionStatusEnumStringError
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running")
                                                then PostVolumesIdActionsAttachResponseBody201ActionStatusEnumStringRunning
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success")
                                                      then PostVolumesIdActionsAttachResponseBody201ActionStatusEnumStringSuccess
                                                      else PostVolumesIdActionsAttachResponseBody201ActionStatusEnumOther val)
