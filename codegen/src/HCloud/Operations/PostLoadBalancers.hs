-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation postLoadBalancers
module HCloud.Operations.PostLoadBalancers where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > POST /load_balancers
-- 
-- Creates a Load Balancer.
-- 
-- \#\#\#\# Call specific error codes
-- 
-- | Code                                    | Description                                                                                           |
-- |-----------------------------------------|-------------------------------------------------------------------------------------------------------|
-- | \`cloud_resource_ip_not_allowed\`         | The IP you are trying to add as a target belongs to a Hetzner Cloud resource                          |
-- | \`ip_not_owned\`                          | The IP is not owned by the owner of the project of the Load Balancer                                  |
-- | \`load_balancer_not_attached_to_network\` | The Load Balancer is not attached to a network                                                        |
-- | \`robot_unavailable\`                     | Robot was not available. The caller may retry the operation after a short delay.                      |
-- | \`server_not_attached_to_network\`        | The server you are trying to add as a target is not attached to the same network as the Load Balancer |
-- | \`source_port_already_used\`              | The source port you are trying to add is already in use                                               |
-- | \`target_already_defined\`                | The Load Balancer target you are trying to define is already defined                                  |
postLoadBalancers :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Maybe.Maybe PostLoadBalancersRequestBody                                                                                  -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response PostLoadBalancersResponse)) -- ^ Monad containing the result of the operation
postLoadBalancers config
                  body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostLoadBalancersResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostLoadBalancersResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                     PostLoadBalancersResponseBody201)
                                                                                                                                                                                    | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/load_balancers") [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /load_balancers
-- 
-- The same as 'postLoadBalancers' but returns the raw 'Data.ByteString.Char8.ByteString'
postLoadBalancersRaw :: forall m s . (HCloud.Common.MonadHTTP m,
                                      HCloud.Common.SecurityScheme s) =>
                        HCloud.Common.Configuration s ->
                        GHC.Maybe.Maybe PostLoadBalancersRequestBody ->
                        m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                              (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postLoadBalancersRaw config
                     body = GHC.Base.id (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/load_balancers") [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /load_balancers
-- 
-- Monadic version of 'postLoadBalancers' (use with 'HCloud.Common.runWithConfiguration')
postLoadBalancersM :: forall m s . (HCloud.Common.MonadHTTP m,
                                    HCloud.Common.SecurityScheme s) =>
                      GHC.Maybe.Maybe PostLoadBalancersRequestBody ->
                      Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                         m
                                                         (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                             (Network.HTTP.Client.Types.Response PostLoadBalancersResponse))
postLoadBalancersM body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostLoadBalancersResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostLoadBalancersResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                      PostLoadBalancersResponseBody201)
                                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/load_balancers") [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /load_balancers
-- 
-- Monadic version of 'postLoadBalancersRaw' (use with 'HCloud.Common.runWithConfiguration')
postLoadBalancersRawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                       HCloud.Common.SecurityScheme s) =>
                         GHC.Maybe.Maybe PostLoadBalancersRequestBody ->
                         Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                            m
                                                            (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postLoadBalancersRawM body = GHC.Base.id (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/load_balancers") [] body HCloud.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema postLoadBalancersRequestBody
-- 
-- 
data PostLoadBalancersRequestBody = PostLoadBalancersRequestBody {
  -- | algorithm: Algorithm of the Load Balancer
  postLoadBalancersRequestBodyAlgorithm :: PostLoadBalancersRequestBodyAlgorithm
  -- | labels: User-defined labels (key-value pairs)
  , postLoadBalancersRequestBodyLabels :: (GHC.Maybe.Maybe PostLoadBalancersRequestBodyLabels)
  -- | load_balancer_type: ID or name of the Load Balancer type this Load Balancer should be created with
  , postLoadBalancersRequestBodyLoadBalancerType :: Data.Text.Internal.Text
  -- | location: ID or name of Location to create Load Balancer in
  , postLoadBalancersRequestBodyLocation :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | name: Name of the Load Balancer
  , postLoadBalancersRequestBodyName :: Data.Text.Internal.Text
  -- | network: ID of the network the Load Balancer should be attached to on creation
  , postLoadBalancersRequestBodyNetwork :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | network_zone: Name of network zone
  , postLoadBalancersRequestBodyNetworkZone :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | public_interface: Enable or disable the public interface of the Load Balancer
  , postLoadBalancersRequestBodyPublicInterface :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | services: Array of services
  , postLoadBalancersRequestBodyServices :: (GHC.Maybe.Maybe ([] PostLoadBalancersRequestBodyServices))
  -- | targets: Array of targets
  , postLoadBalancersRequestBodyTargets :: (GHC.Maybe.Maybe ([] PostLoadBalancersRequestBodyTargets))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "algorithm" (postLoadBalancersRequestBodyAlgorithm obj) : (Data.Aeson..=) "labels" (postLoadBalancersRequestBodyLabels obj) : (Data.Aeson..=) "load_balancer_type" (postLoadBalancersRequestBodyLoadBalancerType obj) : (Data.Aeson..=) "location" (postLoadBalancersRequestBodyLocation obj) : (Data.Aeson..=) "name" (postLoadBalancersRequestBodyName obj) : (Data.Aeson..=) "network" (postLoadBalancersRequestBodyNetwork obj) : (Data.Aeson..=) "network_zone" (postLoadBalancersRequestBodyNetworkZone obj) : (Data.Aeson..=) "public_interface" (postLoadBalancersRequestBodyPublicInterface obj) : (Data.Aeson..=) "services" (postLoadBalancersRequestBodyServices obj) : (Data.Aeson..=) "targets" (postLoadBalancersRequestBodyTargets obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "algorithm" (postLoadBalancersRequestBodyAlgorithm obj) GHC.Base.<> ((Data.Aeson..=) "labels" (postLoadBalancersRequestBodyLabels obj) GHC.Base.<> ((Data.Aeson..=) "load_balancer_type" (postLoadBalancersRequestBodyLoadBalancerType obj) GHC.Base.<> ((Data.Aeson..=) "location" (postLoadBalancersRequestBodyLocation obj) GHC.Base.<> ((Data.Aeson..=) "name" (postLoadBalancersRequestBodyName obj) GHC.Base.<> ((Data.Aeson..=) "network" (postLoadBalancersRequestBodyNetwork obj) GHC.Base.<> ((Data.Aeson..=) "network_zone" (postLoadBalancersRequestBodyNetworkZone obj) GHC.Base.<> ((Data.Aeson..=) "public_interface" (postLoadBalancersRequestBodyPublicInterface obj) GHC.Base.<> ((Data.Aeson..=) "services" (postLoadBalancersRequestBodyServices obj) GHC.Base.<> (Data.Aeson..=) "targets" (postLoadBalancersRequestBodyTargets obj))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersRequestBody" (\obj -> (((((((((GHC.Base.pure PostLoadBalancersRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "algorithm")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "labels")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "load_balancer_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "location")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "network")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "network_zone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "public_interface")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "services")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "targets"))
-- | Defines the data type for the schema postLoadBalancersRequestBodyAlgorithm
-- 
-- Algorithm of the Load Balancer
data PostLoadBalancersRequestBodyAlgorithm = PostLoadBalancersRequestBodyAlgorithm {
  -- | type: Type of the algorithm
  postLoadBalancersRequestBodyAlgorithmType :: PostLoadBalancersRequestBodyAlgorithmType
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersRequestBodyAlgorithm
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "type" (postLoadBalancersRequestBodyAlgorithmType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "type" (postLoadBalancersRequestBodyAlgorithmType obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersRequestBodyAlgorithm
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersRequestBodyAlgorithm" (\obj -> GHC.Base.pure PostLoadBalancersRequestBodyAlgorithm GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema postLoadBalancersRequestBodyAlgorithmType
-- 
-- Type of the algorithm
data PostLoadBalancersRequestBodyAlgorithmType
    = PostLoadBalancersRequestBodyAlgorithmTypeEnumOther Data.Aeson.Types.Internal.Value
    | PostLoadBalancersRequestBodyAlgorithmTypeEnumTyped Data.Text.Internal.Text
    | PostLoadBalancersRequestBodyAlgorithmTypeEnumStringLeastConnections
    | PostLoadBalancersRequestBodyAlgorithmTypeEnumStringRoundRobin
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersRequestBodyAlgorithmType
    where toJSON (PostLoadBalancersRequestBodyAlgorithmTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostLoadBalancersRequestBodyAlgorithmTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostLoadBalancersRequestBodyAlgorithmTypeEnumStringLeastConnections) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "least_connections"
          toJSON (PostLoadBalancersRequestBodyAlgorithmTypeEnumStringRoundRobin) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "round_robin"
instance Data.Aeson.FromJSON PostLoadBalancersRequestBodyAlgorithmType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "least_connections")
                                          then PostLoadBalancersRequestBodyAlgorithmTypeEnumStringLeastConnections
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "round_robin")
                                                then PostLoadBalancersRequestBodyAlgorithmTypeEnumStringRoundRobin
                                                else PostLoadBalancersRequestBodyAlgorithmTypeEnumOther val)
-- | Defines the data type for the schema postLoadBalancersRequestBodyLabels
-- 
-- User-defined labels (key-value pairs)
data PostLoadBalancersRequestBodyLabels = PostLoadBalancersRequestBodyLabels {
  -- | labelkey: New label
  postLoadBalancersRequestBodyLabelsLabelkey :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersRequestBodyLabels
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "labelkey" (postLoadBalancersRequestBodyLabelsLabelkey obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "labelkey" (postLoadBalancersRequestBodyLabelsLabelkey obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersRequestBodyLabels
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersRequestBodyLabels" (\obj -> GHC.Base.pure PostLoadBalancersRequestBodyLabels GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "labelkey"))
-- | Defines the data type for the schema postLoadBalancersRequestBodyServices
-- 
-- 
data PostLoadBalancersRequestBodyServices = PostLoadBalancersRequestBodyServices {
  -- | destination_port: Port the Load Balancer will balance to
  postLoadBalancersRequestBodyServicesDestinationPort :: GHC.Integer.Type.Integer
  -- | health_check: Service health check
  , postLoadBalancersRequestBodyServicesHealthCheck :: PostLoadBalancersRequestBodyServicesHealthCheck
  -- | http: Configuration option for protocols http and https
  , postLoadBalancersRequestBodyServicesHttp :: (GHC.Maybe.Maybe PostLoadBalancersRequestBodyServicesHttp)
  -- | listen_port: Port the Load Balancer listens on
  , postLoadBalancersRequestBodyServicesListenPort :: GHC.Integer.Type.Integer
  -- | protocol: Protocol of the Load Balancer
  , postLoadBalancersRequestBodyServicesProtocol :: PostLoadBalancersRequestBodyServicesProtocol
  -- | proxyprotocol: Is Proxyprotocol enabled or not
  , postLoadBalancersRequestBodyServicesProxyprotocol :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersRequestBodyServices
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "destination_port" (postLoadBalancersRequestBodyServicesDestinationPort obj) : (Data.Aeson..=) "health_check" (postLoadBalancersRequestBodyServicesHealthCheck obj) : (Data.Aeson..=) "http" (postLoadBalancersRequestBodyServicesHttp obj) : (Data.Aeson..=) "listen_port" (postLoadBalancersRequestBodyServicesListenPort obj) : (Data.Aeson..=) "protocol" (postLoadBalancersRequestBodyServicesProtocol obj) : (Data.Aeson..=) "proxyprotocol" (postLoadBalancersRequestBodyServicesProxyprotocol obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "destination_port" (postLoadBalancersRequestBodyServicesDestinationPort obj) GHC.Base.<> ((Data.Aeson..=) "health_check" (postLoadBalancersRequestBodyServicesHealthCheck obj) GHC.Base.<> ((Data.Aeson..=) "http" (postLoadBalancersRequestBodyServicesHttp obj) GHC.Base.<> ((Data.Aeson..=) "listen_port" (postLoadBalancersRequestBodyServicesListenPort obj) GHC.Base.<> ((Data.Aeson..=) "protocol" (postLoadBalancersRequestBodyServicesProtocol obj) GHC.Base.<> (Data.Aeson..=) "proxyprotocol" (postLoadBalancersRequestBodyServicesProxyprotocol obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersRequestBodyServices
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersRequestBodyServices" (\obj -> (((((GHC.Base.pure PostLoadBalancersRequestBodyServices GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "destination_port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "health_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "http")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "listen_port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "protocol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "proxyprotocol"))
-- | Defines the data type for the schema postLoadBalancersRequestBodyServicesHealth_check
-- 
-- Service health check
data PostLoadBalancersRequestBodyServicesHealthCheck = PostLoadBalancersRequestBodyServicesHealthCheck {
  -- | http: Additional configuration for protocol http
  postLoadBalancersRequestBodyServicesHealthCheckHttp :: (GHC.Maybe.Maybe PostLoadBalancersRequestBodyServicesHealthCheckHttp)
  -- | interval: Time interval in seconds health checks are performed
  , postLoadBalancersRequestBodyServicesHealthCheckInterval :: GHC.Integer.Type.Integer
  -- | port: Port the health check will be performed on
  , postLoadBalancersRequestBodyServicesHealthCheckPort :: GHC.Integer.Type.Integer
  -- | protocol: Type of the health check
  , postLoadBalancersRequestBodyServicesHealthCheckProtocol :: PostLoadBalancersRequestBodyServicesHealthCheckProtocol
  -- | retries: Unsuccessful retries needed until a target is considered unhealthy; an unhealthy target needs the same number of successful retries to become healthy again
  , postLoadBalancersRequestBodyServicesHealthCheckRetries :: GHC.Integer.Type.Integer
  -- | timeout: Time in seconds after an attempt is considered a timeout
  , postLoadBalancersRequestBodyServicesHealthCheckTimeout :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersRequestBodyServicesHealthCheck
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "http" (postLoadBalancersRequestBodyServicesHealthCheckHttp obj) : (Data.Aeson..=) "interval" (postLoadBalancersRequestBodyServicesHealthCheckInterval obj) : (Data.Aeson..=) "port" (postLoadBalancersRequestBodyServicesHealthCheckPort obj) : (Data.Aeson..=) "protocol" (postLoadBalancersRequestBodyServicesHealthCheckProtocol obj) : (Data.Aeson..=) "retries" (postLoadBalancersRequestBodyServicesHealthCheckRetries obj) : (Data.Aeson..=) "timeout" (postLoadBalancersRequestBodyServicesHealthCheckTimeout obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "http" (postLoadBalancersRequestBodyServicesHealthCheckHttp obj) GHC.Base.<> ((Data.Aeson..=) "interval" (postLoadBalancersRequestBodyServicesHealthCheckInterval obj) GHC.Base.<> ((Data.Aeson..=) "port" (postLoadBalancersRequestBodyServicesHealthCheckPort obj) GHC.Base.<> ((Data.Aeson..=) "protocol" (postLoadBalancersRequestBodyServicesHealthCheckProtocol obj) GHC.Base.<> ((Data.Aeson..=) "retries" (postLoadBalancersRequestBodyServicesHealthCheckRetries obj) GHC.Base.<> (Data.Aeson..=) "timeout" (postLoadBalancersRequestBodyServicesHealthCheckTimeout obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersRequestBodyServicesHealthCheck
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersRequestBodyServicesHealthCheck" (\obj -> (((((GHC.Base.pure PostLoadBalancersRequestBodyServicesHealthCheck GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "http")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "protocol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "retries")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "timeout"))
-- | Defines the data type for the schema postLoadBalancersRequestBodyServicesHealth_checkHttp
-- 
-- Additional configuration for protocol http
data PostLoadBalancersRequestBodyServicesHealthCheckHttp = PostLoadBalancersRequestBodyServicesHealthCheckHttp {
  -- | domain: Host header to send in the HTTP request. May not contain spaces, percent or backslash symbols. Can be null, in that case no host header is sent.
  postLoadBalancersRequestBodyServicesHealthCheckHttpDomain :: Data.Text.Internal.Text
  -- | path: HTTP path to use for health checks
  , postLoadBalancersRequestBodyServicesHealthCheckHttpPath :: Data.Text.Internal.Text
  -- | response: String that must be contained in HTTP response in order to pass the health check
  , postLoadBalancersRequestBodyServicesHealthCheckHttpResponse :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | status_codes: List of returned HTTP status codes in order to pass the health check. Supports the wildcards \`?\` for exactly one character and \`*\` for multiple ones. The default is to pass the health check for any status code between 2?? and 3??.
  , postLoadBalancersRequestBodyServicesHealthCheckHttpStatusCodes :: (GHC.Maybe.Maybe ([] Data.Text.Internal.Text))
  -- | tls: Use HTTPS for health check
  , postLoadBalancersRequestBodyServicesHealthCheckHttpTls :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersRequestBodyServicesHealthCheckHttp
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "domain" (postLoadBalancersRequestBodyServicesHealthCheckHttpDomain obj) : (Data.Aeson..=) "path" (postLoadBalancersRequestBodyServicesHealthCheckHttpPath obj) : (Data.Aeson..=) "response" (postLoadBalancersRequestBodyServicesHealthCheckHttpResponse obj) : (Data.Aeson..=) "status_codes" (postLoadBalancersRequestBodyServicesHealthCheckHttpStatusCodes obj) : (Data.Aeson..=) "tls" (postLoadBalancersRequestBodyServicesHealthCheckHttpTls obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "domain" (postLoadBalancersRequestBodyServicesHealthCheckHttpDomain obj) GHC.Base.<> ((Data.Aeson..=) "path" (postLoadBalancersRequestBodyServicesHealthCheckHttpPath obj) GHC.Base.<> ((Data.Aeson..=) "response" (postLoadBalancersRequestBodyServicesHealthCheckHttpResponse obj) GHC.Base.<> ((Data.Aeson..=) "status_codes" (postLoadBalancersRequestBodyServicesHealthCheckHttpStatusCodes obj) GHC.Base.<> (Data.Aeson..=) "tls" (postLoadBalancersRequestBodyServicesHealthCheckHttpTls obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersRequestBodyServicesHealthCheckHttp
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersRequestBodyServicesHealthCheckHttp" (\obj -> ((((GHC.Base.pure PostLoadBalancersRequestBodyServicesHealthCheckHttp GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "domain")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "path")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "response")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status_codes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tls"))
-- | Defines the enum schema postLoadBalancersRequestBodyServicesHealth_checkProtocol
-- 
-- Type of the health check
data PostLoadBalancersRequestBodyServicesHealthCheckProtocol
    = PostLoadBalancersRequestBodyServicesHealthCheckProtocolEnumOther Data.Aeson.Types.Internal.Value
    | PostLoadBalancersRequestBodyServicesHealthCheckProtocolEnumTyped Data.Text.Internal.Text
    | PostLoadBalancersRequestBodyServicesHealthCheckProtocolEnumStringHttp
    | PostLoadBalancersRequestBodyServicesHealthCheckProtocolEnumStringTcp
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersRequestBodyServicesHealthCheckProtocol
    where toJSON (PostLoadBalancersRequestBodyServicesHealthCheckProtocolEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostLoadBalancersRequestBodyServicesHealthCheckProtocolEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostLoadBalancersRequestBodyServicesHealthCheckProtocolEnumStringHttp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http"
          toJSON (PostLoadBalancersRequestBodyServicesHealthCheckProtocolEnumStringTcp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tcp"
instance Data.Aeson.FromJSON PostLoadBalancersRequestBodyServicesHealthCheckProtocol
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http")
                                          then PostLoadBalancersRequestBodyServicesHealthCheckProtocolEnumStringHttp
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tcp")
                                                then PostLoadBalancersRequestBodyServicesHealthCheckProtocolEnumStringTcp
                                                else PostLoadBalancersRequestBodyServicesHealthCheckProtocolEnumOther val)
-- | Defines the data type for the schema postLoadBalancersRequestBodyServicesHttp
-- 
-- Configuration option for protocols http and https
data PostLoadBalancersRequestBodyServicesHttp = PostLoadBalancersRequestBodyServicesHttp {
  -- | certificates: IDs of the Certificates to use for TLS\/SSL termination by the Load Balancer; empty for TLS\/SSL passthrough or if \`protocol\` is \"http\"
  postLoadBalancersRequestBodyServicesHttpCertificates :: (GHC.Maybe.Maybe ([] GHC.Integer.Type.Integer))
  -- | cookie_lifetime: Lifetime of the cookie used for sticky sessions
  , postLoadBalancersRequestBodyServicesHttpCookieLifetime :: GHC.Integer.Type.Integer
  -- | cookie_name: Name of the cookie used for sticky sessions
  , postLoadBalancersRequestBodyServicesHttpCookieName :: Data.Text.Internal.Text
  -- | redirect_http: Redirect HTTP requests to HTTPS. Only available if protocol is \"https\". Default \`false\`
  , postLoadBalancersRequestBodyServicesHttpRedirectHttp :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | sticky_sessions: Use sticky sessions. Only available if protocol is \"http\" or \"https\". Default \`false\`
  , postLoadBalancersRequestBodyServicesHttpStickySessions :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersRequestBodyServicesHttp
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "certificates" (postLoadBalancersRequestBodyServicesHttpCertificates obj) : (Data.Aeson..=) "cookie_lifetime" (postLoadBalancersRequestBodyServicesHttpCookieLifetime obj) : (Data.Aeson..=) "cookie_name" (postLoadBalancersRequestBodyServicesHttpCookieName obj) : (Data.Aeson..=) "redirect_http" (postLoadBalancersRequestBodyServicesHttpRedirectHttp obj) : (Data.Aeson..=) "sticky_sessions" (postLoadBalancersRequestBodyServicesHttpStickySessions obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "certificates" (postLoadBalancersRequestBodyServicesHttpCertificates obj) GHC.Base.<> ((Data.Aeson..=) "cookie_lifetime" (postLoadBalancersRequestBodyServicesHttpCookieLifetime obj) GHC.Base.<> ((Data.Aeson..=) "cookie_name" (postLoadBalancersRequestBodyServicesHttpCookieName obj) GHC.Base.<> ((Data.Aeson..=) "redirect_http" (postLoadBalancersRequestBodyServicesHttpRedirectHttp obj) GHC.Base.<> (Data.Aeson..=) "sticky_sessions" (postLoadBalancersRequestBodyServicesHttpStickySessions obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersRequestBodyServicesHttp
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersRequestBodyServicesHttp" (\obj -> ((((GHC.Base.pure PostLoadBalancersRequestBodyServicesHttp GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "certificates")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cookie_lifetime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cookie_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "redirect_http")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sticky_sessions"))
-- | Defines the enum schema postLoadBalancersRequestBodyServicesProtocol
-- 
-- Protocol of the Load Balancer
data PostLoadBalancersRequestBodyServicesProtocol
    = PostLoadBalancersRequestBodyServicesProtocolEnumOther Data.Aeson.Types.Internal.Value
    | PostLoadBalancersRequestBodyServicesProtocolEnumTyped Data.Text.Internal.Text
    | PostLoadBalancersRequestBodyServicesProtocolEnumStringHttp
    | PostLoadBalancersRequestBodyServicesProtocolEnumStringHttps
    | PostLoadBalancersRequestBodyServicesProtocolEnumStringTcp
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersRequestBodyServicesProtocol
    where toJSON (PostLoadBalancersRequestBodyServicesProtocolEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostLoadBalancersRequestBodyServicesProtocolEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostLoadBalancersRequestBodyServicesProtocolEnumStringHttp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http"
          toJSON (PostLoadBalancersRequestBodyServicesProtocolEnumStringHttps) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "https"
          toJSON (PostLoadBalancersRequestBodyServicesProtocolEnumStringTcp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tcp"
instance Data.Aeson.FromJSON PostLoadBalancersRequestBodyServicesProtocol
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http")
                                          then PostLoadBalancersRequestBodyServicesProtocolEnumStringHttp
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "https")
                                                then PostLoadBalancersRequestBodyServicesProtocolEnumStringHttps
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tcp")
                                                      then PostLoadBalancersRequestBodyServicesProtocolEnumStringTcp
                                                      else PostLoadBalancersRequestBodyServicesProtocolEnumOther val)
-- | Defines the data type for the schema postLoadBalancersRequestBodyTargets
-- 
-- 
data PostLoadBalancersRequestBodyTargets = PostLoadBalancersRequestBodyTargets {
  -- | health_status: List of health statuses of the services on this target
  postLoadBalancersRequestBodyTargetsHealthStatus :: (GHC.Maybe.Maybe ([] PostLoadBalancersRequestBodyTargetsHealthStatus))
  -- | ip: IP targets where the traffic should be routed through. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well.
  , postLoadBalancersRequestBodyTargetsIp :: (GHC.Maybe.Maybe PostLoadBalancersRequestBodyTargetsIp)
  -- | label_selector: Label selector and a list of selected targets
  , postLoadBalancersRequestBodyTargetsLabelSelector :: (GHC.Maybe.Maybe PostLoadBalancersRequestBodyTargetsLabelSelector)
  -- | server: Server where the traffic should be routed through
  , postLoadBalancersRequestBodyTargetsServer :: (GHC.Maybe.Maybe PostLoadBalancersRequestBodyTargetsServer)
  -- | targets: List of selected targets
  , postLoadBalancersRequestBodyTargetsTargets :: (GHC.Maybe.Maybe ([] PostLoadBalancersRequestBodyTargetsTargets))
  -- | type: Type of the resource
  , postLoadBalancersRequestBodyTargetsType :: PostLoadBalancersRequestBodyTargetsType
  -- | use_private_ip: Use the private network IP instead of the public IP. Default value is false.
  , postLoadBalancersRequestBodyTargetsUsePrivateIp :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersRequestBodyTargets
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "health_status" (postLoadBalancersRequestBodyTargetsHealthStatus obj) : (Data.Aeson..=) "ip" (postLoadBalancersRequestBodyTargetsIp obj) : (Data.Aeson..=) "label_selector" (postLoadBalancersRequestBodyTargetsLabelSelector obj) : (Data.Aeson..=) "server" (postLoadBalancersRequestBodyTargetsServer obj) : (Data.Aeson..=) "targets" (postLoadBalancersRequestBodyTargetsTargets obj) : (Data.Aeson..=) "type" (postLoadBalancersRequestBodyTargetsType obj) : (Data.Aeson..=) "use_private_ip" (postLoadBalancersRequestBodyTargetsUsePrivateIp obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "health_status" (postLoadBalancersRequestBodyTargetsHealthStatus obj) GHC.Base.<> ((Data.Aeson..=) "ip" (postLoadBalancersRequestBodyTargetsIp obj) GHC.Base.<> ((Data.Aeson..=) "label_selector" (postLoadBalancersRequestBodyTargetsLabelSelector obj) GHC.Base.<> ((Data.Aeson..=) "server" (postLoadBalancersRequestBodyTargetsServer obj) GHC.Base.<> ((Data.Aeson..=) "targets" (postLoadBalancersRequestBodyTargetsTargets obj) GHC.Base.<> ((Data.Aeson..=) "type" (postLoadBalancersRequestBodyTargetsType obj) GHC.Base.<> (Data.Aeson..=) "use_private_ip" (postLoadBalancersRequestBodyTargetsUsePrivateIp obj)))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersRequestBodyTargets
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersRequestBodyTargets" (\obj -> ((((((GHC.Base.pure PostLoadBalancersRequestBodyTargets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "health_status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label_selector")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "server")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "targets")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "use_private_ip"))
-- | Defines the data type for the schema postLoadBalancersRequestBodyTargetsHealth_status
-- 
-- 
data PostLoadBalancersRequestBodyTargetsHealthStatus = PostLoadBalancersRequestBodyTargetsHealthStatus {
  -- | listen_port
  postLoadBalancersRequestBodyTargetsHealthStatusListenPort :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | status
  , postLoadBalancersRequestBodyTargetsHealthStatusStatus :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersRequestBodyTargetsHealthStatus
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "listen_port" (postLoadBalancersRequestBodyTargetsHealthStatusListenPort obj) : (Data.Aeson..=) "status" (postLoadBalancersRequestBodyTargetsHealthStatusStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "listen_port" (postLoadBalancersRequestBodyTargetsHealthStatusListenPort obj) GHC.Base.<> (Data.Aeson..=) "status" (postLoadBalancersRequestBodyTargetsHealthStatusStatus obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersRequestBodyTargetsHealthStatus
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersRequestBodyTargetsHealthStatus" (\obj -> (GHC.Base.pure PostLoadBalancersRequestBodyTargetsHealthStatus GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "listen_port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status"))
-- | Defines the data type for the schema postLoadBalancersRequestBodyTargetsIp
-- 
-- IP targets where the traffic should be routed through. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well.
data PostLoadBalancersRequestBodyTargetsIp = PostLoadBalancersRequestBodyTargetsIp {
  -- | ip: IP of a server that belongs to the same customer (public IPv4\/IPv6) or private IP in a Subnetwork type vswitch.
  postLoadBalancersRequestBodyTargetsIpIp :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersRequestBodyTargetsIp
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "ip" (postLoadBalancersRequestBodyTargetsIpIp obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "ip" (postLoadBalancersRequestBodyTargetsIpIp obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersRequestBodyTargetsIp
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersRequestBodyTargetsIp" (\obj -> GHC.Base.pure PostLoadBalancersRequestBodyTargetsIp GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ip"))
-- | Defines the data type for the schema postLoadBalancersRequestBodyTargetsLabel_selector
-- 
-- Label selector and a list of selected targets
data PostLoadBalancersRequestBodyTargetsLabelSelector = PostLoadBalancersRequestBodyTargetsLabelSelector {
  -- | selector: Label selector
  postLoadBalancersRequestBodyTargetsLabelSelectorSelector :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersRequestBodyTargetsLabelSelector
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "selector" (postLoadBalancersRequestBodyTargetsLabelSelectorSelector obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "selector" (postLoadBalancersRequestBodyTargetsLabelSelectorSelector obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersRequestBodyTargetsLabelSelector
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersRequestBodyTargetsLabelSelector" (\obj -> GHC.Base.pure PostLoadBalancersRequestBodyTargetsLabelSelector GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "selector"))
-- | Defines the data type for the schema postLoadBalancersRequestBodyTargetsServer
-- 
-- Server where the traffic should be routed through
data PostLoadBalancersRequestBodyTargetsServer = PostLoadBalancersRequestBodyTargetsServer {
  -- | id: ID of the Server
  postLoadBalancersRequestBodyTargetsServerId :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersRequestBodyTargetsServer
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (postLoadBalancersRequestBodyTargetsServerId obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (postLoadBalancersRequestBodyTargetsServerId obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersRequestBodyTargetsServer
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersRequestBodyTargetsServer" (\obj -> GHC.Base.pure PostLoadBalancersRequestBodyTargetsServer GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id"))
-- | Defines the data type for the schema postLoadBalancersRequestBodyTargetsTargets
-- 
-- 
data PostLoadBalancersRequestBodyTargetsTargets = PostLoadBalancersRequestBodyTargetsTargets {
  -- | health_status
  postLoadBalancersRequestBodyTargetsTargetsHealthStatus :: (GHC.Maybe.Maybe ([] PostLoadBalancersRequestBodyTargetsTargetsHealthStatus))
  -- | server
  , postLoadBalancersRequestBodyTargetsTargetsServer :: (GHC.Maybe.Maybe PostLoadBalancersRequestBodyTargetsTargetsServer)
  -- | type
  , postLoadBalancersRequestBodyTargetsTargetsType :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | use_private_ip
  , postLoadBalancersRequestBodyTargetsTargetsUsePrivateIp :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersRequestBodyTargetsTargets
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "health_status" (postLoadBalancersRequestBodyTargetsTargetsHealthStatus obj) : (Data.Aeson..=) "server" (postLoadBalancersRequestBodyTargetsTargetsServer obj) : (Data.Aeson..=) "type" (postLoadBalancersRequestBodyTargetsTargetsType obj) : (Data.Aeson..=) "use_private_ip" (postLoadBalancersRequestBodyTargetsTargetsUsePrivateIp obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "health_status" (postLoadBalancersRequestBodyTargetsTargetsHealthStatus obj) GHC.Base.<> ((Data.Aeson..=) "server" (postLoadBalancersRequestBodyTargetsTargetsServer obj) GHC.Base.<> ((Data.Aeson..=) "type" (postLoadBalancersRequestBodyTargetsTargetsType obj) GHC.Base.<> (Data.Aeson..=) "use_private_ip" (postLoadBalancersRequestBodyTargetsTargetsUsePrivateIp obj))))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersRequestBodyTargetsTargets
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersRequestBodyTargetsTargets" (\obj -> (((GHC.Base.pure PostLoadBalancersRequestBodyTargetsTargets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "health_status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "server")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "use_private_ip"))
-- | Defines the data type for the schema postLoadBalancersRequestBodyTargetsTargetsHealth_status
-- 
-- 
data PostLoadBalancersRequestBodyTargetsTargetsHealthStatus = PostLoadBalancersRequestBodyTargetsTargetsHealthStatus {
  -- | listen_port
  postLoadBalancersRequestBodyTargetsTargetsHealthStatusListenPort :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | status
  , postLoadBalancersRequestBodyTargetsTargetsHealthStatusStatus :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersRequestBodyTargetsTargetsHealthStatus
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "listen_port" (postLoadBalancersRequestBodyTargetsTargetsHealthStatusListenPort obj) : (Data.Aeson..=) "status" (postLoadBalancersRequestBodyTargetsTargetsHealthStatusStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "listen_port" (postLoadBalancersRequestBodyTargetsTargetsHealthStatusListenPort obj) GHC.Base.<> (Data.Aeson..=) "status" (postLoadBalancersRequestBodyTargetsTargetsHealthStatusStatus obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersRequestBodyTargetsTargetsHealthStatus
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersRequestBodyTargetsTargetsHealthStatus" (\obj -> (GHC.Base.pure PostLoadBalancersRequestBodyTargetsTargetsHealthStatus GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "listen_port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status"))
-- | Defines the data type for the schema postLoadBalancersRequestBodyTargetsTargetsServer
-- 
-- 
data PostLoadBalancersRequestBodyTargetsTargetsServer = PostLoadBalancersRequestBodyTargetsTargetsServer {
  -- | id: ID of the Server
  postLoadBalancersRequestBodyTargetsTargetsServerId :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersRequestBodyTargetsTargetsServer
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (postLoadBalancersRequestBodyTargetsTargetsServerId obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (postLoadBalancersRequestBodyTargetsTargetsServerId obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersRequestBodyTargetsTargetsServer
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersRequestBodyTargetsTargetsServer" (\obj -> GHC.Base.pure PostLoadBalancersRequestBodyTargetsTargetsServer GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id"))
-- | Defines the enum schema postLoadBalancersRequestBodyTargetsType
-- 
-- Type of the resource
data PostLoadBalancersRequestBodyTargetsType
    = PostLoadBalancersRequestBodyTargetsTypeEnumOther Data.Aeson.Types.Internal.Value
    | PostLoadBalancersRequestBodyTargetsTypeEnumTyped Data.Text.Internal.Text
    | PostLoadBalancersRequestBodyTargetsTypeEnumStringIp
    | PostLoadBalancersRequestBodyTargetsTypeEnumStringLabelSelector
    | PostLoadBalancersRequestBodyTargetsTypeEnumStringServer
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersRequestBodyTargetsType
    where toJSON (PostLoadBalancersRequestBodyTargetsTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostLoadBalancersRequestBodyTargetsTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostLoadBalancersRequestBodyTargetsTypeEnumStringIp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ip"
          toJSON (PostLoadBalancersRequestBodyTargetsTypeEnumStringLabelSelector) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "label_selector"
          toJSON (PostLoadBalancersRequestBodyTargetsTypeEnumStringServer) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "server"
instance Data.Aeson.FromJSON PostLoadBalancersRequestBodyTargetsType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ip")
                                          then PostLoadBalancersRequestBodyTargetsTypeEnumStringIp
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "label_selector")
                                                then PostLoadBalancersRequestBodyTargetsTypeEnumStringLabelSelector
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "server")
                                                      then PostLoadBalancersRequestBodyTargetsTypeEnumStringServer
                                                      else PostLoadBalancersRequestBodyTargetsTypeEnumOther val)
-- | Represents a response of the operation 'postLoadBalancers'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostLoadBalancersResponseError' is used.
data PostLoadBalancersResponse =                                   
   PostLoadBalancersResponseError GHC.Base.String                  -- ^ Means either no matching case available or a parse error
  | PostLoadBalancersResponse201 PostLoadBalancersResponseBody201  -- ^ The \`load_balancer\` key contains the Load Balancer that was just created
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema PostLoadBalancersResponseBody201
-- 
-- 
data PostLoadBalancersResponseBody201 = PostLoadBalancersResponseBody201 {
  -- | action
  postLoadBalancersResponseBody201Action :: PostLoadBalancersResponseBody201Action
  -- | load_balancer
  , postLoadBalancersResponseBody201LoadBalancer :: PostLoadBalancersResponseBody201LoadBalancer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersResponseBody201
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "action" (postLoadBalancersResponseBody201Action obj) : (Data.Aeson..=) "load_balancer" (postLoadBalancersResponseBody201LoadBalancer obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "action" (postLoadBalancersResponseBody201Action obj) GHC.Base.<> (Data.Aeson..=) "load_balancer" (postLoadBalancersResponseBody201LoadBalancer obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersResponseBody201
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersResponseBody201" (\obj -> (GHC.Base.pure PostLoadBalancersResponseBody201 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "action")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "load_balancer"))
-- | Defines the data type for the schema PostLoadBalancersResponseBody201Action
-- 
-- 
data PostLoadBalancersResponseBody201Action = PostLoadBalancersResponseBody201Action {
  -- | command: Command executed in the Action
  postLoadBalancersResponseBody201ActionCommand :: Data.Text.Internal.Text
  -- | error: Error message for the Action if error occurred, otherwise null
  , postLoadBalancersResponseBody201ActionError :: PostLoadBalancersResponseBody201ActionError
  -- | finished: Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
  , postLoadBalancersResponseBody201ActionFinished :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , postLoadBalancersResponseBody201ActionId :: GHC.Integer.Type.Integer
  -- | progress: Progress of Action in percent
  , postLoadBalancersResponseBody201ActionProgress :: GHC.Types.Double
  -- | resources: Resources the Action relates to
  , postLoadBalancersResponseBody201ActionResources :: ([] PostLoadBalancersResponseBody201ActionResources)
  -- | started: Point in time when the Action was started (in ISO-8601 format)
  , postLoadBalancersResponseBody201ActionStarted :: Data.Text.Internal.Text
  -- | status: Status of the Action
  , postLoadBalancersResponseBody201ActionStatus :: PostLoadBalancersResponseBody201ActionStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersResponseBody201Action
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "command" (postLoadBalancersResponseBody201ActionCommand obj) : (Data.Aeson..=) "error" (postLoadBalancersResponseBody201ActionError obj) : (Data.Aeson..=) "finished" (postLoadBalancersResponseBody201ActionFinished obj) : (Data.Aeson..=) "id" (postLoadBalancersResponseBody201ActionId obj) : (Data.Aeson..=) "progress" (postLoadBalancersResponseBody201ActionProgress obj) : (Data.Aeson..=) "resources" (postLoadBalancersResponseBody201ActionResources obj) : (Data.Aeson..=) "started" (postLoadBalancersResponseBody201ActionStarted obj) : (Data.Aeson..=) "status" (postLoadBalancersResponseBody201ActionStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "command" (postLoadBalancersResponseBody201ActionCommand obj) GHC.Base.<> ((Data.Aeson..=) "error" (postLoadBalancersResponseBody201ActionError obj) GHC.Base.<> ((Data.Aeson..=) "finished" (postLoadBalancersResponseBody201ActionFinished obj) GHC.Base.<> ((Data.Aeson..=) "id" (postLoadBalancersResponseBody201ActionId obj) GHC.Base.<> ((Data.Aeson..=) "progress" (postLoadBalancersResponseBody201ActionProgress obj) GHC.Base.<> ((Data.Aeson..=) "resources" (postLoadBalancersResponseBody201ActionResources obj) GHC.Base.<> ((Data.Aeson..=) "started" (postLoadBalancersResponseBody201ActionStarted obj) GHC.Base.<> (Data.Aeson..=) "status" (postLoadBalancersResponseBody201ActionStatus obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersResponseBody201Action
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersResponseBody201Action" (\obj -> (((((((GHC.Base.pure PostLoadBalancersResponseBody201Action GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "command")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "finished")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "started")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Defines the data type for the schema PostLoadBalancersResponseBody201ActionError
-- 
-- Error message for the Action if error occurred, otherwise null
data PostLoadBalancersResponseBody201ActionError = PostLoadBalancersResponseBody201ActionError {
  -- | code: Fixed machine readable code
  postLoadBalancersResponseBody201ActionErrorCode :: Data.Text.Internal.Text
  -- | message: Humanized error message
  , postLoadBalancersResponseBody201ActionErrorMessage :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersResponseBody201ActionError
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "code" (postLoadBalancersResponseBody201ActionErrorCode obj) : (Data.Aeson..=) "message" (postLoadBalancersResponseBody201ActionErrorMessage obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "code" (postLoadBalancersResponseBody201ActionErrorCode obj) GHC.Base.<> (Data.Aeson..=) "message" (postLoadBalancersResponseBody201ActionErrorMessage obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersResponseBody201ActionError
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersResponseBody201ActionError" (\obj -> (GHC.Base.pure PostLoadBalancersResponseBody201ActionError GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Defines the data type for the schema PostLoadBalancersResponseBody201ActionResources
-- 
-- 
data PostLoadBalancersResponseBody201ActionResources = PostLoadBalancersResponseBody201ActionResources {
  -- | id: ID of the Resource
  postLoadBalancersResponseBody201ActionResourcesId :: GHC.Integer.Type.Integer
  -- | type: Type of resource referenced
  , postLoadBalancersResponseBody201ActionResourcesType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersResponseBody201ActionResources
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (postLoadBalancersResponseBody201ActionResourcesId obj) : (Data.Aeson..=) "type" (postLoadBalancersResponseBody201ActionResourcesType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (postLoadBalancersResponseBody201ActionResourcesId obj) GHC.Base.<> (Data.Aeson..=) "type" (postLoadBalancersResponseBody201ActionResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersResponseBody201ActionResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersResponseBody201ActionResources" (\obj -> (GHC.Base.pure PostLoadBalancersResponseBody201ActionResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema PostLoadBalancersResponseBody201ActionStatus
-- 
-- Status of the Action
data PostLoadBalancersResponseBody201ActionStatus
    = PostLoadBalancersResponseBody201ActionStatusEnumOther Data.Aeson.Types.Internal.Value
    | PostLoadBalancersResponseBody201ActionStatusEnumTyped Data.Text.Internal.Text
    | PostLoadBalancersResponseBody201ActionStatusEnumStringError
    | PostLoadBalancersResponseBody201ActionStatusEnumStringRunning
    | PostLoadBalancersResponseBody201ActionStatusEnumStringSuccess
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersResponseBody201ActionStatus
    where toJSON (PostLoadBalancersResponseBody201ActionStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostLoadBalancersResponseBody201ActionStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostLoadBalancersResponseBody201ActionStatusEnumStringError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error"
          toJSON (PostLoadBalancersResponseBody201ActionStatusEnumStringRunning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running"
          toJSON (PostLoadBalancersResponseBody201ActionStatusEnumStringSuccess) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success"
instance Data.Aeson.FromJSON PostLoadBalancersResponseBody201ActionStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error")
                                          then PostLoadBalancersResponseBody201ActionStatusEnumStringError
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running")
                                                then PostLoadBalancersResponseBody201ActionStatusEnumStringRunning
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success")
                                                      then PostLoadBalancersResponseBody201ActionStatusEnumStringSuccess
                                                      else PostLoadBalancersResponseBody201ActionStatusEnumOther val)
-- | Defines the data type for the schema PostLoadBalancersResponseBody201Load_balancer
-- 
-- 
data PostLoadBalancersResponseBody201LoadBalancer = PostLoadBalancersResponseBody201LoadBalancer {
  -- | algorithm: Algorithm of the Load Balancer
  postLoadBalancersResponseBody201LoadBalancerAlgorithm :: PostLoadBalancersResponseBody201LoadBalancerAlgorithm
  -- | created: Point in time when the Resource was created (in ISO-8601 format)
  , postLoadBalancersResponseBody201LoadBalancerCreated :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , postLoadBalancersResponseBody201LoadBalancerId :: GHC.Integer.Type.Integer
  -- | included_traffic: Free Traffic for the current billing period in bytes
  , postLoadBalancersResponseBody201LoadBalancerIncludedTraffic :: GHC.Integer.Type.Integer
  -- | ingoing_traffic: Inbound Traffic for the current billing period in bytes
  , postLoadBalancersResponseBody201LoadBalancerIngoingTraffic :: GHC.Integer.Type.Integer
  -- | labels: User-defined labels (key-value pairs)
  , postLoadBalancersResponseBody201LoadBalancerLabels :: PostLoadBalancersResponseBody201LoadBalancerLabels
  -- | load_balancer_type
  , postLoadBalancersResponseBody201LoadBalancerLoadBalancerType :: PostLoadBalancersResponseBody201LoadBalancerLoadBalancerType
  -- | location
  , postLoadBalancersResponseBody201LoadBalancerLocation :: PostLoadBalancersResponseBody201LoadBalancerLocation
  -- | name: Name of the Resource. Must be unique per Project.
  , postLoadBalancersResponseBody201LoadBalancerName :: Data.Text.Internal.Text
  -- | outgoing_traffic: Outbound Traffic for the current billing period in bytes
  , postLoadBalancersResponseBody201LoadBalancerOutgoingTraffic :: GHC.Integer.Type.Integer
  -- | private_net: Private networks information
  , postLoadBalancersResponseBody201LoadBalancerPrivateNet :: ([] PostLoadBalancersResponseBody201LoadBalancerPrivateNet)
  -- | protection: Protection configuration for the Resource
  , postLoadBalancersResponseBody201LoadBalancerProtection :: PostLoadBalancersResponseBody201LoadBalancerProtection
  -- | public_net: Public network information
  , postLoadBalancersResponseBody201LoadBalancerPublicNet :: PostLoadBalancersResponseBody201LoadBalancerPublicNet
  -- | services: List of services that belong to this Load Balancer
  , postLoadBalancersResponseBody201LoadBalancerServices :: ([] PostLoadBalancersResponseBody201LoadBalancerServices)
  -- | targets: List of targets that belong to this Load Balancer
  , postLoadBalancersResponseBody201LoadBalancerTargets :: ([] PostLoadBalancersResponseBody201LoadBalancerTargets)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersResponseBody201LoadBalancer
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "algorithm" (postLoadBalancersResponseBody201LoadBalancerAlgorithm obj) : (Data.Aeson..=) "created" (postLoadBalancersResponseBody201LoadBalancerCreated obj) : (Data.Aeson..=) "id" (postLoadBalancersResponseBody201LoadBalancerId obj) : (Data.Aeson..=) "included_traffic" (postLoadBalancersResponseBody201LoadBalancerIncludedTraffic obj) : (Data.Aeson..=) "ingoing_traffic" (postLoadBalancersResponseBody201LoadBalancerIngoingTraffic obj) : (Data.Aeson..=) "labels" (postLoadBalancersResponseBody201LoadBalancerLabels obj) : (Data.Aeson..=) "load_balancer_type" (postLoadBalancersResponseBody201LoadBalancerLoadBalancerType obj) : (Data.Aeson..=) "location" (postLoadBalancersResponseBody201LoadBalancerLocation obj) : (Data.Aeson..=) "name" (postLoadBalancersResponseBody201LoadBalancerName obj) : (Data.Aeson..=) "outgoing_traffic" (postLoadBalancersResponseBody201LoadBalancerOutgoingTraffic obj) : (Data.Aeson..=) "private_net" (postLoadBalancersResponseBody201LoadBalancerPrivateNet obj) : (Data.Aeson..=) "protection" (postLoadBalancersResponseBody201LoadBalancerProtection obj) : (Data.Aeson..=) "public_net" (postLoadBalancersResponseBody201LoadBalancerPublicNet obj) : (Data.Aeson..=) "services" (postLoadBalancersResponseBody201LoadBalancerServices obj) : (Data.Aeson..=) "targets" (postLoadBalancersResponseBody201LoadBalancerTargets obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "algorithm" (postLoadBalancersResponseBody201LoadBalancerAlgorithm obj) GHC.Base.<> ((Data.Aeson..=) "created" (postLoadBalancersResponseBody201LoadBalancerCreated obj) GHC.Base.<> ((Data.Aeson..=) "id" (postLoadBalancersResponseBody201LoadBalancerId obj) GHC.Base.<> ((Data.Aeson..=) "included_traffic" (postLoadBalancersResponseBody201LoadBalancerIncludedTraffic obj) GHC.Base.<> ((Data.Aeson..=) "ingoing_traffic" (postLoadBalancersResponseBody201LoadBalancerIngoingTraffic obj) GHC.Base.<> ((Data.Aeson..=) "labels" (postLoadBalancersResponseBody201LoadBalancerLabels obj) GHC.Base.<> ((Data.Aeson..=) "load_balancer_type" (postLoadBalancersResponseBody201LoadBalancerLoadBalancerType obj) GHC.Base.<> ((Data.Aeson..=) "location" (postLoadBalancersResponseBody201LoadBalancerLocation obj) GHC.Base.<> ((Data.Aeson..=) "name" (postLoadBalancersResponseBody201LoadBalancerName obj) GHC.Base.<> ((Data.Aeson..=) "outgoing_traffic" (postLoadBalancersResponseBody201LoadBalancerOutgoingTraffic obj) GHC.Base.<> ((Data.Aeson..=) "private_net" (postLoadBalancersResponseBody201LoadBalancerPrivateNet obj) GHC.Base.<> ((Data.Aeson..=) "protection" (postLoadBalancersResponseBody201LoadBalancerProtection obj) GHC.Base.<> ((Data.Aeson..=) "public_net" (postLoadBalancersResponseBody201LoadBalancerPublicNet obj) GHC.Base.<> ((Data.Aeson..=) "services" (postLoadBalancersResponseBody201LoadBalancerServices obj) GHC.Base.<> (Data.Aeson..=) "targets" (postLoadBalancersResponseBody201LoadBalancerTargets obj)))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersResponseBody201LoadBalancer
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersResponseBody201LoadBalancer" (\obj -> ((((((((((((((GHC.Base.pure PostLoadBalancersResponseBody201LoadBalancer GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "algorithm")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "included_traffic")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ingoing_traffic")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "labels")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "load_balancer_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "location")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "outgoing_traffic")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "private_net")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "protection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "public_net")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "services")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "targets"))
-- | Defines the data type for the schema PostLoadBalancersResponseBody201Load_balancerAlgorithm
-- 
-- Algorithm of the Load Balancer
data PostLoadBalancersResponseBody201LoadBalancerAlgorithm = PostLoadBalancersResponseBody201LoadBalancerAlgorithm {
  -- | type: Type of the algorithm
  postLoadBalancersResponseBody201LoadBalancerAlgorithmType :: PostLoadBalancersResponseBody201LoadBalancerAlgorithmType
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersResponseBody201LoadBalancerAlgorithm
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "type" (postLoadBalancersResponseBody201LoadBalancerAlgorithmType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "type" (postLoadBalancersResponseBody201LoadBalancerAlgorithmType obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersResponseBody201LoadBalancerAlgorithm
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersResponseBody201LoadBalancerAlgorithm" (\obj -> GHC.Base.pure PostLoadBalancersResponseBody201LoadBalancerAlgorithm GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema PostLoadBalancersResponseBody201Load_balancerAlgorithmType
-- 
-- Type of the algorithm
data PostLoadBalancersResponseBody201LoadBalancerAlgorithmType
    = PostLoadBalancersResponseBody201LoadBalancerAlgorithmTypeEnumOther Data.Aeson.Types.Internal.Value
    | PostLoadBalancersResponseBody201LoadBalancerAlgorithmTypeEnumTyped Data.Text.Internal.Text
    | PostLoadBalancersResponseBody201LoadBalancerAlgorithmTypeEnumStringLeastConnections
    | PostLoadBalancersResponseBody201LoadBalancerAlgorithmTypeEnumStringRoundRobin
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersResponseBody201LoadBalancerAlgorithmType
    where toJSON (PostLoadBalancersResponseBody201LoadBalancerAlgorithmTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostLoadBalancersResponseBody201LoadBalancerAlgorithmTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostLoadBalancersResponseBody201LoadBalancerAlgorithmTypeEnumStringLeastConnections) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "least_connections"
          toJSON (PostLoadBalancersResponseBody201LoadBalancerAlgorithmTypeEnumStringRoundRobin) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "round_robin"
instance Data.Aeson.FromJSON PostLoadBalancersResponseBody201LoadBalancerAlgorithmType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "least_connections")
                                          then PostLoadBalancersResponseBody201LoadBalancerAlgorithmTypeEnumStringLeastConnections
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "round_robin")
                                                then PostLoadBalancersResponseBody201LoadBalancerAlgorithmTypeEnumStringRoundRobin
                                                else PostLoadBalancersResponseBody201LoadBalancerAlgorithmTypeEnumOther val)
-- | Defines the data type for the schema PostLoadBalancersResponseBody201Load_balancerLabels
-- 
-- User-defined labels (key-value pairs)
data PostLoadBalancersResponseBody201LoadBalancerLabels = PostLoadBalancersResponseBody201LoadBalancerLabels {
  
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersResponseBody201LoadBalancerLabels
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersResponseBody201LoadBalancerLabels
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersResponseBody201LoadBalancerLabels" (\obj -> GHC.Base.pure PostLoadBalancersResponseBody201LoadBalancerLabels)
-- | Defines the data type for the schema PostLoadBalancersResponseBody201Load_balancerLoad_balancer_type
-- 
-- 
data PostLoadBalancersResponseBody201LoadBalancerLoadBalancerType = PostLoadBalancersResponseBody201LoadBalancerLoadBalancerType {
  -- | deprecated: Point in time when the Load Balancer type is deprecated (in ISO-8601 format)
  postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypeDeprecated :: Data.Text.Internal.Text
  -- | description: Description of the Load Balancer type
  , postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypeDescription :: Data.Text.Internal.Text
  -- | id: ID of the Load Balancer type
  , postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypeId :: GHC.Types.Double
  -- | max_assigned_certificates: Number of SSL Certificates that can be assigned to a single Load Balancer
  , postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypeMaxAssignedCertificates :: GHC.Types.Double
  -- | max_connections: Number of maximum simultaneous open connections
  , postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypeMaxConnections :: GHC.Types.Double
  -- | max_services: Number of services a Load Balancer of this type can have
  , postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypeMaxServices :: GHC.Types.Double
  -- | max_targets: Number of targets a single Load Balancer can have
  , postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypeMaxTargets :: GHC.Types.Double
  -- | name: Unique identifier of the Load Balancer type
  , postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypeName :: Data.Text.Internal.Text
  -- | prices: Prices in different network zones
  , postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePrices :: ([] PostLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePrices)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersResponseBody201LoadBalancerLoadBalancerType
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "deprecated" (postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypeDeprecated obj) : (Data.Aeson..=) "description" (postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypeDescription obj) : (Data.Aeson..=) "id" (postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypeId obj) : (Data.Aeson..=) "max_assigned_certificates" (postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypeMaxAssignedCertificates obj) : (Data.Aeson..=) "max_connections" (postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypeMaxConnections obj) : (Data.Aeson..=) "max_services" (postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypeMaxServices obj) : (Data.Aeson..=) "max_targets" (postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypeMaxTargets obj) : (Data.Aeson..=) "name" (postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypeName obj) : (Data.Aeson..=) "prices" (postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePrices obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "deprecated" (postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypeDeprecated obj) GHC.Base.<> ((Data.Aeson..=) "description" (postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypeDescription obj) GHC.Base.<> ((Data.Aeson..=) "id" (postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypeId obj) GHC.Base.<> ((Data.Aeson..=) "max_assigned_certificates" (postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypeMaxAssignedCertificates obj) GHC.Base.<> ((Data.Aeson..=) "max_connections" (postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypeMaxConnections obj) GHC.Base.<> ((Data.Aeson..=) "max_services" (postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypeMaxServices obj) GHC.Base.<> ((Data.Aeson..=) "max_targets" (postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypeMaxTargets obj) GHC.Base.<> ((Data.Aeson..=) "name" (postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypeName obj) GHC.Base.<> (Data.Aeson..=) "prices" (postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePrices obj)))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersResponseBody201LoadBalancerLoadBalancerType
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersResponseBody201LoadBalancerLoadBalancerType" (\obj -> ((((((((GHC.Base.pure PostLoadBalancersResponseBody201LoadBalancerLoadBalancerType GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "deprecated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "max_assigned_certificates")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "max_connections")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "max_services")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "max_targets")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "prices"))
-- | Defines the data type for the schema PostLoadBalancersResponseBody201Load_balancerLoad_balancer_typePrices
-- 
-- 
data PostLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePrices = PostLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePrices {
  -- | location: Name of the Location the price is for
  postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePricesLocation :: Data.Text.Internal.Text
  -- | price_hourly: Hourly costs for a Resource in this Location
  , postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePricesPriceHourly :: PostLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePricesPriceHourly
  -- | price_monthly: Monthly costs for a Resource in this Location
  , postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePricesPriceMonthly :: PostLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePricesPriceMonthly
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePrices
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "location" (postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePricesLocation obj) : (Data.Aeson..=) "price_hourly" (postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePricesPriceHourly obj) : (Data.Aeson..=) "price_monthly" (postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePricesPriceMonthly obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "location" (postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePricesLocation obj) GHC.Base.<> ((Data.Aeson..=) "price_hourly" (postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePricesPriceHourly obj) GHC.Base.<> (Data.Aeson..=) "price_monthly" (postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePricesPriceMonthly obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePrices
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePrices" (\obj -> ((GHC.Base.pure PostLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePrices GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "location")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price_hourly")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price_monthly"))
-- | Defines the data type for the schema PostLoadBalancersResponseBody201Load_balancerLoad_balancer_typePricesPrice_hourly
-- 
-- Hourly costs for a Resource in this Location
data PostLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePricesPriceHourly = PostLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePricesPriceHourly {
  -- | gross: Price with VAT added
  postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePricesPriceHourlyGross :: Data.Text.Internal.Text
  -- | net: Price without VAT
  , postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePricesPriceHourlyNet :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePricesPriceHourly
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "gross" (postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePricesPriceHourlyGross obj) : (Data.Aeson..=) "net" (postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePricesPriceHourlyNet obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "gross" (postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePricesPriceHourlyGross obj) GHC.Base.<> (Data.Aeson..=) "net" (postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePricesPriceHourlyNet obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePricesPriceHourly
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePricesPriceHourly" (\obj -> (GHC.Base.pure PostLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePricesPriceHourly GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "gross")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "net"))
-- | Defines the data type for the schema PostLoadBalancersResponseBody201Load_balancerLoad_balancer_typePricesPrice_monthly
-- 
-- Monthly costs for a Resource in this Location
data PostLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePricesPriceMonthly = PostLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePricesPriceMonthly {
  -- | gross: Price with VAT added
  postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePricesPriceMonthlyGross :: Data.Text.Internal.Text
  -- | net: Price without VAT
  , postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePricesPriceMonthlyNet :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePricesPriceMonthly
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "gross" (postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePricesPriceMonthlyGross obj) : (Data.Aeson..=) "net" (postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePricesPriceMonthlyNet obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "gross" (postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePricesPriceMonthlyGross obj) GHC.Base.<> (Data.Aeson..=) "net" (postLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePricesPriceMonthlyNet obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePricesPriceMonthly
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePricesPriceMonthly" (\obj -> (GHC.Base.pure PostLoadBalancersResponseBody201LoadBalancerLoadBalancerTypePricesPriceMonthly GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "gross")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "net"))
-- | Defines the data type for the schema PostLoadBalancersResponseBody201Load_balancerLocation
-- 
-- 
data PostLoadBalancersResponseBody201LoadBalancerLocation = PostLoadBalancersResponseBody201LoadBalancerLocation {
  -- | city: City the Location is closest to
  postLoadBalancersResponseBody201LoadBalancerLocationCity :: Data.Text.Internal.Text
  -- | country: ISO 3166-1 alpha-2 code of the country the Location resides in
  , postLoadBalancersResponseBody201LoadBalancerLocationCountry :: Data.Text.Internal.Text
  -- | description: Description of the Location
  , postLoadBalancersResponseBody201LoadBalancerLocationDescription :: Data.Text.Internal.Text
  -- | id: ID of the Location
  , postLoadBalancersResponseBody201LoadBalancerLocationId :: GHC.Types.Double
  -- | latitude: Latitude of the city closest to the Location
  , postLoadBalancersResponseBody201LoadBalancerLocationLatitude :: GHC.Types.Double
  -- | longitude: Longitude of the city closest to the Location
  , postLoadBalancersResponseBody201LoadBalancerLocationLongitude :: GHC.Types.Double
  -- | name: Unique identifier of the Location
  , postLoadBalancersResponseBody201LoadBalancerLocationName :: Data.Text.Internal.Text
  -- | network_zone: Name of network zone this Location resides in
  , postLoadBalancersResponseBody201LoadBalancerLocationNetworkZone :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersResponseBody201LoadBalancerLocation
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (postLoadBalancersResponseBody201LoadBalancerLocationCity obj) : (Data.Aeson..=) "country" (postLoadBalancersResponseBody201LoadBalancerLocationCountry obj) : (Data.Aeson..=) "description" (postLoadBalancersResponseBody201LoadBalancerLocationDescription obj) : (Data.Aeson..=) "id" (postLoadBalancersResponseBody201LoadBalancerLocationId obj) : (Data.Aeson..=) "latitude" (postLoadBalancersResponseBody201LoadBalancerLocationLatitude obj) : (Data.Aeson..=) "longitude" (postLoadBalancersResponseBody201LoadBalancerLocationLongitude obj) : (Data.Aeson..=) "name" (postLoadBalancersResponseBody201LoadBalancerLocationName obj) : (Data.Aeson..=) "network_zone" (postLoadBalancersResponseBody201LoadBalancerLocationNetworkZone obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (postLoadBalancersResponseBody201LoadBalancerLocationCity obj) GHC.Base.<> ((Data.Aeson..=) "country" (postLoadBalancersResponseBody201LoadBalancerLocationCountry obj) GHC.Base.<> ((Data.Aeson..=) "description" (postLoadBalancersResponseBody201LoadBalancerLocationDescription obj) GHC.Base.<> ((Data.Aeson..=) "id" (postLoadBalancersResponseBody201LoadBalancerLocationId obj) GHC.Base.<> ((Data.Aeson..=) "latitude" (postLoadBalancersResponseBody201LoadBalancerLocationLatitude obj) GHC.Base.<> ((Data.Aeson..=) "longitude" (postLoadBalancersResponseBody201LoadBalancerLocationLongitude obj) GHC.Base.<> ((Data.Aeson..=) "name" (postLoadBalancersResponseBody201LoadBalancerLocationName obj) GHC.Base.<> (Data.Aeson..=) "network_zone" (postLoadBalancersResponseBody201LoadBalancerLocationNetworkZone obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersResponseBody201LoadBalancerLocation
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersResponseBody201LoadBalancerLocation" (\obj -> (((((((GHC.Base.pure PostLoadBalancersResponseBody201LoadBalancerLocation GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "latitude")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "longitude")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "network_zone"))
-- | Defines the data type for the schema PostLoadBalancersResponseBody201Load_balancerPrivate_net
-- 
-- 
data PostLoadBalancersResponseBody201LoadBalancerPrivateNet = PostLoadBalancersResponseBody201LoadBalancerPrivateNet {
  -- | ip
  postLoadBalancersResponseBody201LoadBalancerPrivateNetIp :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | network
  , postLoadBalancersResponseBody201LoadBalancerPrivateNetNetwork :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersResponseBody201LoadBalancerPrivateNet
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "ip" (postLoadBalancersResponseBody201LoadBalancerPrivateNetIp obj) : (Data.Aeson..=) "network" (postLoadBalancersResponseBody201LoadBalancerPrivateNetNetwork obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "ip" (postLoadBalancersResponseBody201LoadBalancerPrivateNetIp obj) GHC.Base.<> (Data.Aeson..=) "network" (postLoadBalancersResponseBody201LoadBalancerPrivateNetNetwork obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersResponseBody201LoadBalancerPrivateNet
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersResponseBody201LoadBalancerPrivateNet" (\obj -> (GHC.Base.pure PostLoadBalancersResponseBody201LoadBalancerPrivateNet GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "network"))
-- | Defines the data type for the schema PostLoadBalancersResponseBody201Load_balancerProtection
-- 
-- Protection configuration for the Resource
data PostLoadBalancersResponseBody201LoadBalancerProtection = PostLoadBalancersResponseBody201LoadBalancerProtection {
  -- | delete: If true, prevents the Resource from being deleted
  postLoadBalancersResponseBody201LoadBalancerProtectionDelete :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersResponseBody201LoadBalancerProtection
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "delete" (postLoadBalancersResponseBody201LoadBalancerProtectionDelete obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "delete" (postLoadBalancersResponseBody201LoadBalancerProtectionDelete obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersResponseBody201LoadBalancerProtection
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersResponseBody201LoadBalancerProtection" (\obj -> GHC.Base.pure PostLoadBalancersResponseBody201LoadBalancerProtection GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "delete"))
-- | Defines the data type for the schema PostLoadBalancersResponseBody201Load_balancerPublic_net
-- 
-- Public network information
data PostLoadBalancersResponseBody201LoadBalancerPublicNet = PostLoadBalancersResponseBody201LoadBalancerPublicNet {
  -- | enabled: Public Interface enabled or not
  postLoadBalancersResponseBody201LoadBalancerPublicNetEnabled :: GHC.Types.Bool
  -- | ipv4: IP address (v4)
  , postLoadBalancersResponseBody201LoadBalancerPublicNetIpv4 :: PostLoadBalancersResponseBody201LoadBalancerPublicNetIpv4
  -- | ipv6: IP address (v6)
  , postLoadBalancersResponseBody201LoadBalancerPublicNetIpv6 :: PostLoadBalancersResponseBody201LoadBalancerPublicNetIpv6
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersResponseBody201LoadBalancerPublicNet
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "enabled" (postLoadBalancersResponseBody201LoadBalancerPublicNetEnabled obj) : (Data.Aeson..=) "ipv4" (postLoadBalancersResponseBody201LoadBalancerPublicNetIpv4 obj) : (Data.Aeson..=) "ipv6" (postLoadBalancersResponseBody201LoadBalancerPublicNetIpv6 obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "enabled" (postLoadBalancersResponseBody201LoadBalancerPublicNetEnabled obj) GHC.Base.<> ((Data.Aeson..=) "ipv4" (postLoadBalancersResponseBody201LoadBalancerPublicNetIpv4 obj) GHC.Base.<> (Data.Aeson..=) "ipv6" (postLoadBalancersResponseBody201LoadBalancerPublicNetIpv6 obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersResponseBody201LoadBalancerPublicNet
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersResponseBody201LoadBalancerPublicNet" (\obj -> ((GHC.Base.pure PostLoadBalancersResponseBody201LoadBalancerPublicNet GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ipv4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ipv6"))
-- | Defines the data type for the schema PostLoadBalancersResponseBody201Load_balancerPublic_netIpv4
-- 
-- IP address (v4)
data PostLoadBalancersResponseBody201LoadBalancerPublicNetIpv4 = PostLoadBalancersResponseBody201LoadBalancerPublicNetIpv4 {
  -- | dns_ptr: Reverse DNS PTR entry for the IPv4 address of this Load Balancer
  postLoadBalancersResponseBody201LoadBalancerPublicNetIpv4DnsPtr :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | ip: IP address (v4) of this Load Balancer
  , postLoadBalancersResponseBody201LoadBalancerPublicNetIpv4Ip :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersResponseBody201LoadBalancerPublicNetIpv4
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "dns_ptr" (postLoadBalancersResponseBody201LoadBalancerPublicNetIpv4DnsPtr obj) : (Data.Aeson..=) "ip" (postLoadBalancersResponseBody201LoadBalancerPublicNetIpv4Ip obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "dns_ptr" (postLoadBalancersResponseBody201LoadBalancerPublicNetIpv4DnsPtr obj) GHC.Base.<> (Data.Aeson..=) "ip" (postLoadBalancersResponseBody201LoadBalancerPublicNetIpv4Ip obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersResponseBody201LoadBalancerPublicNetIpv4
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersResponseBody201LoadBalancerPublicNetIpv4" (\obj -> (GHC.Base.pure PostLoadBalancersResponseBody201LoadBalancerPublicNetIpv4 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dns_ptr")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip"))
-- | Defines the data type for the schema PostLoadBalancersResponseBody201Load_balancerPublic_netIpv6
-- 
-- IP address (v6)
data PostLoadBalancersResponseBody201LoadBalancerPublicNetIpv6 = PostLoadBalancersResponseBody201LoadBalancerPublicNetIpv6 {
  -- | dns_ptr: Reverse DNS PTR entry for the IPv6 address of this Load Balancer
  postLoadBalancersResponseBody201LoadBalancerPublicNetIpv6DnsPtr :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | ip: IP address (v6) of this Load Balancer
  , postLoadBalancersResponseBody201LoadBalancerPublicNetIpv6Ip :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersResponseBody201LoadBalancerPublicNetIpv6
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "dns_ptr" (postLoadBalancersResponseBody201LoadBalancerPublicNetIpv6DnsPtr obj) : (Data.Aeson..=) "ip" (postLoadBalancersResponseBody201LoadBalancerPublicNetIpv6Ip obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "dns_ptr" (postLoadBalancersResponseBody201LoadBalancerPublicNetIpv6DnsPtr obj) GHC.Base.<> (Data.Aeson..=) "ip" (postLoadBalancersResponseBody201LoadBalancerPublicNetIpv6Ip obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersResponseBody201LoadBalancerPublicNetIpv6
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersResponseBody201LoadBalancerPublicNetIpv6" (\obj -> (GHC.Base.pure PostLoadBalancersResponseBody201LoadBalancerPublicNetIpv6 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dns_ptr")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip"))
-- | Defines the data type for the schema PostLoadBalancersResponseBody201Load_balancerServices
-- 
-- 
data PostLoadBalancersResponseBody201LoadBalancerServices = PostLoadBalancersResponseBody201LoadBalancerServices {
  -- | destination_port: Port the Load Balancer will balance to
  postLoadBalancersResponseBody201LoadBalancerServicesDestinationPort :: GHC.Integer.Type.Integer
  -- | health_check: Service health check
  , postLoadBalancersResponseBody201LoadBalancerServicesHealthCheck :: PostLoadBalancersResponseBody201LoadBalancerServicesHealthCheck
  -- | http: Configuration option for protocols http and https
  , postLoadBalancersResponseBody201LoadBalancerServicesHttp :: (GHC.Maybe.Maybe PostLoadBalancersResponseBody201LoadBalancerServicesHttp)
  -- | listen_port: Port the Load Balancer listens on
  , postLoadBalancersResponseBody201LoadBalancerServicesListenPort :: GHC.Integer.Type.Integer
  -- | protocol: Protocol of the Load Balancer
  , postLoadBalancersResponseBody201LoadBalancerServicesProtocol :: PostLoadBalancersResponseBody201LoadBalancerServicesProtocol
  -- | proxyprotocol: Is Proxyprotocol enabled or not
  , postLoadBalancersResponseBody201LoadBalancerServicesProxyprotocol :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersResponseBody201LoadBalancerServices
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "destination_port" (postLoadBalancersResponseBody201LoadBalancerServicesDestinationPort obj) : (Data.Aeson..=) "health_check" (postLoadBalancersResponseBody201LoadBalancerServicesHealthCheck obj) : (Data.Aeson..=) "http" (postLoadBalancersResponseBody201LoadBalancerServicesHttp obj) : (Data.Aeson..=) "listen_port" (postLoadBalancersResponseBody201LoadBalancerServicesListenPort obj) : (Data.Aeson..=) "protocol" (postLoadBalancersResponseBody201LoadBalancerServicesProtocol obj) : (Data.Aeson..=) "proxyprotocol" (postLoadBalancersResponseBody201LoadBalancerServicesProxyprotocol obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "destination_port" (postLoadBalancersResponseBody201LoadBalancerServicesDestinationPort obj) GHC.Base.<> ((Data.Aeson..=) "health_check" (postLoadBalancersResponseBody201LoadBalancerServicesHealthCheck obj) GHC.Base.<> ((Data.Aeson..=) "http" (postLoadBalancersResponseBody201LoadBalancerServicesHttp obj) GHC.Base.<> ((Data.Aeson..=) "listen_port" (postLoadBalancersResponseBody201LoadBalancerServicesListenPort obj) GHC.Base.<> ((Data.Aeson..=) "protocol" (postLoadBalancersResponseBody201LoadBalancerServicesProtocol obj) GHC.Base.<> (Data.Aeson..=) "proxyprotocol" (postLoadBalancersResponseBody201LoadBalancerServicesProxyprotocol obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersResponseBody201LoadBalancerServices
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersResponseBody201LoadBalancerServices" (\obj -> (((((GHC.Base.pure PostLoadBalancersResponseBody201LoadBalancerServices GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "destination_port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "health_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "http")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "listen_port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "protocol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "proxyprotocol"))
-- | Defines the data type for the schema PostLoadBalancersResponseBody201Load_balancerServicesHealth_check
-- 
-- Service health check
data PostLoadBalancersResponseBody201LoadBalancerServicesHealthCheck = PostLoadBalancersResponseBody201LoadBalancerServicesHealthCheck {
  -- | http: Additional configuration for protocol http
  postLoadBalancersResponseBody201LoadBalancerServicesHealthCheckHttp :: (GHC.Maybe.Maybe PostLoadBalancersResponseBody201LoadBalancerServicesHealthCheckHttp)
  -- | interval: Time interval in seconds health checks are performed
  , postLoadBalancersResponseBody201LoadBalancerServicesHealthCheckInterval :: GHC.Integer.Type.Integer
  -- | port: Port the health check will be performed on
  , postLoadBalancersResponseBody201LoadBalancerServicesHealthCheckPort :: GHC.Integer.Type.Integer
  -- | protocol: Type of the health check
  , postLoadBalancersResponseBody201LoadBalancerServicesHealthCheckProtocol :: PostLoadBalancersResponseBody201LoadBalancerServicesHealthCheckProtocol
  -- | retries: Unsuccessful retries needed until a target is considered unhealthy; an unhealthy target needs the same number of successful retries to become healthy again
  , postLoadBalancersResponseBody201LoadBalancerServicesHealthCheckRetries :: GHC.Integer.Type.Integer
  -- | timeout: Time in seconds after an attempt is considered a timeout
  , postLoadBalancersResponseBody201LoadBalancerServicesHealthCheckTimeout :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersResponseBody201LoadBalancerServicesHealthCheck
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "http" (postLoadBalancersResponseBody201LoadBalancerServicesHealthCheckHttp obj) : (Data.Aeson..=) "interval" (postLoadBalancersResponseBody201LoadBalancerServicesHealthCheckInterval obj) : (Data.Aeson..=) "port" (postLoadBalancersResponseBody201LoadBalancerServicesHealthCheckPort obj) : (Data.Aeson..=) "protocol" (postLoadBalancersResponseBody201LoadBalancerServicesHealthCheckProtocol obj) : (Data.Aeson..=) "retries" (postLoadBalancersResponseBody201LoadBalancerServicesHealthCheckRetries obj) : (Data.Aeson..=) "timeout" (postLoadBalancersResponseBody201LoadBalancerServicesHealthCheckTimeout obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "http" (postLoadBalancersResponseBody201LoadBalancerServicesHealthCheckHttp obj) GHC.Base.<> ((Data.Aeson..=) "interval" (postLoadBalancersResponseBody201LoadBalancerServicesHealthCheckInterval obj) GHC.Base.<> ((Data.Aeson..=) "port" (postLoadBalancersResponseBody201LoadBalancerServicesHealthCheckPort obj) GHC.Base.<> ((Data.Aeson..=) "protocol" (postLoadBalancersResponseBody201LoadBalancerServicesHealthCheckProtocol obj) GHC.Base.<> ((Data.Aeson..=) "retries" (postLoadBalancersResponseBody201LoadBalancerServicesHealthCheckRetries obj) GHC.Base.<> (Data.Aeson..=) "timeout" (postLoadBalancersResponseBody201LoadBalancerServicesHealthCheckTimeout obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersResponseBody201LoadBalancerServicesHealthCheck
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersResponseBody201LoadBalancerServicesHealthCheck" (\obj -> (((((GHC.Base.pure PostLoadBalancersResponseBody201LoadBalancerServicesHealthCheck GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "http")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "protocol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "retries")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "timeout"))
-- | Defines the data type for the schema PostLoadBalancersResponseBody201Load_balancerServicesHealth_checkHttp
-- 
-- Additional configuration for protocol http
data PostLoadBalancersResponseBody201LoadBalancerServicesHealthCheckHttp = PostLoadBalancersResponseBody201LoadBalancerServicesHealthCheckHttp {
  -- | domain: Host header to send in the HTTP request. May not contain spaces, percent or backslash symbols. Can be null, in that case no host header is sent.
  postLoadBalancersResponseBody201LoadBalancerServicesHealthCheckHttpDomain :: Data.Text.Internal.Text
  -- | path: HTTP path to use for health checks
  , postLoadBalancersResponseBody201LoadBalancerServicesHealthCheckHttpPath :: Data.Text.Internal.Text
  -- | response: String that must be contained in HTTP response in order to pass the health check
  , postLoadBalancersResponseBody201LoadBalancerServicesHealthCheckHttpResponse :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | status_codes: List of returned HTTP status codes in order to pass the health check. Supports the wildcards \`?\` for exactly one character and \`*\` for multiple ones. The default is to pass the health check for any status code between 2?? and 3??.
  , postLoadBalancersResponseBody201LoadBalancerServicesHealthCheckHttpStatusCodes :: (GHC.Maybe.Maybe ([] Data.Text.Internal.Text))
  -- | tls: Use HTTPS for health check
  , postLoadBalancersResponseBody201LoadBalancerServicesHealthCheckHttpTls :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersResponseBody201LoadBalancerServicesHealthCheckHttp
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "domain" (postLoadBalancersResponseBody201LoadBalancerServicesHealthCheckHttpDomain obj) : (Data.Aeson..=) "path" (postLoadBalancersResponseBody201LoadBalancerServicesHealthCheckHttpPath obj) : (Data.Aeson..=) "response" (postLoadBalancersResponseBody201LoadBalancerServicesHealthCheckHttpResponse obj) : (Data.Aeson..=) "status_codes" (postLoadBalancersResponseBody201LoadBalancerServicesHealthCheckHttpStatusCodes obj) : (Data.Aeson..=) "tls" (postLoadBalancersResponseBody201LoadBalancerServicesHealthCheckHttpTls obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "domain" (postLoadBalancersResponseBody201LoadBalancerServicesHealthCheckHttpDomain obj) GHC.Base.<> ((Data.Aeson..=) "path" (postLoadBalancersResponseBody201LoadBalancerServicesHealthCheckHttpPath obj) GHC.Base.<> ((Data.Aeson..=) "response" (postLoadBalancersResponseBody201LoadBalancerServicesHealthCheckHttpResponse obj) GHC.Base.<> ((Data.Aeson..=) "status_codes" (postLoadBalancersResponseBody201LoadBalancerServicesHealthCheckHttpStatusCodes obj) GHC.Base.<> (Data.Aeson..=) "tls" (postLoadBalancersResponseBody201LoadBalancerServicesHealthCheckHttpTls obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersResponseBody201LoadBalancerServicesHealthCheckHttp
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersResponseBody201LoadBalancerServicesHealthCheckHttp" (\obj -> ((((GHC.Base.pure PostLoadBalancersResponseBody201LoadBalancerServicesHealthCheckHttp GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "domain")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "path")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "response")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status_codes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tls"))
-- | Defines the enum schema PostLoadBalancersResponseBody201Load_balancerServicesHealth_checkProtocol
-- 
-- Type of the health check
data PostLoadBalancersResponseBody201LoadBalancerServicesHealthCheckProtocol
    = PostLoadBalancersResponseBody201LoadBalancerServicesHealthCheckProtocolEnumOther Data.Aeson.Types.Internal.Value
    | PostLoadBalancersResponseBody201LoadBalancerServicesHealthCheckProtocolEnumTyped Data.Text.Internal.Text
    | PostLoadBalancersResponseBody201LoadBalancerServicesHealthCheckProtocolEnumStringHttp
    | PostLoadBalancersResponseBody201LoadBalancerServicesHealthCheckProtocolEnumStringTcp
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersResponseBody201LoadBalancerServicesHealthCheckProtocol
    where toJSON (PostLoadBalancersResponseBody201LoadBalancerServicesHealthCheckProtocolEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostLoadBalancersResponseBody201LoadBalancerServicesHealthCheckProtocolEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostLoadBalancersResponseBody201LoadBalancerServicesHealthCheckProtocolEnumStringHttp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http"
          toJSON (PostLoadBalancersResponseBody201LoadBalancerServicesHealthCheckProtocolEnumStringTcp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tcp"
instance Data.Aeson.FromJSON PostLoadBalancersResponseBody201LoadBalancerServicesHealthCheckProtocol
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http")
                                          then PostLoadBalancersResponseBody201LoadBalancerServicesHealthCheckProtocolEnumStringHttp
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tcp")
                                                then PostLoadBalancersResponseBody201LoadBalancerServicesHealthCheckProtocolEnumStringTcp
                                                else PostLoadBalancersResponseBody201LoadBalancerServicesHealthCheckProtocolEnumOther val)
-- | Defines the data type for the schema PostLoadBalancersResponseBody201Load_balancerServicesHttp
-- 
-- Configuration option for protocols http and https
data PostLoadBalancersResponseBody201LoadBalancerServicesHttp = PostLoadBalancersResponseBody201LoadBalancerServicesHttp {
  -- | certificates: IDs of the Certificates to use for TLS\/SSL termination by the Load Balancer; empty for TLS\/SSL passthrough or if \`protocol\` is \"http\"
  postLoadBalancersResponseBody201LoadBalancerServicesHttpCertificates :: (GHC.Maybe.Maybe ([] GHC.Integer.Type.Integer))
  -- | cookie_lifetime: Lifetime of the cookie used for sticky sessions
  , postLoadBalancersResponseBody201LoadBalancerServicesHttpCookieLifetime :: GHC.Integer.Type.Integer
  -- | cookie_name: Name of the cookie used for sticky sessions
  , postLoadBalancersResponseBody201LoadBalancerServicesHttpCookieName :: Data.Text.Internal.Text
  -- | redirect_http: Redirect HTTP requests to HTTPS. Only available if protocol is \"https\". Default \`false\`
  , postLoadBalancersResponseBody201LoadBalancerServicesHttpRedirectHttp :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | sticky_sessions: Use sticky sessions. Only available if protocol is \"http\" or \"https\". Default \`false\`
  , postLoadBalancersResponseBody201LoadBalancerServicesHttpStickySessions :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersResponseBody201LoadBalancerServicesHttp
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "certificates" (postLoadBalancersResponseBody201LoadBalancerServicesHttpCertificates obj) : (Data.Aeson..=) "cookie_lifetime" (postLoadBalancersResponseBody201LoadBalancerServicesHttpCookieLifetime obj) : (Data.Aeson..=) "cookie_name" (postLoadBalancersResponseBody201LoadBalancerServicesHttpCookieName obj) : (Data.Aeson..=) "redirect_http" (postLoadBalancersResponseBody201LoadBalancerServicesHttpRedirectHttp obj) : (Data.Aeson..=) "sticky_sessions" (postLoadBalancersResponseBody201LoadBalancerServicesHttpStickySessions obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "certificates" (postLoadBalancersResponseBody201LoadBalancerServicesHttpCertificates obj) GHC.Base.<> ((Data.Aeson..=) "cookie_lifetime" (postLoadBalancersResponseBody201LoadBalancerServicesHttpCookieLifetime obj) GHC.Base.<> ((Data.Aeson..=) "cookie_name" (postLoadBalancersResponseBody201LoadBalancerServicesHttpCookieName obj) GHC.Base.<> ((Data.Aeson..=) "redirect_http" (postLoadBalancersResponseBody201LoadBalancerServicesHttpRedirectHttp obj) GHC.Base.<> (Data.Aeson..=) "sticky_sessions" (postLoadBalancersResponseBody201LoadBalancerServicesHttpStickySessions obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersResponseBody201LoadBalancerServicesHttp
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersResponseBody201LoadBalancerServicesHttp" (\obj -> ((((GHC.Base.pure PostLoadBalancersResponseBody201LoadBalancerServicesHttp GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "certificates")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cookie_lifetime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cookie_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "redirect_http")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sticky_sessions"))
-- | Defines the enum schema PostLoadBalancersResponseBody201Load_balancerServicesProtocol
-- 
-- Protocol of the Load Balancer
data PostLoadBalancersResponseBody201LoadBalancerServicesProtocol
    = PostLoadBalancersResponseBody201LoadBalancerServicesProtocolEnumOther Data.Aeson.Types.Internal.Value
    | PostLoadBalancersResponseBody201LoadBalancerServicesProtocolEnumTyped Data.Text.Internal.Text
    | PostLoadBalancersResponseBody201LoadBalancerServicesProtocolEnumStringHttp
    | PostLoadBalancersResponseBody201LoadBalancerServicesProtocolEnumStringHttps
    | PostLoadBalancersResponseBody201LoadBalancerServicesProtocolEnumStringTcp
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersResponseBody201LoadBalancerServicesProtocol
    where toJSON (PostLoadBalancersResponseBody201LoadBalancerServicesProtocolEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostLoadBalancersResponseBody201LoadBalancerServicesProtocolEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostLoadBalancersResponseBody201LoadBalancerServicesProtocolEnumStringHttp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http"
          toJSON (PostLoadBalancersResponseBody201LoadBalancerServicesProtocolEnumStringHttps) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "https"
          toJSON (PostLoadBalancersResponseBody201LoadBalancerServicesProtocolEnumStringTcp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tcp"
instance Data.Aeson.FromJSON PostLoadBalancersResponseBody201LoadBalancerServicesProtocol
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http")
                                          then PostLoadBalancersResponseBody201LoadBalancerServicesProtocolEnumStringHttp
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "https")
                                                then PostLoadBalancersResponseBody201LoadBalancerServicesProtocolEnumStringHttps
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tcp")
                                                      then PostLoadBalancersResponseBody201LoadBalancerServicesProtocolEnumStringTcp
                                                      else PostLoadBalancersResponseBody201LoadBalancerServicesProtocolEnumOther val)
-- | Defines the data type for the schema PostLoadBalancersResponseBody201Load_balancerTargets
-- 
-- 
data PostLoadBalancersResponseBody201LoadBalancerTargets = PostLoadBalancersResponseBody201LoadBalancerTargets {
  -- | health_status: List of health statuses of the services on this target
  postLoadBalancersResponseBody201LoadBalancerTargetsHealthStatus :: (GHC.Maybe.Maybe ([] PostLoadBalancersResponseBody201LoadBalancerTargetsHealthStatus))
  -- | ip: IP targets where the traffic should be routed through. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well.
  , postLoadBalancersResponseBody201LoadBalancerTargetsIp :: (GHC.Maybe.Maybe PostLoadBalancersResponseBody201LoadBalancerTargetsIp)
  -- | label_selector: Label selector and a list of selected targets
  , postLoadBalancersResponseBody201LoadBalancerTargetsLabelSelector :: (GHC.Maybe.Maybe PostLoadBalancersResponseBody201LoadBalancerTargetsLabelSelector)
  -- | server: Server where the traffic should be routed through
  , postLoadBalancersResponseBody201LoadBalancerTargetsServer :: (GHC.Maybe.Maybe PostLoadBalancersResponseBody201LoadBalancerTargetsServer)
  -- | targets: List of selected targets
  , postLoadBalancersResponseBody201LoadBalancerTargetsTargets :: (GHC.Maybe.Maybe ([] PostLoadBalancersResponseBody201LoadBalancerTargetsTargets))
  -- | type: Type of the resource
  , postLoadBalancersResponseBody201LoadBalancerTargetsType :: PostLoadBalancersResponseBody201LoadBalancerTargetsType
  -- | use_private_ip: Use the private network IP instead of the public IP. Default value is false.
  , postLoadBalancersResponseBody201LoadBalancerTargetsUsePrivateIp :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersResponseBody201LoadBalancerTargets
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "health_status" (postLoadBalancersResponseBody201LoadBalancerTargetsHealthStatus obj) : (Data.Aeson..=) "ip" (postLoadBalancersResponseBody201LoadBalancerTargetsIp obj) : (Data.Aeson..=) "label_selector" (postLoadBalancersResponseBody201LoadBalancerTargetsLabelSelector obj) : (Data.Aeson..=) "server" (postLoadBalancersResponseBody201LoadBalancerTargetsServer obj) : (Data.Aeson..=) "targets" (postLoadBalancersResponseBody201LoadBalancerTargetsTargets obj) : (Data.Aeson..=) "type" (postLoadBalancersResponseBody201LoadBalancerTargetsType obj) : (Data.Aeson..=) "use_private_ip" (postLoadBalancersResponseBody201LoadBalancerTargetsUsePrivateIp obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "health_status" (postLoadBalancersResponseBody201LoadBalancerTargetsHealthStatus obj) GHC.Base.<> ((Data.Aeson..=) "ip" (postLoadBalancersResponseBody201LoadBalancerTargetsIp obj) GHC.Base.<> ((Data.Aeson..=) "label_selector" (postLoadBalancersResponseBody201LoadBalancerTargetsLabelSelector obj) GHC.Base.<> ((Data.Aeson..=) "server" (postLoadBalancersResponseBody201LoadBalancerTargetsServer obj) GHC.Base.<> ((Data.Aeson..=) "targets" (postLoadBalancersResponseBody201LoadBalancerTargetsTargets obj) GHC.Base.<> ((Data.Aeson..=) "type" (postLoadBalancersResponseBody201LoadBalancerTargetsType obj) GHC.Base.<> (Data.Aeson..=) "use_private_ip" (postLoadBalancersResponseBody201LoadBalancerTargetsUsePrivateIp obj)))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersResponseBody201LoadBalancerTargets
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersResponseBody201LoadBalancerTargets" (\obj -> ((((((GHC.Base.pure PostLoadBalancersResponseBody201LoadBalancerTargets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "health_status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label_selector")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "server")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "targets")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "use_private_ip"))
-- | Defines the data type for the schema PostLoadBalancersResponseBody201Load_balancerTargetsHealth_status
-- 
-- 
data PostLoadBalancersResponseBody201LoadBalancerTargetsHealthStatus = PostLoadBalancersResponseBody201LoadBalancerTargetsHealthStatus {
  -- | listen_port
  postLoadBalancersResponseBody201LoadBalancerTargetsHealthStatusListenPort :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | status
  , postLoadBalancersResponseBody201LoadBalancerTargetsHealthStatusStatus :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersResponseBody201LoadBalancerTargetsHealthStatus
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "listen_port" (postLoadBalancersResponseBody201LoadBalancerTargetsHealthStatusListenPort obj) : (Data.Aeson..=) "status" (postLoadBalancersResponseBody201LoadBalancerTargetsHealthStatusStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "listen_port" (postLoadBalancersResponseBody201LoadBalancerTargetsHealthStatusListenPort obj) GHC.Base.<> (Data.Aeson..=) "status" (postLoadBalancersResponseBody201LoadBalancerTargetsHealthStatusStatus obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersResponseBody201LoadBalancerTargetsHealthStatus
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersResponseBody201LoadBalancerTargetsHealthStatus" (\obj -> (GHC.Base.pure PostLoadBalancersResponseBody201LoadBalancerTargetsHealthStatus GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "listen_port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status"))
-- | Defines the data type for the schema PostLoadBalancersResponseBody201Load_balancerTargetsIp
-- 
-- IP targets where the traffic should be routed through. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well.
data PostLoadBalancersResponseBody201LoadBalancerTargetsIp = PostLoadBalancersResponseBody201LoadBalancerTargetsIp {
  -- | ip: IP of a server that belongs to the same customer (public IPv4\/IPv6) or private IP in a Subnetwork type vswitch.
  postLoadBalancersResponseBody201LoadBalancerTargetsIpIp :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersResponseBody201LoadBalancerTargetsIp
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "ip" (postLoadBalancersResponseBody201LoadBalancerTargetsIpIp obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "ip" (postLoadBalancersResponseBody201LoadBalancerTargetsIpIp obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersResponseBody201LoadBalancerTargetsIp
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersResponseBody201LoadBalancerTargetsIp" (\obj -> GHC.Base.pure PostLoadBalancersResponseBody201LoadBalancerTargetsIp GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ip"))
-- | Defines the data type for the schema PostLoadBalancersResponseBody201Load_balancerTargetsLabel_selector
-- 
-- Label selector and a list of selected targets
data PostLoadBalancersResponseBody201LoadBalancerTargetsLabelSelector = PostLoadBalancersResponseBody201LoadBalancerTargetsLabelSelector {
  -- | selector: Label selector
  postLoadBalancersResponseBody201LoadBalancerTargetsLabelSelectorSelector :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersResponseBody201LoadBalancerTargetsLabelSelector
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "selector" (postLoadBalancersResponseBody201LoadBalancerTargetsLabelSelectorSelector obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "selector" (postLoadBalancersResponseBody201LoadBalancerTargetsLabelSelectorSelector obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersResponseBody201LoadBalancerTargetsLabelSelector
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersResponseBody201LoadBalancerTargetsLabelSelector" (\obj -> GHC.Base.pure PostLoadBalancersResponseBody201LoadBalancerTargetsLabelSelector GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "selector"))
-- | Defines the data type for the schema PostLoadBalancersResponseBody201Load_balancerTargetsServer
-- 
-- Server where the traffic should be routed through
data PostLoadBalancersResponseBody201LoadBalancerTargetsServer = PostLoadBalancersResponseBody201LoadBalancerTargetsServer {
  -- | id: ID of the Server
  postLoadBalancersResponseBody201LoadBalancerTargetsServerId :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersResponseBody201LoadBalancerTargetsServer
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (postLoadBalancersResponseBody201LoadBalancerTargetsServerId obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (postLoadBalancersResponseBody201LoadBalancerTargetsServerId obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersResponseBody201LoadBalancerTargetsServer
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersResponseBody201LoadBalancerTargetsServer" (\obj -> GHC.Base.pure PostLoadBalancersResponseBody201LoadBalancerTargetsServer GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id"))
-- | Defines the data type for the schema PostLoadBalancersResponseBody201Load_balancerTargetsTargets
-- 
-- 
data PostLoadBalancersResponseBody201LoadBalancerTargetsTargets = PostLoadBalancersResponseBody201LoadBalancerTargetsTargets {
  -- | health_status
  postLoadBalancersResponseBody201LoadBalancerTargetsTargetsHealthStatus :: (GHC.Maybe.Maybe ([] PostLoadBalancersResponseBody201LoadBalancerTargetsTargetsHealthStatus))
  -- | server
  , postLoadBalancersResponseBody201LoadBalancerTargetsTargetsServer :: (GHC.Maybe.Maybe PostLoadBalancersResponseBody201LoadBalancerTargetsTargetsServer)
  -- | type
  , postLoadBalancersResponseBody201LoadBalancerTargetsTargetsType :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | use_private_ip
  , postLoadBalancersResponseBody201LoadBalancerTargetsTargetsUsePrivateIp :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersResponseBody201LoadBalancerTargetsTargets
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "health_status" (postLoadBalancersResponseBody201LoadBalancerTargetsTargetsHealthStatus obj) : (Data.Aeson..=) "server" (postLoadBalancersResponseBody201LoadBalancerTargetsTargetsServer obj) : (Data.Aeson..=) "type" (postLoadBalancersResponseBody201LoadBalancerTargetsTargetsType obj) : (Data.Aeson..=) "use_private_ip" (postLoadBalancersResponseBody201LoadBalancerTargetsTargetsUsePrivateIp obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "health_status" (postLoadBalancersResponseBody201LoadBalancerTargetsTargetsHealthStatus obj) GHC.Base.<> ((Data.Aeson..=) "server" (postLoadBalancersResponseBody201LoadBalancerTargetsTargetsServer obj) GHC.Base.<> ((Data.Aeson..=) "type" (postLoadBalancersResponseBody201LoadBalancerTargetsTargetsType obj) GHC.Base.<> (Data.Aeson..=) "use_private_ip" (postLoadBalancersResponseBody201LoadBalancerTargetsTargetsUsePrivateIp obj))))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersResponseBody201LoadBalancerTargetsTargets
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersResponseBody201LoadBalancerTargetsTargets" (\obj -> (((GHC.Base.pure PostLoadBalancersResponseBody201LoadBalancerTargetsTargets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "health_status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "server")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "use_private_ip"))
-- | Defines the data type for the schema PostLoadBalancersResponseBody201Load_balancerTargetsTargetsHealth_status
-- 
-- 
data PostLoadBalancersResponseBody201LoadBalancerTargetsTargetsHealthStatus = PostLoadBalancersResponseBody201LoadBalancerTargetsTargetsHealthStatus {
  -- | listen_port
  postLoadBalancersResponseBody201LoadBalancerTargetsTargetsHealthStatusListenPort :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | status
  , postLoadBalancersResponseBody201LoadBalancerTargetsTargetsHealthStatusStatus :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersResponseBody201LoadBalancerTargetsTargetsHealthStatus
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "listen_port" (postLoadBalancersResponseBody201LoadBalancerTargetsTargetsHealthStatusListenPort obj) : (Data.Aeson..=) "status" (postLoadBalancersResponseBody201LoadBalancerTargetsTargetsHealthStatusStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "listen_port" (postLoadBalancersResponseBody201LoadBalancerTargetsTargetsHealthStatusListenPort obj) GHC.Base.<> (Data.Aeson..=) "status" (postLoadBalancersResponseBody201LoadBalancerTargetsTargetsHealthStatusStatus obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersResponseBody201LoadBalancerTargetsTargetsHealthStatus
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersResponseBody201LoadBalancerTargetsTargetsHealthStatus" (\obj -> (GHC.Base.pure PostLoadBalancersResponseBody201LoadBalancerTargetsTargetsHealthStatus GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "listen_port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status"))
-- | Defines the data type for the schema PostLoadBalancersResponseBody201Load_balancerTargetsTargetsServer
-- 
-- 
data PostLoadBalancersResponseBody201LoadBalancerTargetsTargetsServer = PostLoadBalancersResponseBody201LoadBalancerTargetsTargetsServer {
  -- | id: ID of the Server
  postLoadBalancersResponseBody201LoadBalancerTargetsTargetsServerId :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersResponseBody201LoadBalancerTargetsTargetsServer
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (postLoadBalancersResponseBody201LoadBalancerTargetsTargetsServerId obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (postLoadBalancersResponseBody201LoadBalancerTargetsTargetsServerId obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersResponseBody201LoadBalancerTargetsTargetsServer
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersResponseBody201LoadBalancerTargetsTargetsServer" (\obj -> GHC.Base.pure PostLoadBalancersResponseBody201LoadBalancerTargetsTargetsServer GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id"))
-- | Defines the enum schema PostLoadBalancersResponseBody201Load_balancerTargetsType
-- 
-- Type of the resource
data PostLoadBalancersResponseBody201LoadBalancerTargetsType
    = PostLoadBalancersResponseBody201LoadBalancerTargetsTypeEnumOther Data.Aeson.Types.Internal.Value
    | PostLoadBalancersResponseBody201LoadBalancerTargetsTypeEnumTyped Data.Text.Internal.Text
    | PostLoadBalancersResponseBody201LoadBalancerTargetsTypeEnumStringIp
    | PostLoadBalancersResponseBody201LoadBalancerTargetsTypeEnumStringLabelSelector
    | PostLoadBalancersResponseBody201LoadBalancerTargetsTypeEnumStringServer
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersResponseBody201LoadBalancerTargetsType
    where toJSON (PostLoadBalancersResponseBody201LoadBalancerTargetsTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostLoadBalancersResponseBody201LoadBalancerTargetsTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostLoadBalancersResponseBody201LoadBalancerTargetsTypeEnumStringIp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ip"
          toJSON (PostLoadBalancersResponseBody201LoadBalancerTargetsTypeEnumStringLabelSelector) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "label_selector"
          toJSON (PostLoadBalancersResponseBody201LoadBalancerTargetsTypeEnumStringServer) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "server"
instance Data.Aeson.FromJSON PostLoadBalancersResponseBody201LoadBalancerTargetsType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ip")
                                          then PostLoadBalancersResponseBody201LoadBalancerTargetsTypeEnumStringIp
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "label_selector")
                                                then PostLoadBalancersResponseBody201LoadBalancerTargetsTypeEnumStringLabelSelector
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "server")
                                                      then PostLoadBalancersResponseBody201LoadBalancerTargetsTypeEnumStringServer
                                                      else PostLoadBalancersResponseBody201LoadBalancerTargetsTypeEnumOther val)
