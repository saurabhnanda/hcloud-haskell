-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation getServerTypes_Id_
module HCloud.Operations.GetServerTypesId_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > GET /server_types/{id}
-- 
-- Gets a specific Server type object.
getServerTypes_Id_ :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer                                                                                                       -- ^ id: ID of Server Type
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response GetServerTypesIdResponse))   -- ^ Monad containing the result of the operation
getServerTypes_Id_ config
                   id = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetServerTypesIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetServerTypesIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                  GetServerTypesIdResponseBody200)
                                                                                                                                                                                  | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/server_types/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) [])
-- | > GET /server_types/{id}
-- 
-- The same as 'getServerTypes_Id_' but returns the raw 'Data.ByteString.Char8.ByteString'
getServerTypes_Id_Raw :: forall m s . (HCloud.Common.MonadHTTP m,
                                       HCloud.Common.SecurityScheme s) =>
                         HCloud.Common.Configuration s ->
                         GHC.Integer.Type.Integer ->
                         m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                               (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getServerTypes_Id_Raw config
                      id = GHC.Base.id (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/server_types/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) [])
-- | > GET /server_types/{id}
-- 
-- Monadic version of 'getServerTypes_Id_' (use with 'HCloud.Common.runWithConfiguration')
getServerTypes_Id_M :: forall m s . (HCloud.Common.MonadHTTP m,
                                     HCloud.Common.SecurityScheme s) =>
                       GHC.Integer.Type.Integer ->
                       Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                          m
                                                          (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                              (Network.HTTP.Client.Types.Response GetServerTypesIdResponse))
getServerTypes_Id_M id = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetServerTypesIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetServerTypesIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                   GetServerTypesIdResponseBody200)
                                                                                                                                                                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/server_types/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) [])
-- | > GET /server_types/{id}
-- 
-- Monadic version of 'getServerTypes_Id_Raw' (use with 'HCloud.Common.runWithConfiguration')
getServerTypes_Id_RawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                        HCloud.Common.SecurityScheme s) =>
                          GHC.Integer.Type.Integer ->
                          Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                             m
                                                             (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                 (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getServerTypes_Id_RawM id = GHC.Base.id (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/server_types/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) [])
-- | Represents a response of the operation 'getServerTypes_Id_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetServerTypesIdResponseError' is used.
data GetServerTypesIdResponse =                                  
   GetServerTypesIdResponseError GHC.Base.String                 -- ^ Means either no matching case available or a parse error
  | GetServerTypesIdResponse200 GetServerTypesIdResponseBody200  -- ^ The \`server_type\` key in the reply contains a Server type object with this structure
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema GetServerTypesIdResponseBody200
-- 
-- 
data GetServerTypesIdResponseBody200 = GetServerTypesIdResponseBody200 {
  -- | server_type
  getServerTypesIdResponseBody200ServerType :: GetServerTypesIdResponseBody200ServerType
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetServerTypesIdResponseBody200
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "server_type" (getServerTypesIdResponseBody200ServerType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "server_type" (getServerTypesIdResponseBody200ServerType obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetServerTypesIdResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetServerTypesIdResponseBody200" (\obj -> GHC.Base.pure GetServerTypesIdResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "server_type"))
-- | Defines the data type for the schema GetServerTypesIdResponseBody200Server_type
-- 
-- 
data GetServerTypesIdResponseBody200ServerType = GetServerTypesIdResponseBody200ServerType {
  -- | cores: Number of cpu cores a Server of this type will have
  getServerTypesIdResponseBody200ServerTypeCores :: GHC.Types.Double
  -- | cpu_type: Type of cpu
  , getServerTypesIdResponseBody200ServerTypeCpuType :: GetServerTypesIdResponseBody200ServerTypeCpuType
  -- | deprecated: True if Server type is deprecated
  , getServerTypesIdResponseBody200ServerTypeDeprecated :: GHC.Types.Bool
  -- | description: Description of the Server type
  , getServerTypesIdResponseBody200ServerTypeDescription :: Data.Text.Internal.Text
  -- | disk: Disk size a Server of this type will have in GB
  , getServerTypesIdResponseBody200ServerTypeDisk :: GHC.Types.Double
  -- | id: ID of the Server type
  , getServerTypesIdResponseBody200ServerTypeId :: GHC.Types.Double
  -- | memory: Memory a Server of this type will have in GB
  , getServerTypesIdResponseBody200ServerTypeMemory :: GHC.Types.Double
  -- | name: Unique identifier of the Server type
  , getServerTypesIdResponseBody200ServerTypeName :: Data.Text.Internal.Text
  -- | prices: Prices in different Locations
  , getServerTypesIdResponseBody200ServerTypePrices :: ([] GetServerTypesIdResponseBody200ServerTypePrices)
  -- | storage_type: Type of Server boot drive. Local has higher speed. Network has better availability.
  , getServerTypesIdResponseBody200ServerTypeStorageType :: GetServerTypesIdResponseBody200ServerTypeStorageType
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetServerTypesIdResponseBody200ServerType
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "cores" (getServerTypesIdResponseBody200ServerTypeCores obj) : (Data.Aeson..=) "cpu_type" (getServerTypesIdResponseBody200ServerTypeCpuType obj) : (Data.Aeson..=) "deprecated" (getServerTypesIdResponseBody200ServerTypeDeprecated obj) : (Data.Aeson..=) "description" (getServerTypesIdResponseBody200ServerTypeDescription obj) : (Data.Aeson..=) "disk" (getServerTypesIdResponseBody200ServerTypeDisk obj) : (Data.Aeson..=) "id" (getServerTypesIdResponseBody200ServerTypeId obj) : (Data.Aeson..=) "memory" (getServerTypesIdResponseBody200ServerTypeMemory obj) : (Data.Aeson..=) "name" (getServerTypesIdResponseBody200ServerTypeName obj) : (Data.Aeson..=) "prices" (getServerTypesIdResponseBody200ServerTypePrices obj) : (Data.Aeson..=) "storage_type" (getServerTypesIdResponseBody200ServerTypeStorageType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "cores" (getServerTypesIdResponseBody200ServerTypeCores obj) GHC.Base.<> ((Data.Aeson..=) "cpu_type" (getServerTypesIdResponseBody200ServerTypeCpuType obj) GHC.Base.<> ((Data.Aeson..=) "deprecated" (getServerTypesIdResponseBody200ServerTypeDeprecated obj) GHC.Base.<> ((Data.Aeson..=) "description" (getServerTypesIdResponseBody200ServerTypeDescription obj) GHC.Base.<> ((Data.Aeson..=) "disk" (getServerTypesIdResponseBody200ServerTypeDisk obj) GHC.Base.<> ((Data.Aeson..=) "id" (getServerTypesIdResponseBody200ServerTypeId obj) GHC.Base.<> ((Data.Aeson..=) "memory" (getServerTypesIdResponseBody200ServerTypeMemory obj) GHC.Base.<> ((Data.Aeson..=) "name" (getServerTypesIdResponseBody200ServerTypeName obj) GHC.Base.<> ((Data.Aeson..=) "prices" (getServerTypesIdResponseBody200ServerTypePrices obj) GHC.Base.<> (Data.Aeson..=) "storage_type" (getServerTypesIdResponseBody200ServerTypeStorageType obj))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetServerTypesIdResponseBody200ServerType
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetServerTypesIdResponseBody200ServerType" (\obj -> (((((((((GHC.Base.pure GetServerTypesIdResponseBody200ServerType GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cores")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cpu_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "deprecated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "disk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "memory")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "prices")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "storage_type"))
-- | Defines the enum schema GetServerTypesIdResponseBody200Server_typeCpu_type
-- 
-- Type of cpu
data GetServerTypesIdResponseBody200ServerTypeCpuType
    = GetServerTypesIdResponseBody200ServerTypeCpuTypeEnumOther Data.Aeson.Types.Internal.Value
    | GetServerTypesIdResponseBody200ServerTypeCpuTypeEnumTyped Data.Text.Internal.Text
    | GetServerTypesIdResponseBody200ServerTypeCpuTypeEnumStringDedicated
    | GetServerTypesIdResponseBody200ServerTypeCpuTypeEnumStringShared
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetServerTypesIdResponseBody200ServerTypeCpuType
    where toJSON (GetServerTypesIdResponseBody200ServerTypeCpuTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetServerTypesIdResponseBody200ServerTypeCpuTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetServerTypesIdResponseBody200ServerTypeCpuTypeEnumStringDedicated) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dedicated"
          toJSON (GetServerTypesIdResponseBody200ServerTypeCpuTypeEnumStringShared) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "shared"
instance Data.Aeson.FromJSON GetServerTypesIdResponseBody200ServerTypeCpuType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dedicated")
                                          then GetServerTypesIdResponseBody200ServerTypeCpuTypeEnumStringDedicated
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "shared")
                                                then GetServerTypesIdResponseBody200ServerTypeCpuTypeEnumStringShared
                                                else GetServerTypesIdResponseBody200ServerTypeCpuTypeEnumOther val)
-- | Defines the data type for the schema GetServerTypesIdResponseBody200Server_typePrices
-- 
-- 
data GetServerTypesIdResponseBody200ServerTypePrices = GetServerTypesIdResponseBody200ServerTypePrices {
  -- | location: Name of the Location the price is for
  getServerTypesIdResponseBody200ServerTypePricesLocation :: Data.Text.Internal.Text
  -- | price_hourly: Hourly costs for a Server type in this Location
  , getServerTypesIdResponseBody200ServerTypePricesPriceHourly :: GetServerTypesIdResponseBody200ServerTypePricesPriceHourly
  -- | price_monthly: Monthly costs for a Server type in this Location
  , getServerTypesIdResponseBody200ServerTypePricesPriceMonthly :: GetServerTypesIdResponseBody200ServerTypePricesPriceMonthly
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetServerTypesIdResponseBody200ServerTypePrices
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "location" (getServerTypesIdResponseBody200ServerTypePricesLocation obj) : (Data.Aeson..=) "price_hourly" (getServerTypesIdResponseBody200ServerTypePricesPriceHourly obj) : (Data.Aeson..=) "price_monthly" (getServerTypesIdResponseBody200ServerTypePricesPriceMonthly obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "location" (getServerTypesIdResponseBody200ServerTypePricesLocation obj) GHC.Base.<> ((Data.Aeson..=) "price_hourly" (getServerTypesIdResponseBody200ServerTypePricesPriceHourly obj) GHC.Base.<> (Data.Aeson..=) "price_monthly" (getServerTypesIdResponseBody200ServerTypePricesPriceMonthly obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetServerTypesIdResponseBody200ServerTypePrices
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetServerTypesIdResponseBody200ServerTypePrices" (\obj -> ((GHC.Base.pure GetServerTypesIdResponseBody200ServerTypePrices GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "location")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price_hourly")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price_monthly"))
-- | Defines the data type for the schema GetServerTypesIdResponseBody200Server_typePricesPrice_hourly
-- 
-- Hourly costs for a Server type in this Location
data GetServerTypesIdResponseBody200ServerTypePricesPriceHourly = GetServerTypesIdResponseBody200ServerTypePricesPriceHourly {
  -- | gross: Price with VAT added
  getServerTypesIdResponseBody200ServerTypePricesPriceHourlyGross :: Data.Text.Internal.Text
  -- | net: Price without VAT
  , getServerTypesIdResponseBody200ServerTypePricesPriceHourlyNet :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetServerTypesIdResponseBody200ServerTypePricesPriceHourly
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "gross" (getServerTypesIdResponseBody200ServerTypePricesPriceHourlyGross obj) : (Data.Aeson..=) "net" (getServerTypesIdResponseBody200ServerTypePricesPriceHourlyNet obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "gross" (getServerTypesIdResponseBody200ServerTypePricesPriceHourlyGross obj) GHC.Base.<> (Data.Aeson..=) "net" (getServerTypesIdResponseBody200ServerTypePricesPriceHourlyNet obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetServerTypesIdResponseBody200ServerTypePricesPriceHourly
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetServerTypesIdResponseBody200ServerTypePricesPriceHourly" (\obj -> (GHC.Base.pure GetServerTypesIdResponseBody200ServerTypePricesPriceHourly GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "gross")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "net"))
-- | Defines the data type for the schema GetServerTypesIdResponseBody200Server_typePricesPrice_monthly
-- 
-- Monthly costs for a Server type in this Location
data GetServerTypesIdResponseBody200ServerTypePricesPriceMonthly = GetServerTypesIdResponseBody200ServerTypePricesPriceMonthly {
  -- | gross: Price with VAT added
  getServerTypesIdResponseBody200ServerTypePricesPriceMonthlyGross :: Data.Text.Internal.Text
  -- | net: Price without VAT
  , getServerTypesIdResponseBody200ServerTypePricesPriceMonthlyNet :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetServerTypesIdResponseBody200ServerTypePricesPriceMonthly
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "gross" (getServerTypesIdResponseBody200ServerTypePricesPriceMonthlyGross obj) : (Data.Aeson..=) "net" (getServerTypesIdResponseBody200ServerTypePricesPriceMonthlyNet obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "gross" (getServerTypesIdResponseBody200ServerTypePricesPriceMonthlyGross obj) GHC.Base.<> (Data.Aeson..=) "net" (getServerTypesIdResponseBody200ServerTypePricesPriceMonthlyNet obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetServerTypesIdResponseBody200ServerTypePricesPriceMonthly
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetServerTypesIdResponseBody200ServerTypePricesPriceMonthly" (\obj -> (GHC.Base.pure GetServerTypesIdResponseBody200ServerTypePricesPriceMonthly GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "gross")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "net"))
-- | Defines the enum schema GetServerTypesIdResponseBody200Server_typeStorage_type
-- 
-- Type of Server boot drive. Local has higher speed. Network has better availability.
data GetServerTypesIdResponseBody200ServerTypeStorageType
    = GetServerTypesIdResponseBody200ServerTypeStorageTypeEnumOther Data.Aeson.Types.Internal.Value
    | GetServerTypesIdResponseBody200ServerTypeStorageTypeEnumTyped Data.Text.Internal.Text
    | GetServerTypesIdResponseBody200ServerTypeStorageTypeEnumStringLocal
    | GetServerTypesIdResponseBody200ServerTypeStorageTypeEnumStringNetwork
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetServerTypesIdResponseBody200ServerTypeStorageType
    where toJSON (GetServerTypesIdResponseBody200ServerTypeStorageTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetServerTypesIdResponseBody200ServerTypeStorageTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetServerTypesIdResponseBody200ServerTypeStorageTypeEnumStringLocal) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "local"
          toJSON (GetServerTypesIdResponseBody200ServerTypeStorageTypeEnumStringNetwork) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "network"
instance Data.Aeson.FromJSON GetServerTypesIdResponseBody200ServerTypeStorageType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "local")
                                          then GetServerTypesIdResponseBody200ServerTypeStorageTypeEnumStringLocal
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "network")
                                                then GetServerTypesIdResponseBody200ServerTypeStorageTypeEnumStringNetwork
                                                else GetServerTypesIdResponseBody200ServerTypeStorageTypeEnumOther val)
