-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation getActions
module HCloud.Operations.GetActions where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > GET /actions
-- 
-- Returns all Action objects. You can \`sort\` the results by using the sort URI parameter, and filter them with the \`status\` parameter.
getActions :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Maybe.Maybe GHC.Integer.Type.Integer                                                                               -- ^ id: Can be used multiple times, the response will contain only Actions with specified IDs
  -> GHC.Maybe.Maybe Data.Text.Internal.Text                                                                                -- ^ sort: Can be used multiple times.
  -> GHC.Maybe.Maybe Data.Text.Internal.Text                                                                                -- ^ status: Can be used multiple times, the response will contain only Actions with specified statuses
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response GetActionsResponse)) -- ^ Monad containing the result of the operation
getActions config
           id
           sort
           status = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetActionsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetActionsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                  GetActionsResponseBody200)
                                                                                                                                                                        | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/actions") ((Data.Text.pack "id",
                                                                                                                                                                                                                                                                                                                                                                                                            HCloud.Common.stringifyModel Data.Functor.<$> id) : ((Data.Text.pack "sort",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   HCloud.Common.stringifyModel Data.Functor.<$> sort) : ((Data.Text.pack "status",
loud.Common.stringifyModel Data.Functor.<$> status) : []))))
-- | > GET /actions
-- 
-- The same as 'getActions' but returns the raw 'Data.ByteString.Char8.ByteString'
getActionsRaw :: forall m s . (HCloud.Common.MonadHTTP m,
                               HCloud.Common.SecurityScheme s) =>
                 HCloud.Common.Configuration s ->
                 GHC.Maybe.Maybe GHC.Integer.Type.Integer ->
                 GHC.Maybe.Maybe Data.Text.Internal.Text ->
                 GHC.Maybe.Maybe Data.Text.Internal.Text ->
                 m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                       (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getActionsRaw config
              id
              sort
              status = GHC.Base.id (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/actions") ((Data.Text.pack "id",
                                                                                                                                                                    HCloud.Common.stringifyModel Data.Functor.<$> id) : ((Data.Text.pack "sort",
                                                                                                                                                                                                                           HCloud.Common.stringifyModel Data.Functor.<$> sort) : ((Data.Text.pack "status",
                                                                                                                                                                                                                                                                                    HCloud.Common.stringifyModel Data.Functor.<$> status) : []))))
-- | > GET /actions
-- 
-- Monadic version of 'getActions' (use with 'HCloud.Common.runWithConfiguration')
getActionsM :: forall m s . (HCloud.Common.MonadHTTP m,
                             HCloud.Common.SecurityScheme s) =>
               GHC.Maybe.Maybe GHC.Integer.Type.Integer ->
               GHC.Maybe.Maybe Data.Text.Internal.Text ->
               GHC.Maybe.Maybe Data.Text.Internal.Text ->
               Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                  m
                                                  (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                      (Network.HTTP.Client.Types.Response GetActionsResponse))
getActionsM id
            sort
            status = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetActionsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetActionsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                   GetActionsResponseBody200)
                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/actions") ((Data.Text.pack "id",
                                                                                                                                                                                                                                                                                                                                                                                                       HCloud.Common.stringifyModel Data.Functor.<$> id) : ((Data.Text.pack "sort",
                                                                                                                                                                                                                                                                                                                                                                                                                                                              HCloud.Common.stringifyModel Data.Functor.<$> sort) : ((Data.Text.pack "status",
loud.Common.stringifyModel Data.Functor.<$> status) : []))))
-- | > GET /actions
-- 
-- Monadic version of 'getActionsRaw' (use with 'HCloud.Common.runWithConfiguration')
getActionsRawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                HCloud.Common.SecurityScheme s) =>
                  GHC.Maybe.Maybe GHC.Integer.Type.Integer ->
                  GHC.Maybe.Maybe Data.Text.Internal.Text ->
                  GHC.Maybe.Maybe Data.Text.Internal.Text ->
                  Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                     m
                                                     (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                         (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getActionsRawM id
               sort
               status = GHC.Base.id (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/actions") ((Data.Text.pack "id",
                                                                                                                                                               HCloud.Common.stringifyModel Data.Functor.<$> id) : ((Data.Text.pack "sort",
                                                                                                                                                                                                                      HCloud.Common.stringifyModel Data.Functor.<$> sort) : ((Data.Text.pack "status",
                                                                                                                                                                                                                                                                               HCloud.Common.stringifyModel Data.Functor.<$> status) : []))))
-- | Represents a response of the operation 'getActions'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetActionsResponseError' is used.
data GetActionsResponse =                            
   GetActionsResponseError GHC.Base.String           -- ^ Means either no matching case available or a parse error
  | GetActionsResponse200 GetActionsResponseBody200  -- ^ The \`actions\` key contains a list of Actions
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema GetActionsResponseBody200
-- 
-- 
data GetActionsResponseBody200 = GetActionsResponseBody200 {
  -- | actions
  getActionsResponseBody200Actions :: ([] GetActionsResponseBody200Actions)
  -- | meta
  , getActionsResponseBody200Meta :: (GHC.Maybe.Maybe GetActionsResponseBody200Meta)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetActionsResponseBody200
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "actions" (getActionsResponseBody200Actions obj) : (Data.Aeson..=) "meta" (getActionsResponseBody200Meta obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "actions" (getActionsResponseBody200Actions obj) GHC.Base.<> (Data.Aeson..=) "meta" (getActionsResponseBody200Meta obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetActionsResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetActionsResponseBody200" (\obj -> (GHC.Base.pure GetActionsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "actions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "meta"))
-- | Defines the data type for the schema GetActionsResponseBody200Actions
-- 
-- 
data GetActionsResponseBody200Actions = GetActionsResponseBody200Actions {
  -- | command: Command executed in the Action
  getActionsResponseBody200ActionsCommand :: Data.Text.Internal.Text
  -- | error: Error message for the Action if error occurred, otherwise null
  , getActionsResponseBody200ActionsError :: GetActionsResponseBody200ActionsError
  -- | finished: Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
  , getActionsResponseBody200ActionsFinished :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , getActionsResponseBody200ActionsId :: GHC.Integer.Type.Integer
  -- | progress: Progress of Action in percent
  , getActionsResponseBody200ActionsProgress :: GHC.Types.Double
  -- | resources: Resources the Action relates to
  , getActionsResponseBody200ActionsResources :: ([] GetActionsResponseBody200ActionsResources)
  -- | started: Point in time when the Action was started (in ISO-8601 format)
  , getActionsResponseBody200ActionsStarted :: Data.Text.Internal.Text
  -- | status: Status of the Action
  , getActionsResponseBody200ActionsStatus :: GetActionsResponseBody200ActionsStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetActionsResponseBody200Actions
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "command" (getActionsResponseBody200ActionsCommand obj) : (Data.Aeson..=) "error" (getActionsResponseBody200ActionsError obj) : (Data.Aeson..=) "finished" (getActionsResponseBody200ActionsFinished obj) : (Data.Aeson..=) "id" (getActionsResponseBody200ActionsId obj) : (Data.Aeson..=) "progress" (getActionsResponseBody200ActionsProgress obj) : (Data.Aeson..=) "resources" (getActionsResponseBody200ActionsResources obj) : (Data.Aeson..=) "started" (getActionsResponseBody200ActionsStarted obj) : (Data.Aeson..=) "status" (getActionsResponseBody200ActionsStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "command" (getActionsResponseBody200ActionsCommand obj) GHC.Base.<> ((Data.Aeson..=) "error" (getActionsResponseBody200ActionsError obj) GHC.Base.<> ((Data.Aeson..=) "finished" (getActionsResponseBody200ActionsFinished obj) GHC.Base.<> ((Data.Aeson..=) "id" (getActionsResponseBody200ActionsId obj) GHC.Base.<> ((Data.Aeson..=) "progress" (getActionsResponseBody200ActionsProgress obj) GHC.Base.<> ((Data.Aeson..=) "resources" (getActionsResponseBody200ActionsResources obj) GHC.Base.<> ((Data.Aeson..=) "started" (getActionsResponseBody200ActionsStarted obj) GHC.Base.<> (Data.Aeson..=) "status" (getActionsResponseBody200ActionsStatus obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetActionsResponseBody200Actions
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetActionsResponseBody200Actions" (\obj -> (((((((GHC.Base.pure GetActionsResponseBody200Actions GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "command")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "finished")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "started")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Defines the data type for the schema GetActionsResponseBody200ActionsError
-- 
-- Error message for the Action if error occurred, otherwise null
data GetActionsResponseBody200ActionsError = GetActionsResponseBody200ActionsError {
  -- | code: Fixed machine readable code
  getActionsResponseBody200ActionsErrorCode :: Data.Text.Internal.Text
  -- | message: Humanized error message
  , getActionsResponseBody200ActionsErrorMessage :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetActionsResponseBody200ActionsError
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "code" (getActionsResponseBody200ActionsErrorCode obj) : (Data.Aeson..=) "message" (getActionsResponseBody200ActionsErrorMessage obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "code" (getActionsResponseBody200ActionsErrorCode obj) GHC.Base.<> (Data.Aeson..=) "message" (getActionsResponseBody200ActionsErrorMessage obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetActionsResponseBody200ActionsError
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetActionsResponseBody200ActionsError" (\obj -> (GHC.Base.pure GetActionsResponseBody200ActionsError GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Defines the data type for the schema GetActionsResponseBody200ActionsResources
-- 
-- 
data GetActionsResponseBody200ActionsResources = GetActionsResponseBody200ActionsResources {
  -- | id: ID of the Resource
  getActionsResponseBody200ActionsResourcesId :: GHC.Integer.Type.Integer
  -- | type: Type of resource referenced
  , getActionsResponseBody200ActionsResourcesType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetActionsResponseBody200ActionsResources
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (getActionsResponseBody200ActionsResourcesId obj) : (Data.Aeson..=) "type" (getActionsResponseBody200ActionsResourcesType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (getActionsResponseBody200ActionsResourcesId obj) GHC.Base.<> (Data.Aeson..=) "type" (getActionsResponseBody200ActionsResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetActionsResponseBody200ActionsResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetActionsResponseBody200ActionsResources" (\obj -> (GHC.Base.pure GetActionsResponseBody200ActionsResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema GetActionsResponseBody200ActionsStatus
-- 
-- Status of the Action
data GetActionsResponseBody200ActionsStatus
    = GetActionsResponseBody200ActionsStatusEnumOther Data.Aeson.Types.Internal.Value
    | GetActionsResponseBody200ActionsStatusEnumTyped Data.Text.Internal.Text
    | GetActionsResponseBody200ActionsStatusEnumStringError
    | GetActionsResponseBody200ActionsStatusEnumStringRunning
    | GetActionsResponseBody200ActionsStatusEnumStringSuccess
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetActionsResponseBody200ActionsStatus
    where toJSON (GetActionsResponseBody200ActionsStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetActionsResponseBody200ActionsStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetActionsResponseBody200ActionsStatusEnumStringError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error"
          toJSON (GetActionsResponseBody200ActionsStatusEnumStringRunning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running"
          toJSON (GetActionsResponseBody200ActionsStatusEnumStringSuccess) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success"
instance Data.Aeson.FromJSON GetActionsResponseBody200ActionsStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error")
                                          then GetActionsResponseBody200ActionsStatusEnumStringError
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running")
                                                then GetActionsResponseBody200ActionsStatusEnumStringRunning
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success")
                                                      then GetActionsResponseBody200ActionsStatusEnumStringSuccess
                                                      else GetActionsResponseBody200ActionsStatusEnumOther val)
-- | Defines the data type for the schema GetActionsResponseBody200Meta
-- 
-- 
data GetActionsResponseBody200Meta = GetActionsResponseBody200Meta {
  -- | pagination
  getActionsResponseBody200MetaPagination :: GetActionsResponseBody200MetaPagination
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetActionsResponseBody200Meta
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "pagination" (getActionsResponseBody200MetaPagination obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "pagination" (getActionsResponseBody200MetaPagination obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetActionsResponseBody200Meta
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetActionsResponseBody200Meta" (\obj -> GHC.Base.pure GetActionsResponseBody200Meta GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pagination"))
-- | Defines the data type for the schema GetActionsResponseBody200MetaPagination
-- 
-- 
data GetActionsResponseBody200MetaPagination = GetActionsResponseBody200MetaPagination {
  -- | last_page: ID of the last page available. Can be null if the current page is the last one.
  getActionsResponseBody200MetaPaginationLastPage :: GHC.Types.Double
  -- | next_page: ID of the next page. Can be null if the current page is the last one.
  , getActionsResponseBody200MetaPaginationNextPage :: GHC.Types.Double
  -- | page: Current page number
  , getActionsResponseBody200MetaPaginationPage :: GHC.Types.Double
  -- | per_page: Maximum number of items shown per page in the response
  , getActionsResponseBody200MetaPaginationPerPage :: GHC.Types.Double
  -- | previous_page: ID of the previous page. Can be null if the current page is the first one.
  , getActionsResponseBody200MetaPaginationPreviousPage :: GHC.Types.Double
  -- | total_entries: The total number of entries that exist in the database for this query. Nullable if unknown.
  , getActionsResponseBody200MetaPaginationTotalEntries :: GHC.Types.Double
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetActionsResponseBody200MetaPagination
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "last_page" (getActionsResponseBody200MetaPaginationLastPage obj) : (Data.Aeson..=) "next_page" (getActionsResponseBody200MetaPaginationNextPage obj) : (Data.Aeson..=) "page" (getActionsResponseBody200MetaPaginationPage obj) : (Data.Aeson..=) "per_page" (getActionsResponseBody200MetaPaginationPerPage obj) : (Data.Aeson..=) "previous_page" (getActionsResponseBody200MetaPaginationPreviousPage obj) : (Data.Aeson..=) "total_entries" (getActionsResponseBody200MetaPaginationTotalEntries obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "last_page" (getActionsResponseBody200MetaPaginationLastPage obj) GHC.Base.<> ((Data.Aeson..=) "next_page" (getActionsResponseBody200MetaPaginationNextPage obj) GHC.Base.<> ((Data.Aeson..=) "page" (getActionsResponseBody200MetaPaginationPage obj) GHC.Base.<> ((Data.Aeson..=) "per_page" (getActionsResponseBody200MetaPaginationPerPage obj) GHC.Base.<> ((Data.Aeson..=) "previous_page" (getActionsResponseBody200MetaPaginationPreviousPage obj) GHC.Base.<> (Data.Aeson..=) "total_entries" (getActionsResponseBody200MetaPaginationTotalEntries obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetActionsResponseBody200MetaPagination
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetActionsResponseBody200MetaPagination" (\obj -> (((((GHC.Base.pure GetActionsResponseBody200MetaPagination GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "last_page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "next_page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "per_page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "previous_page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "total_entries"))
