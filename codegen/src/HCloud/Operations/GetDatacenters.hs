-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation getDatacenters
module HCloud.Operations.GetDatacenters where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > GET /datacenters
-- 
-- Returns all Datacenter objects.
getDatacenters :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Maybe.Maybe Data.Text.Internal.Text                                                                                    -- ^ name: Can be used to filter Datacenters by their name. The response will only contain the Datacenter matching the specified name. When the name does not match the Datacenter name format, an \`invalid_input\` error is returned.
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response GetDatacentersResponse)) -- ^ Monad containing the result of the operation
getDatacenters config
               name = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetDatacentersResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetDatacentersResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                            GetDatacentersResponseBody200)
                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/datacenters") ((Data.Text.pack "name",
                                                                                                                                                                                                                                                                                                                                                                                                                      HCloud.Common.stringifyModel Data.Functor.<$> name) : []))
-- | > GET /datacenters
-- 
-- The same as 'getDatacenters' but returns the raw 'Data.ByteString.Char8.ByteString'
getDatacentersRaw :: forall m s . (HCloud.Common.MonadHTTP m,
                                   HCloud.Common.SecurityScheme s) =>
                     HCloud.Common.Configuration s ->
                     GHC.Maybe.Maybe Data.Text.Internal.Text ->
                     m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                           (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getDatacentersRaw config
                  name = GHC.Base.id (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/datacenters") ((Data.Text.pack "name",
                                                                                                                                                                          HCloud.Common.stringifyModel Data.Functor.<$> name) : []))
-- | > GET /datacenters
-- 
-- Monadic version of 'getDatacenters' (use with 'HCloud.Common.runWithConfiguration')
getDatacentersM :: forall m s . (HCloud.Common.MonadHTTP m,
                                 HCloud.Common.SecurityScheme s) =>
                   GHC.Maybe.Maybe Data.Text.Internal.Text ->
                   Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                      m
                                                      (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                          (Network.HTTP.Client.Types.Response GetDatacentersResponse))
getDatacentersM name = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetDatacentersResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetDatacentersResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                             GetDatacentersResponseBody200)
                                                                                                                                                                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/datacenters") ((Data.Text.pack "name",
                                                                                                                                                                                                                                                                                                                                                                                                                 HCloud.Common.stringifyModel Data.Functor.<$> name) : []))
-- | > GET /datacenters
-- 
-- Monadic version of 'getDatacentersRaw' (use with 'HCloud.Common.runWithConfiguration')
getDatacentersRawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                    HCloud.Common.SecurityScheme s) =>
                      GHC.Maybe.Maybe Data.Text.Internal.Text ->
                      Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                         m
                                                         (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                             (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getDatacentersRawM name = GHC.Base.id (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/datacenters") ((Data.Text.pack "name",
                                                                                                                                                                     HCloud.Common.stringifyModel Data.Functor.<$> name) : []))
-- | Represents a response of the operation 'getDatacenters'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetDatacentersResponseError' is used.
data GetDatacentersResponse =                                
   GetDatacentersResponseError GHC.Base.String               -- ^ Means either no matching case available or a parse error
  | GetDatacentersResponse200 GetDatacentersResponseBody200  -- ^ The reply contains the \`datacenters\` and \`recommendation\` keys
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema GetDatacentersResponseBody200
-- 
-- 
data GetDatacentersResponseBody200 = GetDatacentersResponseBody200 {
  -- | datacenters
  getDatacentersResponseBody200Datacenters :: ([] GetDatacentersResponseBody200Datacenters)
  -- | recommendation: The Datacenter which is recommended to be used to create new Servers.
  , getDatacentersResponseBody200Recommendation :: GHC.Types.Double
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetDatacentersResponseBody200
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "datacenters" (getDatacentersResponseBody200Datacenters obj) : (Data.Aeson..=) "recommendation" (getDatacentersResponseBody200Recommendation obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "datacenters" (getDatacentersResponseBody200Datacenters obj) GHC.Base.<> (Data.Aeson..=) "recommendation" (getDatacentersResponseBody200Recommendation obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetDatacentersResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetDatacentersResponseBody200" (\obj -> (GHC.Base.pure GetDatacentersResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "datacenters")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "recommendation"))
-- | Defines the data type for the schema GetDatacentersResponseBody200Datacenters
-- 
-- 
data GetDatacentersResponseBody200Datacenters = GetDatacentersResponseBody200Datacenters {
  -- | description: Description of the Datacenter
  getDatacentersResponseBody200DatacentersDescription :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , getDatacentersResponseBody200DatacentersId :: GHC.Integer.Type.Integer
  -- | location
  , getDatacentersResponseBody200DatacentersLocation :: GetDatacentersResponseBody200DatacentersLocation
  -- | name: Unique identifier of the Datacenter
  , getDatacentersResponseBody200DatacentersName :: Data.Text.Internal.Text
  -- | server_types: The Server types the Datacenter can handle
  , getDatacentersResponseBody200DatacentersServerTypes :: GetDatacentersResponseBody200DatacentersServerTypes
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetDatacentersResponseBody200Datacenters
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "description" (getDatacentersResponseBody200DatacentersDescription obj) : (Data.Aeson..=) "id" (getDatacentersResponseBody200DatacentersId obj) : (Data.Aeson..=) "location" (getDatacentersResponseBody200DatacentersLocation obj) : (Data.Aeson..=) "name" (getDatacentersResponseBody200DatacentersName obj) : (Data.Aeson..=) "server_types" (getDatacentersResponseBody200DatacentersServerTypes obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "description" (getDatacentersResponseBody200DatacentersDescription obj) GHC.Base.<> ((Data.Aeson..=) "id" (getDatacentersResponseBody200DatacentersId obj) GHC.Base.<> ((Data.Aeson..=) "location" (getDatacentersResponseBody200DatacentersLocation obj) GHC.Base.<> ((Data.Aeson..=) "name" (getDatacentersResponseBody200DatacentersName obj) GHC.Base.<> (Data.Aeson..=) "server_types" (getDatacentersResponseBody200DatacentersServerTypes obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON GetDatacentersResponseBody200Datacenters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetDatacentersResponseBody200Datacenters" (\obj -> ((((GHC.Base.pure GetDatacentersResponseBody200Datacenters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "location")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "server_types"))
-- | Defines the data type for the schema GetDatacentersResponseBody200DatacentersLocation
-- 
-- 
data GetDatacentersResponseBody200DatacentersLocation = GetDatacentersResponseBody200DatacentersLocation {
  -- | city: City the Location is closest to
  getDatacentersResponseBody200DatacentersLocationCity :: Data.Text.Internal.Text
  -- | country: ISO 3166-1 alpha-2 code of the country the Location resides in
  , getDatacentersResponseBody200DatacentersLocationCountry :: Data.Text.Internal.Text
  -- | description: Description of the Location
  , getDatacentersResponseBody200DatacentersLocationDescription :: Data.Text.Internal.Text
  -- | id: ID of the Location
  , getDatacentersResponseBody200DatacentersLocationId :: GHC.Types.Double
  -- | latitude: Latitude of the city closest to the Location
  , getDatacentersResponseBody200DatacentersLocationLatitude :: GHC.Types.Double
  -- | longitude: Longitude of the city closest to the Location
  , getDatacentersResponseBody200DatacentersLocationLongitude :: GHC.Types.Double
  -- | name: Unique identifier of the Location
  , getDatacentersResponseBody200DatacentersLocationName :: Data.Text.Internal.Text
  -- | network_zone: Name of network zone this Location resides in
  , getDatacentersResponseBody200DatacentersLocationNetworkZone :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetDatacentersResponseBody200DatacentersLocation
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (getDatacentersResponseBody200DatacentersLocationCity obj) : (Data.Aeson..=) "country" (getDatacentersResponseBody200DatacentersLocationCountry obj) : (Data.Aeson..=) "description" (getDatacentersResponseBody200DatacentersLocationDescription obj) : (Data.Aeson..=) "id" (getDatacentersResponseBody200DatacentersLocationId obj) : (Data.Aeson..=) "latitude" (getDatacentersResponseBody200DatacentersLocationLatitude obj) : (Data.Aeson..=) "longitude" (getDatacentersResponseBody200DatacentersLocationLongitude obj) : (Data.Aeson..=) "name" (getDatacentersResponseBody200DatacentersLocationName obj) : (Data.Aeson..=) "network_zone" (getDatacentersResponseBody200DatacentersLocationNetworkZone obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (getDatacentersResponseBody200DatacentersLocationCity obj) GHC.Base.<> ((Data.Aeson..=) "country" (getDatacentersResponseBody200DatacentersLocationCountry obj) GHC.Base.<> ((Data.Aeson..=) "description" (getDatacentersResponseBody200DatacentersLocationDescription obj) GHC.Base.<> ((Data.Aeson..=) "id" (getDatacentersResponseBody200DatacentersLocationId obj) GHC.Base.<> ((Data.Aeson..=) "latitude" (getDatacentersResponseBody200DatacentersLocationLatitude obj) GHC.Base.<> ((Data.Aeson..=) "longitude" (getDatacentersResponseBody200DatacentersLocationLongitude obj) GHC.Base.<> ((Data.Aeson..=) "name" (getDatacentersResponseBody200DatacentersLocationName obj) GHC.Base.<> (Data.Aeson..=) "network_zone" (getDatacentersResponseBody200DatacentersLocationNetworkZone obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetDatacentersResponseBody200DatacentersLocation
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetDatacentersResponseBody200DatacentersLocation" (\obj -> (((((((GHC.Base.pure GetDatacentersResponseBody200DatacentersLocation GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "latitude")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "longitude")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "network_zone"))
-- | Defines the data type for the schema GetDatacentersResponseBody200DatacentersServer_types
-- 
-- The Server types the Datacenter can handle
data GetDatacentersResponseBody200DatacentersServerTypes = GetDatacentersResponseBody200DatacentersServerTypes {
  -- | available: IDs of Server types that are supported and for which the Datacenter has enough resources left
  getDatacentersResponseBody200DatacentersServerTypesAvailable :: ([] GHC.Types.Double)
  -- | available_for_migration: IDs of Server types that are supported and for which the Datacenter has enough resources left
  , getDatacentersResponseBody200DatacentersServerTypesAvailableForMigration :: ([] GHC.Types.Double)
  -- | supported: IDs of Server types that are supported in the Datacenter
  , getDatacentersResponseBody200DatacentersServerTypesSupported :: ([] GHC.Types.Double)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetDatacentersResponseBody200DatacentersServerTypes
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "available" (getDatacentersResponseBody200DatacentersServerTypesAvailable obj) : (Data.Aeson..=) "available_for_migration" (getDatacentersResponseBody200DatacentersServerTypesAvailableForMigration obj) : (Data.Aeson..=) "supported" (getDatacentersResponseBody200DatacentersServerTypesSupported obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "available" (getDatacentersResponseBody200DatacentersServerTypesAvailable obj) GHC.Base.<> ((Data.Aeson..=) "available_for_migration" (getDatacentersResponseBody200DatacentersServerTypesAvailableForMigration obj) GHC.Base.<> (Data.Aeson..=) "supported" (getDatacentersResponseBody200DatacentersServerTypesSupported obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetDatacentersResponseBody200DatacentersServerTypes
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetDatacentersResponseBody200DatacentersServerTypes" (\obj -> ((GHC.Base.pure GetDatacentersResponseBody200DatacentersServerTypes GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "available")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "available_for_migration")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "supported"))
