-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation postFloatingIps_Id_ActionsAssign
module HCloud.Operations.PostFloatingIpsIdActionsAssign where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > POST /floating_ips/{id}/actions/assign
-- 
-- Assigns a Floating IP to a Server.
postFloatingIps_Id_ActionsAssign :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer                                                                                                                     -- ^ id: ID of the Floating IP
  -> GHC.Maybe.Maybe PostFloatingIpsIdActionsAssignRequestBody                                                                                    -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response PostFloatingIpsIdActionsAssignResponse))   -- ^ Monad containing the result of the operation
postFloatingIps_Id_ActionsAssign config
                                 id
                                 body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostFloatingIpsIdActionsAssignResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostFloatingIpsIdActionsAssignResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              PostFloatingIpsIdActionsAssignResponseBody201)
                                                                                                                                                                                                                | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/floating_ips/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/assign"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /floating_ips/{id}/actions/assign
-- 
-- The same as 'postFloatingIps_Id_ActionsAssign' but returns the raw 'Data.ByteString.Char8.ByteString'
postFloatingIps_Id_ActionsAssignRaw :: forall m s . (HCloud.Common.MonadHTTP m,
                                                     HCloud.Common.SecurityScheme s) =>
                                       HCloud.Common.Configuration s ->
                                       GHC.Integer.Type.Integer ->
                                       GHC.Maybe.Maybe PostFloatingIpsIdActionsAssignRequestBody ->
                                       m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                             (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postFloatingIps_Id_ActionsAssignRaw config
                                    id
                                    body = GHC.Base.id (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/floating_ips/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/assign"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /floating_ips/{id}/actions/assign
-- 
-- Monadic version of 'postFloatingIps_Id_ActionsAssign' (use with 'HCloud.Common.runWithConfiguration')
postFloatingIps_Id_ActionsAssignM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                   HCloud.Common.SecurityScheme s) =>
                                     GHC.Integer.Type.Integer ->
                                     GHC.Maybe.Maybe PostFloatingIpsIdActionsAssignRequestBody ->
                                     Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                        m
                                                                        (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                            (Network.HTTP.Client.Types.Response PostFloatingIpsIdActionsAssignResponse))
postFloatingIps_Id_ActionsAssignM id
                                  body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostFloatingIpsIdActionsAssignResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostFloatingIpsIdActionsAssignResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               PostFloatingIpsIdActionsAssignResponseBody201)
                                                                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/floating_ips/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/assign"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /floating_ips/{id}/actions/assign
-- 
-- Monadic version of 'postFloatingIps_Id_ActionsAssignRaw' (use with 'HCloud.Common.runWithConfiguration')
postFloatingIps_Id_ActionsAssignRawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                      HCloud.Common.SecurityScheme s) =>
                                        GHC.Integer.Type.Integer ->
                                        GHC.Maybe.Maybe PostFloatingIpsIdActionsAssignRequestBody ->
                                        Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                           m
                                                                           (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                               (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postFloatingIps_Id_ActionsAssignRawM id
                                     body = GHC.Base.id (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/floating_ips/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/assign"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema postFloatingIps_Id_ActionsAssignRequestBody
-- 
-- 
data PostFloatingIpsIdActionsAssignRequestBody = PostFloatingIpsIdActionsAssignRequestBody {
  -- | server: ID of the Server the Floating IP shall be assigned to
  postFloatingIpsIdActionsAssignRequestBodyServer :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFloatingIpsIdActionsAssignRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "server" (postFloatingIpsIdActionsAssignRequestBodyServer obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "server" (postFloatingIpsIdActionsAssignRequestBodyServer obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostFloatingIpsIdActionsAssignRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFloatingIpsIdActionsAssignRequestBody" (\obj -> GHC.Base.pure PostFloatingIpsIdActionsAssignRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "server"))
-- | Represents a response of the operation 'postFloatingIps_Id_ActionsAssign'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostFloatingIpsIdActionsAssignResponseError' is used.
data PostFloatingIpsIdActionsAssignResponse =                                                
   PostFloatingIpsIdActionsAssignResponseError GHC.Base.String                               -- ^ Means either no matching case available or a parse error
  | PostFloatingIpsIdActionsAssignResponse201 PostFloatingIpsIdActionsAssignResponseBody201  -- ^ The \`action\` key contains the \`assign\` Action
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema PostFloatingIpsIdActionsAssignResponseBody201
-- 
-- 
data PostFloatingIpsIdActionsAssignResponseBody201 = PostFloatingIpsIdActionsAssignResponseBody201 {
  -- | action
  postFloatingIpsIdActionsAssignResponseBody201Action :: PostFloatingIpsIdActionsAssignResponseBody201Action
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFloatingIpsIdActionsAssignResponseBody201
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "action" (postFloatingIpsIdActionsAssignResponseBody201Action obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "action" (postFloatingIpsIdActionsAssignResponseBody201Action obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostFloatingIpsIdActionsAssignResponseBody201
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFloatingIpsIdActionsAssignResponseBody201" (\obj -> GHC.Base.pure PostFloatingIpsIdActionsAssignResponseBody201 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "action"))
-- | Defines the data type for the schema PostFloatingIpsIdActionsAssignResponseBody201Action
-- 
-- 
data PostFloatingIpsIdActionsAssignResponseBody201Action = PostFloatingIpsIdActionsAssignResponseBody201Action {
  -- | command: Command executed in the Action
  postFloatingIpsIdActionsAssignResponseBody201ActionCommand :: Data.Text.Internal.Text
  -- | error: Error message for the Action if error occurred, otherwise null
  , postFloatingIpsIdActionsAssignResponseBody201ActionError :: PostFloatingIpsIdActionsAssignResponseBody201ActionError
  -- | finished: Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
  , postFloatingIpsIdActionsAssignResponseBody201ActionFinished :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , postFloatingIpsIdActionsAssignResponseBody201ActionId :: GHC.Integer.Type.Integer
  -- | progress: Progress of Action in percent
  , postFloatingIpsIdActionsAssignResponseBody201ActionProgress :: GHC.Types.Double
  -- | resources: Resources the Action relates to
  , postFloatingIpsIdActionsAssignResponseBody201ActionResources :: ([] PostFloatingIpsIdActionsAssignResponseBody201ActionResources)
  -- | started: Point in time when the Action was started (in ISO-8601 format)
  , postFloatingIpsIdActionsAssignResponseBody201ActionStarted :: Data.Text.Internal.Text
  -- | status: Status of the Action
  , postFloatingIpsIdActionsAssignResponseBody201ActionStatus :: PostFloatingIpsIdActionsAssignResponseBody201ActionStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFloatingIpsIdActionsAssignResponseBody201Action
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "command" (postFloatingIpsIdActionsAssignResponseBody201ActionCommand obj) : (Data.Aeson..=) "error" (postFloatingIpsIdActionsAssignResponseBody201ActionError obj) : (Data.Aeson..=) "finished" (postFloatingIpsIdActionsAssignResponseBody201ActionFinished obj) : (Data.Aeson..=) "id" (postFloatingIpsIdActionsAssignResponseBody201ActionId obj) : (Data.Aeson..=) "progress" (postFloatingIpsIdActionsAssignResponseBody201ActionProgress obj) : (Data.Aeson..=) "resources" (postFloatingIpsIdActionsAssignResponseBody201ActionResources obj) : (Data.Aeson..=) "started" (postFloatingIpsIdActionsAssignResponseBody201ActionStarted obj) : (Data.Aeson..=) "status" (postFloatingIpsIdActionsAssignResponseBody201ActionStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "command" (postFloatingIpsIdActionsAssignResponseBody201ActionCommand obj) GHC.Base.<> ((Data.Aeson..=) "error" (postFloatingIpsIdActionsAssignResponseBody201ActionError obj) GHC.Base.<> ((Data.Aeson..=) "finished" (postFloatingIpsIdActionsAssignResponseBody201ActionFinished obj) GHC.Base.<> ((Data.Aeson..=) "id" (postFloatingIpsIdActionsAssignResponseBody201ActionId obj) GHC.Base.<> ((Data.Aeson..=) "progress" (postFloatingIpsIdActionsAssignResponseBody201ActionProgress obj) GHC.Base.<> ((Data.Aeson..=) "resources" (postFloatingIpsIdActionsAssignResponseBody201ActionResources obj) GHC.Base.<> ((Data.Aeson..=) "started" (postFloatingIpsIdActionsAssignResponseBody201ActionStarted obj) GHC.Base.<> (Data.Aeson..=) "status" (postFloatingIpsIdActionsAssignResponseBody201ActionStatus obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostFloatingIpsIdActionsAssignResponseBody201Action
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFloatingIpsIdActionsAssignResponseBody201Action" (\obj -> (((((((GHC.Base.pure PostFloatingIpsIdActionsAssignResponseBody201Action GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "command")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "finished")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "started")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Defines the data type for the schema PostFloatingIpsIdActionsAssignResponseBody201ActionError
-- 
-- Error message for the Action if error occurred, otherwise null
data PostFloatingIpsIdActionsAssignResponseBody201ActionError = PostFloatingIpsIdActionsAssignResponseBody201ActionError {
  -- | code: Fixed machine readable code
  postFloatingIpsIdActionsAssignResponseBody201ActionErrorCode :: Data.Text.Internal.Text
  -- | message: Humanized error message
  , postFloatingIpsIdActionsAssignResponseBody201ActionErrorMessage :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFloatingIpsIdActionsAssignResponseBody201ActionError
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "code" (postFloatingIpsIdActionsAssignResponseBody201ActionErrorCode obj) : (Data.Aeson..=) "message" (postFloatingIpsIdActionsAssignResponseBody201ActionErrorMessage obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "code" (postFloatingIpsIdActionsAssignResponseBody201ActionErrorCode obj) GHC.Base.<> (Data.Aeson..=) "message" (postFloatingIpsIdActionsAssignResponseBody201ActionErrorMessage obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostFloatingIpsIdActionsAssignResponseBody201ActionError
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFloatingIpsIdActionsAssignResponseBody201ActionError" (\obj -> (GHC.Base.pure PostFloatingIpsIdActionsAssignResponseBody201ActionError GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Defines the data type for the schema PostFloatingIpsIdActionsAssignResponseBody201ActionResources
-- 
-- 
data PostFloatingIpsIdActionsAssignResponseBody201ActionResources = PostFloatingIpsIdActionsAssignResponseBody201ActionResources {
  -- | id: ID of the Resource
  postFloatingIpsIdActionsAssignResponseBody201ActionResourcesId :: GHC.Integer.Type.Integer
  -- | type: Type of resource referenced
  , postFloatingIpsIdActionsAssignResponseBody201ActionResourcesType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFloatingIpsIdActionsAssignResponseBody201ActionResources
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (postFloatingIpsIdActionsAssignResponseBody201ActionResourcesId obj) : (Data.Aeson..=) "type" (postFloatingIpsIdActionsAssignResponseBody201ActionResourcesType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (postFloatingIpsIdActionsAssignResponseBody201ActionResourcesId obj) GHC.Base.<> (Data.Aeson..=) "type" (postFloatingIpsIdActionsAssignResponseBody201ActionResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostFloatingIpsIdActionsAssignResponseBody201ActionResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFloatingIpsIdActionsAssignResponseBody201ActionResources" (\obj -> (GHC.Base.pure PostFloatingIpsIdActionsAssignResponseBody201ActionResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema PostFloatingIpsIdActionsAssignResponseBody201ActionStatus
-- 
-- Status of the Action
data PostFloatingIpsIdActionsAssignResponseBody201ActionStatus
    = PostFloatingIpsIdActionsAssignResponseBody201ActionStatusEnumOther Data.Aeson.Types.Internal.Value
    | PostFloatingIpsIdActionsAssignResponseBody201ActionStatusEnumTyped Data.Text.Internal.Text
    | PostFloatingIpsIdActionsAssignResponseBody201ActionStatusEnumStringError
    | PostFloatingIpsIdActionsAssignResponseBody201ActionStatusEnumStringRunning
    | PostFloatingIpsIdActionsAssignResponseBody201ActionStatusEnumStringSuccess
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFloatingIpsIdActionsAssignResponseBody201ActionStatus
    where toJSON (PostFloatingIpsIdActionsAssignResponseBody201ActionStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostFloatingIpsIdActionsAssignResponseBody201ActionStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostFloatingIpsIdActionsAssignResponseBody201ActionStatusEnumStringError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error"
          toJSON (PostFloatingIpsIdActionsAssignResponseBody201ActionStatusEnumStringRunning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running"
          toJSON (PostFloatingIpsIdActionsAssignResponseBody201ActionStatusEnumStringSuccess) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success"
instance Data.Aeson.FromJSON PostFloatingIpsIdActionsAssignResponseBody201ActionStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error")
                                          then PostFloatingIpsIdActionsAssignResponseBody201ActionStatusEnumStringError
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running")
                                                then PostFloatingIpsIdActionsAssignResponseBody201ActionStatusEnumStringRunning
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success")
                                                      then PostFloatingIpsIdActionsAssignResponseBody201ActionStatusEnumStringSuccess
                                                      else PostFloatingIpsIdActionsAssignResponseBody201ActionStatusEnumOther val)
