-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postFloatingIps_Id_ActionsAssign
module HCloud.Operations.PostFloatingIpsIdActionsAssign where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > POST /floating_ips/{id}/actions/assign
-- 
-- Assigns a Floating IP to a Server.
postFloatingIps_Id_ActionsAssign :: forall m . HCloud.Common.MonadHTTP m => GHC.Types.Int -- ^ id: ID of the Floating IP
  -> GHC.Maybe.Maybe PostFloatingIpsIdActionsAssignRequestBody -- ^ The request body to send
  -> HCloud.Common.HttpT m (Network.HTTP.Client.Types.Response PostFloatingIpsIdActionsAssignResponse) -- ^ Monadic computation which returns the result of the operation
postFloatingIps_Id_ActionsAssign id
                                 body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostFloatingIpsIdActionsAssignResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostFloatingIpsIdActionsAssignResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                               PostFloatingIpsIdActionsAssignResponseBody201)
                                                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/floating_ips/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/assign"))) GHC.Base.mempty body HCloud.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/floating_ips\/{id}\/actions\/assign.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data PostFloatingIpsIdActionsAssignRequestBody = PostFloatingIpsIdActionsAssignRequestBody {
  -- | server: ID of the Server the Floating IP shall be assigned to
  postFloatingIpsIdActionsAssignRequestBodyServer :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostFloatingIpsIdActionsAssignRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("server" Data.Aeson.Types.ToJSON..= postFloatingIpsIdActionsAssignRequestBodyServer obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("server" Data.Aeson.Types.ToJSON..= postFloatingIpsIdActionsAssignRequestBodyServer obj)
instance Data.Aeson.Types.FromJSON.FromJSON PostFloatingIpsIdActionsAssignRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFloatingIpsIdActionsAssignRequestBody" (\obj -> GHC.Base.pure PostFloatingIpsIdActionsAssignRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "server"))
-- | Create a new 'PostFloatingIpsIdActionsAssignRequestBody' with all required fields.
mkPostFloatingIpsIdActionsAssignRequestBody :: GHC.Types.Int -- ^ 'postFloatingIpsIdActionsAssignRequestBodyServer'
  -> PostFloatingIpsIdActionsAssignRequestBody
mkPostFloatingIpsIdActionsAssignRequestBody postFloatingIpsIdActionsAssignRequestBodyServer = PostFloatingIpsIdActionsAssignRequestBody{postFloatingIpsIdActionsAssignRequestBodyServer = postFloatingIpsIdActionsAssignRequestBodyServer}
-- | Represents a response of the operation 'postFloatingIps_Id_ActionsAssign'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostFloatingIpsIdActionsAssignResponseError' is used.
data PostFloatingIpsIdActionsAssignResponse =
   PostFloatingIpsIdActionsAssignResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostFloatingIpsIdActionsAssignResponse201 PostFloatingIpsIdActionsAssignResponseBody201 -- ^ The \`action\` key contains the \`assign\` Action
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/floating_ips\/{id}\/actions\/assign.POST.responses.201.content.application\/json.schema@ in the specification.
-- 
-- 
data PostFloatingIpsIdActionsAssignResponseBody201 = PostFloatingIpsIdActionsAssignResponseBody201 {
  -- | action
  postFloatingIpsIdActionsAssignResponseBody201Action :: PostFloatingIpsIdActionsAssignResponseBody201Action
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostFloatingIpsIdActionsAssignResponseBody201
    where toJSON obj = Data.Aeson.Types.Internal.object ("action" Data.Aeson.Types.ToJSON..= postFloatingIpsIdActionsAssignResponseBody201Action obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("action" Data.Aeson.Types.ToJSON..= postFloatingIpsIdActionsAssignResponseBody201Action obj)
instance Data.Aeson.Types.FromJSON.FromJSON PostFloatingIpsIdActionsAssignResponseBody201
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFloatingIpsIdActionsAssignResponseBody201" (\obj -> GHC.Base.pure PostFloatingIpsIdActionsAssignResponseBody201 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "action"))
-- | Create a new 'PostFloatingIpsIdActionsAssignResponseBody201' with all required fields.
mkPostFloatingIpsIdActionsAssignResponseBody201 :: PostFloatingIpsIdActionsAssignResponseBody201Action -- ^ 'postFloatingIpsIdActionsAssignResponseBody201Action'
  -> PostFloatingIpsIdActionsAssignResponseBody201
mkPostFloatingIpsIdActionsAssignResponseBody201 postFloatingIpsIdActionsAssignResponseBody201Action = PostFloatingIpsIdActionsAssignResponseBody201{postFloatingIpsIdActionsAssignResponseBody201Action = postFloatingIpsIdActionsAssignResponseBody201Action}
-- | Defines the object schema located at @paths.\/floating_ips\/{id}\/actions\/assign.POST.responses.201.content.application\/json.schema.properties.action@ in the specification.
-- 
-- 
data PostFloatingIpsIdActionsAssignResponseBody201Action = PostFloatingIpsIdActionsAssignResponseBody201Action {
  -- | command: Command executed in the Action
  postFloatingIpsIdActionsAssignResponseBody201ActionCommand :: Data.Text.Internal.Text
  -- | error: Error message for the Action if error occurred, otherwise null
  , postFloatingIpsIdActionsAssignResponseBody201ActionError :: (GHC.Maybe.Maybe PostFloatingIpsIdActionsAssignResponseBody201ActionError)
  -- | finished: Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
  , postFloatingIpsIdActionsAssignResponseBody201ActionFinished :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | id: ID of the Resource
  , postFloatingIpsIdActionsAssignResponseBody201ActionId :: GHC.Types.Int
  -- | progress: Progress of Action in percent
  , postFloatingIpsIdActionsAssignResponseBody201ActionProgress :: GHC.Types.Double
  -- | resources: Resources the Action relates to
  , postFloatingIpsIdActionsAssignResponseBody201ActionResources :: ([PostFloatingIpsIdActionsAssignResponseBody201ActionResources])
  -- | started: Point in time when the Action was started (in ISO-8601 format)
  , postFloatingIpsIdActionsAssignResponseBody201ActionStarted :: Data.Text.Internal.Text
  -- | status: Status of the Action
  , postFloatingIpsIdActionsAssignResponseBody201ActionStatus :: PostFloatingIpsIdActionsAssignResponseBody201ActionStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostFloatingIpsIdActionsAssignResponseBody201Action
    where toJSON obj = Data.Aeson.Types.Internal.object ("command" Data.Aeson.Types.ToJSON..= postFloatingIpsIdActionsAssignResponseBody201ActionCommand obj : "error" Data.Aeson.Types.ToJSON..= postFloatingIpsIdActionsAssignResponseBody201ActionError obj : "finished" Data.Aeson.Types.ToJSON..= postFloatingIpsIdActionsAssignResponseBody201ActionFinished obj : "id" Data.Aeson.Types.ToJSON..= postFloatingIpsIdActionsAssignResponseBody201ActionId obj : "progress" Data.Aeson.Types.ToJSON..= postFloatingIpsIdActionsAssignResponseBody201ActionProgress obj : "resources" Data.Aeson.Types.ToJSON..= postFloatingIpsIdActionsAssignResponseBody201ActionResources obj : "started" Data.Aeson.Types.ToJSON..= postFloatingIpsIdActionsAssignResponseBody201ActionStarted obj : "status" Data.Aeson.Types.ToJSON..= postFloatingIpsIdActionsAssignResponseBody201ActionStatus obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("command" Data.Aeson.Types.ToJSON..= postFloatingIpsIdActionsAssignResponseBody201ActionCommand obj) GHC.Base.<> (("error" Data.Aeson.Types.ToJSON..= postFloatingIpsIdActionsAssignResponseBody201ActionError obj) GHC.Base.<> (("finished" Data.Aeson.Types.ToJSON..= postFloatingIpsIdActionsAssignResponseBody201ActionFinished obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= postFloatingIpsIdActionsAssignResponseBody201ActionId obj) GHC.Base.<> (("progress" Data.Aeson.Types.ToJSON..= postFloatingIpsIdActionsAssignResponseBody201ActionProgress obj) GHC.Base.<> (("resources" Data.Aeson.Types.ToJSON..= postFloatingIpsIdActionsAssignResponseBody201ActionResources obj) GHC.Base.<> (("started" Data.Aeson.Types.ToJSON..= postFloatingIpsIdActionsAssignResponseBody201ActionStarted obj) GHC.Base.<> ("status" Data.Aeson.Types.ToJSON..= postFloatingIpsIdActionsAssignResponseBody201ActionStatus obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostFloatingIpsIdActionsAssignResponseBody201Action
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFloatingIpsIdActionsAssignResponseBody201Action" (\obj -> (((((((GHC.Base.pure PostFloatingIpsIdActionsAssignResponseBody201Action GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "command")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "finished")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "started")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Create a new 'PostFloatingIpsIdActionsAssignResponseBody201Action' with all required fields.
mkPostFloatingIpsIdActionsAssignResponseBody201Action :: Data.Text.Internal.Text -- ^ 'postFloatingIpsIdActionsAssignResponseBody201ActionCommand'
  -> GHC.Maybe.Maybe PostFloatingIpsIdActionsAssignResponseBody201ActionError -- ^ 'postFloatingIpsIdActionsAssignResponseBody201ActionError'
  -> GHC.Maybe.Maybe Data.Text.Internal.Text -- ^ 'postFloatingIpsIdActionsAssignResponseBody201ActionFinished'
  -> GHC.Types.Int -- ^ 'postFloatingIpsIdActionsAssignResponseBody201ActionId'
  -> GHC.Types.Double -- ^ 'postFloatingIpsIdActionsAssignResponseBody201ActionProgress'
  -> [PostFloatingIpsIdActionsAssignResponseBody201ActionResources] -- ^ 'postFloatingIpsIdActionsAssignResponseBody201ActionResources'
  -> Data.Text.Internal.Text -- ^ 'postFloatingIpsIdActionsAssignResponseBody201ActionStarted'
  -> PostFloatingIpsIdActionsAssignResponseBody201ActionStatus -- ^ 'postFloatingIpsIdActionsAssignResponseBody201ActionStatus'
  -> PostFloatingIpsIdActionsAssignResponseBody201Action
mkPostFloatingIpsIdActionsAssignResponseBody201Action postFloatingIpsIdActionsAssignResponseBody201ActionCommand postFloatingIpsIdActionsAssignResponseBody201ActionError postFloatingIpsIdActionsAssignResponseBody201ActionFinished postFloatingIpsIdActionsAssignResponseBody201ActionId postFloatingIpsIdActionsAssignResponseBody201ActionProgress postFloatingIpsIdActionsAssignResponseBody201ActionResources postFloatingIpsIdActionsAssignResponseBody201ActionStarted postFloatingIpsIdActionsAssignResponseBody201ActionStatus = PostFloatingIpsIdActionsAssignResponseBody201Action{postFloatingIpsIdActionsAssignResponseBody201ActionCommand = postFloatingIpsIdActionsAssignResponseBody201ActionCommand,
postFloatingIpsIdActionsAssignResponseBody201ActionError = postFloatingIpsIdActionsAssignResponseBody201ActionError,
postFloatingIpsIdActionsAssignResponseBody201ActionFinished = postFloatingIpsIdActionsAssignResponseBody201ActionFinished,
postFloatingIpsIdActionsAssignResponseBody201ActionId = postFloatingIpsIdActionsAssignResponseBody201ActionId,
postFloatingIpsIdActionsAssignResponseBody201ActionProgress = postFloatingIpsIdActionsAssignResponseBody201ActionProgress,
postFloatingIpsIdActionsAssignResponseBody201ActionResources = postFloatingIpsIdActionsAssignResponseBody201ActionResources,
postFloatingIpsIdActionsAssignResponseBody201ActionStarted = postFloatingIpsIdActionsAssignResponseBody201ActionStarted,
postFloatingIpsIdActionsAssignResponseBody201ActionStatus = postFloatingIpsIdActionsAssignResponseBody201ActionStatus}
-- | Defines the object schema located at @paths.\/floating_ips\/{id}\/actions\/assign.POST.responses.201.content.application\/json.schema.properties.action.properties.error@ in the specification.
-- 
-- Error message for the Action if error occurred, otherwise null
data PostFloatingIpsIdActionsAssignResponseBody201ActionError = PostFloatingIpsIdActionsAssignResponseBody201ActionError {
  -- | code: Fixed machine readable code
  postFloatingIpsIdActionsAssignResponseBody201ActionErrorCode :: Data.Text.Internal.Text
  -- | message: Humanized error message
  , postFloatingIpsIdActionsAssignResponseBody201ActionErrorMessage :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostFloatingIpsIdActionsAssignResponseBody201ActionError
    where toJSON obj = Data.Aeson.Types.Internal.object ("code" Data.Aeson.Types.ToJSON..= postFloatingIpsIdActionsAssignResponseBody201ActionErrorCode obj : "message" Data.Aeson.Types.ToJSON..= postFloatingIpsIdActionsAssignResponseBody201ActionErrorMessage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("code" Data.Aeson.Types.ToJSON..= postFloatingIpsIdActionsAssignResponseBody201ActionErrorCode obj) GHC.Base.<> ("message" Data.Aeson.Types.ToJSON..= postFloatingIpsIdActionsAssignResponseBody201ActionErrorMessage obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostFloatingIpsIdActionsAssignResponseBody201ActionError
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFloatingIpsIdActionsAssignResponseBody201ActionError" (\obj -> (GHC.Base.pure PostFloatingIpsIdActionsAssignResponseBody201ActionError GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'PostFloatingIpsIdActionsAssignResponseBody201ActionError' with all required fields.
mkPostFloatingIpsIdActionsAssignResponseBody201ActionError :: Data.Text.Internal.Text -- ^ 'postFloatingIpsIdActionsAssignResponseBody201ActionErrorCode'
  -> Data.Text.Internal.Text -- ^ 'postFloatingIpsIdActionsAssignResponseBody201ActionErrorMessage'
  -> PostFloatingIpsIdActionsAssignResponseBody201ActionError
mkPostFloatingIpsIdActionsAssignResponseBody201ActionError postFloatingIpsIdActionsAssignResponseBody201ActionErrorCode postFloatingIpsIdActionsAssignResponseBody201ActionErrorMessage = PostFloatingIpsIdActionsAssignResponseBody201ActionError{postFloatingIpsIdActionsAssignResponseBody201ActionErrorCode = postFloatingIpsIdActionsAssignResponseBody201ActionErrorCode,
                                                                                                                                                                                                                                                   postFloatingIpsIdActionsAssignResponseBody201ActionErrorMessage = postFloatingIpsIdActionsAssignResponseBody201ActionErrorMessage}
-- | Defines the object schema located at @paths.\/floating_ips\/{id}\/actions\/assign.POST.responses.201.content.application\/json.schema.properties.action.properties.resources.items@ in the specification.
-- 
-- 
data PostFloatingIpsIdActionsAssignResponseBody201ActionResources = PostFloatingIpsIdActionsAssignResponseBody201ActionResources {
  -- | id: ID of the Resource
  postFloatingIpsIdActionsAssignResponseBody201ActionResourcesId :: GHC.Types.Int
  -- | type: Type of resource referenced
  , postFloatingIpsIdActionsAssignResponseBody201ActionResourcesType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostFloatingIpsIdActionsAssignResponseBody201ActionResources
    where toJSON obj = Data.Aeson.Types.Internal.object ("id" Data.Aeson.Types.ToJSON..= postFloatingIpsIdActionsAssignResponseBody201ActionResourcesId obj : "type" Data.Aeson.Types.ToJSON..= postFloatingIpsIdActionsAssignResponseBody201ActionResourcesType obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("id" Data.Aeson.Types.ToJSON..= postFloatingIpsIdActionsAssignResponseBody201ActionResourcesId obj) GHC.Base.<> ("type" Data.Aeson.Types.ToJSON..= postFloatingIpsIdActionsAssignResponseBody201ActionResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostFloatingIpsIdActionsAssignResponseBody201ActionResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFloatingIpsIdActionsAssignResponseBody201ActionResources" (\obj -> (GHC.Base.pure PostFloatingIpsIdActionsAssignResponseBody201ActionResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Create a new 'PostFloatingIpsIdActionsAssignResponseBody201ActionResources' with all required fields.
mkPostFloatingIpsIdActionsAssignResponseBody201ActionResources :: GHC.Types.Int -- ^ 'postFloatingIpsIdActionsAssignResponseBody201ActionResourcesId'
  -> Data.Text.Internal.Text -- ^ 'postFloatingIpsIdActionsAssignResponseBody201ActionResourcesType'
  -> PostFloatingIpsIdActionsAssignResponseBody201ActionResources
mkPostFloatingIpsIdActionsAssignResponseBody201ActionResources postFloatingIpsIdActionsAssignResponseBody201ActionResourcesId postFloatingIpsIdActionsAssignResponseBody201ActionResourcesType = PostFloatingIpsIdActionsAssignResponseBody201ActionResources{postFloatingIpsIdActionsAssignResponseBody201ActionResourcesId = postFloatingIpsIdActionsAssignResponseBody201ActionResourcesId,
                                                                                                                                                                                                                                                              postFloatingIpsIdActionsAssignResponseBody201ActionResourcesType = postFloatingIpsIdActionsAssignResponseBody201ActionResourcesType}
-- | Defines the enum schema located at @paths.\/floating_ips\/{id}\/actions\/assign.POST.responses.201.content.application\/json.schema.properties.action.properties.status@ in the specification.
-- 
-- Status of the Action
data PostFloatingIpsIdActionsAssignResponseBody201ActionStatus =
   PostFloatingIpsIdActionsAssignResponseBody201ActionStatusOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostFloatingIpsIdActionsAssignResponseBody201ActionStatusTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostFloatingIpsIdActionsAssignResponseBody201ActionStatusEnumSuccess -- ^ Represents the JSON value @"success"@
  | PostFloatingIpsIdActionsAssignResponseBody201ActionStatusEnumRunning -- ^ Represents the JSON value @"running"@
  | PostFloatingIpsIdActionsAssignResponseBody201ActionStatusEnumError -- ^ Represents the JSON value @"error"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostFloatingIpsIdActionsAssignResponseBody201ActionStatus
    where toJSON (PostFloatingIpsIdActionsAssignResponseBody201ActionStatusOther val) = val
          toJSON (PostFloatingIpsIdActionsAssignResponseBody201ActionStatusTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PostFloatingIpsIdActionsAssignResponseBody201ActionStatusEnumSuccess) = "success"
          toJSON (PostFloatingIpsIdActionsAssignResponseBody201ActionStatusEnumRunning) = "running"
          toJSON (PostFloatingIpsIdActionsAssignResponseBody201ActionStatusEnumError) = "error"
instance Data.Aeson.Types.FromJSON.FromJSON PostFloatingIpsIdActionsAssignResponseBody201ActionStatus
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "success" -> PostFloatingIpsIdActionsAssignResponseBody201ActionStatusEnumSuccess
                                            | val GHC.Classes.== "running" -> PostFloatingIpsIdActionsAssignResponseBody201ActionStatusEnumRunning
                                            | val GHC.Classes.== "error" -> PostFloatingIpsIdActionsAssignResponseBody201ActionStatusEnumError
                                            | GHC.Base.otherwise -> PostFloatingIpsIdActionsAssignResponseBody201ActionStatusOther val)
-- | > POST /floating_ips/{id}/actions/assign
-- 
-- The same as 'postFloatingIps_Id_ActionsAssign' but accepts an explicit configuration.
postFloatingIps_Id_ActionsAssignWithConfiguration :: forall m . HCloud.Common.MonadHTTP m => HCloud.Common.Configuration -- ^ The configuration to use in the request
  -> GHC.Types.Int -- ^ id: ID of the Floating IP
  -> GHC.Maybe.Maybe PostFloatingIpsIdActionsAssignRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response PostFloatingIpsIdActionsAssignResponse) -- ^ Monadic computation which returns the result of the operation
postFloatingIps_Id_ActionsAssignWithConfiguration config
                                                  id
                                                  body = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostFloatingIpsIdActionsAssignResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostFloatingIpsIdActionsAssignResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                PostFloatingIpsIdActionsAssignResponseBody201)
                                                                                                                                                                                                                  | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/floating_ips/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/assign"))) GHC.Base.mempty body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /floating_ips/{id}/actions/assign
-- 
-- The same as 'postFloatingIps_Id_ActionsAssign' but returns the raw 'Data.ByteString.Char8.ByteString'.
postFloatingIps_Id_ActionsAssignRaw :: forall m . HCloud.Common.MonadHTTP m => GHC.Types.Int -- ^ id: ID of the Floating IP
  -> GHC.Maybe.Maybe PostFloatingIpsIdActionsAssignRequestBody -- ^ The request body to send
  -> HCloud.Common.HttpT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postFloatingIps_Id_ActionsAssignRaw id
                                    body = GHC.Base.id (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/floating_ips/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/assign"))) GHC.Base.mempty body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /floating_ips/{id}/actions/assign
-- 
-- The same as 'postFloatingIps_Id_ActionsAssign' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postFloatingIps_Id_ActionsAssignWithConfigurationRaw :: forall m . HCloud.Common.MonadHTTP m => HCloud.Common.Configuration -- ^ The configuration to use in the request
  -> GHC.Types.Int -- ^ id: ID of the Floating IP
  -> GHC.Maybe.Maybe PostFloatingIpsIdActionsAssignRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postFloatingIps_Id_ActionsAssignWithConfigurationRaw config
                                                     id
                                                     body = GHC.Base.id (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/floating_ips/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/assign"))) GHC.Base.mempty body HCloud.Common.RequestBodyEncodingJSON)
