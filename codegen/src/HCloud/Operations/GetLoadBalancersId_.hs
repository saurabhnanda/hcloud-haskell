-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation getLoadBalancers_Id_
module HCloud.Operations.GetLoadBalancersId_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > GET /load_balancers/{id}
-- 
-- Gets a specific Load Balancer object.
getLoadBalancers_Id_ :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer                                                                                                         -- ^ id: ID of the Load Balancer
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response GetLoadBalancersIdResponse))   -- ^ Monad containing the result of the operation
getLoadBalancers_Id_ config
                     id = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetLoadBalancersIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetLoadBalancersIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                        GetLoadBalancersIdResponseBody200)
                                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/load_balancers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) [])
-- | > GET /load_balancers/{id}
-- 
-- The same as 'getLoadBalancers_Id_' but returns the raw 'Data.ByteString.Char8.ByteString'
getLoadBalancers_Id_Raw :: forall m s . (HCloud.Common.MonadHTTP m,
                                         HCloud.Common.SecurityScheme s) =>
                           HCloud.Common.Configuration s ->
                           GHC.Integer.Type.Integer ->
                           m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                 (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getLoadBalancers_Id_Raw config
                        id = GHC.Base.id (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/load_balancers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) [])
-- | > GET /load_balancers/{id}
-- 
-- Monadic version of 'getLoadBalancers_Id_' (use with 'HCloud.Common.runWithConfiguration')
getLoadBalancers_Id_M :: forall m s . (HCloud.Common.MonadHTTP m,
                                       HCloud.Common.SecurityScheme s) =>
                         GHC.Integer.Type.Integer ->
                         Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                            m
                                                            (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                (Network.HTTP.Client.Types.Response GetLoadBalancersIdResponse))
getLoadBalancers_Id_M id = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetLoadBalancersIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetLoadBalancersIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                         GetLoadBalancersIdResponseBody200)
                                                                                                                                                                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/load_balancers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) [])
-- | > GET /load_balancers/{id}
-- 
-- Monadic version of 'getLoadBalancers_Id_Raw' (use with 'HCloud.Common.runWithConfiguration')
getLoadBalancers_Id_RawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                          HCloud.Common.SecurityScheme s) =>
                            GHC.Integer.Type.Integer ->
                            Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                               m
                                                               (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                   (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getLoadBalancers_Id_RawM id = GHC.Base.id (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/load_balancers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) [])
-- | Represents a response of the operation 'getLoadBalancers_Id_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetLoadBalancersIdResponseError' is used.
data GetLoadBalancersIdResponse =                                    
   GetLoadBalancersIdResponseError GHC.Base.String                   -- ^ Means either no matching case available or a parse error
  | GetLoadBalancersIdResponse200 GetLoadBalancersIdResponseBody200  -- ^ The \`load_balancer\` key contains the Load Balancer
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema GetLoadBalancersIdResponseBody200
-- 
-- 
data GetLoadBalancersIdResponseBody200 = GetLoadBalancersIdResponseBody200 {
  -- | load_balancer
  getLoadBalancersIdResponseBody200LoadBalancer :: GetLoadBalancersIdResponseBody200LoadBalancer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersIdResponseBody200
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "load_balancer" (getLoadBalancersIdResponseBody200LoadBalancer obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "load_balancer" (getLoadBalancersIdResponseBody200LoadBalancer obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersIdResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersIdResponseBody200" (\obj -> GHC.Base.pure GetLoadBalancersIdResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "load_balancer"))
-- | Defines the data type for the schema GetLoadBalancersIdResponseBody200Load_balancer
-- 
-- 
data GetLoadBalancersIdResponseBody200LoadBalancer = GetLoadBalancersIdResponseBody200LoadBalancer {
  -- | algorithm: Algorithm of the Load Balancer
  getLoadBalancersIdResponseBody200LoadBalancerAlgorithm :: GetLoadBalancersIdResponseBody200LoadBalancerAlgorithm
  -- | created: Point in time when the Resource was created (in ISO-8601 format)
  , getLoadBalancersIdResponseBody200LoadBalancerCreated :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , getLoadBalancersIdResponseBody200LoadBalancerId :: GHC.Integer.Type.Integer
  -- | included_traffic: Free Traffic for the current billing period in bytes
  , getLoadBalancersIdResponseBody200LoadBalancerIncludedTraffic :: GHC.Integer.Type.Integer
  -- | ingoing_traffic: Inbound Traffic for the current billing period in bytes
  , getLoadBalancersIdResponseBody200LoadBalancerIngoingTraffic :: GHC.Integer.Type.Integer
  -- | labels: User-defined labels (key-value pairs)
  , getLoadBalancersIdResponseBody200LoadBalancerLabels :: GetLoadBalancersIdResponseBody200LoadBalancerLabels
  -- | load_balancer_type
  , getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerType :: GetLoadBalancersIdResponseBody200LoadBalancerLoadBalancerType
  -- | location
  , getLoadBalancersIdResponseBody200LoadBalancerLocation :: GetLoadBalancersIdResponseBody200LoadBalancerLocation
  -- | name: Name of the Resource. Must be unique per Project.
  , getLoadBalancersIdResponseBody200LoadBalancerName :: Data.Text.Internal.Text
  -- | outgoing_traffic: Outbound Traffic for the current billing period in bytes
  , getLoadBalancersIdResponseBody200LoadBalancerOutgoingTraffic :: GHC.Integer.Type.Integer
  -- | private_net: Private networks information
  , getLoadBalancersIdResponseBody200LoadBalancerPrivateNet :: ([] GetLoadBalancersIdResponseBody200LoadBalancerPrivateNet)
  -- | protection: Protection configuration for the Resource
  , getLoadBalancersIdResponseBody200LoadBalancerProtection :: GetLoadBalancersIdResponseBody200LoadBalancerProtection
  -- | public_net: Public network information
  , getLoadBalancersIdResponseBody200LoadBalancerPublicNet :: GetLoadBalancersIdResponseBody200LoadBalancerPublicNet
  -- | services: List of services that belong to this Load Balancer
  , getLoadBalancersIdResponseBody200LoadBalancerServices :: ([] GetLoadBalancersIdResponseBody200LoadBalancerServices)
  -- | targets: List of targets that belong to this Load Balancer
  , getLoadBalancersIdResponseBody200LoadBalancerTargets :: ([] GetLoadBalancersIdResponseBody200LoadBalancerTargets)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersIdResponseBody200LoadBalancer
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "algorithm" (getLoadBalancersIdResponseBody200LoadBalancerAlgorithm obj) : (Data.Aeson..=) "created" (getLoadBalancersIdResponseBody200LoadBalancerCreated obj) : (Data.Aeson..=) "id" (getLoadBalancersIdResponseBody200LoadBalancerId obj) : (Data.Aeson..=) "included_traffic" (getLoadBalancersIdResponseBody200LoadBalancerIncludedTraffic obj) : (Data.Aeson..=) "ingoing_traffic" (getLoadBalancersIdResponseBody200LoadBalancerIngoingTraffic obj) : (Data.Aeson..=) "labels" (getLoadBalancersIdResponseBody200LoadBalancerLabels obj) : (Data.Aeson..=) "load_balancer_type" (getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerType obj) : (Data.Aeson..=) "location" (getLoadBalancersIdResponseBody200LoadBalancerLocation obj) : (Data.Aeson..=) "name" (getLoadBalancersIdResponseBody200LoadBalancerName obj) : (Data.Aeson..=) "outgoing_traffic" (getLoadBalancersIdResponseBody200LoadBalancerOutgoingTraffic obj) : (Data.Aeson..=) "private_net" (getLoadBalancersIdResponseBody200LoadBalancerPrivateNet obj) : (Data.Aeson..=) "protection" (getLoadBalancersIdResponseBody200LoadBalancerProtection obj) : (Data.Aeson..=) "public_net" (getLoadBalancersIdResponseBody200LoadBalancerPublicNet obj) : (Data.Aeson..=) "services" (getLoadBalancersIdResponseBody200LoadBalancerServices obj) : (Data.Aeson..=) "targets" (getLoadBalancersIdResponseBody200LoadBalancerTargets obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "algorithm" (getLoadBalancersIdResponseBody200LoadBalancerAlgorithm obj) GHC.Base.<> ((Data.Aeson..=) "created" (getLoadBalancersIdResponseBody200LoadBalancerCreated obj) GHC.Base.<> ((Data.Aeson..=) "id" (getLoadBalancersIdResponseBody200LoadBalancerId obj) GHC.Base.<> ((Data.Aeson..=) "included_traffic" (getLoadBalancersIdResponseBody200LoadBalancerIncludedTraffic obj) GHC.Base.<> ((Data.Aeson..=) "ingoing_traffic" (getLoadBalancersIdResponseBody200LoadBalancerIngoingTraffic obj) GHC.Base.<> ((Data.Aeson..=) "labels" (getLoadBalancersIdResponseBody200LoadBalancerLabels obj) GHC.Base.<> ((Data.Aeson..=) "load_balancer_type" (getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerType obj) GHC.Base.<> ((Data.Aeson..=) "location" (getLoadBalancersIdResponseBody200LoadBalancerLocation obj) GHC.Base.<> ((Data.Aeson..=) "name" (getLoadBalancersIdResponseBody200LoadBalancerName obj) GHC.Base.<> ((Data.Aeson..=) "outgoing_traffic" (getLoadBalancersIdResponseBody200LoadBalancerOutgoingTraffic obj) GHC.Base.<> ((Data.Aeson..=) "private_net" (getLoadBalancersIdResponseBody200LoadBalancerPrivateNet obj) GHC.Base.<> ((Data.Aeson..=) "protection" (getLoadBalancersIdResponseBody200LoadBalancerProtection obj) GHC.Base.<> ((Data.Aeson..=) "public_net" (getLoadBalancersIdResponseBody200LoadBalancerPublicNet obj) GHC.Base.<> ((Data.Aeson..=) "services" (getLoadBalancersIdResponseBody200LoadBalancerServices obj) GHC.Base.<> (Data.Aeson..=) "targets" (getLoadBalancersIdResponseBody200LoadBalancerTargets obj)))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersIdResponseBody200LoadBalancer
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersIdResponseBody200LoadBalancer" (\obj -> ((((((((((((((GHC.Base.pure GetLoadBalancersIdResponseBody200LoadBalancer GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "algorithm")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "included_traffic")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ingoing_traffic")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "labels")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "load_balancer_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "location")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "outgoing_traffic")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "private_net")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "protection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "public_net")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "services")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "targets"))
-- | Defines the data type for the schema GetLoadBalancersIdResponseBody200Load_balancerAlgorithm
-- 
-- Algorithm of the Load Balancer
data GetLoadBalancersIdResponseBody200LoadBalancerAlgorithm = GetLoadBalancersIdResponseBody200LoadBalancerAlgorithm {
  -- | type: Type of the algorithm
  getLoadBalancersIdResponseBody200LoadBalancerAlgorithmType :: GetLoadBalancersIdResponseBody200LoadBalancerAlgorithmType
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersIdResponseBody200LoadBalancerAlgorithm
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "type" (getLoadBalancersIdResponseBody200LoadBalancerAlgorithmType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "type" (getLoadBalancersIdResponseBody200LoadBalancerAlgorithmType obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersIdResponseBody200LoadBalancerAlgorithm
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersIdResponseBody200LoadBalancerAlgorithm" (\obj -> GHC.Base.pure GetLoadBalancersIdResponseBody200LoadBalancerAlgorithm GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema GetLoadBalancersIdResponseBody200Load_balancerAlgorithmType
-- 
-- Type of the algorithm
data GetLoadBalancersIdResponseBody200LoadBalancerAlgorithmType
    = GetLoadBalancersIdResponseBody200LoadBalancerAlgorithmTypeEnumOther Data.Aeson.Types.Internal.Value
    | GetLoadBalancersIdResponseBody200LoadBalancerAlgorithmTypeEnumTyped Data.Text.Internal.Text
    | GetLoadBalancersIdResponseBody200LoadBalancerAlgorithmTypeEnumStringLeastConnections
    | GetLoadBalancersIdResponseBody200LoadBalancerAlgorithmTypeEnumStringRoundRobin
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersIdResponseBody200LoadBalancerAlgorithmType
    where toJSON (GetLoadBalancersIdResponseBody200LoadBalancerAlgorithmTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetLoadBalancersIdResponseBody200LoadBalancerAlgorithmTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetLoadBalancersIdResponseBody200LoadBalancerAlgorithmTypeEnumStringLeastConnections) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "least_connections"
          toJSON (GetLoadBalancersIdResponseBody200LoadBalancerAlgorithmTypeEnumStringRoundRobin) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "round_robin"
instance Data.Aeson.FromJSON GetLoadBalancersIdResponseBody200LoadBalancerAlgorithmType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "least_connections")
                                          then GetLoadBalancersIdResponseBody200LoadBalancerAlgorithmTypeEnumStringLeastConnections
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "round_robin")
                                                then GetLoadBalancersIdResponseBody200LoadBalancerAlgorithmTypeEnumStringRoundRobin
                                                else GetLoadBalancersIdResponseBody200LoadBalancerAlgorithmTypeEnumOther val)
-- | Defines the data type for the schema GetLoadBalancersIdResponseBody200Load_balancerLabels
-- 
-- User-defined labels (key-value pairs)
data GetLoadBalancersIdResponseBody200LoadBalancerLabels = GetLoadBalancersIdResponseBody200LoadBalancerLabels {
  
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersIdResponseBody200LoadBalancerLabels
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersIdResponseBody200LoadBalancerLabels
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersIdResponseBody200LoadBalancerLabels" (\obj -> GHC.Base.pure GetLoadBalancersIdResponseBody200LoadBalancerLabels)
-- | Defines the data type for the schema GetLoadBalancersIdResponseBody200Load_balancerLoad_balancer_type
-- 
-- 
data GetLoadBalancersIdResponseBody200LoadBalancerLoadBalancerType = GetLoadBalancersIdResponseBody200LoadBalancerLoadBalancerType {
  -- | deprecated: Point in time when the Load Balancer type is deprecated (in ISO-8601 format)
  getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeDeprecated :: Data.Text.Internal.Text
  -- | description: Description of the Load Balancer type
  , getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeDescription :: Data.Text.Internal.Text
  -- | id: ID of the Load Balancer type
  , getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeId :: GHC.Types.Double
  -- | max_assigned_certificates: Number of SSL Certificates that can be assigned to a single Load Balancer
  , getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeMaxAssignedCertificates :: GHC.Types.Double
  -- | max_connections: Number of maximum simultaneous open connections
  , getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeMaxConnections :: GHC.Types.Double
  -- | max_services: Number of services a Load Balancer of this type can have
  , getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeMaxServices :: GHC.Types.Double
  -- | max_targets: Number of targets a single Load Balancer can have
  , getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeMaxTargets :: GHC.Types.Double
  -- | name: Unique identifier of the Load Balancer type
  , getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeName :: Data.Text.Internal.Text
  -- | prices: Prices in different network zones
  , getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePrices :: ([] GetLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePrices)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersIdResponseBody200LoadBalancerLoadBalancerType
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "deprecated" (getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeDeprecated obj) : (Data.Aeson..=) "description" (getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeDescription obj) : (Data.Aeson..=) "id" (getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeId obj) : (Data.Aeson..=) "max_assigned_certificates" (getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeMaxAssignedCertificates obj) : (Data.Aeson..=) "max_connections" (getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeMaxConnections obj) : (Data.Aeson..=) "max_services" (getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeMaxServices obj) : (Data.Aeson..=) "max_targets" (getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeMaxTargets obj) : (Data.Aeson..=) "name" (getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeName obj) : (Data.Aeson..=) "prices" (getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePrices obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "deprecated" (getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeDeprecated obj) GHC.Base.<> ((Data.Aeson..=) "description" (getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeDescription obj) GHC.Base.<> ((Data.Aeson..=) "id" (getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeId obj) GHC.Base.<> ((Data.Aeson..=) "max_assigned_certificates" (getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeMaxAssignedCertificates obj) GHC.Base.<> ((Data.Aeson..=) "max_connections" (getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeMaxConnections obj) GHC.Base.<> ((Data.Aeson..=) "max_services" (getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeMaxServices obj) GHC.Base.<> ((Data.Aeson..=) "max_targets" (getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeMaxTargets obj) GHC.Base.<> ((Data.Aeson..=) "name" (getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypeName obj) GHC.Base.<> (Data.Aeson..=) "prices" (getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePrices obj)))))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersIdResponseBody200LoadBalancerLoadBalancerType
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersIdResponseBody200LoadBalancerLoadBalancerType" (\obj -> ((((((((GHC.Base.pure GetLoadBalancersIdResponseBody200LoadBalancerLoadBalancerType GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "deprecated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "max_assigned_certificates")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "max_connections")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "max_services")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "max_targets")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "prices"))
-- | Defines the data type for the schema GetLoadBalancersIdResponseBody200Load_balancerLoad_balancer_typePrices
-- 
-- 
data GetLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePrices = GetLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePrices {
  -- | location: Name of the Location the price is for
  getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesLocation :: Data.Text.Internal.Text
  -- | price_hourly: Hourly costs for a Resource in this Location
  , getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceHourly :: GetLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceHourly
  -- | price_monthly: Monthly costs for a Resource in this Location
  , getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceMonthly :: GetLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceMonthly
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePrices
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "location" (getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesLocation obj) : (Data.Aeson..=) "price_hourly" (getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceHourly obj) : (Data.Aeson..=) "price_monthly" (getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceMonthly obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "location" (getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesLocation obj) GHC.Base.<> ((Data.Aeson..=) "price_hourly" (getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceHourly obj) GHC.Base.<> (Data.Aeson..=) "price_monthly" (getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceMonthly obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePrices
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePrices" (\obj -> ((GHC.Base.pure GetLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePrices GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "location")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price_hourly")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price_monthly"))
-- | Defines the data type for the schema GetLoadBalancersIdResponseBody200Load_balancerLoad_balancer_typePricesPrice_hourly
-- 
-- Hourly costs for a Resource in this Location
data GetLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceHourly = GetLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceHourly {
  -- | gross: Price with VAT added
  getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceHourlyGross :: Data.Text.Internal.Text
  -- | net: Price without VAT
  , getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceHourlyNet :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceHourly
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "gross" (getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceHourlyGross obj) : (Data.Aeson..=) "net" (getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceHourlyNet obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "gross" (getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceHourlyGross obj) GHC.Base.<> (Data.Aeson..=) "net" (getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceHourlyNet obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceHourly
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceHourly" (\obj -> (GHC.Base.pure GetLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceHourly GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "gross")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "net"))
-- | Defines the data type for the schema GetLoadBalancersIdResponseBody200Load_balancerLoad_balancer_typePricesPrice_monthly
-- 
-- Monthly costs for a Resource in this Location
data GetLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceMonthly = GetLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceMonthly {
  -- | gross: Price with VAT added
  getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceMonthlyGross :: Data.Text.Internal.Text
  -- | net: Price without VAT
  , getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceMonthlyNet :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceMonthly
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "gross" (getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceMonthlyGross obj) : (Data.Aeson..=) "net" (getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceMonthlyNet obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "gross" (getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceMonthlyGross obj) GHC.Base.<> (Data.Aeson..=) "net" (getLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceMonthlyNet obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceMonthly
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceMonthly" (\obj -> (GHC.Base.pure GetLoadBalancersIdResponseBody200LoadBalancerLoadBalancerTypePricesPriceMonthly GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "gross")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "net"))
-- | Defines the data type for the schema GetLoadBalancersIdResponseBody200Load_balancerLocation
-- 
-- 
data GetLoadBalancersIdResponseBody200LoadBalancerLocation = GetLoadBalancersIdResponseBody200LoadBalancerLocation {
  -- | city: City the Location is closest to
  getLoadBalancersIdResponseBody200LoadBalancerLocationCity :: Data.Text.Internal.Text
  -- | country: ISO 3166-1 alpha-2 code of the country the Location resides in
  , getLoadBalancersIdResponseBody200LoadBalancerLocationCountry :: Data.Text.Internal.Text
  -- | description: Description of the Location
  , getLoadBalancersIdResponseBody200LoadBalancerLocationDescription :: Data.Text.Internal.Text
  -- | id: ID of the Location
  , getLoadBalancersIdResponseBody200LoadBalancerLocationId :: GHC.Types.Double
  -- | latitude: Latitude of the city closest to the Location
  , getLoadBalancersIdResponseBody200LoadBalancerLocationLatitude :: GHC.Types.Double
  -- | longitude: Longitude of the city closest to the Location
  , getLoadBalancersIdResponseBody200LoadBalancerLocationLongitude :: GHC.Types.Double
  -- | name: Unique identifier of the Location
  , getLoadBalancersIdResponseBody200LoadBalancerLocationName :: Data.Text.Internal.Text
  -- | network_zone: Name of network zone this Location resides in
  , getLoadBalancersIdResponseBody200LoadBalancerLocationNetworkZone :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersIdResponseBody200LoadBalancerLocation
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (getLoadBalancersIdResponseBody200LoadBalancerLocationCity obj) : (Data.Aeson..=) "country" (getLoadBalancersIdResponseBody200LoadBalancerLocationCountry obj) : (Data.Aeson..=) "description" (getLoadBalancersIdResponseBody200LoadBalancerLocationDescription obj) : (Data.Aeson..=) "id" (getLoadBalancersIdResponseBody200LoadBalancerLocationId obj) : (Data.Aeson..=) "latitude" (getLoadBalancersIdResponseBody200LoadBalancerLocationLatitude obj) : (Data.Aeson..=) "longitude" (getLoadBalancersIdResponseBody200LoadBalancerLocationLongitude obj) : (Data.Aeson..=) "name" (getLoadBalancersIdResponseBody200LoadBalancerLocationName obj) : (Data.Aeson..=) "network_zone" (getLoadBalancersIdResponseBody200LoadBalancerLocationNetworkZone obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (getLoadBalancersIdResponseBody200LoadBalancerLocationCity obj) GHC.Base.<> ((Data.Aeson..=) "country" (getLoadBalancersIdResponseBody200LoadBalancerLocationCountry obj) GHC.Base.<> ((Data.Aeson..=) "description" (getLoadBalancersIdResponseBody200LoadBalancerLocationDescription obj) GHC.Base.<> ((Data.Aeson..=) "id" (getLoadBalancersIdResponseBody200LoadBalancerLocationId obj) GHC.Base.<> ((Data.Aeson..=) "latitude" (getLoadBalancersIdResponseBody200LoadBalancerLocationLatitude obj) GHC.Base.<> ((Data.Aeson..=) "longitude" (getLoadBalancersIdResponseBody200LoadBalancerLocationLongitude obj) GHC.Base.<> ((Data.Aeson..=) "name" (getLoadBalancersIdResponseBody200LoadBalancerLocationName obj) GHC.Base.<> (Data.Aeson..=) "network_zone" (getLoadBalancersIdResponseBody200LoadBalancerLocationNetworkZone obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersIdResponseBody200LoadBalancerLocation
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersIdResponseBody200LoadBalancerLocation" (\obj -> (((((((GHC.Base.pure GetLoadBalancersIdResponseBody200LoadBalancerLocation GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "latitude")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "longitude")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "network_zone"))
-- | Defines the data type for the schema GetLoadBalancersIdResponseBody200Load_balancerPrivate_net
-- 
-- 
data GetLoadBalancersIdResponseBody200LoadBalancerPrivateNet = GetLoadBalancersIdResponseBody200LoadBalancerPrivateNet {
  -- | ip
  getLoadBalancersIdResponseBody200LoadBalancerPrivateNetIp :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | network
  , getLoadBalancersIdResponseBody200LoadBalancerPrivateNetNetwork :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersIdResponseBody200LoadBalancerPrivateNet
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "ip" (getLoadBalancersIdResponseBody200LoadBalancerPrivateNetIp obj) : (Data.Aeson..=) "network" (getLoadBalancersIdResponseBody200LoadBalancerPrivateNetNetwork obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "ip" (getLoadBalancersIdResponseBody200LoadBalancerPrivateNetIp obj) GHC.Base.<> (Data.Aeson..=) "network" (getLoadBalancersIdResponseBody200LoadBalancerPrivateNetNetwork obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersIdResponseBody200LoadBalancerPrivateNet
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersIdResponseBody200LoadBalancerPrivateNet" (\obj -> (GHC.Base.pure GetLoadBalancersIdResponseBody200LoadBalancerPrivateNet GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "network"))
-- | Defines the data type for the schema GetLoadBalancersIdResponseBody200Load_balancerProtection
-- 
-- Protection configuration for the Resource
data GetLoadBalancersIdResponseBody200LoadBalancerProtection = GetLoadBalancersIdResponseBody200LoadBalancerProtection {
  -- | delete: If true, prevents the Resource from being deleted
  getLoadBalancersIdResponseBody200LoadBalancerProtectionDelete :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersIdResponseBody200LoadBalancerProtection
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "delete" (getLoadBalancersIdResponseBody200LoadBalancerProtectionDelete obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "delete" (getLoadBalancersIdResponseBody200LoadBalancerProtectionDelete obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersIdResponseBody200LoadBalancerProtection
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersIdResponseBody200LoadBalancerProtection" (\obj -> GHC.Base.pure GetLoadBalancersIdResponseBody200LoadBalancerProtection GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "delete"))
-- | Defines the data type for the schema GetLoadBalancersIdResponseBody200Load_balancerPublic_net
-- 
-- Public network information
data GetLoadBalancersIdResponseBody200LoadBalancerPublicNet = GetLoadBalancersIdResponseBody200LoadBalancerPublicNet {
  -- | enabled: Public Interface enabled or not
  getLoadBalancersIdResponseBody200LoadBalancerPublicNetEnabled :: GHC.Types.Bool
  -- | ipv4: IP address (v4)
  , getLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv4 :: GetLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv4
  -- | ipv6: IP address (v6)
  , getLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv6 :: GetLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv6
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersIdResponseBody200LoadBalancerPublicNet
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "enabled" (getLoadBalancersIdResponseBody200LoadBalancerPublicNetEnabled obj) : (Data.Aeson..=) "ipv4" (getLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv4 obj) : (Data.Aeson..=) "ipv6" (getLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv6 obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "enabled" (getLoadBalancersIdResponseBody200LoadBalancerPublicNetEnabled obj) GHC.Base.<> ((Data.Aeson..=) "ipv4" (getLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv4 obj) GHC.Base.<> (Data.Aeson..=) "ipv6" (getLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv6 obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersIdResponseBody200LoadBalancerPublicNet
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersIdResponseBody200LoadBalancerPublicNet" (\obj -> ((GHC.Base.pure GetLoadBalancersIdResponseBody200LoadBalancerPublicNet GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ipv4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ipv6"))
-- | Defines the data type for the schema GetLoadBalancersIdResponseBody200Load_balancerPublic_netIpv4
-- 
-- IP address (v4)
data GetLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv4 = GetLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv4 {
  -- | dns_ptr: Reverse DNS PTR entry for the IPv4 address of this Load Balancer
  getLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv4DnsPtr :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | ip: IP address (v4) of this Load Balancer
  , getLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv4Ip :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv4
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "dns_ptr" (getLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv4DnsPtr obj) : (Data.Aeson..=) "ip" (getLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv4Ip obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "dns_ptr" (getLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv4DnsPtr obj) GHC.Base.<> (Data.Aeson..=) "ip" (getLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv4Ip obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv4
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv4" (\obj -> (GHC.Base.pure GetLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv4 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dns_ptr")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip"))
-- | Defines the data type for the schema GetLoadBalancersIdResponseBody200Load_balancerPublic_netIpv6
-- 
-- IP address (v6)
data GetLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv6 = GetLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv6 {
  -- | dns_ptr: Reverse DNS PTR entry for the IPv6 address of this Load Balancer
  getLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv6DnsPtr :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | ip: IP address (v6) of this Load Balancer
  , getLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv6Ip :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv6
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "dns_ptr" (getLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv6DnsPtr obj) : (Data.Aeson..=) "ip" (getLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv6Ip obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "dns_ptr" (getLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv6DnsPtr obj) GHC.Base.<> (Data.Aeson..=) "ip" (getLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv6Ip obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv6
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv6" (\obj -> (GHC.Base.pure GetLoadBalancersIdResponseBody200LoadBalancerPublicNetIpv6 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dns_ptr")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip"))
-- | Defines the data type for the schema GetLoadBalancersIdResponseBody200Load_balancerServices
-- 
-- 
data GetLoadBalancersIdResponseBody200LoadBalancerServices = GetLoadBalancersIdResponseBody200LoadBalancerServices {
  -- | destination_port: Port the Load Balancer will balance to
  getLoadBalancersIdResponseBody200LoadBalancerServicesDestinationPort :: GHC.Integer.Type.Integer
  -- | health_check: Service health check
  , getLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheck :: GetLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheck
  -- | http: Configuration option for protocols http and https
  , getLoadBalancersIdResponseBody200LoadBalancerServicesHttp :: (GHC.Maybe.Maybe GetLoadBalancersIdResponseBody200LoadBalancerServicesHttp)
  -- | listen_port: Port the Load Balancer listens on
  , getLoadBalancersIdResponseBody200LoadBalancerServicesListenPort :: GHC.Integer.Type.Integer
  -- | protocol: Protocol of the Load Balancer
  , getLoadBalancersIdResponseBody200LoadBalancerServicesProtocol :: GetLoadBalancersIdResponseBody200LoadBalancerServicesProtocol
  -- | proxyprotocol: Is Proxyprotocol enabled or not
  , getLoadBalancersIdResponseBody200LoadBalancerServicesProxyprotocol :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersIdResponseBody200LoadBalancerServices
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "destination_port" (getLoadBalancersIdResponseBody200LoadBalancerServicesDestinationPort obj) : (Data.Aeson..=) "health_check" (getLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheck obj) : (Data.Aeson..=) "http" (getLoadBalancersIdResponseBody200LoadBalancerServicesHttp obj) : (Data.Aeson..=) "listen_port" (getLoadBalancersIdResponseBody200LoadBalancerServicesListenPort obj) : (Data.Aeson..=) "protocol" (getLoadBalancersIdResponseBody200LoadBalancerServicesProtocol obj) : (Data.Aeson..=) "proxyprotocol" (getLoadBalancersIdResponseBody200LoadBalancerServicesProxyprotocol obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "destination_port" (getLoadBalancersIdResponseBody200LoadBalancerServicesDestinationPort obj) GHC.Base.<> ((Data.Aeson..=) "health_check" (getLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheck obj) GHC.Base.<> ((Data.Aeson..=) "http" (getLoadBalancersIdResponseBody200LoadBalancerServicesHttp obj) GHC.Base.<> ((Data.Aeson..=) "listen_port" (getLoadBalancersIdResponseBody200LoadBalancerServicesListenPort obj) GHC.Base.<> ((Data.Aeson..=) "protocol" (getLoadBalancersIdResponseBody200LoadBalancerServicesProtocol obj) GHC.Base.<> (Data.Aeson..=) "proxyprotocol" (getLoadBalancersIdResponseBody200LoadBalancerServicesProxyprotocol obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersIdResponseBody200LoadBalancerServices
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersIdResponseBody200LoadBalancerServices" (\obj -> (((((GHC.Base.pure GetLoadBalancersIdResponseBody200LoadBalancerServices GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "destination_port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "health_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "http")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "listen_port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "protocol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "proxyprotocol"))
-- | Defines the data type for the schema GetLoadBalancersIdResponseBody200Load_balancerServicesHealth_check
-- 
-- Service health check
data GetLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheck = GetLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheck {
  -- | http: Additional configuration for protocol http
  getLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttp :: (GHC.Maybe.Maybe GetLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttp)
  -- | interval: Time interval in seconds health checks are performed
  , getLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckInterval :: GHC.Integer.Type.Integer
  -- | port: Port the health check will be performed on
  , getLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckPort :: GHC.Integer.Type.Integer
  -- | protocol: Type of the health check
  , getLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckProtocol :: GetLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckProtocol
  -- | retries: Unsuccessful retries needed until a target is considered unhealthy; an unhealthy target needs the same number of successful retries to become healthy again
  , getLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckRetries :: GHC.Integer.Type.Integer
  -- | timeout: Time in seconds after an attempt is considered a timeout
  , getLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckTimeout :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheck
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "http" (getLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttp obj) : (Data.Aeson..=) "interval" (getLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckInterval obj) : (Data.Aeson..=) "port" (getLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckPort obj) : (Data.Aeson..=) "protocol" (getLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckProtocol obj) : (Data.Aeson..=) "retries" (getLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckRetries obj) : (Data.Aeson..=) "timeout" (getLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckTimeout obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "http" (getLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttp obj) GHC.Base.<> ((Data.Aeson..=) "interval" (getLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckInterval obj) GHC.Base.<> ((Data.Aeson..=) "port" (getLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckPort obj) GHC.Base.<> ((Data.Aeson..=) "protocol" (getLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckProtocol obj) GHC.Base.<> ((Data.Aeson..=) "retries" (getLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckRetries obj) GHC.Base.<> (Data.Aeson..=) "timeout" (getLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckTimeout obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheck
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheck" (\obj -> (((((GHC.Base.pure GetLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheck GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "http")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "protocol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "retries")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "timeout"))
-- | Defines the data type for the schema GetLoadBalancersIdResponseBody200Load_balancerServicesHealth_checkHttp
-- 
-- Additional configuration for protocol http
data GetLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttp = GetLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttp {
  -- | domain: Host header to send in the HTTP request. May not contain spaces, percent or backslash symbols. Can be null, in that case no host header is sent.
  getLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttpDomain :: Data.Text.Internal.Text
  -- | path: HTTP path to use for health checks
  , getLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttpPath :: Data.Text.Internal.Text
  -- | response: String that must be contained in HTTP response in order to pass the health check
  , getLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttpResponse :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | status_codes: List of returned HTTP status codes in order to pass the health check. Supports the wildcards \`?\` for exactly one character and \`*\` for multiple ones. The default is to pass the health check for any status code between 2?? and 3??.
  , getLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttpStatusCodes :: (GHC.Maybe.Maybe ([] Data.Text.Internal.Text))
  -- | tls: Use HTTPS for health check
  , getLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttpTls :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttp
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "domain" (getLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttpDomain obj) : (Data.Aeson..=) "path" (getLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttpPath obj) : (Data.Aeson..=) "response" (getLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttpResponse obj) : (Data.Aeson..=) "status_codes" (getLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttpStatusCodes obj) : (Data.Aeson..=) "tls" (getLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttpTls obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "domain" (getLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttpDomain obj) GHC.Base.<> ((Data.Aeson..=) "path" (getLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttpPath obj) GHC.Base.<> ((Data.Aeson..=) "response" (getLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttpResponse obj) GHC.Base.<> ((Data.Aeson..=) "status_codes" (getLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttpStatusCodes obj) GHC.Base.<> (Data.Aeson..=) "tls" (getLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttpTls obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttp
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttp" (\obj -> ((((GHC.Base.pure GetLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckHttp GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "domain")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "path")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "response")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status_codes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tls"))
-- | Defines the enum schema GetLoadBalancersIdResponseBody200Load_balancerServicesHealth_checkProtocol
-- 
-- Type of the health check
data GetLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckProtocol
    = GetLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckProtocolEnumOther Data.Aeson.Types.Internal.Value
    | GetLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckProtocolEnumTyped Data.Text.Internal.Text
    | GetLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckProtocolEnumStringHttp
    | GetLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckProtocolEnumStringTcp
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckProtocol
    where toJSON (GetLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckProtocolEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckProtocolEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckProtocolEnumStringHttp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http"
          toJSON (GetLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckProtocolEnumStringTcp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tcp"
instance Data.Aeson.FromJSON GetLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckProtocol
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http")
                                          then GetLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckProtocolEnumStringHttp
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tcp")
                                                then GetLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckProtocolEnumStringTcp
                                                else GetLoadBalancersIdResponseBody200LoadBalancerServicesHealthCheckProtocolEnumOther val)
-- | Defines the data type for the schema GetLoadBalancersIdResponseBody200Load_balancerServicesHttp
-- 
-- Configuration option for protocols http and https
data GetLoadBalancersIdResponseBody200LoadBalancerServicesHttp = GetLoadBalancersIdResponseBody200LoadBalancerServicesHttp {
  -- | certificates: IDs of the Certificates to use for TLS\/SSL termination by the Load Balancer; empty for TLS\/SSL passthrough or if \`protocol\` is \"http\"
  getLoadBalancersIdResponseBody200LoadBalancerServicesHttpCertificates :: (GHC.Maybe.Maybe ([] GHC.Integer.Type.Integer))
  -- | cookie_lifetime: Lifetime of the cookie used for sticky sessions
  , getLoadBalancersIdResponseBody200LoadBalancerServicesHttpCookieLifetime :: GHC.Integer.Type.Integer
  -- | cookie_name: Name of the cookie used for sticky sessions
  , getLoadBalancersIdResponseBody200LoadBalancerServicesHttpCookieName :: Data.Text.Internal.Text
  -- | redirect_http: Redirect HTTP requests to HTTPS. Only available if protocol is \"https\". Default \`false\`
  , getLoadBalancersIdResponseBody200LoadBalancerServicesHttpRedirectHttp :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | sticky_sessions: Use sticky sessions. Only available if protocol is \"http\" or \"https\". Default \`false\`
  , getLoadBalancersIdResponseBody200LoadBalancerServicesHttpStickySessions :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersIdResponseBody200LoadBalancerServicesHttp
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "certificates" (getLoadBalancersIdResponseBody200LoadBalancerServicesHttpCertificates obj) : (Data.Aeson..=) "cookie_lifetime" (getLoadBalancersIdResponseBody200LoadBalancerServicesHttpCookieLifetime obj) : (Data.Aeson..=) "cookie_name" (getLoadBalancersIdResponseBody200LoadBalancerServicesHttpCookieName obj) : (Data.Aeson..=) "redirect_http" (getLoadBalancersIdResponseBody200LoadBalancerServicesHttpRedirectHttp obj) : (Data.Aeson..=) "sticky_sessions" (getLoadBalancersIdResponseBody200LoadBalancerServicesHttpStickySessions obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "certificates" (getLoadBalancersIdResponseBody200LoadBalancerServicesHttpCertificates obj) GHC.Base.<> ((Data.Aeson..=) "cookie_lifetime" (getLoadBalancersIdResponseBody200LoadBalancerServicesHttpCookieLifetime obj) GHC.Base.<> ((Data.Aeson..=) "cookie_name" (getLoadBalancersIdResponseBody200LoadBalancerServicesHttpCookieName obj) GHC.Base.<> ((Data.Aeson..=) "redirect_http" (getLoadBalancersIdResponseBody200LoadBalancerServicesHttpRedirectHttp obj) GHC.Base.<> (Data.Aeson..=) "sticky_sessions" (getLoadBalancersIdResponseBody200LoadBalancerServicesHttpStickySessions obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersIdResponseBody200LoadBalancerServicesHttp
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersIdResponseBody200LoadBalancerServicesHttp" (\obj -> ((((GHC.Base.pure GetLoadBalancersIdResponseBody200LoadBalancerServicesHttp GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "certificates")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cookie_lifetime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cookie_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "redirect_http")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sticky_sessions"))
-- | Defines the enum schema GetLoadBalancersIdResponseBody200Load_balancerServicesProtocol
-- 
-- Protocol of the Load Balancer
data GetLoadBalancersIdResponseBody200LoadBalancerServicesProtocol
    = GetLoadBalancersIdResponseBody200LoadBalancerServicesProtocolEnumOther Data.Aeson.Types.Internal.Value
    | GetLoadBalancersIdResponseBody200LoadBalancerServicesProtocolEnumTyped Data.Text.Internal.Text
    | GetLoadBalancersIdResponseBody200LoadBalancerServicesProtocolEnumStringHttp
    | GetLoadBalancersIdResponseBody200LoadBalancerServicesProtocolEnumStringHttps
    | GetLoadBalancersIdResponseBody200LoadBalancerServicesProtocolEnumStringTcp
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersIdResponseBody200LoadBalancerServicesProtocol
    where toJSON (GetLoadBalancersIdResponseBody200LoadBalancerServicesProtocolEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetLoadBalancersIdResponseBody200LoadBalancerServicesProtocolEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetLoadBalancersIdResponseBody200LoadBalancerServicesProtocolEnumStringHttp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http"
          toJSON (GetLoadBalancersIdResponseBody200LoadBalancerServicesProtocolEnumStringHttps) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "https"
          toJSON (GetLoadBalancersIdResponseBody200LoadBalancerServicesProtocolEnumStringTcp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tcp"
instance Data.Aeson.FromJSON GetLoadBalancersIdResponseBody200LoadBalancerServicesProtocol
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "http")
                                          then GetLoadBalancersIdResponseBody200LoadBalancerServicesProtocolEnumStringHttp
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "https")
                                                then GetLoadBalancersIdResponseBody200LoadBalancerServicesProtocolEnumStringHttps
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tcp")
                                                      then GetLoadBalancersIdResponseBody200LoadBalancerServicesProtocolEnumStringTcp
                                                      else GetLoadBalancersIdResponseBody200LoadBalancerServicesProtocolEnumOther val)
-- | Defines the data type for the schema GetLoadBalancersIdResponseBody200Load_balancerTargets
-- 
-- 
data GetLoadBalancersIdResponseBody200LoadBalancerTargets = GetLoadBalancersIdResponseBody200LoadBalancerTargets {
  -- | health_status: List of health statuses of the services on this target
  getLoadBalancersIdResponseBody200LoadBalancerTargetsHealthStatus :: (GHC.Maybe.Maybe ([] GetLoadBalancersIdResponseBody200LoadBalancerTargetsHealthStatus))
  -- | ip: IP targets where the traffic should be routed through. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well.
  , getLoadBalancersIdResponseBody200LoadBalancerTargetsIp :: (GHC.Maybe.Maybe GetLoadBalancersIdResponseBody200LoadBalancerTargetsIp)
  -- | label_selector: Label selector and a list of selected targets
  , getLoadBalancersIdResponseBody200LoadBalancerTargetsLabelSelector :: (GHC.Maybe.Maybe GetLoadBalancersIdResponseBody200LoadBalancerTargetsLabelSelector)
  -- | server: Server where the traffic should be routed through
  , getLoadBalancersIdResponseBody200LoadBalancerTargetsServer :: (GHC.Maybe.Maybe GetLoadBalancersIdResponseBody200LoadBalancerTargetsServer)
  -- | targets: List of selected targets
  , getLoadBalancersIdResponseBody200LoadBalancerTargetsTargets :: (GHC.Maybe.Maybe ([] GetLoadBalancersIdResponseBody200LoadBalancerTargetsTargets))
  -- | type: Type of the resource
  , getLoadBalancersIdResponseBody200LoadBalancerTargetsType :: GetLoadBalancersIdResponseBody200LoadBalancerTargetsType
  -- | use_private_ip: Use the private network IP instead of the public IP. Default value is false.
  , getLoadBalancersIdResponseBody200LoadBalancerTargetsUsePrivateIp :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersIdResponseBody200LoadBalancerTargets
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "health_status" (getLoadBalancersIdResponseBody200LoadBalancerTargetsHealthStatus obj) : (Data.Aeson..=) "ip" (getLoadBalancersIdResponseBody200LoadBalancerTargetsIp obj) : (Data.Aeson..=) "label_selector" (getLoadBalancersIdResponseBody200LoadBalancerTargetsLabelSelector obj) : (Data.Aeson..=) "server" (getLoadBalancersIdResponseBody200LoadBalancerTargetsServer obj) : (Data.Aeson..=) "targets" (getLoadBalancersIdResponseBody200LoadBalancerTargetsTargets obj) : (Data.Aeson..=) "type" (getLoadBalancersIdResponseBody200LoadBalancerTargetsType obj) : (Data.Aeson..=) "use_private_ip" (getLoadBalancersIdResponseBody200LoadBalancerTargetsUsePrivateIp obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "health_status" (getLoadBalancersIdResponseBody200LoadBalancerTargetsHealthStatus obj) GHC.Base.<> ((Data.Aeson..=) "ip" (getLoadBalancersIdResponseBody200LoadBalancerTargetsIp obj) GHC.Base.<> ((Data.Aeson..=) "label_selector" (getLoadBalancersIdResponseBody200LoadBalancerTargetsLabelSelector obj) GHC.Base.<> ((Data.Aeson..=) "server" (getLoadBalancersIdResponseBody200LoadBalancerTargetsServer obj) GHC.Base.<> ((Data.Aeson..=) "targets" (getLoadBalancersIdResponseBody200LoadBalancerTargetsTargets obj) GHC.Base.<> ((Data.Aeson..=) "type" (getLoadBalancersIdResponseBody200LoadBalancerTargetsType obj) GHC.Base.<> (Data.Aeson..=) "use_private_ip" (getLoadBalancersIdResponseBody200LoadBalancerTargetsUsePrivateIp obj)))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersIdResponseBody200LoadBalancerTargets
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersIdResponseBody200LoadBalancerTargets" (\obj -> ((((((GHC.Base.pure GetLoadBalancersIdResponseBody200LoadBalancerTargets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "health_status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label_selector")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "server")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "targets")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "use_private_ip"))
-- | Defines the data type for the schema GetLoadBalancersIdResponseBody200Load_balancerTargetsHealth_status
-- 
-- 
data GetLoadBalancersIdResponseBody200LoadBalancerTargetsHealthStatus = GetLoadBalancersIdResponseBody200LoadBalancerTargetsHealthStatus {
  -- | listen_port
  getLoadBalancersIdResponseBody200LoadBalancerTargetsHealthStatusListenPort :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | status
  , getLoadBalancersIdResponseBody200LoadBalancerTargetsHealthStatusStatus :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersIdResponseBody200LoadBalancerTargetsHealthStatus
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "listen_port" (getLoadBalancersIdResponseBody200LoadBalancerTargetsHealthStatusListenPort obj) : (Data.Aeson..=) "status" (getLoadBalancersIdResponseBody200LoadBalancerTargetsHealthStatusStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "listen_port" (getLoadBalancersIdResponseBody200LoadBalancerTargetsHealthStatusListenPort obj) GHC.Base.<> (Data.Aeson..=) "status" (getLoadBalancersIdResponseBody200LoadBalancerTargetsHealthStatusStatus obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersIdResponseBody200LoadBalancerTargetsHealthStatus
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersIdResponseBody200LoadBalancerTargetsHealthStatus" (\obj -> (GHC.Base.pure GetLoadBalancersIdResponseBody200LoadBalancerTargetsHealthStatus GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "listen_port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status"))
-- | Defines the data type for the schema GetLoadBalancersIdResponseBody200Load_balancerTargetsIp
-- 
-- IP targets where the traffic should be routed through. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well.
data GetLoadBalancersIdResponseBody200LoadBalancerTargetsIp = GetLoadBalancersIdResponseBody200LoadBalancerTargetsIp {
  -- | ip: IP of a server that belongs to the same customer (public IPv4\/IPv6) or private IP in a Subnetwork type vswitch.
  getLoadBalancersIdResponseBody200LoadBalancerTargetsIpIp :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersIdResponseBody200LoadBalancerTargetsIp
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "ip" (getLoadBalancersIdResponseBody200LoadBalancerTargetsIpIp obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "ip" (getLoadBalancersIdResponseBody200LoadBalancerTargetsIpIp obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersIdResponseBody200LoadBalancerTargetsIp
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersIdResponseBody200LoadBalancerTargetsIp" (\obj -> GHC.Base.pure GetLoadBalancersIdResponseBody200LoadBalancerTargetsIp GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ip"))
-- | Defines the data type for the schema GetLoadBalancersIdResponseBody200Load_balancerTargetsLabel_selector
-- 
-- Label selector and a list of selected targets
data GetLoadBalancersIdResponseBody200LoadBalancerTargetsLabelSelector = GetLoadBalancersIdResponseBody200LoadBalancerTargetsLabelSelector {
  -- | selector: Label selector
  getLoadBalancersIdResponseBody200LoadBalancerTargetsLabelSelectorSelector :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersIdResponseBody200LoadBalancerTargetsLabelSelector
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "selector" (getLoadBalancersIdResponseBody200LoadBalancerTargetsLabelSelectorSelector obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "selector" (getLoadBalancersIdResponseBody200LoadBalancerTargetsLabelSelectorSelector obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersIdResponseBody200LoadBalancerTargetsLabelSelector
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersIdResponseBody200LoadBalancerTargetsLabelSelector" (\obj -> GHC.Base.pure GetLoadBalancersIdResponseBody200LoadBalancerTargetsLabelSelector GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "selector"))
-- | Defines the data type for the schema GetLoadBalancersIdResponseBody200Load_balancerTargetsServer
-- 
-- Server where the traffic should be routed through
data GetLoadBalancersIdResponseBody200LoadBalancerTargetsServer = GetLoadBalancersIdResponseBody200LoadBalancerTargetsServer {
  -- | id: ID of the Server
  getLoadBalancersIdResponseBody200LoadBalancerTargetsServerId :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersIdResponseBody200LoadBalancerTargetsServer
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (getLoadBalancersIdResponseBody200LoadBalancerTargetsServerId obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (getLoadBalancersIdResponseBody200LoadBalancerTargetsServerId obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersIdResponseBody200LoadBalancerTargetsServer
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersIdResponseBody200LoadBalancerTargetsServer" (\obj -> GHC.Base.pure GetLoadBalancersIdResponseBody200LoadBalancerTargetsServer GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id"))
-- | Defines the data type for the schema GetLoadBalancersIdResponseBody200Load_balancerTargetsTargets
-- 
-- 
data GetLoadBalancersIdResponseBody200LoadBalancerTargetsTargets = GetLoadBalancersIdResponseBody200LoadBalancerTargetsTargets {
  -- | health_status
  getLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsHealthStatus :: (GHC.Maybe.Maybe ([] GetLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsHealthStatus))
  -- | server
  , getLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsServer :: (GHC.Maybe.Maybe GetLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsServer)
  -- | type
  , getLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsType :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | use_private_ip
  , getLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsUsePrivateIp :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersIdResponseBody200LoadBalancerTargetsTargets
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "health_status" (getLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsHealthStatus obj) : (Data.Aeson..=) "server" (getLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsServer obj) : (Data.Aeson..=) "type" (getLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsType obj) : (Data.Aeson..=) "use_private_ip" (getLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsUsePrivateIp obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "health_status" (getLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsHealthStatus obj) GHC.Base.<> ((Data.Aeson..=) "server" (getLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsServer obj) GHC.Base.<> ((Data.Aeson..=) "type" (getLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsType obj) GHC.Base.<> (Data.Aeson..=) "use_private_ip" (getLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsUsePrivateIp obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersIdResponseBody200LoadBalancerTargetsTargets
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersIdResponseBody200LoadBalancerTargetsTargets" (\obj -> (((GHC.Base.pure GetLoadBalancersIdResponseBody200LoadBalancerTargetsTargets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "health_status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "server")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "use_private_ip"))
-- | Defines the data type for the schema GetLoadBalancersIdResponseBody200Load_balancerTargetsTargetsHealth_status
-- 
-- 
data GetLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsHealthStatus = GetLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsHealthStatus {
  -- | listen_port
  getLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsHealthStatusListenPort :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | status
  , getLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsHealthStatusStatus :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsHealthStatus
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "listen_port" (getLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsHealthStatusListenPort obj) : (Data.Aeson..=) "status" (getLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsHealthStatusStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "listen_port" (getLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsHealthStatusListenPort obj) GHC.Base.<> (Data.Aeson..=) "status" (getLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsHealthStatusStatus obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsHealthStatus
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsHealthStatus" (\obj -> (GHC.Base.pure GetLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsHealthStatus GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "listen_port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status"))
-- | Defines the data type for the schema GetLoadBalancersIdResponseBody200Load_balancerTargetsTargetsServer
-- 
-- 
data GetLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsServer = GetLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsServer {
  -- | id: ID of the Server
  getLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsServerId :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsServer
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (getLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsServerId obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (getLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsServerId obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsServer
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsServer" (\obj -> GHC.Base.pure GetLoadBalancersIdResponseBody200LoadBalancerTargetsTargetsServer GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id"))
-- | Defines the enum schema GetLoadBalancersIdResponseBody200Load_balancerTargetsType
-- 
-- Type of the resource
data GetLoadBalancersIdResponseBody200LoadBalancerTargetsType
    = GetLoadBalancersIdResponseBody200LoadBalancerTargetsTypeEnumOther Data.Aeson.Types.Internal.Value
    | GetLoadBalancersIdResponseBody200LoadBalancerTargetsTypeEnumTyped Data.Text.Internal.Text
    | GetLoadBalancersIdResponseBody200LoadBalancerTargetsTypeEnumStringIp
    | GetLoadBalancersIdResponseBody200LoadBalancerTargetsTypeEnumStringLabelSelector
    | GetLoadBalancersIdResponseBody200LoadBalancerTargetsTypeEnumStringServer
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancersIdResponseBody200LoadBalancerTargetsType
    where toJSON (GetLoadBalancersIdResponseBody200LoadBalancerTargetsTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetLoadBalancersIdResponseBody200LoadBalancerTargetsTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetLoadBalancersIdResponseBody200LoadBalancerTargetsTypeEnumStringIp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ip"
          toJSON (GetLoadBalancersIdResponseBody200LoadBalancerTargetsTypeEnumStringLabelSelector) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "label_selector"
          toJSON (GetLoadBalancersIdResponseBody200LoadBalancerTargetsTypeEnumStringServer) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "server"
instance Data.Aeson.FromJSON GetLoadBalancersIdResponseBody200LoadBalancerTargetsType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ip")
                                          then GetLoadBalancersIdResponseBody200LoadBalancerTargetsTypeEnumStringIp
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "label_selector")
                                                then GetLoadBalancersIdResponseBody200LoadBalancerTargetsTypeEnumStringLabelSelector
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "server")
                                                      then GetLoadBalancersIdResponseBody200LoadBalancerTargetsTypeEnumStringServer
                                                      else GetLoadBalancersIdResponseBody200LoadBalancerTargetsTypeEnumOther val)
