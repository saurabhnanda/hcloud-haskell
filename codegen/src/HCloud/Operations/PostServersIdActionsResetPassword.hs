-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation postServers_Id_ActionsResetPassword
module HCloud.Operations.PostServersIdActionsResetPassword where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > POST /servers/{id}/actions/reset_password
-- 
-- Resets the root password. Only works for Linux systems that are running the qemu guest agent. Server must be powered on (state \`on\`) in order for this operation to succeed.
-- 
-- This will generate a new password for this Server and return it.
-- 
-- If this does not succeed you can use the rescue system to netboot the Server and manually change your Server password by hand.
postServers_Id_ActionsResetPassword :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer                                                                                                                        -- ^ id: ID of the Server
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response PostServersIdActionsResetPasswordResponse))   -- ^ Monad containing the result of the operation
postServers_Id_ActionsResetPassword config
                                    id = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostServersIdActionsResetPasswordResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostServersIdActionsResetPasswordResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     PostServersIdActionsResetPasswordResponseBody201)
                                                                                                                                                                                                                    | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/servers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/reset_password"))) [])
-- | > POST /servers/{id}/actions/reset_password
-- 
-- The same as 'postServers_Id_ActionsResetPassword' but returns the raw 'Data.ByteString.Char8.ByteString'
postServers_Id_ActionsResetPasswordRaw :: forall m s . (HCloud.Common.MonadHTTP m,
                                                        HCloud.Common.SecurityScheme s) =>
                                          HCloud.Common.Configuration s ->
                                          GHC.Integer.Type.Integer ->
                                          m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postServers_Id_ActionsResetPasswordRaw config
                                       id = GHC.Base.id (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/servers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/reset_password"))) [])
-- | > POST /servers/{id}/actions/reset_password
-- 
-- Monadic version of 'postServers_Id_ActionsResetPassword' (use with 'HCloud.Common.runWithConfiguration')
postServers_Id_ActionsResetPasswordM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                      HCloud.Common.SecurityScheme s) =>
                                        GHC.Integer.Type.Integer ->
                                        Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                           m
                                                                           (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                               (Network.HTTP.Client.Types.Response PostServersIdActionsResetPasswordResponse))
postServers_Id_ActionsResetPasswordM id = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostServersIdActionsResetPasswordResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostServersIdActionsResetPasswordResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      PostServersIdActionsResetPasswordResponseBody201)
                                                                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/servers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/reset_password"))) [])
-- | > POST /servers/{id}/actions/reset_password
-- 
-- Monadic version of 'postServers_Id_ActionsResetPasswordRaw' (use with 'HCloud.Common.runWithConfiguration')
postServers_Id_ActionsResetPasswordRawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                         HCloud.Common.SecurityScheme s) =>
                                           GHC.Integer.Type.Integer ->
                                           Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                              m
                                                                              (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                                  (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postServers_Id_ActionsResetPasswordRawM id = GHC.Base.id (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/servers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/reset_password"))) [])
-- | Represents a response of the operation 'postServers_Id_ActionsResetPassword'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostServersIdActionsResetPasswordResponseError' is used.
data PostServersIdActionsResetPasswordResponse =                                                   
   PostServersIdActionsResetPasswordResponseError GHC.Base.String                                  -- ^ Means either no matching case available or a parse error
  | PostServersIdActionsResetPasswordResponse201 PostServersIdActionsResetPasswordResponseBody201  -- ^ The \`root_password\` key in the reply contains the new root password that will be active if the Action succeeds.  The \`action\` key in the reply contains an Action object with this structure: 
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema PostServersIdActionsResetPasswordResponseBody201
-- 
-- 
data PostServersIdActionsResetPasswordResponseBody201 = PostServersIdActionsResetPasswordResponseBody201 {
  -- | action
  postServersIdActionsResetPasswordResponseBody201Action :: (GHC.Maybe.Maybe PostServersIdActionsResetPasswordResponseBody201Action)
  -- | root_password: Password that will be set for this Server once the Action succeeds
  , postServersIdActionsResetPasswordResponseBody201RootPassword :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsResetPasswordResponseBody201
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "action" (postServersIdActionsResetPasswordResponseBody201Action obj) : (Data.Aeson..=) "root_password" (postServersIdActionsResetPasswordResponseBody201RootPassword obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "action" (postServersIdActionsResetPasswordResponseBody201Action obj) GHC.Base.<> (Data.Aeson..=) "root_password" (postServersIdActionsResetPasswordResponseBody201RootPassword obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersIdActionsResetPasswordResponseBody201
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersIdActionsResetPasswordResponseBody201" (\obj -> (GHC.Base.pure PostServersIdActionsResetPasswordResponseBody201 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "action")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "root_password"))
-- | Defines the data type for the schema PostServersIdActionsResetPasswordResponseBody201Action
-- 
-- 
data PostServersIdActionsResetPasswordResponseBody201Action = PostServersIdActionsResetPasswordResponseBody201Action {
  -- | command: Command executed in the Action
  postServersIdActionsResetPasswordResponseBody201ActionCommand :: Data.Text.Internal.Text
  -- | error: Error message for the Action if error occurred, otherwise null
  , postServersIdActionsResetPasswordResponseBody201ActionError :: PostServersIdActionsResetPasswordResponseBody201ActionError
  -- | finished: Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
  , postServersIdActionsResetPasswordResponseBody201ActionFinished :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , postServersIdActionsResetPasswordResponseBody201ActionId :: GHC.Integer.Type.Integer
  -- | progress: Progress of Action in percent
  , postServersIdActionsResetPasswordResponseBody201ActionProgress :: GHC.Types.Double
  -- | resources: Resources the Action relates to
  , postServersIdActionsResetPasswordResponseBody201ActionResources :: ([] PostServersIdActionsResetPasswordResponseBody201ActionResources)
  -- | started: Point in time when the Action was started (in ISO-8601 format)
  , postServersIdActionsResetPasswordResponseBody201ActionStarted :: Data.Text.Internal.Text
  -- | status: Status of the Action
  , postServersIdActionsResetPasswordResponseBody201ActionStatus :: PostServersIdActionsResetPasswordResponseBody201ActionStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsResetPasswordResponseBody201Action
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "command" (postServersIdActionsResetPasswordResponseBody201ActionCommand obj) : (Data.Aeson..=) "error" (postServersIdActionsResetPasswordResponseBody201ActionError obj) : (Data.Aeson..=) "finished" (postServersIdActionsResetPasswordResponseBody201ActionFinished obj) : (Data.Aeson..=) "id" (postServersIdActionsResetPasswordResponseBody201ActionId obj) : (Data.Aeson..=) "progress" (postServersIdActionsResetPasswordResponseBody201ActionProgress obj) : (Data.Aeson..=) "resources" (postServersIdActionsResetPasswordResponseBody201ActionResources obj) : (Data.Aeson..=) "started" (postServersIdActionsResetPasswordResponseBody201ActionStarted obj) : (Data.Aeson..=) "status" (postServersIdActionsResetPasswordResponseBody201ActionStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "command" (postServersIdActionsResetPasswordResponseBody201ActionCommand obj) GHC.Base.<> ((Data.Aeson..=) "error" (postServersIdActionsResetPasswordResponseBody201ActionError obj) GHC.Base.<> ((Data.Aeson..=) "finished" (postServersIdActionsResetPasswordResponseBody201ActionFinished obj) GHC.Base.<> ((Data.Aeson..=) "id" (postServersIdActionsResetPasswordResponseBody201ActionId obj) GHC.Base.<> ((Data.Aeson..=) "progress" (postServersIdActionsResetPasswordResponseBody201ActionProgress obj) GHC.Base.<> ((Data.Aeson..=) "resources" (postServersIdActionsResetPasswordResponseBody201ActionResources obj) GHC.Base.<> ((Data.Aeson..=) "started" (postServersIdActionsResetPasswordResponseBody201ActionStarted obj) GHC.Base.<> (Data.Aeson..=) "status" (postServersIdActionsResetPasswordResponseBody201ActionStatus obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersIdActionsResetPasswordResponseBody201Action
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersIdActionsResetPasswordResponseBody201Action" (\obj -> (((((((GHC.Base.pure PostServersIdActionsResetPasswordResponseBody201Action GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "command")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "finished")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "started")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Defines the data type for the schema PostServersIdActionsResetPasswordResponseBody201ActionError
-- 
-- Error message for the Action if error occurred, otherwise null
data PostServersIdActionsResetPasswordResponseBody201ActionError = PostServersIdActionsResetPasswordResponseBody201ActionError {
  -- | code: Fixed machine readable code
  postServersIdActionsResetPasswordResponseBody201ActionErrorCode :: Data.Text.Internal.Text
  -- | message: Humanized error message
  , postServersIdActionsResetPasswordResponseBody201ActionErrorMessage :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsResetPasswordResponseBody201ActionError
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "code" (postServersIdActionsResetPasswordResponseBody201ActionErrorCode obj) : (Data.Aeson..=) "message" (postServersIdActionsResetPasswordResponseBody201ActionErrorMessage obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "code" (postServersIdActionsResetPasswordResponseBody201ActionErrorCode obj) GHC.Base.<> (Data.Aeson..=) "message" (postServersIdActionsResetPasswordResponseBody201ActionErrorMessage obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersIdActionsResetPasswordResponseBody201ActionError
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersIdActionsResetPasswordResponseBody201ActionError" (\obj -> (GHC.Base.pure PostServersIdActionsResetPasswordResponseBody201ActionError GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Defines the data type for the schema PostServersIdActionsResetPasswordResponseBody201ActionResources
-- 
-- 
data PostServersIdActionsResetPasswordResponseBody201ActionResources = PostServersIdActionsResetPasswordResponseBody201ActionResources {
  -- | id: ID of the Resource
  postServersIdActionsResetPasswordResponseBody201ActionResourcesId :: GHC.Integer.Type.Integer
  -- | type: Type of resource referenced
  , postServersIdActionsResetPasswordResponseBody201ActionResourcesType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsResetPasswordResponseBody201ActionResources
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (postServersIdActionsResetPasswordResponseBody201ActionResourcesId obj) : (Data.Aeson..=) "type" (postServersIdActionsResetPasswordResponseBody201ActionResourcesType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (postServersIdActionsResetPasswordResponseBody201ActionResourcesId obj) GHC.Base.<> (Data.Aeson..=) "type" (postServersIdActionsResetPasswordResponseBody201ActionResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersIdActionsResetPasswordResponseBody201ActionResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersIdActionsResetPasswordResponseBody201ActionResources" (\obj -> (GHC.Base.pure PostServersIdActionsResetPasswordResponseBody201ActionResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema PostServersIdActionsResetPasswordResponseBody201ActionStatus
-- 
-- Status of the Action
data PostServersIdActionsResetPasswordResponseBody201ActionStatus
    = PostServersIdActionsResetPasswordResponseBody201ActionStatusEnumOther Data.Aeson.Types.Internal.Value
    | PostServersIdActionsResetPasswordResponseBody201ActionStatusEnumTyped Data.Text.Internal.Text
    | PostServersIdActionsResetPasswordResponseBody201ActionStatusEnumStringError
    | PostServersIdActionsResetPasswordResponseBody201ActionStatusEnumStringRunning
    | PostServersIdActionsResetPasswordResponseBody201ActionStatusEnumStringSuccess
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsResetPasswordResponseBody201ActionStatus
    where toJSON (PostServersIdActionsResetPasswordResponseBody201ActionStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostServersIdActionsResetPasswordResponseBody201ActionStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostServersIdActionsResetPasswordResponseBody201ActionStatusEnumStringError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error"
          toJSON (PostServersIdActionsResetPasswordResponseBody201ActionStatusEnumStringRunning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running"
          toJSON (PostServersIdActionsResetPasswordResponseBody201ActionStatusEnumStringSuccess) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success"
instance Data.Aeson.FromJSON PostServersIdActionsResetPasswordResponseBody201ActionStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error")
                                          then PostServersIdActionsResetPasswordResponseBody201ActionStatusEnumStringError
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running")
                                                then PostServersIdActionsResetPasswordResponseBody201ActionStatusEnumStringRunning
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success")
                                                      then PostServersIdActionsResetPasswordResponseBody201ActionStatusEnumStringSuccess
                                                      else PostServersIdActionsResetPasswordResponseBody201ActionStatusEnumOther val)
