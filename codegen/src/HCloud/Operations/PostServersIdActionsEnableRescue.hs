-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation postServers_Id_ActionsEnableRescue
module HCloud.Operations.PostServersIdActionsEnableRescue where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > POST /servers/{id}/actions/enable_rescue
-- 
-- Enable the Hetzner Rescue System for this Server. The next time a Server with enabled rescue mode boots it will start a special minimal Linux distribution designed for repair and reinstall.
-- 
-- In case a Server cannot boot on its own you can use this to access a Server’s disks.
-- 
-- Rescue Mode is automatically disabled when you first boot into it or if you do not use it for 60 minutes.
-- 
-- Enabling rescue mode will not [reboot](https:\/\/docs.hetzner.cloud\/\#server-actions-soft-reboot-a-server) your Server — you will have to do this yourself.
postServers_Id_ActionsEnableRescue :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer                                                                                                                       -- ^ id: ID of the Server
  -> GHC.Maybe.Maybe PostServersIdActionsEnableRescueRequestBody                                                                                    -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response PostServersIdActionsEnableRescueResponse))   -- ^ Monad containing the result of the operation
postServers_Id_ActionsEnableRescue config
                                   id
                                   body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostServersIdActionsEnableRescueResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostServersIdActionsEnableRescueResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    PostServersIdActionsEnableRescueResponseBody201)
                                                                                                                                                                                                                    | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/servers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/enable_rescue"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /servers/{id}/actions/enable_rescue
-- 
-- The same as 'postServers_Id_ActionsEnableRescue' but returns the raw 'Data.ByteString.Char8.ByteString'
postServers_Id_ActionsEnableRescueRaw :: forall m s . (HCloud.Common.MonadHTTP m,
                                                       HCloud.Common.SecurityScheme s) =>
                                         HCloud.Common.Configuration s ->
                                         GHC.Integer.Type.Integer ->
                                         GHC.Maybe.Maybe PostServersIdActionsEnableRescueRequestBody ->
                                         m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                               (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postServers_Id_ActionsEnableRescueRaw config
                                      id
                                      body = GHC.Base.id (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/servers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/enable_rescue"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /servers/{id}/actions/enable_rescue
-- 
-- Monadic version of 'postServers_Id_ActionsEnableRescue' (use with 'HCloud.Common.runWithConfiguration')
postServers_Id_ActionsEnableRescueM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                     HCloud.Common.SecurityScheme s) =>
                                       GHC.Integer.Type.Integer ->
                                       GHC.Maybe.Maybe PostServersIdActionsEnableRescueRequestBody ->
                                       Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                          m
                                                                          (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                              (Network.HTTP.Client.Types.Response PostServersIdActionsEnableRescueResponse))
postServers_Id_ActionsEnableRescueM id
                                    body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostServersIdActionsEnableRescueResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostServersIdActionsEnableRescueResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     PostServersIdActionsEnableRescueResponseBody201)
                                                                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/servers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/enable_rescue"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /servers/{id}/actions/enable_rescue
-- 
-- Monadic version of 'postServers_Id_ActionsEnableRescueRaw' (use with 'HCloud.Common.runWithConfiguration')
postServers_Id_ActionsEnableRescueRawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                        HCloud.Common.SecurityScheme s) =>
                                          GHC.Integer.Type.Integer ->
                                          GHC.Maybe.Maybe PostServersIdActionsEnableRescueRequestBody ->
                                          Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                             m
                                                                             (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                                 (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postServers_Id_ActionsEnableRescueRawM id
                                       body = GHC.Base.id (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/servers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/enable_rescue"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema postServers_Id_ActionsEnableRescueRequestBody
-- 
-- 
data PostServersIdActionsEnableRescueRequestBody = PostServersIdActionsEnableRescueRequestBody {
  -- | ssh_keys: Array of SSH key IDs which should be injected into the rescue system. Only available for types: \`linux64\` and \`linux32\`.
  postServersIdActionsEnableRescueRequestBodySshKeys :: (GHC.Maybe.Maybe ([] GHC.Integer.Type.Integer))
  -- | type: Type of rescue system to boot (default: \`linux64\`)
  , postServersIdActionsEnableRescueRequestBodyType :: (GHC.Maybe.Maybe PostServersIdActionsEnableRescueRequestBodyType)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsEnableRescueRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "ssh_keys" (postServersIdActionsEnableRescueRequestBodySshKeys obj) : (Data.Aeson..=) "type" (postServersIdActionsEnableRescueRequestBodyType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "ssh_keys" (postServersIdActionsEnableRescueRequestBodySshKeys obj) GHC.Base.<> (Data.Aeson..=) "type" (postServersIdActionsEnableRescueRequestBodyType obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersIdActionsEnableRescueRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersIdActionsEnableRescueRequestBody" (\obj -> (GHC.Base.pure PostServersIdActionsEnableRescueRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ssh_keys")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))
-- | Defines the enum schema postServers_Id_ActionsEnableRescueRequestBodyType
-- 
-- Type of rescue system to boot (default: \`linux64\`)
data PostServersIdActionsEnableRescueRequestBodyType
    = PostServersIdActionsEnableRescueRequestBodyTypeEnumOther Data.Aeson.Types.Internal.Value
    | PostServersIdActionsEnableRescueRequestBodyTypeEnumTyped Data.Text.Internal.Text
    | PostServersIdActionsEnableRescueRequestBodyTypeEnumStringFreebsd64
    | PostServersIdActionsEnableRescueRequestBodyTypeEnumStringLinux32
    | PostServersIdActionsEnableRescueRequestBodyTypeEnumStringLinux64
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsEnableRescueRequestBodyType
    where toJSON (PostServersIdActionsEnableRescueRequestBodyTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostServersIdActionsEnableRescueRequestBodyTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostServersIdActionsEnableRescueRequestBodyTypeEnumStringFreebsd64) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "freebsd64"
          toJSON (PostServersIdActionsEnableRescueRequestBodyTypeEnumStringLinux32) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linux32"
          toJSON (PostServersIdActionsEnableRescueRequestBodyTypeEnumStringLinux64) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linux64"
instance Data.Aeson.FromJSON PostServersIdActionsEnableRescueRequestBodyType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "freebsd64")
                                          then PostServersIdActionsEnableRescueRequestBodyTypeEnumStringFreebsd64
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linux32")
                                                then PostServersIdActionsEnableRescueRequestBodyTypeEnumStringLinux32
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "linux64")
                                                      then PostServersIdActionsEnableRescueRequestBodyTypeEnumStringLinux64
                                                      else PostServersIdActionsEnableRescueRequestBodyTypeEnumOther val)
-- | Represents a response of the operation 'postServers_Id_ActionsEnableRescue'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostServersIdActionsEnableRescueResponseError' is used.
data PostServersIdActionsEnableRescueResponse =                                                  
   PostServersIdActionsEnableRescueResponseError GHC.Base.String                                 -- ^ Means either no matching case available or a parse error
  | PostServersIdActionsEnableRescueResponse201 PostServersIdActionsEnableRescueResponseBody201  -- ^ The \`root_password\` key in the reply contains the root password that can be used to access the booted rescue system.  The \`action\` key in the reply contains an Action object with this structure 
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema PostServersIdActionsEnableRescueResponseBody201
-- 
-- 
data PostServersIdActionsEnableRescueResponseBody201 = PostServersIdActionsEnableRescueResponseBody201 {
  -- | action
  postServersIdActionsEnableRescueResponseBody201Action :: (GHC.Maybe.Maybe PostServersIdActionsEnableRescueResponseBody201Action)
  -- | root_password: Password that will be set for this Server once the Action succeeds
  , postServersIdActionsEnableRescueResponseBody201RootPassword :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsEnableRescueResponseBody201
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "action" (postServersIdActionsEnableRescueResponseBody201Action obj) : (Data.Aeson..=) "root_password" (postServersIdActionsEnableRescueResponseBody201RootPassword obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "action" (postServersIdActionsEnableRescueResponseBody201Action obj) GHC.Base.<> (Data.Aeson..=) "root_password" (postServersIdActionsEnableRescueResponseBody201RootPassword obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersIdActionsEnableRescueResponseBody201
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersIdActionsEnableRescueResponseBody201" (\obj -> (GHC.Base.pure PostServersIdActionsEnableRescueResponseBody201 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "action")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "root_password"))
-- | Defines the data type for the schema PostServersIdActionsEnableRescueResponseBody201Action
-- 
-- 
data PostServersIdActionsEnableRescueResponseBody201Action = PostServersIdActionsEnableRescueResponseBody201Action {
  -- | command: Command executed in the Action
  postServersIdActionsEnableRescueResponseBody201ActionCommand :: Data.Text.Internal.Text
  -- | error: Error message for the Action if error occurred, otherwise null
  , postServersIdActionsEnableRescueResponseBody201ActionError :: PostServersIdActionsEnableRescueResponseBody201ActionError
  -- | finished: Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
  , postServersIdActionsEnableRescueResponseBody201ActionFinished :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , postServersIdActionsEnableRescueResponseBody201ActionId :: GHC.Integer.Type.Integer
  -- | progress: Progress of Action in percent
  , postServersIdActionsEnableRescueResponseBody201ActionProgress :: GHC.Types.Double
  -- | resources: Resources the Action relates to
  , postServersIdActionsEnableRescueResponseBody201ActionResources :: ([] PostServersIdActionsEnableRescueResponseBody201ActionResources)
  -- | started: Point in time when the Action was started (in ISO-8601 format)
  , postServersIdActionsEnableRescueResponseBody201ActionStarted :: Data.Text.Internal.Text
  -- | status: Status of the Action
  , postServersIdActionsEnableRescueResponseBody201ActionStatus :: PostServersIdActionsEnableRescueResponseBody201ActionStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsEnableRescueResponseBody201Action
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "command" (postServersIdActionsEnableRescueResponseBody201ActionCommand obj) : (Data.Aeson..=) "error" (postServersIdActionsEnableRescueResponseBody201ActionError obj) : (Data.Aeson..=) "finished" (postServersIdActionsEnableRescueResponseBody201ActionFinished obj) : (Data.Aeson..=) "id" (postServersIdActionsEnableRescueResponseBody201ActionId obj) : (Data.Aeson..=) "progress" (postServersIdActionsEnableRescueResponseBody201ActionProgress obj) : (Data.Aeson..=) "resources" (postServersIdActionsEnableRescueResponseBody201ActionResources obj) : (Data.Aeson..=) "started" (postServersIdActionsEnableRescueResponseBody201ActionStarted obj) : (Data.Aeson..=) "status" (postServersIdActionsEnableRescueResponseBody201ActionStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "command" (postServersIdActionsEnableRescueResponseBody201ActionCommand obj) GHC.Base.<> ((Data.Aeson..=) "error" (postServersIdActionsEnableRescueResponseBody201ActionError obj) GHC.Base.<> ((Data.Aeson..=) "finished" (postServersIdActionsEnableRescueResponseBody201ActionFinished obj) GHC.Base.<> ((Data.Aeson..=) "id" (postServersIdActionsEnableRescueResponseBody201ActionId obj) GHC.Base.<> ((Data.Aeson..=) "progress" (postServersIdActionsEnableRescueResponseBody201ActionProgress obj) GHC.Base.<> ((Data.Aeson..=) "resources" (postServersIdActionsEnableRescueResponseBody201ActionResources obj) GHC.Base.<> ((Data.Aeson..=) "started" (postServersIdActionsEnableRescueResponseBody201ActionStarted obj) GHC.Base.<> (Data.Aeson..=) "status" (postServersIdActionsEnableRescueResponseBody201ActionStatus obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersIdActionsEnableRescueResponseBody201Action
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersIdActionsEnableRescueResponseBody201Action" (\obj -> (((((((GHC.Base.pure PostServersIdActionsEnableRescueResponseBody201Action GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "command")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "finished")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "started")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Defines the data type for the schema PostServersIdActionsEnableRescueResponseBody201ActionError
-- 
-- Error message for the Action if error occurred, otherwise null
data PostServersIdActionsEnableRescueResponseBody201ActionError = PostServersIdActionsEnableRescueResponseBody201ActionError {
  -- | code: Fixed machine readable code
  postServersIdActionsEnableRescueResponseBody201ActionErrorCode :: Data.Text.Internal.Text
  -- | message: Humanized error message
  , postServersIdActionsEnableRescueResponseBody201ActionErrorMessage :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsEnableRescueResponseBody201ActionError
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "code" (postServersIdActionsEnableRescueResponseBody201ActionErrorCode obj) : (Data.Aeson..=) "message" (postServersIdActionsEnableRescueResponseBody201ActionErrorMessage obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "code" (postServersIdActionsEnableRescueResponseBody201ActionErrorCode obj) GHC.Base.<> (Data.Aeson..=) "message" (postServersIdActionsEnableRescueResponseBody201ActionErrorMessage obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersIdActionsEnableRescueResponseBody201ActionError
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersIdActionsEnableRescueResponseBody201ActionError" (\obj -> (GHC.Base.pure PostServersIdActionsEnableRescueResponseBody201ActionError GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Defines the data type for the schema PostServersIdActionsEnableRescueResponseBody201ActionResources
-- 
-- 
data PostServersIdActionsEnableRescueResponseBody201ActionResources = PostServersIdActionsEnableRescueResponseBody201ActionResources {
  -- | id: ID of the Resource
  postServersIdActionsEnableRescueResponseBody201ActionResourcesId :: GHC.Integer.Type.Integer
  -- | type: Type of resource referenced
  , postServersIdActionsEnableRescueResponseBody201ActionResourcesType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsEnableRescueResponseBody201ActionResources
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (postServersIdActionsEnableRescueResponseBody201ActionResourcesId obj) : (Data.Aeson..=) "type" (postServersIdActionsEnableRescueResponseBody201ActionResourcesType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (postServersIdActionsEnableRescueResponseBody201ActionResourcesId obj) GHC.Base.<> (Data.Aeson..=) "type" (postServersIdActionsEnableRescueResponseBody201ActionResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersIdActionsEnableRescueResponseBody201ActionResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersIdActionsEnableRescueResponseBody201ActionResources" (\obj -> (GHC.Base.pure PostServersIdActionsEnableRescueResponseBody201ActionResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema PostServersIdActionsEnableRescueResponseBody201ActionStatus
-- 
-- Status of the Action
data PostServersIdActionsEnableRescueResponseBody201ActionStatus
    = PostServersIdActionsEnableRescueResponseBody201ActionStatusEnumOther Data.Aeson.Types.Internal.Value
    | PostServersIdActionsEnableRescueResponseBody201ActionStatusEnumTyped Data.Text.Internal.Text
    | PostServersIdActionsEnableRescueResponseBody201ActionStatusEnumStringError
    | PostServersIdActionsEnableRescueResponseBody201ActionStatusEnumStringRunning
    | PostServersIdActionsEnableRescueResponseBody201ActionStatusEnumStringSuccess
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsEnableRescueResponseBody201ActionStatus
    where toJSON (PostServersIdActionsEnableRescueResponseBody201ActionStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostServersIdActionsEnableRescueResponseBody201ActionStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostServersIdActionsEnableRescueResponseBody201ActionStatusEnumStringError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error"
          toJSON (PostServersIdActionsEnableRescueResponseBody201ActionStatusEnumStringRunning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running"
          toJSON (PostServersIdActionsEnableRescueResponseBody201ActionStatusEnumStringSuccess) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success"
instance Data.Aeson.FromJSON PostServersIdActionsEnableRescueResponseBody201ActionStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error")
                                          then PostServersIdActionsEnableRescueResponseBody201ActionStatusEnumStringError
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running")
                                                then PostServersIdActionsEnableRescueResponseBody201ActionStatusEnumStringRunning
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success")
                                                      then PostServersIdActionsEnableRescueResponseBody201ActionStatusEnumStringSuccess
                                                      else PostServersIdActionsEnableRescueResponseBody201ActionStatusEnumOther val)
