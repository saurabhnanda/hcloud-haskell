-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation postFloatingIps_Id_ActionsChangeDnsPtr
module HCloud.Operations.PostFloatingIpsIdActionsChangeDnsPtr where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > POST /floating_ips/{id}/actions/change_dns_ptr
-- 
-- Changes the hostname that will appear when getting the hostname belonging to this Floating IP.
postFloatingIps_Id_ActionsChangeDnsPtr :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer                                                                                                                           -- ^ id: ID of the Floating IP
  -> GHC.Maybe.Maybe PostFloatingIpsIdActionsChangeDnsPtrRequestBody                                                                                    -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response PostFloatingIpsIdActionsChangeDnsPtrResponse))   -- ^ Monad containing the result of the operation
postFloatingIps_Id_ActionsChangeDnsPtr config
                                       id
                                       body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostFloatingIpsIdActionsChangeDnsPtrResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostFloatingIpsIdActionsChangeDnsPtrResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                PostFloatingIpsIdActionsChangeDnsPtrResponseBody201)
                                                                                                                                                                                                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/floating_ips/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/change_dns_ptr"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /floating_ips/{id}/actions/change_dns_ptr
-- 
-- The same as 'postFloatingIps_Id_ActionsChangeDnsPtr' but returns the raw 'Data.ByteString.Char8.ByteString'
postFloatingIps_Id_ActionsChangeDnsPtrRaw :: forall m s . (HCloud.Common.MonadHTTP m,
                                                           HCloud.Common.SecurityScheme s) =>
                                             HCloud.Common.Configuration s ->
                                             GHC.Integer.Type.Integer ->
                                             GHC.Maybe.Maybe PostFloatingIpsIdActionsChangeDnsPtrRequestBody ->
                                             m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                   (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postFloatingIps_Id_ActionsChangeDnsPtrRaw config
                                          id
                                          body = GHC.Base.id (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/floating_ips/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/change_dns_ptr"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /floating_ips/{id}/actions/change_dns_ptr
-- 
-- Monadic version of 'postFloatingIps_Id_ActionsChangeDnsPtr' (use with 'HCloud.Common.runWithConfiguration')
postFloatingIps_Id_ActionsChangeDnsPtrM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                         HCloud.Common.SecurityScheme s) =>
                                           GHC.Integer.Type.Integer ->
                                           GHC.Maybe.Maybe PostFloatingIpsIdActionsChangeDnsPtrRequestBody ->
                                           Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                              m
                                                                              (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                                  (Network.HTTP.Client.Types.Response PostFloatingIpsIdActionsChangeDnsPtrResponse))
postFloatingIps_Id_ActionsChangeDnsPtrM id
                                        body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostFloatingIpsIdActionsChangeDnsPtrResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostFloatingIpsIdActionsChangeDnsPtrResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 PostFloatingIpsIdActionsChangeDnsPtrResponseBody201)
                                                                                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/floating_ips/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/change_dns_ptr"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /floating_ips/{id}/actions/change_dns_ptr
-- 
-- Monadic version of 'postFloatingIps_Id_ActionsChangeDnsPtrRaw' (use with 'HCloud.Common.runWithConfiguration')
postFloatingIps_Id_ActionsChangeDnsPtrRawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                            HCloud.Common.SecurityScheme s) =>
                                              GHC.Integer.Type.Integer ->
                                              GHC.Maybe.Maybe PostFloatingIpsIdActionsChangeDnsPtrRequestBody ->
                                              Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                                 m
                                                                                 (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                                     (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postFloatingIps_Id_ActionsChangeDnsPtrRawM id
                                           body = GHC.Base.id (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/floating_ips/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/change_dns_ptr"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema postFloatingIps_Id_ActionsChangeDnsPtrRequestBody
-- 
-- 
data PostFloatingIpsIdActionsChangeDnsPtrRequestBody = PostFloatingIpsIdActionsChangeDnsPtrRequestBody {
  -- | dns_ptr: Hostname to set as a reverse DNS PTR entry, will reset to original default value if \`null\`
  postFloatingIpsIdActionsChangeDnsPtrRequestBodyDnsPtr :: Data.Text.Internal.Text
  -- | ip: IP address for which to set the reverse DNS entry
  , postFloatingIpsIdActionsChangeDnsPtrRequestBodyIp :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFloatingIpsIdActionsChangeDnsPtrRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "dns_ptr" (postFloatingIpsIdActionsChangeDnsPtrRequestBodyDnsPtr obj) : (Data.Aeson..=) "ip" (postFloatingIpsIdActionsChangeDnsPtrRequestBodyIp obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "dns_ptr" (postFloatingIpsIdActionsChangeDnsPtrRequestBodyDnsPtr obj) GHC.Base.<> (Data.Aeson..=) "ip" (postFloatingIpsIdActionsChangeDnsPtrRequestBodyIp obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostFloatingIpsIdActionsChangeDnsPtrRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFloatingIpsIdActionsChangeDnsPtrRequestBody" (\obj -> (GHC.Base.pure PostFloatingIpsIdActionsChangeDnsPtrRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "dns_ptr")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ip"))
-- | Represents a response of the operation 'postFloatingIps_Id_ActionsChangeDnsPtr'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostFloatingIpsIdActionsChangeDnsPtrResponseError' is used.
data PostFloatingIpsIdActionsChangeDnsPtrResponse =                                                      
   PostFloatingIpsIdActionsChangeDnsPtrResponseError GHC.Base.String                                     -- ^ Means either no matching case available or a parse error
  | PostFloatingIpsIdActionsChangeDnsPtrResponse201 PostFloatingIpsIdActionsChangeDnsPtrResponseBody201  -- ^ The \`action\` key contains the \`change_dns_ptr\` Action
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema PostFloatingIpsIdActionsChangeDnsPtrResponseBody201
-- 
-- 
data PostFloatingIpsIdActionsChangeDnsPtrResponseBody201 = PostFloatingIpsIdActionsChangeDnsPtrResponseBody201 {
  -- | action
  postFloatingIpsIdActionsChangeDnsPtrResponseBody201Action :: PostFloatingIpsIdActionsChangeDnsPtrResponseBody201Action
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFloatingIpsIdActionsChangeDnsPtrResponseBody201
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "action" (postFloatingIpsIdActionsChangeDnsPtrResponseBody201Action obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "action" (postFloatingIpsIdActionsChangeDnsPtrResponseBody201Action obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostFloatingIpsIdActionsChangeDnsPtrResponseBody201
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFloatingIpsIdActionsChangeDnsPtrResponseBody201" (\obj -> GHC.Base.pure PostFloatingIpsIdActionsChangeDnsPtrResponseBody201 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "action"))
-- | Defines the data type for the schema PostFloatingIpsIdActionsChangeDnsPtrResponseBody201Action
-- 
-- 
data PostFloatingIpsIdActionsChangeDnsPtrResponseBody201Action = PostFloatingIpsIdActionsChangeDnsPtrResponseBody201Action {
  -- | command: Command executed in the Action
  postFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionCommand :: Data.Text.Internal.Text
  -- | error: Error message for the Action if error occurred, otherwise null
  , postFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionError :: PostFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionError
  -- | finished: Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
  , postFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionFinished :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , postFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionId :: GHC.Integer.Type.Integer
  -- | progress: Progress of Action in percent
  , postFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionProgress :: GHC.Types.Double
  -- | resources: Resources the Action relates to
  , postFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionResources :: ([] PostFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionResources)
  -- | started: Point in time when the Action was started (in ISO-8601 format)
  , postFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionStarted :: Data.Text.Internal.Text
  -- | status: Status of the Action
  , postFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionStatus :: PostFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFloatingIpsIdActionsChangeDnsPtrResponseBody201Action
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "command" (postFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionCommand obj) : (Data.Aeson..=) "error" (postFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionError obj) : (Data.Aeson..=) "finished" (postFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionFinished obj) : (Data.Aeson..=) "id" (postFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionId obj) : (Data.Aeson..=) "progress" (postFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionProgress obj) : (Data.Aeson..=) "resources" (postFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionResources obj) : (Data.Aeson..=) "started" (postFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionStarted obj) : (Data.Aeson..=) "status" (postFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "command" (postFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionCommand obj) GHC.Base.<> ((Data.Aeson..=) "error" (postFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionError obj) GHC.Base.<> ((Data.Aeson..=) "finished" (postFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionFinished obj) GHC.Base.<> ((Data.Aeson..=) "id" (postFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionId obj) GHC.Base.<> ((Data.Aeson..=) "progress" (postFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionProgress obj) GHC.Base.<> ((Data.Aeson..=) "resources" (postFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionResources obj) GHC.Base.<> ((Data.Aeson..=) "started" (postFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionStarted obj) GHC.Base.<> (Data.Aeson..=) "status" (postFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionStatus obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostFloatingIpsIdActionsChangeDnsPtrResponseBody201Action
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFloatingIpsIdActionsChangeDnsPtrResponseBody201Action" (\obj -> (((((((GHC.Base.pure PostFloatingIpsIdActionsChangeDnsPtrResponseBody201Action GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "command")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "finished")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "started")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Defines the data type for the schema PostFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionError
-- 
-- Error message for the Action if error occurred, otherwise null
data PostFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionError = PostFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionError {
  -- | code: Fixed machine readable code
  postFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionErrorCode :: Data.Text.Internal.Text
  -- | message: Humanized error message
  , postFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionErrorMessage :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionError
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "code" (postFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionErrorCode obj) : (Data.Aeson..=) "message" (postFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionErrorMessage obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "code" (postFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionErrorCode obj) GHC.Base.<> (Data.Aeson..=) "message" (postFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionErrorMessage obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionError
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionError" (\obj -> (GHC.Base.pure PostFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionError GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Defines the data type for the schema PostFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionResources
-- 
-- 
data PostFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionResources = PostFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionResources {
  -- | id: ID of the Resource
  postFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionResourcesId :: GHC.Integer.Type.Integer
  -- | type: Type of resource referenced
  , postFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionResourcesType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionResources
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (postFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionResourcesId obj) : (Data.Aeson..=) "type" (postFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionResourcesType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (postFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionResourcesId obj) GHC.Base.<> (Data.Aeson..=) "type" (postFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionResources" (\obj -> (GHC.Base.pure PostFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema PostFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionStatus
-- 
-- Status of the Action
data PostFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionStatus
    = PostFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionStatusEnumOther Data.Aeson.Types.Internal.Value
    | PostFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionStatusEnumTyped Data.Text.Internal.Text
    | PostFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionStatusEnumStringError
    | PostFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionStatusEnumStringRunning
    | PostFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionStatusEnumStringSuccess
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionStatus
    where toJSON (PostFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionStatusEnumStringError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error"
          toJSON (PostFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionStatusEnumStringRunning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running"
          toJSON (PostFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionStatusEnumStringSuccess) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success"
instance Data.Aeson.FromJSON PostFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error")
                                          then PostFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionStatusEnumStringError
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running")
                                                then PostFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionStatusEnumStringRunning
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success")
                                                      then PostFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionStatusEnumStringSuccess
                                                      else PostFloatingIpsIdActionsChangeDnsPtrResponseBody201ActionStatusEnumOther val)
