-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation getVolumes_Id_Actions_ActionId_
module HCloud.Operations.GetVolumesIdActionsActionId_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > GET /volumes/{id}/actions/{action_id}
-- 
-- Returns a specific Action for a Volume.
getVolumes_Id_Actions_ActionId_ :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer                                                                                                                    -- ^ id: ID of the Volume
  -> GHC.Integer.Type.Integer                                                                                                                    -- ^ action_id: ID of the Action
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response GetVolumesIdActionsActionIdResponse))     -- ^ Monad containing the result of the operation
getVolumes_Id_Actions_ActionId_ config
                                id
                                actionId = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetVolumesIdActionsActionIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetVolumesIdActionsActionIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           GetVolumesIdActionsActionIdResponseBody200)
                                                                                                                                                                                                                | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/volumes/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ("/actions/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel actionId)) GHC.Base.++ ""))))) [])
-- | > GET /volumes/{id}/actions/{action_id}
-- 
-- The same as 'getVolumes_Id_Actions_ActionId_' but returns the raw 'Data.ByteString.Char8.ByteString'
getVolumes_Id_Actions_ActionId_Raw :: forall m s . (HCloud.Common.MonadHTTP m,
                                                    HCloud.Common.SecurityScheme s) =>
                                      HCloud.Common.Configuration s ->
                                      GHC.Integer.Type.Integer ->
                                      GHC.Integer.Type.Integer ->
                                      m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                            (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getVolumes_Id_Actions_ActionId_Raw config
                                   id
                                   actionId = GHC.Base.id (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/volumes/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ("/actions/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel actionId)) GHC.Base.++ ""))))) [])
-- | > GET /volumes/{id}/actions/{action_id}
-- 
-- Monadic version of 'getVolumes_Id_Actions_ActionId_' (use with 'HCloud.Common.runWithConfiguration')
getVolumes_Id_Actions_ActionId_M :: forall m s . (HCloud.Common.MonadHTTP m,
                                                  HCloud.Common.SecurityScheme s) =>
                                    GHC.Integer.Type.Integer ->
                                    GHC.Integer.Type.Integer ->
                                    Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                       m
                                                                       (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                           (Network.HTTP.Client.Types.Response GetVolumesIdActionsActionIdResponse))
getVolumes_Id_Actions_ActionId_M id
                                 actionId = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetVolumesIdActionsActionIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetVolumesIdActionsActionIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            GetVolumesIdActionsActionIdResponseBody200)
                                                                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/volumes/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ("/actions/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel actionId)) GHC.Base.++ ""))))) [])
-- | > GET /volumes/{id}/actions/{action_id}
-- 
-- Monadic version of 'getVolumes_Id_Actions_ActionId_Raw' (use with 'HCloud.Common.runWithConfiguration')
getVolumes_Id_Actions_ActionId_RawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                     HCloud.Common.SecurityScheme s) =>
                                       GHC.Integer.Type.Integer ->
                                       GHC.Integer.Type.Integer ->
                                       Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                          m
                                                                          (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                              (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getVolumes_Id_Actions_ActionId_RawM id
                                    actionId = GHC.Base.id (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/volumes/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ("/actions/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel actionId)) GHC.Base.++ ""))))) [])
-- | Represents a response of the operation 'getVolumes_Id_Actions_ActionId_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetVolumesIdActionsActionIdResponseError' is used.
data GetVolumesIdActionsActionIdResponse =                                             
   GetVolumesIdActionsActionIdResponseError GHC.Base.String                            -- ^ Means either no matching case available or a parse error
  | GetVolumesIdActionsActionIdResponse200 GetVolumesIdActionsActionIdResponseBody200  -- ^ The \`action\` key contains the Volume Action
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema GetVolumesIdActionsActionIdResponseBody200
-- 
-- 
data GetVolumesIdActionsActionIdResponseBody200 = GetVolumesIdActionsActionIdResponseBody200 {
  -- | action
  getVolumesIdActionsActionIdResponseBody200Action :: GetVolumesIdActionsActionIdResponseBody200Action
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetVolumesIdActionsActionIdResponseBody200
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "action" (getVolumesIdActionsActionIdResponseBody200Action obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "action" (getVolumesIdActionsActionIdResponseBody200Action obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetVolumesIdActionsActionIdResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetVolumesIdActionsActionIdResponseBody200" (\obj -> GHC.Base.pure GetVolumesIdActionsActionIdResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "action"))
-- | Defines the data type for the schema GetVolumesIdActionsActionIdResponseBody200Action
-- 
-- 
data GetVolumesIdActionsActionIdResponseBody200Action = GetVolumesIdActionsActionIdResponseBody200Action {
  -- | command: Command executed in the Action
  getVolumesIdActionsActionIdResponseBody200ActionCommand :: Data.Text.Internal.Text
  -- | error: Error message for the Action if error occurred, otherwise null
  , getVolumesIdActionsActionIdResponseBody200ActionError :: GetVolumesIdActionsActionIdResponseBody200ActionError
  -- | finished: Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
  , getVolumesIdActionsActionIdResponseBody200ActionFinished :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , getVolumesIdActionsActionIdResponseBody200ActionId :: GHC.Integer.Type.Integer
  -- | progress: Progress of Action in percent
  , getVolumesIdActionsActionIdResponseBody200ActionProgress :: GHC.Types.Double
  -- | resources: Resources the Action relates to
  , getVolumesIdActionsActionIdResponseBody200ActionResources :: ([] GetVolumesIdActionsActionIdResponseBody200ActionResources)
  -- | started: Point in time when the Action was started (in ISO-8601 format)
  , getVolumesIdActionsActionIdResponseBody200ActionStarted :: Data.Text.Internal.Text
  -- | status: Status of the Action
  , getVolumesIdActionsActionIdResponseBody200ActionStatus :: GetVolumesIdActionsActionIdResponseBody200ActionStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetVolumesIdActionsActionIdResponseBody200Action
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "command" (getVolumesIdActionsActionIdResponseBody200ActionCommand obj) : (Data.Aeson..=) "error" (getVolumesIdActionsActionIdResponseBody200ActionError obj) : (Data.Aeson..=) "finished" (getVolumesIdActionsActionIdResponseBody200ActionFinished obj) : (Data.Aeson..=) "id" (getVolumesIdActionsActionIdResponseBody200ActionId obj) : (Data.Aeson..=) "progress" (getVolumesIdActionsActionIdResponseBody200ActionProgress obj) : (Data.Aeson..=) "resources" (getVolumesIdActionsActionIdResponseBody200ActionResources obj) : (Data.Aeson..=) "started" (getVolumesIdActionsActionIdResponseBody200ActionStarted obj) : (Data.Aeson..=) "status" (getVolumesIdActionsActionIdResponseBody200ActionStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "command" (getVolumesIdActionsActionIdResponseBody200ActionCommand obj) GHC.Base.<> ((Data.Aeson..=) "error" (getVolumesIdActionsActionIdResponseBody200ActionError obj) GHC.Base.<> ((Data.Aeson..=) "finished" (getVolumesIdActionsActionIdResponseBody200ActionFinished obj) GHC.Base.<> ((Data.Aeson..=) "id" (getVolumesIdActionsActionIdResponseBody200ActionId obj) GHC.Base.<> ((Data.Aeson..=) "progress" (getVolumesIdActionsActionIdResponseBody200ActionProgress obj) GHC.Base.<> ((Data.Aeson..=) "resources" (getVolumesIdActionsActionIdResponseBody200ActionResources obj) GHC.Base.<> ((Data.Aeson..=) "started" (getVolumesIdActionsActionIdResponseBody200ActionStarted obj) GHC.Base.<> (Data.Aeson..=) "status" (getVolumesIdActionsActionIdResponseBody200ActionStatus obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetVolumesIdActionsActionIdResponseBody200Action
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetVolumesIdActionsActionIdResponseBody200Action" (\obj -> (((((((GHC.Base.pure GetVolumesIdActionsActionIdResponseBody200Action GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "command")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "finished")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "started")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Defines the data type for the schema GetVolumesIdActionsActionIdResponseBody200ActionError
-- 
-- Error message for the Action if error occurred, otherwise null
data GetVolumesIdActionsActionIdResponseBody200ActionError = GetVolumesIdActionsActionIdResponseBody200ActionError {
  -- | code: Fixed machine readable code
  getVolumesIdActionsActionIdResponseBody200ActionErrorCode :: Data.Text.Internal.Text
  -- | message: Humanized error message
  , getVolumesIdActionsActionIdResponseBody200ActionErrorMessage :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetVolumesIdActionsActionIdResponseBody200ActionError
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "code" (getVolumesIdActionsActionIdResponseBody200ActionErrorCode obj) : (Data.Aeson..=) "message" (getVolumesIdActionsActionIdResponseBody200ActionErrorMessage obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "code" (getVolumesIdActionsActionIdResponseBody200ActionErrorCode obj) GHC.Base.<> (Data.Aeson..=) "message" (getVolumesIdActionsActionIdResponseBody200ActionErrorMessage obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetVolumesIdActionsActionIdResponseBody200ActionError
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetVolumesIdActionsActionIdResponseBody200ActionError" (\obj -> (GHC.Base.pure GetVolumesIdActionsActionIdResponseBody200ActionError GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Defines the data type for the schema GetVolumesIdActionsActionIdResponseBody200ActionResources
-- 
-- 
data GetVolumesIdActionsActionIdResponseBody200ActionResources = GetVolumesIdActionsActionIdResponseBody200ActionResources {
  -- | id: ID of the Resource
  getVolumesIdActionsActionIdResponseBody200ActionResourcesId :: GHC.Integer.Type.Integer
  -- | type: Type of resource referenced
  , getVolumesIdActionsActionIdResponseBody200ActionResourcesType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetVolumesIdActionsActionIdResponseBody200ActionResources
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (getVolumesIdActionsActionIdResponseBody200ActionResourcesId obj) : (Data.Aeson..=) "type" (getVolumesIdActionsActionIdResponseBody200ActionResourcesType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (getVolumesIdActionsActionIdResponseBody200ActionResourcesId obj) GHC.Base.<> (Data.Aeson..=) "type" (getVolumesIdActionsActionIdResponseBody200ActionResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetVolumesIdActionsActionIdResponseBody200ActionResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetVolumesIdActionsActionIdResponseBody200ActionResources" (\obj -> (GHC.Base.pure GetVolumesIdActionsActionIdResponseBody200ActionResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema GetVolumesIdActionsActionIdResponseBody200ActionStatus
-- 
-- Status of the Action
data GetVolumesIdActionsActionIdResponseBody200ActionStatus
    = GetVolumesIdActionsActionIdResponseBody200ActionStatusEnumOther Data.Aeson.Types.Internal.Value
    | GetVolumesIdActionsActionIdResponseBody200ActionStatusEnumTyped Data.Text.Internal.Text
    | GetVolumesIdActionsActionIdResponseBody200ActionStatusEnumStringError
    | GetVolumesIdActionsActionIdResponseBody200ActionStatusEnumStringRunning
    | GetVolumesIdActionsActionIdResponseBody200ActionStatusEnumStringSuccess
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetVolumesIdActionsActionIdResponseBody200ActionStatus
    where toJSON (GetVolumesIdActionsActionIdResponseBody200ActionStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetVolumesIdActionsActionIdResponseBody200ActionStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetVolumesIdActionsActionIdResponseBody200ActionStatusEnumStringError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error"
          toJSON (GetVolumesIdActionsActionIdResponseBody200ActionStatusEnumStringRunning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running"
          toJSON (GetVolumesIdActionsActionIdResponseBody200ActionStatusEnumStringSuccess) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success"
instance Data.Aeson.FromJSON GetVolumesIdActionsActionIdResponseBody200ActionStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error")
                                          then GetVolumesIdActionsActionIdResponseBody200ActionStatusEnumStringError
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running")
                                                then GetVolumesIdActionsActionIdResponseBody200ActionStatusEnumStringRunning
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success")
                                                      then GetVolumesIdActionsActionIdResponseBody200ActionStatusEnumStringSuccess
                                                      else GetVolumesIdActionsActionIdResponseBody200ActionStatusEnumOther val)
