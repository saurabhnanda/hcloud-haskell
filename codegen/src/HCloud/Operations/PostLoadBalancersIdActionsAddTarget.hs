-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation postLoadBalancers_Id_ActionsAddTarget
module HCloud.Operations.PostLoadBalancersIdActionsAddTarget where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > POST /load_balancers/{id}/actions/add_target
-- 
-- Adds a target to a Load Balancer.
-- 
-- \#\#\#\# Call specific error codes
-- 
-- | Code                                    | Description                                                                                           |
-- |-----------------------------------------|-------------------------------------------------------------------------------------------------------|
-- | \`cloud_resource_ip_not_allowed\`         | The IP you are trying to add as a target belongs to a Hetzner Cloud resource                          |
-- | \`ip_not_owned\`                          | The IP you are trying to add as a target is not owned by the Project owner                            |
-- | \`load_balancer_not_attached_to_network\` | The Load Balancer is not attached to a network                                                        |
-- | \`robot_unavailable\`                     | Robot was not available. The caller may retry the operation after a short delay.                      |
-- | \`server_not_attached_to_network\`        | The server you are trying to add as a target is not attached to the same network as the Load Balancer |
-- | \`target_already_defined\`                | The Load Balancer target you are trying to define is already defined                                  |
postLoadBalancers_Id_ActionsAddTarget :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer                                                                                                                          -- ^ id: ID of the Load Balancer
  -> GHC.Maybe.Maybe PostLoadBalancersIdActionsAddTargetRequestBody                                                                                    -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response PostLoadBalancersIdActionsAddTargetResponse))   -- ^ Monad containing the result of the operation
postLoadBalancers_Id_ActionsAddTarget config
                                      id
                                      body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostLoadBalancersIdActionsAddTargetResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostLoadBalancersIdActionsAddTargetResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             PostLoadBalancersIdActionsAddTargetResponseBody201)
                                                                                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/load_balancers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/add_target"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /load_balancers/{id}/actions/add_target
-- 
-- The same as 'postLoadBalancers_Id_ActionsAddTarget' but returns the raw 'Data.ByteString.Char8.ByteString'
postLoadBalancers_Id_ActionsAddTargetRaw :: forall m s . (HCloud.Common.MonadHTTP m,
                                                          HCloud.Common.SecurityScheme s) =>
                                            HCloud.Common.Configuration s ->
                                            GHC.Integer.Type.Integer ->
                                            GHC.Maybe.Maybe PostLoadBalancersIdActionsAddTargetRequestBody ->
                                            m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                  (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postLoadBalancers_Id_ActionsAddTargetRaw config
                                         id
                                         body = GHC.Base.id (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/load_balancers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/add_target"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /load_balancers/{id}/actions/add_target
-- 
-- Monadic version of 'postLoadBalancers_Id_ActionsAddTarget' (use with 'HCloud.Common.runWithConfiguration')
postLoadBalancers_Id_ActionsAddTargetM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                        HCloud.Common.SecurityScheme s) =>
                                          GHC.Integer.Type.Integer ->
                                          GHC.Maybe.Maybe PostLoadBalancersIdActionsAddTargetRequestBody ->
                                          Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                             m
                                                                             (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                                 (Network.HTTP.Client.Types.Response PostLoadBalancersIdActionsAddTargetResponse))
postLoadBalancers_Id_ActionsAddTargetM id
                                       body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostLoadBalancersIdActionsAddTargetResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostLoadBalancersIdActionsAddTargetResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              PostLoadBalancersIdActionsAddTargetResponseBody201)
                                                                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/load_balancers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/add_target"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /load_balancers/{id}/actions/add_target
-- 
-- Monadic version of 'postLoadBalancers_Id_ActionsAddTargetRaw' (use with 'HCloud.Common.runWithConfiguration')
postLoadBalancers_Id_ActionsAddTargetRawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                           HCloud.Common.SecurityScheme s) =>
                                             GHC.Integer.Type.Integer ->
                                             GHC.Maybe.Maybe PostLoadBalancersIdActionsAddTargetRequestBody ->
                                             Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                                m
                                                                                (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                                    (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postLoadBalancers_Id_ActionsAddTargetRawM id
                                          body = GHC.Base.id (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/load_balancers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/add_target"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema postLoadBalancers_Id_ActionsAddTargetRequestBody
-- 
-- 
data PostLoadBalancersIdActionsAddTargetRequestBody = PostLoadBalancersIdActionsAddTargetRequestBody {
  -- | ip: IP targets where the traffic should be routed through. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well.
  postLoadBalancersIdActionsAddTargetRequestBodyIp :: (GHC.Maybe.Maybe PostLoadBalancersIdActionsAddTargetRequestBodyIp)
  -- | label_selector: Configuration for label selector targets, required if type is \`label_selector\`
  , postLoadBalancersIdActionsAddTargetRequestBodyLabelSelector :: (GHC.Maybe.Maybe PostLoadBalancersIdActionsAddTargetRequestBodyLabelSelector)
  -- | server: Configuration for type Server, required if type is \`server\`
  , postLoadBalancersIdActionsAddTargetRequestBodyServer :: (GHC.Maybe.Maybe PostLoadBalancersIdActionsAddTargetRequestBodyServer)
  -- | type: Type of the resource
  , postLoadBalancersIdActionsAddTargetRequestBodyType :: PostLoadBalancersIdActionsAddTargetRequestBodyType
  -- | use_private_ip: Use the private network IP instead of the public IP of the Server, requires the Server and Load Balancer to be in the same network. Default value is false.
  , postLoadBalancersIdActionsAddTargetRequestBodyUsePrivateIp :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersIdActionsAddTargetRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "ip" (postLoadBalancersIdActionsAddTargetRequestBodyIp obj) : (Data.Aeson..=) "label_selector" (postLoadBalancersIdActionsAddTargetRequestBodyLabelSelector obj) : (Data.Aeson..=) "server" (postLoadBalancersIdActionsAddTargetRequestBodyServer obj) : (Data.Aeson..=) "type" (postLoadBalancersIdActionsAddTargetRequestBodyType obj) : (Data.Aeson..=) "use_private_ip" (postLoadBalancersIdActionsAddTargetRequestBodyUsePrivateIp obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "ip" (postLoadBalancersIdActionsAddTargetRequestBodyIp obj) GHC.Base.<> ((Data.Aeson..=) "label_selector" (postLoadBalancersIdActionsAddTargetRequestBodyLabelSelector obj) GHC.Base.<> ((Data.Aeson..=) "server" (postLoadBalancersIdActionsAddTargetRequestBodyServer obj) GHC.Base.<> ((Data.Aeson..=) "type" (postLoadBalancersIdActionsAddTargetRequestBodyType obj) GHC.Base.<> (Data.Aeson..=) "use_private_ip" (postLoadBalancersIdActionsAddTargetRequestBodyUsePrivateIp obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersIdActionsAddTargetRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersIdActionsAddTargetRequestBody" (\obj -> ((((GHC.Base.pure PostLoadBalancersIdActionsAddTargetRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label_selector")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "server")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "use_private_ip"))
-- | Defines the data type for the schema postLoadBalancers_Id_ActionsAddTargetRequestBodyIp
-- 
-- IP targets where the traffic should be routed through. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well.
data PostLoadBalancersIdActionsAddTargetRequestBodyIp = PostLoadBalancersIdActionsAddTargetRequestBodyIp {
  -- | ip: IP of a server that belongs to the same customer (public IPv4\/IPv6) or private IP in a Subnetwork type vswitch.
  postLoadBalancersIdActionsAddTargetRequestBodyIpIp :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersIdActionsAddTargetRequestBodyIp
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "ip" (postLoadBalancersIdActionsAddTargetRequestBodyIpIp obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "ip" (postLoadBalancersIdActionsAddTargetRequestBodyIpIp obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersIdActionsAddTargetRequestBodyIp
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersIdActionsAddTargetRequestBodyIp" (\obj -> GHC.Base.pure PostLoadBalancersIdActionsAddTargetRequestBodyIp GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ip"))
-- | Defines the data type for the schema postLoadBalancers_Id_ActionsAddTargetRequestBodyLabel_selector
-- 
-- Configuration for label selector targets, required if type is \`label_selector\`
data PostLoadBalancersIdActionsAddTargetRequestBodyLabelSelector = PostLoadBalancersIdActionsAddTargetRequestBodyLabelSelector {
  -- | selector: Label selector
  postLoadBalancersIdActionsAddTargetRequestBodyLabelSelectorSelector :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersIdActionsAddTargetRequestBodyLabelSelector
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "selector" (postLoadBalancersIdActionsAddTargetRequestBodyLabelSelectorSelector obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "selector" (postLoadBalancersIdActionsAddTargetRequestBodyLabelSelectorSelector obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersIdActionsAddTargetRequestBodyLabelSelector
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersIdActionsAddTargetRequestBodyLabelSelector" (\obj -> GHC.Base.pure PostLoadBalancersIdActionsAddTargetRequestBodyLabelSelector GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "selector"))
-- | Defines the data type for the schema postLoadBalancers_Id_ActionsAddTargetRequestBodyServer
-- 
-- Configuration for type Server, required if type is \`server\`
data PostLoadBalancersIdActionsAddTargetRequestBodyServer = PostLoadBalancersIdActionsAddTargetRequestBodyServer {
  -- | id: ID of the Server
  postLoadBalancersIdActionsAddTargetRequestBodyServerId :: GHC.Types.Double
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersIdActionsAddTargetRequestBodyServer
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (postLoadBalancersIdActionsAddTargetRequestBodyServerId obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (postLoadBalancersIdActionsAddTargetRequestBodyServerId obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersIdActionsAddTargetRequestBodyServer
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersIdActionsAddTargetRequestBodyServer" (\obj -> GHC.Base.pure PostLoadBalancersIdActionsAddTargetRequestBodyServer GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id"))
-- | Defines the enum schema postLoadBalancers_Id_ActionsAddTargetRequestBodyType
-- 
-- Type of the resource
data PostLoadBalancersIdActionsAddTargetRequestBodyType
    = PostLoadBalancersIdActionsAddTargetRequestBodyTypeEnumOther Data.Aeson.Types.Internal.Value
    | PostLoadBalancersIdActionsAddTargetRequestBodyTypeEnumTyped Data.Text.Internal.Text
    | PostLoadBalancersIdActionsAddTargetRequestBodyTypeEnumStringIp
    | PostLoadBalancersIdActionsAddTargetRequestBodyTypeEnumStringLabelSelector
    | PostLoadBalancersIdActionsAddTargetRequestBodyTypeEnumStringServer
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersIdActionsAddTargetRequestBodyType
    where toJSON (PostLoadBalancersIdActionsAddTargetRequestBodyTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostLoadBalancersIdActionsAddTargetRequestBodyTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostLoadBalancersIdActionsAddTargetRequestBodyTypeEnumStringIp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ip"
          toJSON (PostLoadBalancersIdActionsAddTargetRequestBodyTypeEnumStringLabelSelector) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "label_selector"
          toJSON (PostLoadBalancersIdActionsAddTargetRequestBodyTypeEnumStringServer) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "server"
instance Data.Aeson.FromJSON PostLoadBalancersIdActionsAddTargetRequestBodyType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ip")
                                          then PostLoadBalancersIdActionsAddTargetRequestBodyTypeEnumStringIp
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "label_selector")
                                                then PostLoadBalancersIdActionsAddTargetRequestBodyTypeEnumStringLabelSelector
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "server")
                                                      then PostLoadBalancersIdActionsAddTargetRequestBodyTypeEnumStringServer
                                                      else PostLoadBalancersIdActionsAddTargetRequestBodyTypeEnumOther val)
-- | Represents a response of the operation 'postLoadBalancers_Id_ActionsAddTarget'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostLoadBalancersIdActionsAddTargetResponseError' is used.
data PostLoadBalancersIdActionsAddTargetResponse =                                                     
   PostLoadBalancersIdActionsAddTargetResponseError GHC.Base.String                                    -- ^ Means either no matching case available or a parse error
  | PostLoadBalancersIdActionsAddTargetResponse201 PostLoadBalancersIdActionsAddTargetResponseBody201  -- ^ The \`action\` key contains the \`add_target\` Action
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema PostLoadBalancersIdActionsAddTargetResponseBody201
-- 
-- 
data PostLoadBalancersIdActionsAddTargetResponseBody201 = PostLoadBalancersIdActionsAddTargetResponseBody201 {
  -- | action
  postLoadBalancersIdActionsAddTargetResponseBody201Action :: PostLoadBalancersIdActionsAddTargetResponseBody201Action
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersIdActionsAddTargetResponseBody201
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "action" (postLoadBalancersIdActionsAddTargetResponseBody201Action obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "action" (postLoadBalancersIdActionsAddTargetResponseBody201Action obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersIdActionsAddTargetResponseBody201
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersIdActionsAddTargetResponseBody201" (\obj -> GHC.Base.pure PostLoadBalancersIdActionsAddTargetResponseBody201 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "action"))
-- | Defines the data type for the schema PostLoadBalancersIdActionsAddTargetResponseBody201Action
-- 
-- 
data PostLoadBalancersIdActionsAddTargetResponseBody201Action = PostLoadBalancersIdActionsAddTargetResponseBody201Action {
  -- | command: Command executed in the Action
  postLoadBalancersIdActionsAddTargetResponseBody201ActionCommand :: Data.Text.Internal.Text
  -- | error: Error message for the Action if error occurred, otherwise null
  , postLoadBalancersIdActionsAddTargetResponseBody201ActionError :: PostLoadBalancersIdActionsAddTargetResponseBody201ActionError
  -- | finished: Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
  , postLoadBalancersIdActionsAddTargetResponseBody201ActionFinished :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , postLoadBalancersIdActionsAddTargetResponseBody201ActionId :: GHC.Integer.Type.Integer
  -- | progress: Progress of Action in percent
  , postLoadBalancersIdActionsAddTargetResponseBody201ActionProgress :: GHC.Types.Double
  -- | resources: Resources the Action relates to
  , postLoadBalancersIdActionsAddTargetResponseBody201ActionResources :: ([] PostLoadBalancersIdActionsAddTargetResponseBody201ActionResources)
  -- | started: Point in time when the Action was started (in ISO-8601 format)
  , postLoadBalancersIdActionsAddTargetResponseBody201ActionStarted :: Data.Text.Internal.Text
  -- | status: Status of the Action
  , postLoadBalancersIdActionsAddTargetResponseBody201ActionStatus :: PostLoadBalancersIdActionsAddTargetResponseBody201ActionStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersIdActionsAddTargetResponseBody201Action
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "command" (postLoadBalancersIdActionsAddTargetResponseBody201ActionCommand obj) : (Data.Aeson..=) "error" (postLoadBalancersIdActionsAddTargetResponseBody201ActionError obj) : (Data.Aeson..=) "finished" (postLoadBalancersIdActionsAddTargetResponseBody201ActionFinished obj) : (Data.Aeson..=) "id" (postLoadBalancersIdActionsAddTargetResponseBody201ActionId obj) : (Data.Aeson..=) "progress" (postLoadBalancersIdActionsAddTargetResponseBody201ActionProgress obj) : (Data.Aeson..=) "resources" (postLoadBalancersIdActionsAddTargetResponseBody201ActionResources obj) : (Data.Aeson..=) "started" (postLoadBalancersIdActionsAddTargetResponseBody201ActionStarted obj) : (Data.Aeson..=) "status" (postLoadBalancersIdActionsAddTargetResponseBody201ActionStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "command" (postLoadBalancersIdActionsAddTargetResponseBody201ActionCommand obj) GHC.Base.<> ((Data.Aeson..=) "error" (postLoadBalancersIdActionsAddTargetResponseBody201ActionError obj) GHC.Base.<> ((Data.Aeson..=) "finished" (postLoadBalancersIdActionsAddTargetResponseBody201ActionFinished obj) GHC.Base.<> ((Data.Aeson..=) "id" (postLoadBalancersIdActionsAddTargetResponseBody201ActionId obj) GHC.Base.<> ((Data.Aeson..=) "progress" (postLoadBalancersIdActionsAddTargetResponseBody201ActionProgress obj) GHC.Base.<> ((Data.Aeson..=) "resources" (postLoadBalancersIdActionsAddTargetResponseBody201ActionResources obj) GHC.Base.<> ((Data.Aeson..=) "started" (postLoadBalancersIdActionsAddTargetResponseBody201ActionStarted obj) GHC.Base.<> (Data.Aeson..=) "status" (postLoadBalancersIdActionsAddTargetResponseBody201ActionStatus obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersIdActionsAddTargetResponseBody201Action
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersIdActionsAddTargetResponseBody201Action" (\obj -> (((((((GHC.Base.pure PostLoadBalancersIdActionsAddTargetResponseBody201Action GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "command")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "finished")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "started")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Defines the data type for the schema PostLoadBalancersIdActionsAddTargetResponseBody201ActionError
-- 
-- Error message for the Action if error occurred, otherwise null
data PostLoadBalancersIdActionsAddTargetResponseBody201ActionError = PostLoadBalancersIdActionsAddTargetResponseBody201ActionError {
  -- | code: Fixed machine readable code
  postLoadBalancersIdActionsAddTargetResponseBody201ActionErrorCode :: Data.Text.Internal.Text
  -- | message: Humanized error message
  , postLoadBalancersIdActionsAddTargetResponseBody201ActionErrorMessage :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersIdActionsAddTargetResponseBody201ActionError
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "code" (postLoadBalancersIdActionsAddTargetResponseBody201ActionErrorCode obj) : (Data.Aeson..=) "message" (postLoadBalancersIdActionsAddTargetResponseBody201ActionErrorMessage obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "code" (postLoadBalancersIdActionsAddTargetResponseBody201ActionErrorCode obj) GHC.Base.<> (Data.Aeson..=) "message" (postLoadBalancersIdActionsAddTargetResponseBody201ActionErrorMessage obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersIdActionsAddTargetResponseBody201ActionError
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersIdActionsAddTargetResponseBody201ActionError" (\obj -> (GHC.Base.pure PostLoadBalancersIdActionsAddTargetResponseBody201ActionError GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Defines the data type for the schema PostLoadBalancersIdActionsAddTargetResponseBody201ActionResources
-- 
-- 
data PostLoadBalancersIdActionsAddTargetResponseBody201ActionResources = PostLoadBalancersIdActionsAddTargetResponseBody201ActionResources {
  -- | id: ID of the Resource
  postLoadBalancersIdActionsAddTargetResponseBody201ActionResourcesId :: GHC.Integer.Type.Integer
  -- | type: Type of resource referenced
  , postLoadBalancersIdActionsAddTargetResponseBody201ActionResourcesType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersIdActionsAddTargetResponseBody201ActionResources
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (postLoadBalancersIdActionsAddTargetResponseBody201ActionResourcesId obj) : (Data.Aeson..=) "type" (postLoadBalancersIdActionsAddTargetResponseBody201ActionResourcesType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (postLoadBalancersIdActionsAddTargetResponseBody201ActionResourcesId obj) GHC.Base.<> (Data.Aeson..=) "type" (postLoadBalancersIdActionsAddTargetResponseBody201ActionResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersIdActionsAddTargetResponseBody201ActionResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersIdActionsAddTargetResponseBody201ActionResources" (\obj -> (GHC.Base.pure PostLoadBalancersIdActionsAddTargetResponseBody201ActionResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema PostLoadBalancersIdActionsAddTargetResponseBody201ActionStatus
-- 
-- Status of the Action
data PostLoadBalancersIdActionsAddTargetResponseBody201ActionStatus
    = PostLoadBalancersIdActionsAddTargetResponseBody201ActionStatusEnumOther Data.Aeson.Types.Internal.Value
    | PostLoadBalancersIdActionsAddTargetResponseBody201ActionStatusEnumTyped Data.Text.Internal.Text
    | PostLoadBalancersIdActionsAddTargetResponseBody201ActionStatusEnumStringError
    | PostLoadBalancersIdActionsAddTargetResponseBody201ActionStatusEnumStringRunning
    | PostLoadBalancersIdActionsAddTargetResponseBody201ActionStatusEnumStringSuccess
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersIdActionsAddTargetResponseBody201ActionStatus
    where toJSON (PostLoadBalancersIdActionsAddTargetResponseBody201ActionStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostLoadBalancersIdActionsAddTargetResponseBody201ActionStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostLoadBalancersIdActionsAddTargetResponseBody201ActionStatusEnumStringError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error"
          toJSON (PostLoadBalancersIdActionsAddTargetResponseBody201ActionStatusEnumStringRunning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running"
          toJSON (PostLoadBalancersIdActionsAddTargetResponseBody201ActionStatusEnumStringSuccess) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success"
instance Data.Aeson.FromJSON PostLoadBalancersIdActionsAddTargetResponseBody201ActionStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error")
                                          then PostLoadBalancersIdActionsAddTargetResponseBody201ActionStatusEnumStringError
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running")
                                                then PostLoadBalancersIdActionsAddTargetResponseBody201ActionStatusEnumStringRunning
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success")
                                                      then PostLoadBalancersIdActionsAddTargetResponseBody201ActionStatusEnumStringSuccess
                                                      else PostLoadBalancersIdActionsAddTargetResponseBody201ActionStatusEnumOther val)
