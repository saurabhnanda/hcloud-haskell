-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation getIsos_Id_
module HCloud.Operations.GetIsosId_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > GET /isos/{id}
-- 
-- Returns a specific ISO object.
getIsos_Id_ :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer                                                                                                -- ^ id: ID of the ISO
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response GetIsosIdResponse))   -- ^ Monad containing the result of the operation
getIsos_Id_ config
            id = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetIsosIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetIsosIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                             GetIsosIdResponseBody200)
                                                                                                                                                                    | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/isos/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) [])
-- | > GET /isos/{id}
-- 
-- The same as 'getIsos_Id_' but returns the raw 'Data.ByteString.Char8.ByteString'
getIsos_Id_Raw :: forall m s . (HCloud.Common.MonadHTTP m,
                                HCloud.Common.SecurityScheme s) =>
                  HCloud.Common.Configuration s ->
                  GHC.Integer.Type.Integer ->
                  m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                        (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getIsos_Id_Raw config
               id = GHC.Base.id (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/isos/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) [])
-- | > GET /isos/{id}
-- 
-- Monadic version of 'getIsos_Id_' (use with 'HCloud.Common.runWithConfiguration')
getIsos_Id_M :: forall m s . (HCloud.Common.MonadHTTP m,
                              HCloud.Common.SecurityScheme s) =>
                GHC.Integer.Type.Integer ->
                Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                   m
                                                   (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                       (Network.HTTP.Client.Types.Response GetIsosIdResponse))
getIsos_Id_M id = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetIsosIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetIsosIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                              GetIsosIdResponseBody200)
                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/isos/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) [])
-- | > GET /isos/{id}
-- 
-- Monadic version of 'getIsos_Id_Raw' (use with 'HCloud.Common.runWithConfiguration')
getIsos_Id_RawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                 HCloud.Common.SecurityScheme s) =>
                   GHC.Integer.Type.Integer ->
                   Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                      m
                                                      (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                          (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getIsos_Id_RawM id = GHC.Base.id (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/isos/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) [])
-- | Represents a response of the operation 'getIsos_Id_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetIsosIdResponseError' is used.
data GetIsosIdResponse =                           
   GetIsosIdResponseError GHC.Base.String          -- ^ Means either no matching case available or a parse error
  | GetIsosIdResponse200 GetIsosIdResponseBody200  -- ^ The \`iso\` key in the reply contains an array of ISO objects with this structure
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema GetIsosIdResponseBody200
-- 
-- 
data GetIsosIdResponseBody200 = GetIsosIdResponseBody200 {
  -- | iso
  getIsosIdResponseBody200Iso :: GetIsosIdResponseBody200Iso
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetIsosIdResponseBody200
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "iso" (getIsosIdResponseBody200Iso obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "iso" (getIsosIdResponseBody200Iso obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetIsosIdResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetIsosIdResponseBody200" (\obj -> GHC.Base.pure GetIsosIdResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "iso"))
-- | Defines the data type for the schema GetIsosIdResponseBody200Iso
-- 
-- 
data GetIsosIdResponseBody200Iso = GetIsosIdResponseBody200Iso {
  -- | deprecated: ISO 8601 timestamp of deprecation, null if ISO is still available. After the deprecation time it will no longer be possible to attach the ISO to Servers.
  getIsosIdResponseBody200IsoDeprecated :: Data.Text.Internal.Text
  -- | description: Description of the ISO
  , getIsosIdResponseBody200IsoDescription :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , getIsosIdResponseBody200IsoId :: GHC.Integer.Type.Integer
  -- | name: Unique identifier of the ISO. Only set for public ISOs
  , getIsosIdResponseBody200IsoName :: Data.Text.Internal.Text
  -- | type: Type of the ISO
  , getIsosIdResponseBody200IsoType :: GetIsosIdResponseBody200IsoType
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetIsosIdResponseBody200Iso
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "deprecated" (getIsosIdResponseBody200IsoDeprecated obj) : (Data.Aeson..=) "description" (getIsosIdResponseBody200IsoDescription obj) : (Data.Aeson..=) "id" (getIsosIdResponseBody200IsoId obj) : (Data.Aeson..=) "name" (getIsosIdResponseBody200IsoName obj) : (Data.Aeson..=) "type" (getIsosIdResponseBody200IsoType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "deprecated" (getIsosIdResponseBody200IsoDeprecated obj) GHC.Base.<> ((Data.Aeson..=) "description" (getIsosIdResponseBody200IsoDescription obj) GHC.Base.<> ((Data.Aeson..=) "id" (getIsosIdResponseBody200IsoId obj) GHC.Base.<> ((Data.Aeson..=) "name" (getIsosIdResponseBody200IsoName obj) GHC.Base.<> (Data.Aeson..=) "type" (getIsosIdResponseBody200IsoType obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON GetIsosIdResponseBody200Iso
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetIsosIdResponseBody200Iso" (\obj -> ((((GHC.Base.pure GetIsosIdResponseBody200Iso GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "deprecated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema GetIsosIdResponseBody200IsoType
-- 
-- Type of the ISO
data GetIsosIdResponseBody200IsoType
    = GetIsosIdResponseBody200IsoTypeEnumOther Data.Aeson.Types.Internal.Value
    | GetIsosIdResponseBody200IsoTypeEnumTyped Data.Text.Internal.Text
    | GetIsosIdResponseBody200IsoTypeEnumStringPrivate
    | GetIsosIdResponseBody200IsoTypeEnumStringPublic
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetIsosIdResponseBody200IsoType
    where toJSON (GetIsosIdResponseBody200IsoTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetIsosIdResponseBody200IsoTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetIsosIdResponseBody200IsoTypeEnumStringPrivate) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "private"
          toJSON (GetIsosIdResponseBody200IsoTypeEnumStringPublic) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "public"
instance Data.Aeson.FromJSON GetIsosIdResponseBody200IsoType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "private")
                                          then GetIsosIdResponseBody200IsoTypeEnumStringPrivate
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "public")
                                                then GetIsosIdResponseBody200IsoTypeEnumStringPublic
                                                else GetIsosIdResponseBody200IsoTypeEnumOther val)
