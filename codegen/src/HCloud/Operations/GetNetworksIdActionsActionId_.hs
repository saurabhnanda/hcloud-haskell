-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation getNetworks_Id_Actions_ActionId_
module HCloud.Operations.GetNetworksIdActionsActionId_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > GET /networks/{id}/actions/{action_id}
-- 
-- Returns a specific Action for a Network.
getNetworks_Id_Actions_ActionId_ :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer                                                                                                                     -- ^ id: ID of the Network
  -> GHC.Integer.Type.Integer                                                                                                                     -- ^ action_id: ID of the Action
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response GetNetworksIdActionsActionIdResponse))     -- ^ Monad containing the result of the operation
getNetworks_Id_Actions_ActionId_ config
                                 id
                                 actionId = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetNetworksIdActionsActionIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetNetworksIdActionsActionIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              GetNetworksIdActionsActionIdResponseBody200)
                                                                                                                                                                                                                  | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/networks/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ("/actions/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel actionId)) GHC.Base.++ ""))))) [])
-- | > GET /networks/{id}/actions/{action_id}
-- 
-- The same as 'getNetworks_Id_Actions_ActionId_' but returns the raw 'Data.ByteString.Char8.ByteString'
getNetworks_Id_Actions_ActionId_Raw :: forall m s . (HCloud.Common.MonadHTTP m,
                                                     HCloud.Common.SecurityScheme s) =>
                                       HCloud.Common.Configuration s ->
                                       GHC.Integer.Type.Integer ->
                                       GHC.Integer.Type.Integer ->
                                       m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                             (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getNetworks_Id_Actions_ActionId_Raw config
                                    id
                                    actionId = GHC.Base.id (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/networks/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ("/actions/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel actionId)) GHC.Base.++ ""))))) [])
-- | > GET /networks/{id}/actions/{action_id}
-- 
-- Monadic version of 'getNetworks_Id_Actions_ActionId_' (use with 'HCloud.Common.runWithConfiguration')
getNetworks_Id_Actions_ActionId_M :: forall m s . (HCloud.Common.MonadHTTP m,
                                                   HCloud.Common.SecurityScheme s) =>
                                     GHC.Integer.Type.Integer ->
                                     GHC.Integer.Type.Integer ->
                                     Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                        m
                                                                        (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                            (Network.HTTP.Client.Types.Response GetNetworksIdActionsActionIdResponse))
getNetworks_Id_Actions_ActionId_M id
                                  actionId = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetNetworksIdActionsActionIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetNetworksIdActionsActionIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               GetNetworksIdActionsActionIdResponseBody200)
                                                                                                                                                                                                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/networks/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ("/actions/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel actionId)) GHC.Base.++ ""))))) [])
-- | > GET /networks/{id}/actions/{action_id}
-- 
-- Monadic version of 'getNetworks_Id_Actions_ActionId_Raw' (use with 'HCloud.Common.runWithConfiguration')
getNetworks_Id_Actions_ActionId_RawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                      HCloud.Common.SecurityScheme s) =>
                                        GHC.Integer.Type.Integer ->
                                        GHC.Integer.Type.Integer ->
                                        Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                           m
                                                                           (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                               (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getNetworks_Id_Actions_ActionId_RawM id
                                     actionId = GHC.Base.id (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/networks/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ("/actions/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel actionId)) GHC.Base.++ ""))))) [])
-- | Represents a response of the operation 'getNetworks_Id_Actions_ActionId_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetNetworksIdActionsActionIdResponseError' is used.
data GetNetworksIdActionsActionIdResponse =                                              
   GetNetworksIdActionsActionIdResponseError GHC.Base.String                             -- ^ Means either no matching case available or a parse error
  | GetNetworksIdActionsActionIdResponse200 GetNetworksIdActionsActionIdResponseBody200  -- ^ The \`action\` key contains the Network Action
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema GetNetworksIdActionsActionIdResponseBody200
-- 
-- 
data GetNetworksIdActionsActionIdResponseBody200 = GetNetworksIdActionsActionIdResponseBody200 {
  -- | action
  getNetworksIdActionsActionIdResponseBody200Action :: GetNetworksIdActionsActionIdResponseBody200Action
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetNetworksIdActionsActionIdResponseBody200
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "action" (getNetworksIdActionsActionIdResponseBody200Action obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "action" (getNetworksIdActionsActionIdResponseBody200Action obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetNetworksIdActionsActionIdResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNetworksIdActionsActionIdResponseBody200" (\obj -> GHC.Base.pure GetNetworksIdActionsActionIdResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "action"))
-- | Defines the data type for the schema GetNetworksIdActionsActionIdResponseBody200Action
-- 
-- 
data GetNetworksIdActionsActionIdResponseBody200Action = GetNetworksIdActionsActionIdResponseBody200Action {
  -- | command: Command executed in the Action
  getNetworksIdActionsActionIdResponseBody200ActionCommand :: Data.Text.Internal.Text
  -- | error: Error message for the Action if error occurred, otherwise null
  , getNetworksIdActionsActionIdResponseBody200ActionError :: GetNetworksIdActionsActionIdResponseBody200ActionError
  -- | finished: Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
  , getNetworksIdActionsActionIdResponseBody200ActionFinished :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , getNetworksIdActionsActionIdResponseBody200ActionId :: GHC.Integer.Type.Integer
  -- | progress: Progress of Action in percent
  , getNetworksIdActionsActionIdResponseBody200ActionProgress :: GHC.Types.Double
  -- | resources: Resources the Action relates to
  , getNetworksIdActionsActionIdResponseBody200ActionResources :: ([] GetNetworksIdActionsActionIdResponseBody200ActionResources)
  -- | started: Point in time when the Action was started (in ISO-8601 format)
  , getNetworksIdActionsActionIdResponseBody200ActionStarted :: Data.Text.Internal.Text
  -- | status: Status of the Action
  , getNetworksIdActionsActionIdResponseBody200ActionStatus :: GetNetworksIdActionsActionIdResponseBody200ActionStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetNetworksIdActionsActionIdResponseBody200Action
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "command" (getNetworksIdActionsActionIdResponseBody200ActionCommand obj) : (Data.Aeson..=) "error" (getNetworksIdActionsActionIdResponseBody200ActionError obj) : (Data.Aeson..=) "finished" (getNetworksIdActionsActionIdResponseBody200ActionFinished obj) : (Data.Aeson..=) "id" (getNetworksIdActionsActionIdResponseBody200ActionId obj) : (Data.Aeson..=) "progress" (getNetworksIdActionsActionIdResponseBody200ActionProgress obj) : (Data.Aeson..=) "resources" (getNetworksIdActionsActionIdResponseBody200ActionResources obj) : (Data.Aeson..=) "started" (getNetworksIdActionsActionIdResponseBody200ActionStarted obj) : (Data.Aeson..=) "status" (getNetworksIdActionsActionIdResponseBody200ActionStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "command" (getNetworksIdActionsActionIdResponseBody200ActionCommand obj) GHC.Base.<> ((Data.Aeson..=) "error" (getNetworksIdActionsActionIdResponseBody200ActionError obj) GHC.Base.<> ((Data.Aeson..=) "finished" (getNetworksIdActionsActionIdResponseBody200ActionFinished obj) GHC.Base.<> ((Data.Aeson..=) "id" (getNetworksIdActionsActionIdResponseBody200ActionId obj) GHC.Base.<> ((Data.Aeson..=) "progress" (getNetworksIdActionsActionIdResponseBody200ActionProgress obj) GHC.Base.<> ((Data.Aeson..=) "resources" (getNetworksIdActionsActionIdResponseBody200ActionResources obj) GHC.Base.<> ((Data.Aeson..=) "started" (getNetworksIdActionsActionIdResponseBody200ActionStarted obj) GHC.Base.<> (Data.Aeson..=) "status" (getNetworksIdActionsActionIdResponseBody200ActionStatus obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetNetworksIdActionsActionIdResponseBody200Action
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNetworksIdActionsActionIdResponseBody200Action" (\obj -> (((((((GHC.Base.pure GetNetworksIdActionsActionIdResponseBody200Action GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "command")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "finished")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "started")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Defines the data type for the schema GetNetworksIdActionsActionIdResponseBody200ActionError
-- 
-- Error message for the Action if error occurred, otherwise null
data GetNetworksIdActionsActionIdResponseBody200ActionError = GetNetworksIdActionsActionIdResponseBody200ActionError {
  -- | code: Fixed machine readable code
  getNetworksIdActionsActionIdResponseBody200ActionErrorCode :: Data.Text.Internal.Text
  -- | message: Humanized error message
  , getNetworksIdActionsActionIdResponseBody200ActionErrorMessage :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetNetworksIdActionsActionIdResponseBody200ActionError
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "code" (getNetworksIdActionsActionIdResponseBody200ActionErrorCode obj) : (Data.Aeson..=) "message" (getNetworksIdActionsActionIdResponseBody200ActionErrorMessage obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "code" (getNetworksIdActionsActionIdResponseBody200ActionErrorCode obj) GHC.Base.<> (Data.Aeson..=) "message" (getNetworksIdActionsActionIdResponseBody200ActionErrorMessage obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetNetworksIdActionsActionIdResponseBody200ActionError
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNetworksIdActionsActionIdResponseBody200ActionError" (\obj -> (GHC.Base.pure GetNetworksIdActionsActionIdResponseBody200ActionError GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Defines the data type for the schema GetNetworksIdActionsActionIdResponseBody200ActionResources
-- 
-- 
data GetNetworksIdActionsActionIdResponseBody200ActionResources = GetNetworksIdActionsActionIdResponseBody200ActionResources {
  -- | id: ID of the Resource
  getNetworksIdActionsActionIdResponseBody200ActionResourcesId :: GHC.Integer.Type.Integer
  -- | type: Type of resource referenced
  , getNetworksIdActionsActionIdResponseBody200ActionResourcesType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetNetworksIdActionsActionIdResponseBody200ActionResources
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (getNetworksIdActionsActionIdResponseBody200ActionResourcesId obj) : (Data.Aeson..=) "type" (getNetworksIdActionsActionIdResponseBody200ActionResourcesType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (getNetworksIdActionsActionIdResponseBody200ActionResourcesId obj) GHC.Base.<> (Data.Aeson..=) "type" (getNetworksIdActionsActionIdResponseBody200ActionResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetNetworksIdActionsActionIdResponseBody200ActionResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetNetworksIdActionsActionIdResponseBody200ActionResources" (\obj -> (GHC.Base.pure GetNetworksIdActionsActionIdResponseBody200ActionResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema GetNetworksIdActionsActionIdResponseBody200ActionStatus
-- 
-- Status of the Action
data GetNetworksIdActionsActionIdResponseBody200ActionStatus
    = GetNetworksIdActionsActionIdResponseBody200ActionStatusEnumOther Data.Aeson.Types.Internal.Value
    | GetNetworksIdActionsActionIdResponseBody200ActionStatusEnumTyped Data.Text.Internal.Text
    | GetNetworksIdActionsActionIdResponseBody200ActionStatusEnumStringError
    | GetNetworksIdActionsActionIdResponseBody200ActionStatusEnumStringRunning
    | GetNetworksIdActionsActionIdResponseBody200ActionStatusEnumStringSuccess
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetNetworksIdActionsActionIdResponseBody200ActionStatus
    where toJSON (GetNetworksIdActionsActionIdResponseBody200ActionStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetNetworksIdActionsActionIdResponseBody200ActionStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetNetworksIdActionsActionIdResponseBody200ActionStatusEnumStringError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error"
          toJSON (GetNetworksIdActionsActionIdResponseBody200ActionStatusEnumStringRunning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running"
          toJSON (GetNetworksIdActionsActionIdResponseBody200ActionStatusEnumStringSuccess) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success"
instance Data.Aeson.FromJSON GetNetworksIdActionsActionIdResponseBody200ActionStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error")
                                          then GetNetworksIdActionsActionIdResponseBody200ActionStatusEnumStringError
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running")
                                                then GetNetworksIdActionsActionIdResponseBody200ActionStatusEnumStringRunning
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success")
                                                      then GetNetworksIdActionsActionIdResponseBody200ActionStatusEnumStringSuccess
                                                      else GetNetworksIdActionsActionIdResponseBody200ActionStatusEnumOther val)
