-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postServers
module HCloud.Operations.PostServers where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > POST /servers
-- 
-- Creates a new Server. Returns preliminary information about the Server as well as an Action that covers progress of creation.
postServers :: forall m . HCloud.Common.MonadHTTP m => GHC.Maybe.Maybe PostServersRequestBody -- ^ The request body to send
  -> HCloud.Common.HttpT m (Network.HTTP.Client.Types.Response PostServersResponse) -- ^ Monadic computation which returns the result of the operation
postServers body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostServersResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostServersResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                    PostServersResponseBody201)
                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/servers") GHC.Base.mempty body HCloud.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/servers.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data PostServersRequestBody = PostServersRequestBody {
  -- | automount: Auto-mount Volumes after attach
  postServersRequestBodyAutomount :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | datacenter: ID or name of Datacenter to create Server in (must not be used together with location)
  , postServersRequestBodyDatacenter :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | firewalls: Firewalls which should be applied on the Server\'s public network interface at creation time
  , postServersRequestBodyFirewalls :: (GHC.Maybe.Maybe ([PostServersRequestBodyFirewalls]))
  -- | image: ID or name of the Image the Server is created from
  , postServersRequestBodyImage :: Data.Text.Internal.Text
  -- | labels: User-defined labels (key-value pairs)
  , postServersRequestBodyLabels :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
  -- | location: ID or name of Location to create Server in (must not be used together with datacenter)
  , postServersRequestBodyLocation :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | name: Name of the Server to create (must be unique per Project and a valid hostname as per RFC 1123)
  , postServersRequestBodyName :: Data.Text.Internal.Text
  -- | networks: Network IDs which should be attached to the Server private network interface at the creation time
  , postServersRequestBodyNetworks :: (GHC.Maybe.Maybe ([GHC.Types.Int]))
  -- | server_type: ID or name of the Server type this Server should be created with
  , postServersRequestBodyServerType :: Data.Text.Internal.Text
  -- | ssh_keys: SSH key IDs (\`integer\`) or names (\`string\`) which should be injected into the Server at creation time
  , postServersRequestBodySshKeys :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  -- | start_after_create: Start Server right after creation. Defaults to true.
  , postServersRequestBodyStartAfterCreate :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | user_data: Cloud-Init user data to use during Server creation. This field is limited to 32KiB.
  , postServersRequestBodyUserData :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | volumes: Volume IDs which should be attached to the Server at the creation time. Volumes must be in the same Location.
  , postServersRequestBodyVolumes :: (GHC.Maybe.Maybe ([GHC.Types.Int]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("automount" Data.Aeson.Types.ToJSON..= postServersRequestBodyAutomount obj : "datacenter" Data.Aeson.Types.ToJSON..= postServersRequestBodyDatacenter obj : "firewalls" Data.Aeson.Types.ToJSON..= postServersRequestBodyFirewalls obj : "image" Data.Aeson.Types.ToJSON..= postServersRequestBodyImage obj : "labels" Data.Aeson.Types.ToJSON..= postServersRequestBodyLabels obj : "location" Data.Aeson.Types.ToJSON..= postServersRequestBodyLocation obj : "name" Data.Aeson.Types.ToJSON..= postServersRequestBodyName obj : "networks" Data.Aeson.Types.ToJSON..= postServersRequestBodyNetworks obj : "server_type" Data.Aeson.Types.ToJSON..= postServersRequestBodyServerType obj : "ssh_keys" Data.Aeson.Types.ToJSON..= postServersRequestBodySshKeys obj : "start_after_create" Data.Aeson.Types.ToJSON..= postServersRequestBodyStartAfterCreate obj : "user_data" Data.Aeson.Types.ToJSON..= postServersRequestBodyUserData obj : "volumes" Data.Aeson.Types.ToJSON..= postServersRequestBodyVolumes obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("automount" Data.Aeson.Types.ToJSON..= postServersRequestBodyAutomount obj) GHC.Base.<> (("datacenter" Data.Aeson.Types.ToJSON..= postServersRequestBodyDatacenter obj) GHC.Base.<> (("firewalls" Data.Aeson.Types.ToJSON..= postServersRequestBodyFirewalls obj) GHC.Base.<> (("image" Data.Aeson.Types.ToJSON..= postServersRequestBodyImage obj) GHC.Base.<> (("labels" Data.Aeson.Types.ToJSON..= postServersRequestBodyLabels obj) GHC.Base.<> (("location" Data.Aeson.Types.ToJSON..= postServersRequestBodyLocation obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= postServersRequestBodyName obj) GHC.Base.<> (("networks" Data.Aeson.Types.ToJSON..= postServersRequestBodyNetworks obj) GHC.Base.<> (("server_type" Data.Aeson.Types.ToJSON..= postServersRequestBodyServerType obj) GHC.Base.<> (("ssh_keys" Data.Aeson.Types.ToJSON..= postServersRequestBodySshKeys obj) GHC.Base.<> (("start_after_create" Data.Aeson.Types.ToJSON..= postServersRequestBodyStartAfterCreate obj) GHC.Base.<> (("user_data" Data.Aeson.Types.ToJSON..= postServersRequestBodyUserData obj) GHC.Base.<> ("volumes" Data.Aeson.Types.ToJSON..= postServersRequestBodyVolumes obj)))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersRequestBody" (\obj -> ((((((((((((GHC.Base.pure PostServersRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "automount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "datacenter")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "firewalls")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "image")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "labels")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "location")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "networks")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "server_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ssh_keys")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "start_after_create")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "user_data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "volumes"))
-- | Create a new 'PostServersRequestBody' with all required fields.
mkPostServersRequestBody :: Data.Text.Internal.Text -- ^ 'postServersRequestBodyImage'
  -> Data.Text.Internal.Text -- ^ 'postServersRequestBodyName'
  -> Data.Text.Internal.Text -- ^ 'postServersRequestBodyServerType'
  -> PostServersRequestBody
mkPostServersRequestBody postServersRequestBodyImage postServersRequestBodyName postServersRequestBodyServerType = PostServersRequestBody{postServersRequestBodyAutomount = GHC.Maybe.Nothing,
                                                                                                                                          postServersRequestBodyDatacenter = GHC.Maybe.Nothing,
                                                                                                                                          postServersRequestBodyFirewalls = GHC.Maybe.Nothing,
                                                                                                                                          postServersRequestBodyImage = postServersRequestBodyImage,
                                                                                                                                          postServersRequestBodyLabels = GHC.Maybe.Nothing,
                                                                                                                                          postServersRequestBodyLocation = GHC.Maybe.Nothing,
                                                                                                                                          postServersRequestBodyName = postServersRequestBodyName,
                                                                                                                                          postServersRequestBodyNetworks = GHC.Maybe.Nothing,
                                                                                                                                          postServersRequestBodyServerType = postServersRequestBodyServerType,
                                                                                                                                          postServersRequestBodySshKeys = GHC.Maybe.Nothing,
                                                                                                                                          postServersRequestBodyStartAfterCreate = GHC.Maybe.Nothing,
                                                                                                                                          postServersRequestBodyUserData = GHC.Maybe.Nothing,
                                                                                                                                          postServersRequestBodyVolumes = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/servers.POST.requestBody.content.application\/json.schema.properties.firewalls.items@ in the specification.
-- 
-- 
data PostServersRequestBodyFirewalls = PostServersRequestBodyFirewalls {
  -- | firewall: ID of the Firewall
  postServersRequestBodyFirewallsFirewall :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersRequestBodyFirewalls
    where toJSON obj = Data.Aeson.Types.Internal.object ("firewall" Data.Aeson.Types.ToJSON..= postServersRequestBodyFirewallsFirewall obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("firewall" Data.Aeson.Types.ToJSON..= postServersRequestBodyFirewallsFirewall obj)
instance Data.Aeson.Types.FromJSON.FromJSON PostServersRequestBodyFirewalls
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersRequestBodyFirewalls" (\obj -> GHC.Base.pure PostServersRequestBodyFirewalls GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "firewall"))
-- | Create a new 'PostServersRequestBodyFirewalls' with all required fields.
mkPostServersRequestBodyFirewalls :: PostServersRequestBodyFirewalls
mkPostServersRequestBodyFirewalls = PostServersRequestBodyFirewalls{postServersRequestBodyFirewallsFirewall = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'postServers'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostServersResponseError' is used.
data PostServersResponse =
   PostServersResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostServersResponse201 PostServersResponseBody201 -- ^ The \`server\` key in the reply contains a Server object with this structure
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/servers.POST.responses.201.content.application\/json.schema@ in the specification.
-- 
-- 
data PostServersResponseBody201 = PostServersResponseBody201 {
  -- | action
  postServersResponseBody201Action :: PostServersResponseBody201Action
  -- | next_actions
  , postServersResponseBody201NextActions :: ([PostServersResponseBody201NextActions])
  -- | root_password: Root password when no SSH keys have been specified
  , postServersResponseBody201RootPassword :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | server
  , postServersResponseBody201Server :: PostServersResponseBody201Server
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersResponseBody201
    where toJSON obj = Data.Aeson.Types.Internal.object ("action" Data.Aeson.Types.ToJSON..= postServersResponseBody201Action obj : "next_actions" Data.Aeson.Types.ToJSON..= postServersResponseBody201NextActions obj : "root_password" Data.Aeson.Types.ToJSON..= postServersResponseBody201RootPassword obj : "server" Data.Aeson.Types.ToJSON..= postServersResponseBody201Server obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("action" Data.Aeson.Types.ToJSON..= postServersResponseBody201Action obj) GHC.Base.<> (("next_actions" Data.Aeson.Types.ToJSON..= postServersResponseBody201NextActions obj) GHC.Base.<> (("root_password" Data.Aeson.Types.ToJSON..= postServersResponseBody201RootPassword obj) GHC.Base.<> ("server" Data.Aeson.Types.ToJSON..= postServersResponseBody201Server obj))))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersResponseBody201
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersResponseBody201" (\obj -> (((GHC.Base.pure PostServersResponseBody201 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "action")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "next_actions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "root_password")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "server"))
-- | Create a new 'PostServersResponseBody201' with all required fields.
mkPostServersResponseBody201 :: PostServersResponseBody201Action -- ^ 'postServersResponseBody201Action'
  -> [PostServersResponseBody201NextActions] -- ^ 'postServersResponseBody201NextActions'
  -> GHC.Maybe.Maybe Data.Text.Internal.Text -- ^ 'postServersResponseBody201RootPassword'
  -> PostServersResponseBody201Server -- ^ 'postServersResponseBody201Server'
  -> PostServersResponseBody201
mkPostServersResponseBody201 postServersResponseBody201Action postServersResponseBody201NextActions postServersResponseBody201RootPassword postServersResponseBody201Server = PostServersResponseBody201{postServersResponseBody201Action = postServersResponseBody201Action,
                                                                                                                                                                                                         postServersResponseBody201NextActions = postServersResponseBody201NextActions,
                                                                                                                                                                                                         postServersResponseBody201RootPassword = postServersResponseBody201RootPassword,
                                                                                                                                                                                                         postServersResponseBody201Server = postServersResponseBody201Server}
-- | Defines the object schema located at @paths.\/servers.POST.responses.201.content.application\/json.schema.properties.action@ in the specification.
-- 
-- 
data PostServersResponseBody201Action = PostServersResponseBody201Action {
  -- | command: Command executed in the Action
  postServersResponseBody201ActionCommand :: Data.Text.Internal.Text
  -- | error: Error message for the Action if error occurred, otherwise null
  , postServersResponseBody201ActionError :: (GHC.Maybe.Maybe PostServersResponseBody201ActionError)
  -- | finished: Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
  , postServersResponseBody201ActionFinished :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | id: ID of the Resource
  , postServersResponseBody201ActionId :: GHC.Types.Int
  -- | progress: Progress of Action in percent
  , postServersResponseBody201ActionProgress :: GHC.Types.Double
  -- | resources: Resources the Action relates to
  , postServersResponseBody201ActionResources :: ([PostServersResponseBody201ActionResources])
  -- | started: Point in time when the Action was started (in ISO-8601 format)
  , postServersResponseBody201ActionStarted :: Data.Text.Internal.Text
  -- | status: Status of the Action
  , postServersResponseBody201ActionStatus :: PostServersResponseBody201ActionStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersResponseBody201Action
    where toJSON obj = Data.Aeson.Types.Internal.object ("command" Data.Aeson.Types.ToJSON..= postServersResponseBody201ActionCommand obj : "error" Data.Aeson.Types.ToJSON..= postServersResponseBody201ActionError obj : "finished" Data.Aeson.Types.ToJSON..= postServersResponseBody201ActionFinished obj : "id" Data.Aeson.Types.ToJSON..= postServersResponseBody201ActionId obj : "progress" Data.Aeson.Types.ToJSON..= postServersResponseBody201ActionProgress obj : "resources" Data.Aeson.Types.ToJSON..= postServersResponseBody201ActionResources obj : "started" Data.Aeson.Types.ToJSON..= postServersResponseBody201ActionStarted obj : "status" Data.Aeson.Types.ToJSON..= postServersResponseBody201ActionStatus obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("command" Data.Aeson.Types.ToJSON..= postServersResponseBody201ActionCommand obj) GHC.Base.<> (("error" Data.Aeson.Types.ToJSON..= postServersResponseBody201ActionError obj) GHC.Base.<> (("finished" Data.Aeson.Types.ToJSON..= postServersResponseBody201ActionFinished obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= postServersResponseBody201ActionId obj) GHC.Base.<> (("progress" Data.Aeson.Types.ToJSON..= postServersResponseBody201ActionProgress obj) GHC.Base.<> (("resources" Data.Aeson.Types.ToJSON..= postServersResponseBody201ActionResources obj) GHC.Base.<> (("started" Data.Aeson.Types.ToJSON..= postServersResponseBody201ActionStarted obj) GHC.Base.<> ("status" Data.Aeson.Types.ToJSON..= postServersResponseBody201ActionStatus obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersResponseBody201Action
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersResponseBody201Action" (\obj -> (((((((GHC.Base.pure PostServersResponseBody201Action GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "command")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "finished")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "started")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Create a new 'PostServersResponseBody201Action' with all required fields.
mkPostServersResponseBody201Action :: Data.Text.Internal.Text -- ^ 'postServersResponseBody201ActionCommand'
  -> GHC.Maybe.Maybe PostServersResponseBody201ActionError -- ^ 'postServersResponseBody201ActionError'
  -> GHC.Maybe.Maybe Data.Text.Internal.Text -- ^ 'postServersResponseBody201ActionFinished'
  -> GHC.Types.Int -- ^ 'postServersResponseBody201ActionId'
  -> GHC.Types.Double -- ^ 'postServersResponseBody201ActionProgress'
  -> [PostServersResponseBody201ActionResources] -- ^ 'postServersResponseBody201ActionResources'
  -> Data.Text.Internal.Text -- ^ 'postServersResponseBody201ActionStarted'
  -> PostServersResponseBody201ActionStatus -- ^ 'postServersResponseBody201ActionStatus'
  -> PostServersResponseBody201Action
mkPostServersResponseBody201Action postServersResponseBody201ActionCommand postServersResponseBody201ActionError postServersResponseBody201ActionFinished postServersResponseBody201ActionId postServersResponseBody201ActionProgress postServersResponseBody201ActionResources postServersResponseBody201ActionStarted postServersResponseBody201ActionStatus = PostServersResponseBody201Action{postServersResponseBody201ActionCommand = postServersResponseBody201ActionCommand,
                                                                                                                                                                                                                                                                                                                                                                                                  postServersResponseBody201ActionError = postServersResponseBody201ActionError,
                                                                                                                                                                                                                                                                                                                                                                                                  postServersResponseBody201ActionFinished = postServersResponseBody201ActionFinished,
                                                                                                                                                                                                                                                                                                                                                                                                  postServersResponseBody201ActionId = postServersResponseBody201ActionId,
                                                                                                                                                                                                                                                                                                                                                                                                  postServersResponseBody201ActionProgress = postServersResponseBody201ActionProgress,
                                                                                                                                                                                                                                                                                                                                                                                                  postServersResponseBody201ActionResources = postServersResponseBody201ActionResources,
                                                                                                                                                                                                                                                                                                                                                                                                  postServersResponseBody201ActionStarted = postServersResponseBody201ActionStarted,
                                                                                                                                                                                                                                                                                                                                                                                                  postServersResponseBody201ActionStatus = postServersResponseBody201ActionStatus}
-- | Defines the object schema located at @paths.\/servers.POST.responses.201.content.application\/json.schema.properties.action.properties.error@ in the specification.
-- 
-- Error message for the Action if error occurred, otherwise null
data PostServersResponseBody201ActionError = PostServersResponseBody201ActionError {
  -- | code: Fixed machine readable code
  postServersResponseBody201ActionErrorCode :: Data.Text.Internal.Text
  -- | message: Humanized error message
  , postServersResponseBody201ActionErrorMessage :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersResponseBody201ActionError
    where toJSON obj = Data.Aeson.Types.Internal.object ("code" Data.Aeson.Types.ToJSON..= postServersResponseBody201ActionErrorCode obj : "message" Data.Aeson.Types.ToJSON..= postServersResponseBody201ActionErrorMessage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("code" Data.Aeson.Types.ToJSON..= postServersResponseBody201ActionErrorCode obj) GHC.Base.<> ("message" Data.Aeson.Types.ToJSON..= postServersResponseBody201ActionErrorMessage obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersResponseBody201ActionError
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersResponseBody201ActionError" (\obj -> (GHC.Base.pure PostServersResponseBody201ActionError GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'PostServersResponseBody201ActionError' with all required fields.
mkPostServersResponseBody201ActionError :: Data.Text.Internal.Text -- ^ 'postServersResponseBody201ActionErrorCode'
  -> Data.Text.Internal.Text -- ^ 'postServersResponseBody201ActionErrorMessage'
  -> PostServersResponseBody201ActionError
mkPostServersResponseBody201ActionError postServersResponseBody201ActionErrorCode postServersResponseBody201ActionErrorMessage = PostServersResponseBody201ActionError{postServersResponseBody201ActionErrorCode = postServersResponseBody201ActionErrorCode,
                                                                                                                                                                       postServersResponseBody201ActionErrorMessage = postServersResponseBody201ActionErrorMessage}
-- | Defines the object schema located at @paths.\/servers.POST.responses.201.content.application\/json.schema.properties.action.properties.resources.items@ in the specification.
-- 
-- 
data PostServersResponseBody201ActionResources = PostServersResponseBody201ActionResources {
  -- | id: ID of the Resource
  postServersResponseBody201ActionResourcesId :: GHC.Types.Int
  -- | type: Type of resource referenced
  , postServersResponseBody201ActionResourcesType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersResponseBody201ActionResources
    where toJSON obj = Data.Aeson.Types.Internal.object ("id" Data.Aeson.Types.ToJSON..= postServersResponseBody201ActionResourcesId obj : "type" Data.Aeson.Types.ToJSON..= postServersResponseBody201ActionResourcesType obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("id" Data.Aeson.Types.ToJSON..= postServersResponseBody201ActionResourcesId obj) GHC.Base.<> ("type" Data.Aeson.Types.ToJSON..= postServersResponseBody201ActionResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersResponseBody201ActionResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersResponseBody201ActionResources" (\obj -> (GHC.Base.pure PostServersResponseBody201ActionResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Create a new 'PostServersResponseBody201ActionResources' with all required fields.
mkPostServersResponseBody201ActionResources :: GHC.Types.Int -- ^ 'postServersResponseBody201ActionResourcesId'
  -> Data.Text.Internal.Text -- ^ 'postServersResponseBody201ActionResourcesType'
  -> PostServersResponseBody201ActionResources
mkPostServersResponseBody201ActionResources postServersResponseBody201ActionResourcesId postServersResponseBody201ActionResourcesType = PostServersResponseBody201ActionResources{postServersResponseBody201ActionResourcesId = postServersResponseBody201ActionResourcesId,
                                                                                                                                                                                  postServersResponseBody201ActionResourcesType = postServersResponseBody201ActionResourcesType}
-- | Defines the enum schema located at @paths.\/servers.POST.responses.201.content.application\/json.schema.properties.action.properties.status@ in the specification.
-- 
-- Status of the Action
data PostServersResponseBody201ActionStatus =
   PostServersResponseBody201ActionStatusOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostServersResponseBody201ActionStatusTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostServersResponseBody201ActionStatusEnumSuccess -- ^ Represents the JSON value @"success"@
  | PostServersResponseBody201ActionStatusEnumRunning -- ^ Represents the JSON value @"running"@
  | PostServersResponseBody201ActionStatusEnumError -- ^ Represents the JSON value @"error"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersResponseBody201ActionStatus
    where toJSON (PostServersResponseBody201ActionStatusOther val) = val
          toJSON (PostServersResponseBody201ActionStatusTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PostServersResponseBody201ActionStatusEnumSuccess) = "success"
          toJSON (PostServersResponseBody201ActionStatusEnumRunning) = "running"
          toJSON (PostServersResponseBody201ActionStatusEnumError) = "error"
instance Data.Aeson.Types.FromJSON.FromJSON PostServersResponseBody201ActionStatus
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "success" -> PostServersResponseBody201ActionStatusEnumSuccess
                                            | val GHC.Classes.== "running" -> PostServersResponseBody201ActionStatusEnumRunning
                                            | val GHC.Classes.== "error" -> PostServersResponseBody201ActionStatusEnumError
                                            | GHC.Base.otherwise -> PostServersResponseBody201ActionStatusOther val)
-- | Defines the object schema located at @paths.\/servers.POST.responses.201.content.application\/json.schema.properties.next_actions.items@ in the specification.
-- 
-- 
data PostServersResponseBody201NextActions = PostServersResponseBody201NextActions {
  -- | command: Command executed in the Action
  postServersResponseBody201NextActionsCommand :: Data.Text.Internal.Text
  -- | error: Error message for the Action if error occurred, otherwise null
  , postServersResponseBody201NextActionsError :: (GHC.Maybe.Maybe PostServersResponseBody201NextActionsError)
  -- | finished: Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
  , postServersResponseBody201NextActionsFinished :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | id: ID of the Resource
  , postServersResponseBody201NextActionsId :: GHC.Types.Int
  -- | progress: Progress of Action in percent
  , postServersResponseBody201NextActionsProgress :: GHC.Types.Double
  -- | resources: Resources the Action relates to
  , postServersResponseBody201NextActionsResources :: ([PostServersResponseBody201NextActionsResources])
  -- | started: Point in time when the Action was started (in ISO-8601 format)
  , postServersResponseBody201NextActionsStarted :: Data.Text.Internal.Text
  -- | status: Status of the Action
  , postServersResponseBody201NextActionsStatus :: PostServersResponseBody201NextActionsStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersResponseBody201NextActions
    where toJSON obj = Data.Aeson.Types.Internal.object ("command" Data.Aeson.Types.ToJSON..= postServersResponseBody201NextActionsCommand obj : "error" Data.Aeson.Types.ToJSON..= postServersResponseBody201NextActionsError obj : "finished" Data.Aeson.Types.ToJSON..= postServersResponseBody201NextActionsFinished obj : "id" Data.Aeson.Types.ToJSON..= postServersResponseBody201NextActionsId obj : "progress" Data.Aeson.Types.ToJSON..= postServersResponseBody201NextActionsProgress obj : "resources" Data.Aeson.Types.ToJSON..= postServersResponseBody201NextActionsResources obj : "started" Data.Aeson.Types.ToJSON..= postServersResponseBody201NextActionsStarted obj : "status" Data.Aeson.Types.ToJSON..= postServersResponseBody201NextActionsStatus obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("command" Data.Aeson.Types.ToJSON..= postServersResponseBody201NextActionsCommand obj) GHC.Base.<> (("error" Data.Aeson.Types.ToJSON..= postServersResponseBody201NextActionsError obj) GHC.Base.<> (("finished" Data.Aeson.Types.ToJSON..= postServersResponseBody201NextActionsFinished obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= postServersResponseBody201NextActionsId obj) GHC.Base.<> (("progress" Data.Aeson.Types.ToJSON..= postServersResponseBody201NextActionsProgress obj) GHC.Base.<> (("resources" Data.Aeson.Types.ToJSON..= postServersResponseBody201NextActionsResources obj) GHC.Base.<> (("started" Data.Aeson.Types.ToJSON..= postServersResponseBody201NextActionsStarted obj) GHC.Base.<> ("status" Data.Aeson.Types.ToJSON..= postServersResponseBody201NextActionsStatus obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersResponseBody201NextActions
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersResponseBody201NextActions" (\obj -> (((((((GHC.Base.pure PostServersResponseBody201NextActions GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "command")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "finished")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "started")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Create a new 'PostServersResponseBody201NextActions' with all required fields.
mkPostServersResponseBody201NextActions :: Data.Text.Internal.Text -- ^ 'postServersResponseBody201NextActionsCommand'
  -> GHC.Maybe.Maybe PostServersResponseBody201NextActionsError -- ^ 'postServersResponseBody201NextActionsError'
  -> GHC.Maybe.Maybe Data.Text.Internal.Text -- ^ 'postServersResponseBody201NextActionsFinished'
  -> GHC.Types.Int -- ^ 'postServersResponseBody201NextActionsId'
  -> GHC.Types.Double -- ^ 'postServersResponseBody201NextActionsProgress'
  -> [PostServersResponseBody201NextActionsResources] -- ^ 'postServersResponseBody201NextActionsResources'
  -> Data.Text.Internal.Text -- ^ 'postServersResponseBody201NextActionsStarted'
  -> PostServersResponseBody201NextActionsStatus -- ^ 'postServersResponseBody201NextActionsStatus'
  -> PostServersResponseBody201NextActions
mkPostServersResponseBody201NextActions postServersResponseBody201NextActionsCommand postServersResponseBody201NextActionsError postServersResponseBody201NextActionsFinished postServersResponseBody201NextActionsId postServersResponseBody201NextActionsProgress postServersResponseBody201NextActionsResources postServersResponseBody201NextActionsStarted postServersResponseBody201NextActionsStatus = PostServersResponseBody201NextActions{postServersResponseBody201NextActionsCommand = postServersResponseBody201NextActionsCommand,
                                                                                                                                                                                                                                                                                                                                                                                                                                                    postServersResponseBody201NextActionsError = postServersResponseBody201NextActionsError,
                                                                                                                                                                                                                                                                                                                                                                                                                                                    postServersResponseBody201NextActionsFinished = postServersResponseBody201NextActionsFinished,
                                                                                                                                                                                                                                                                                                                                                                                                                                                    postServersResponseBody201NextActionsId = postServersResponseBody201NextActionsId,
                                                                                                                                                                                                                                                                                                                                                                                                                                                    postServersResponseBody201NextActionsProgress = postServersResponseBody201NextActionsProgress,
                                                                                                                                                                                                                                                                                                                                                                                                                                                    postServersResponseBody201NextActionsResources = postServersResponseBody201NextActionsResources,
                                                                                                                                                                                                                                                                                                                                                                                                                                                    postServersResponseBody201NextActionsStarted = postServersResponseBody201NextActionsStarted,
                                                                                                                                                                                                                                                                                                                                                                                                                                                    postServersResponseBody201NextActionsStatus = postServersResponseBody201NextActionsStatus}
-- | Defines the object schema located at @paths.\/servers.POST.responses.201.content.application\/json.schema.properties.next_actions.items.properties.error@ in the specification.
-- 
-- Error message for the Action if error occurred, otherwise null
data PostServersResponseBody201NextActionsError = PostServersResponseBody201NextActionsError {
  -- | code: Fixed machine readable code
  postServersResponseBody201NextActionsErrorCode :: Data.Text.Internal.Text
  -- | message: Humanized error message
  , postServersResponseBody201NextActionsErrorMessage :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersResponseBody201NextActionsError
    where toJSON obj = Data.Aeson.Types.Internal.object ("code" Data.Aeson.Types.ToJSON..= postServersResponseBody201NextActionsErrorCode obj : "message" Data.Aeson.Types.ToJSON..= postServersResponseBody201NextActionsErrorMessage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("code" Data.Aeson.Types.ToJSON..= postServersResponseBody201NextActionsErrorCode obj) GHC.Base.<> ("message" Data.Aeson.Types.ToJSON..= postServersResponseBody201NextActionsErrorMessage obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersResponseBody201NextActionsError
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersResponseBody201NextActionsError" (\obj -> (GHC.Base.pure PostServersResponseBody201NextActionsError GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'PostServersResponseBody201NextActionsError' with all required fields.
mkPostServersResponseBody201NextActionsError :: Data.Text.Internal.Text -- ^ 'postServersResponseBody201NextActionsErrorCode'
  -> Data.Text.Internal.Text -- ^ 'postServersResponseBody201NextActionsErrorMessage'
  -> PostServersResponseBody201NextActionsError
mkPostServersResponseBody201NextActionsError postServersResponseBody201NextActionsErrorCode postServersResponseBody201NextActionsErrorMessage = PostServersResponseBody201NextActionsError{postServersResponseBody201NextActionsErrorCode = postServersResponseBody201NextActionsErrorCode,
                                                                                                                                                                                           postServersResponseBody201NextActionsErrorMessage = postServersResponseBody201NextActionsErrorMessage}
-- | Defines the object schema located at @paths.\/servers.POST.responses.201.content.application\/json.schema.properties.next_actions.items.properties.resources.items@ in the specification.
-- 
-- 
data PostServersResponseBody201NextActionsResources = PostServersResponseBody201NextActionsResources {
  -- | id: ID of the Resource
  postServersResponseBody201NextActionsResourcesId :: GHC.Types.Int
  -- | type: Type of resource referenced
  , postServersResponseBody201NextActionsResourcesType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersResponseBody201NextActionsResources
    where toJSON obj = Data.Aeson.Types.Internal.object ("id" Data.Aeson.Types.ToJSON..= postServersResponseBody201NextActionsResourcesId obj : "type" Data.Aeson.Types.ToJSON..= postServersResponseBody201NextActionsResourcesType obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("id" Data.Aeson.Types.ToJSON..= postServersResponseBody201NextActionsResourcesId obj) GHC.Base.<> ("type" Data.Aeson.Types.ToJSON..= postServersResponseBody201NextActionsResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersResponseBody201NextActionsResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersResponseBody201NextActionsResources" (\obj -> (GHC.Base.pure PostServersResponseBody201NextActionsResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Create a new 'PostServersResponseBody201NextActionsResources' with all required fields.
mkPostServersResponseBody201NextActionsResources :: GHC.Types.Int -- ^ 'postServersResponseBody201NextActionsResourcesId'
  -> Data.Text.Internal.Text -- ^ 'postServersResponseBody201NextActionsResourcesType'
  -> PostServersResponseBody201NextActionsResources
mkPostServersResponseBody201NextActionsResources postServersResponseBody201NextActionsResourcesId postServersResponseBody201NextActionsResourcesType = PostServersResponseBody201NextActionsResources{postServersResponseBody201NextActionsResourcesId = postServersResponseBody201NextActionsResourcesId,
                                                                                                                                                                                                      postServersResponseBody201NextActionsResourcesType = postServersResponseBody201NextActionsResourcesType}
-- | Defines the enum schema located at @paths.\/servers.POST.responses.201.content.application\/json.schema.properties.next_actions.items.properties.status@ in the specification.
-- 
-- Status of the Action
data PostServersResponseBody201NextActionsStatus =
   PostServersResponseBody201NextActionsStatusOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostServersResponseBody201NextActionsStatusTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostServersResponseBody201NextActionsStatusEnumSuccess -- ^ Represents the JSON value @"success"@
  | PostServersResponseBody201NextActionsStatusEnumRunning -- ^ Represents the JSON value @"running"@
  | PostServersResponseBody201NextActionsStatusEnumError -- ^ Represents the JSON value @"error"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersResponseBody201NextActionsStatus
    where toJSON (PostServersResponseBody201NextActionsStatusOther val) = val
          toJSON (PostServersResponseBody201NextActionsStatusTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PostServersResponseBody201NextActionsStatusEnumSuccess) = "success"
          toJSON (PostServersResponseBody201NextActionsStatusEnumRunning) = "running"
          toJSON (PostServersResponseBody201NextActionsStatusEnumError) = "error"
instance Data.Aeson.Types.FromJSON.FromJSON PostServersResponseBody201NextActionsStatus
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "success" -> PostServersResponseBody201NextActionsStatusEnumSuccess
                                            | val GHC.Classes.== "running" -> PostServersResponseBody201NextActionsStatusEnumRunning
                                            | val GHC.Classes.== "error" -> PostServersResponseBody201NextActionsStatusEnumError
                                            | GHC.Base.otherwise -> PostServersResponseBody201NextActionsStatusOther val)
-- | Defines the object schema located at @paths.\/servers.POST.responses.201.content.application\/json.schema.properties.server@ in the specification.
-- 
-- 
data PostServersResponseBody201Server = PostServersResponseBody201Server {
  -- | backup_window: Time window (UTC) in which the backup will run, or null if the backups are not enabled
  postServersResponseBody201ServerBackupWindow :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | created: Point in time when the Resource was created (in ISO-8601 format)
  , postServersResponseBody201ServerCreated :: Data.Text.Internal.Text
  -- | datacenter: Datacenter this Resource is located at
  , postServersResponseBody201ServerDatacenter :: PostServersResponseBody201ServerDatacenter
  -- | id: ID of the Resource
  , postServersResponseBody201ServerId :: GHC.Types.Int
  -- | image
  , postServersResponseBody201ServerImage :: (GHC.Maybe.Maybe PostServersResponseBody201ServerImage)
  -- | included_traffic: Free Traffic for the current billing period in bytes
  , postServersResponseBody201ServerIncludedTraffic :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | ingoing_traffic: Inbound Traffic for the current billing period in bytes
  , postServersResponseBody201ServerIngoingTraffic :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | iso: ISO Image that is attached to this Server. Null if no ISO is attached.
  , postServersResponseBody201ServerIso :: (GHC.Maybe.Maybe PostServersResponseBody201ServerIso)
  -- | labels: User-defined labels (key-value pairs)
  , postServersResponseBody201ServerLabels :: Data.Aeson.Types.Internal.Object
  -- | load_balancers
  , postServersResponseBody201ServerLoadBalancers :: (GHC.Maybe.Maybe ([GHC.Types.Int]))
  -- | locked: True if Server has been locked and is not available to user
  , postServersResponseBody201ServerLocked :: GHC.Types.Bool
  -- | name: Name of the Resource. Must be unique per Project.
  , postServersResponseBody201ServerName :: Data.Text.Internal.Text
  -- | outgoing_traffic: Outbound Traffic for the current billing period in bytes
  , postServersResponseBody201ServerOutgoingTraffic :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | placement_group
  , postServersResponseBody201ServerPlacementGroup :: (GHC.Maybe.Maybe PostServersResponseBody201ServerPlacementGroup)
  -- | primary_disk_size: Size of the primary Disk
  , postServersResponseBody201ServerPrimaryDiskSize :: GHC.Types.Double
  -- | private_net: Private networks information
  , postServersResponseBody201ServerPrivateNet :: ([PostServersResponseBody201ServerPrivateNet])
  -- | protection: Protection configuration for the Server
  , postServersResponseBody201ServerProtection :: PostServersResponseBody201ServerProtection
  -- | public_net: Public network information. The Server\'s IPv4 address can be found in \`public_net->ipv4->ip\`
  , postServersResponseBody201ServerPublicNet :: PostServersResponseBody201ServerPublicNet
  -- | rescue_enabled: True if rescue mode is enabled. Server will then boot into rescue system on next reboot
  , postServersResponseBody201ServerRescueEnabled :: GHC.Types.Bool
  -- | server_type: Type of Server - determines how much ram, disk and cpu a Server has
  , postServersResponseBody201ServerServerType :: PostServersResponseBody201ServerServerType
  -- | status: Status of the Server
  , postServersResponseBody201ServerStatus :: PostServersResponseBody201ServerStatus
  -- | volumes: IDs of Volumes assigned to this Server
  , postServersResponseBody201ServerVolumes :: (GHC.Maybe.Maybe ([GHC.Types.Int]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersResponseBody201Server
    where toJSON obj = Data.Aeson.Types.Internal.object ("backup_window" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerBackupWindow obj : "created" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerCreated obj : "datacenter" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerDatacenter obj : "id" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerId obj : "image" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImage obj : "included_traffic" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerIncludedTraffic obj : "ingoing_traffic" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerIngoingTraffic obj : "iso" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerIso obj : "labels" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerLabels obj : "load_balancers" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerLoadBalancers obj : "locked" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerLocked obj : "name" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerName obj : "outgoing_traffic" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerOutgoingTraffic obj : "placement_group" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPlacementGroup obj : "primary_disk_size" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPrimaryDiskSize obj : "private_net" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPrivateNet obj : "protection" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerProtection obj : "public_net" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPublicNet obj : "rescue_enabled" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerRescueEnabled obj : "server_type" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerServerType obj : "status" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerStatus obj : "volumes" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerVolumes obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("backup_window" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerBackupWindow obj) GHC.Base.<> (("created" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerCreated obj) GHC.Base.<> (("datacenter" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerDatacenter obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerId obj) GHC.Base.<> (("image" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImage obj) GHC.Base.<> (("included_traffic" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerIncludedTraffic obj) GHC.Base.<> (("ingoing_traffic" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerIngoingTraffic obj) GHC.Base.<> (("iso" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerIso obj) GHC.Base.<> (("labels" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerLabels obj) GHC.Base.<> (("load_balancers" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerLoadBalancers obj) GHC.Base.<> (("locked" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerLocked obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerName obj) GHC.Base.<> (("outgoing_traffic" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerOutgoingTraffic obj) GHC.Base.<> (("placement_group" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPlacementGroup obj) GHC.Base.<> (("primary_disk_size" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPrimaryDiskSize obj) GHC.Base.<> (("private_net" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPrivateNet obj) GHC.Base.<> (("protection" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerProtection obj) GHC.Base.<> (("public_net" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPublicNet obj) GHC.Base.<> (("rescue_enabled" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerRescueEnabled obj) GHC.Base.<> (("server_type" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerServerType obj) GHC.Base.<> (("status" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerStatus obj) GHC.Base.<> ("volumes" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerVolumes obj))))))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersResponseBody201Server
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersResponseBody201Server" (\obj -> (((((((((((((((((((((GHC.Base.pure PostServersResponseBody201Server GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "backup_window")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "datacenter")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "image")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "included_traffic")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ingoing_traffic")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "iso")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "labels")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "load_balancers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "locked")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "outgoing_traffic")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "placement_group")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "primary_disk_size")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "private_net")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "protection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "public_net")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "rescue_enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "server_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "volumes"))
-- | Create a new 'PostServersResponseBody201Server' with all required fields.
mkPostServersResponseBody201Server :: GHC.Maybe.Maybe Data.Text.Internal.Text -- ^ 'postServersResponseBody201ServerBackupWindow'
  -> Data.Text.Internal.Text -- ^ 'postServersResponseBody201ServerCreated'
  -> PostServersResponseBody201ServerDatacenter -- ^ 'postServersResponseBody201ServerDatacenter'
  -> GHC.Types.Int -- ^ 'postServersResponseBody201ServerId'
  -> GHC.Maybe.Maybe PostServersResponseBody201ServerImage -- ^ 'postServersResponseBody201ServerImage'
  -> GHC.Maybe.Maybe GHC.Types.Double -- ^ 'postServersResponseBody201ServerIncludedTraffic'
  -> GHC.Maybe.Maybe GHC.Types.Double -- ^ 'postServersResponseBody201ServerIngoingTraffic'
  -> GHC.Maybe.Maybe PostServersResponseBody201ServerIso -- ^ 'postServersResponseBody201ServerIso'
  -> Data.Aeson.Types.Internal.Object -- ^ 'postServersResponseBody201ServerLabels'
  -> GHC.Types.Bool -- ^ 'postServersResponseBody201ServerLocked'
  -> Data.Text.Internal.Text -- ^ 'postServersResponseBody201ServerName'
  -> GHC.Maybe.Maybe GHC.Types.Double -- ^ 'postServersResponseBody201ServerOutgoingTraffic'
  -> GHC.Types.Double -- ^ 'postServersResponseBody201ServerPrimaryDiskSize'
  -> [PostServersResponseBody201ServerPrivateNet] -- ^ 'postServersResponseBody201ServerPrivateNet'
  -> PostServersResponseBody201ServerProtection -- ^ 'postServersResponseBody201ServerProtection'
  -> PostServersResponseBody201ServerPublicNet -- ^ 'postServersResponseBody201ServerPublicNet'
  -> GHC.Types.Bool -- ^ 'postServersResponseBody201ServerRescueEnabled'
  -> PostServersResponseBody201ServerServerType -- ^ 'postServersResponseBody201ServerServerType'
  -> PostServersResponseBody201ServerStatus -- ^ 'postServersResponseBody201ServerStatus'
  -> PostServersResponseBody201Server
mkPostServersResponseBody201Server postServersResponseBody201ServerBackupWindow postServersResponseBody201ServerCreated postServersResponseBody201ServerDatacenter postServersResponseBody201ServerId postServersResponseBody201ServerImage postServersResponseBody201ServerIncludedTraffic postServersResponseBody201ServerIngoingTraffic postServersResponseBody201ServerIso postServersResponseBody201ServerLabels postServersResponseBody201ServerLocked postServersResponseBody201ServerName postServersResponseBody201ServerOutgoingTraffic postServersResponseBody201ServerPrimaryDiskSize postServersResponseBody201ServerPrivateNet postServersResponseBody201ServerProtection postServersResponseBody201ServerPublicNet postServersResponseBody201ServerRescueEnabled postServersResponseBody201ServerServerType postServersResponseBody201ServerStatus = PostServersResponseBody201Server{postServersResponseBody201ServerBackupWindow = postServersResponseBody201ServerBackupWindow,
postServersResponseBody201ServerCreated = postServersResponseBody201ServerCreated,
postServersResponseBody201ServerDatacenter = postServersResponseBody201ServerDatacenter,
postServersResponseBody201ServerId = postServersResponseBody201ServerId,
postServersResponseBody201ServerImage = postServersResponseBody201ServerImage,
postServersResponseBody201ServerIncludedTraffic = postServersResponseBody201ServerIncludedTraffic,
postServersResponseBody201ServerIngoingTraffic = postServersResponseBody201ServerIngoingTraffic,
postServersResponseBody201ServerIso = postServersResponseBody201ServerIso,
postServersResponseBody201ServerLabels = postServersResponseBody201ServerLabels,
postServersResponseBody201ServerLoadBalancers = GHC.Maybe.Nothing,
postServersResponseBody201ServerLocked = postServersResponseBody201ServerLocked,
postServersResponseBody201ServerName = postServersResponseBody201ServerName,
postServersResponseBody201ServerOutgoingTraffic = postServersResponseBody201ServerOutgoingTraffic,
postServersResponseBody201ServerPlacementGroup = GHC.Maybe.Nothing,
postServersResponseBody201ServerPrimaryDiskSize = postServersResponseBody201ServerPrimaryDiskSize,
postServersResponseBody201ServerPrivateNet = postServersResponseBody201ServerPrivateNet,
postServersResponseBody201ServerProtection = postServersResponseBody201ServerProtection,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     postServersResponseBody201ServerPublicNet = postServersResponseBody201ServerPublicNet,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     postServersResponseBody201ServerRescueEnabled = postServersResponseBody201ServerRescueEnabled,
postServersResponseBody201ServerServerType = postServersResponseBody201ServerServerType,
postServersResponseBody201ServerStatus = postServersResponseBody201ServerStatus,
postServersResponseBody201ServerVolumes = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/servers.POST.responses.201.content.application\/json.schema.properties.server.properties.datacenter@ in the specification.
-- 
-- Datacenter this Resource is located at
data PostServersResponseBody201ServerDatacenter = PostServersResponseBody201ServerDatacenter {
  -- | description: Description of the Datacenter
  postServersResponseBody201ServerDatacenterDescription :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , postServersResponseBody201ServerDatacenterId :: GHC.Types.Int
  -- | location
  , postServersResponseBody201ServerDatacenterLocation :: PostServersResponseBody201ServerDatacenterLocation
  -- | name: Unique identifier of the Datacenter
  , postServersResponseBody201ServerDatacenterName :: Data.Text.Internal.Text
  -- | server_types: The Server types the Datacenter can handle
  , postServersResponseBody201ServerDatacenterServerTypes :: PostServersResponseBody201ServerDatacenterServerTypes
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersResponseBody201ServerDatacenter
    where toJSON obj = Data.Aeson.Types.Internal.object ("description" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerDatacenterDescription obj : "id" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerDatacenterId obj : "location" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerDatacenterLocation obj : "name" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerDatacenterName obj : "server_types" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerDatacenterServerTypes obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("description" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerDatacenterDescription obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerDatacenterId obj) GHC.Base.<> (("location" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerDatacenterLocation obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerDatacenterName obj) GHC.Base.<> ("server_types" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerDatacenterServerTypes obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersResponseBody201ServerDatacenter
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersResponseBody201ServerDatacenter" (\obj -> ((((GHC.Base.pure PostServersResponseBody201ServerDatacenter GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "location")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "server_types"))
-- | Create a new 'PostServersResponseBody201ServerDatacenter' with all required fields.
mkPostServersResponseBody201ServerDatacenter :: Data.Text.Internal.Text -- ^ 'postServersResponseBody201ServerDatacenterDescription'
  -> GHC.Types.Int -- ^ 'postServersResponseBody201ServerDatacenterId'
  -> PostServersResponseBody201ServerDatacenterLocation -- ^ 'postServersResponseBody201ServerDatacenterLocation'
  -> Data.Text.Internal.Text -- ^ 'postServersResponseBody201ServerDatacenterName'
  -> PostServersResponseBody201ServerDatacenterServerTypes -- ^ 'postServersResponseBody201ServerDatacenterServerTypes'
  -> PostServersResponseBody201ServerDatacenter
mkPostServersResponseBody201ServerDatacenter postServersResponseBody201ServerDatacenterDescription postServersResponseBody201ServerDatacenterId postServersResponseBody201ServerDatacenterLocation postServersResponseBody201ServerDatacenterName postServersResponseBody201ServerDatacenterServerTypes = PostServersResponseBody201ServerDatacenter{postServersResponseBody201ServerDatacenterDescription = postServersResponseBody201ServerDatacenterDescription,
                                                                                                                                                                                                                                                                                                                                                     postServersResponseBody201ServerDatacenterId = postServersResponseBody201ServerDatacenterId,
                                                                                                                                                                                                                                                                                                                                                     postServersResponseBody201ServerDatacenterLocation = postServersResponseBody201ServerDatacenterLocation,
                                                                                                                                                                                                                                                                                                                                                     postServersResponseBody201ServerDatacenterName = postServersResponseBody201ServerDatacenterName,
                                                                                                                                                                                                                                                                                                                                                     postServersResponseBody201ServerDatacenterServerTypes = postServersResponseBody201ServerDatacenterServerTypes}
-- | Defines the object schema located at @paths.\/servers.POST.responses.201.content.application\/json.schema.properties.server.properties.datacenter.properties.location@ in the specification.
-- 
-- 
data PostServersResponseBody201ServerDatacenterLocation = PostServersResponseBody201ServerDatacenterLocation {
  -- | city: City the Location is closest to
  postServersResponseBody201ServerDatacenterLocationCity :: Data.Text.Internal.Text
  -- | country: ISO 3166-1 alpha-2 code of the country the Location resides in
  , postServersResponseBody201ServerDatacenterLocationCountry :: Data.Text.Internal.Text
  -- | description: Description of the Location
  , postServersResponseBody201ServerDatacenterLocationDescription :: Data.Text.Internal.Text
  -- | id: ID of the Location
  , postServersResponseBody201ServerDatacenterLocationId :: GHC.Types.Double
  -- | latitude: Latitude of the city closest to the Location
  , postServersResponseBody201ServerDatacenterLocationLatitude :: GHC.Types.Double
  -- | longitude: Longitude of the city closest to the Location
  , postServersResponseBody201ServerDatacenterLocationLongitude :: GHC.Types.Double
  -- | name: Unique identifier of the Location
  , postServersResponseBody201ServerDatacenterLocationName :: Data.Text.Internal.Text
  -- | network_zone: Name of network zone this Location resides in
  , postServersResponseBody201ServerDatacenterLocationNetworkZone :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersResponseBody201ServerDatacenterLocation
    where toJSON obj = Data.Aeson.Types.Internal.object ("city" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerDatacenterLocationCity obj : "country" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerDatacenterLocationCountry obj : "description" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerDatacenterLocationDescription obj : "id" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerDatacenterLocationId obj : "latitude" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerDatacenterLocationLatitude obj : "longitude" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerDatacenterLocationLongitude obj : "name" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerDatacenterLocationName obj : "network_zone" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerDatacenterLocationNetworkZone obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("city" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerDatacenterLocationCity obj) GHC.Base.<> (("country" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerDatacenterLocationCountry obj) GHC.Base.<> (("description" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerDatacenterLocationDescription obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerDatacenterLocationId obj) GHC.Base.<> (("latitude" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerDatacenterLocationLatitude obj) GHC.Base.<> (("longitude" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerDatacenterLocationLongitude obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerDatacenterLocationName obj) GHC.Base.<> ("network_zone" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerDatacenterLocationNetworkZone obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersResponseBody201ServerDatacenterLocation
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersResponseBody201ServerDatacenterLocation" (\obj -> (((((((GHC.Base.pure PostServersResponseBody201ServerDatacenterLocation GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "latitude")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "longitude")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "network_zone"))
-- | Create a new 'PostServersResponseBody201ServerDatacenterLocation' with all required fields.
mkPostServersResponseBody201ServerDatacenterLocation :: Data.Text.Internal.Text -- ^ 'postServersResponseBody201ServerDatacenterLocationCity'
  -> Data.Text.Internal.Text -- ^ 'postServersResponseBody201ServerDatacenterLocationCountry'
  -> Data.Text.Internal.Text -- ^ 'postServersResponseBody201ServerDatacenterLocationDescription'
  -> GHC.Types.Double -- ^ 'postServersResponseBody201ServerDatacenterLocationId'
  -> GHC.Types.Double -- ^ 'postServersResponseBody201ServerDatacenterLocationLatitude'
  -> GHC.Types.Double -- ^ 'postServersResponseBody201ServerDatacenterLocationLongitude'
  -> Data.Text.Internal.Text -- ^ 'postServersResponseBody201ServerDatacenterLocationName'
  -> Data.Text.Internal.Text -- ^ 'postServersResponseBody201ServerDatacenterLocationNetworkZone'
  -> PostServersResponseBody201ServerDatacenterLocation
mkPostServersResponseBody201ServerDatacenterLocation postServersResponseBody201ServerDatacenterLocationCity postServersResponseBody201ServerDatacenterLocationCountry postServersResponseBody201ServerDatacenterLocationDescription postServersResponseBody201ServerDatacenterLocationId postServersResponseBody201ServerDatacenterLocationLatitude postServersResponseBody201ServerDatacenterLocationLongitude postServersResponseBody201ServerDatacenterLocationName postServersResponseBody201ServerDatacenterLocationNetworkZone = PostServersResponseBody201ServerDatacenterLocation{postServersResponseBody201ServerDatacenterLocationCity = postServersResponseBody201ServerDatacenterLocationCity,
postServersResponseBody201ServerDatacenterLocationCountry = postServersResponseBody201ServerDatacenterLocationCountry,
postServersResponseBody201ServerDatacenterLocationDescription = postServersResponseBody201ServerDatacenterLocationDescription,
postServersResponseBody201ServerDatacenterLocationId = postServersResponseBody201ServerDatacenterLocationId,
postServersResponseBody201ServerDatacenterLocationLatitude = postServersResponseBody201ServerDatacenterLocationLatitude,
postServersResponseBody201ServerDatacenterLocationLongitude = postServersResponseBody201ServerDatacenterLocationLongitude,
postServersResponseBody201ServerDatacenterLocationName = postServersResponseBody201ServerDatacenterLocationName,
postServersResponseBody201ServerDatacenterLocationNetworkZone = postServersResponseBody201ServerDatacenterLocationNetworkZone}
-- | Defines the object schema located at @paths.\/servers.POST.responses.201.content.application\/json.schema.properties.server.properties.datacenter.properties.server_types@ in the specification.
-- 
-- The Server types the Datacenter can handle
data PostServersResponseBody201ServerDatacenterServerTypes = PostServersResponseBody201ServerDatacenterServerTypes {
  -- | available: IDs of Server types that are supported and for which the Datacenter has enough resources left
  postServersResponseBody201ServerDatacenterServerTypesAvailable :: ([GHC.Types.Double])
  -- | available_for_migration: IDs of Server types that are supported and for which the Datacenter has enough resources left
  , postServersResponseBody201ServerDatacenterServerTypesAvailableForMigration :: ([GHC.Types.Double])
  -- | supported: IDs of Server types that are supported in the Datacenter
  , postServersResponseBody201ServerDatacenterServerTypesSupported :: ([GHC.Types.Double])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersResponseBody201ServerDatacenterServerTypes
    where toJSON obj = Data.Aeson.Types.Internal.object ("available" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerDatacenterServerTypesAvailable obj : "available_for_migration" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerDatacenterServerTypesAvailableForMigration obj : "supported" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerDatacenterServerTypesSupported obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("available" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerDatacenterServerTypesAvailable obj) GHC.Base.<> (("available_for_migration" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerDatacenterServerTypesAvailableForMigration obj) GHC.Base.<> ("supported" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerDatacenterServerTypesSupported obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersResponseBody201ServerDatacenterServerTypes
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersResponseBody201ServerDatacenterServerTypes" (\obj -> ((GHC.Base.pure PostServersResponseBody201ServerDatacenterServerTypes GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "available")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "available_for_migration")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "supported"))
-- | Create a new 'PostServersResponseBody201ServerDatacenterServerTypes' with all required fields.
mkPostServersResponseBody201ServerDatacenterServerTypes :: [GHC.Types.Double] -- ^ 'postServersResponseBody201ServerDatacenterServerTypesAvailable'
  -> [GHC.Types.Double] -- ^ 'postServersResponseBody201ServerDatacenterServerTypesAvailableForMigration'
  -> [GHC.Types.Double] -- ^ 'postServersResponseBody201ServerDatacenterServerTypesSupported'
  -> PostServersResponseBody201ServerDatacenterServerTypes
mkPostServersResponseBody201ServerDatacenterServerTypes postServersResponseBody201ServerDatacenterServerTypesAvailable postServersResponseBody201ServerDatacenterServerTypesAvailableForMigration postServersResponseBody201ServerDatacenterServerTypesSupported = PostServersResponseBody201ServerDatacenterServerTypes{postServersResponseBody201ServerDatacenterServerTypesAvailable = postServersResponseBody201ServerDatacenterServerTypesAvailable,
                                                                                                                                                                                                                                                                                                                         postServersResponseBody201ServerDatacenterServerTypesAvailableForMigration = postServersResponseBody201ServerDatacenterServerTypesAvailableForMigration,
                                                                                                                                                                                                                                                                                                                         postServersResponseBody201ServerDatacenterServerTypesSupported = postServersResponseBody201ServerDatacenterServerTypesSupported}
-- | Defines the object schema located at @paths.\/servers.POST.responses.201.content.application\/json.schema.properties.server.properties.image@ in the specification.
-- 
-- 
data PostServersResponseBody201ServerImage = PostServersResponseBody201ServerImage {
  -- | bound_to: ID of Server the Image is bound to. Only set for Images of type \`backup\`.
  postServersResponseBody201ServerImageBoundTo :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | build_id: Build ID of the Image
  , postServersResponseBody201ServerImageBuildId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | created: Point in time when the Resource was created (in ISO-8601 format)
  , postServersResponseBody201ServerImageCreated :: Data.Text.Internal.Text
  -- | created_from: Information about the Server the Image was created from
  , postServersResponseBody201ServerImageCreatedFrom :: (GHC.Maybe.Maybe PostServersResponseBody201ServerImageCreatedFrom)
  -- | deleted: Point in time where the Image was deleted (in ISO-8601 format)
  , postServersResponseBody201ServerImageDeleted :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | deprecated: Point in time when the Image is considered to be deprecated (in ISO-8601 format)
  , postServersResponseBody201ServerImageDeprecated :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | description: Description of the Image
  , postServersResponseBody201ServerImageDescription :: Data.Text.Internal.Text
  -- | disk_size: Size of the disk contained in the Image in GB
  , postServersResponseBody201ServerImageDiskSize :: GHC.Types.Double
  -- | id: ID of the Resource
  , postServersResponseBody201ServerImageId :: GHC.Types.Int
  -- | image_size: Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.
  , postServersResponseBody201ServerImageImageSize :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | labels: User-defined labels (key-value pairs)
  , postServersResponseBody201ServerImageLabels :: Data.Aeson.Types.Internal.Object
  -- | name: Unique identifier of the Image. This value is only set for system Images.
  , postServersResponseBody201ServerImageName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | os_flavor: Flavor of operating system contained in the Image
  , postServersResponseBody201ServerImageOsFlavor :: PostServersResponseBody201ServerImageOsFlavor
  -- | os_version: Operating system version
  , postServersResponseBody201ServerImageOsVersion :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | protection: Protection configuration for the Resource
  , postServersResponseBody201ServerImageProtection :: PostServersResponseBody201ServerImageProtection
  -- | rapid_deploy: Indicates that rapid deploy of the Image is available
  , postServersResponseBody201ServerImageRapidDeploy :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | status: Whether the Image can be used or if it\'s still being created or unavailable
  , postServersResponseBody201ServerImageStatus :: PostServersResponseBody201ServerImageStatus
  -- | type: Type of the Image
  , postServersResponseBody201ServerImageType :: PostServersResponseBody201ServerImageType
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersResponseBody201ServerImage
    where toJSON obj = Data.Aeson.Types.Internal.object ("bound_to" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageBoundTo obj : "build_id" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageBuildId obj : "created" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageCreated obj : "created_from" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageCreatedFrom obj : "deleted" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageDeleted obj : "deprecated" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageDeprecated obj : "description" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageDescription obj : "disk_size" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageDiskSize obj : "id" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageId obj : "image_size" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageImageSize obj : "labels" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageLabels obj : "name" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageName obj : "os_flavor" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageOsFlavor obj : "os_version" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageOsVersion obj : "protection" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageProtection obj : "rapid_deploy" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageRapidDeploy obj : "status" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageStatus obj : "type" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageType obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("bound_to" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageBoundTo obj) GHC.Base.<> (("build_id" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageBuildId obj) GHC.Base.<> (("created" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageCreated obj) GHC.Base.<> (("created_from" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageCreatedFrom obj) GHC.Base.<> (("deleted" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageDeleted obj) GHC.Base.<> (("deprecated" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageDeprecated obj) GHC.Base.<> (("description" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageDescription obj) GHC.Base.<> (("disk_size" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageDiskSize obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageId obj) GHC.Base.<> (("image_size" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageImageSize obj) GHC.Base.<> (("labels" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageLabels obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageName obj) GHC.Base.<> (("os_flavor" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageOsFlavor obj) GHC.Base.<> (("os_version" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageOsVersion obj) GHC.Base.<> (("protection" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageProtection obj) GHC.Base.<> (("rapid_deploy" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageRapidDeploy obj) GHC.Base.<> (("status" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageStatus obj) GHC.Base.<> ("type" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageType obj))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersResponseBody201ServerImage
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersResponseBody201ServerImage" (\obj -> (((((((((((((((((GHC.Base.pure PostServersResponseBody201ServerImage GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "bound_to")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "build_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created_from")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "deleted")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "deprecated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "disk_size")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "image_size")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "labels")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "os_flavor")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "os_version")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "protection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "rapid_deploy")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Create a new 'PostServersResponseBody201ServerImage' with all required fields.
mkPostServersResponseBody201ServerImage :: GHC.Maybe.Maybe GHC.Types.Int -- ^ 'postServersResponseBody201ServerImageBoundTo'
  -> Data.Text.Internal.Text -- ^ 'postServersResponseBody201ServerImageCreated'
  -> GHC.Maybe.Maybe PostServersResponseBody201ServerImageCreatedFrom -- ^ 'postServersResponseBody201ServerImageCreatedFrom'
  -> GHC.Maybe.Maybe Data.Text.Internal.Text -- ^ 'postServersResponseBody201ServerImageDeleted'
  -> GHC.Maybe.Maybe Data.Text.Internal.Text -- ^ 'postServersResponseBody201ServerImageDeprecated'
  -> Data.Text.Internal.Text -- ^ 'postServersResponseBody201ServerImageDescription'
  -> GHC.Types.Double -- ^ 'postServersResponseBody201ServerImageDiskSize'
  -> GHC.Types.Int -- ^ 'postServersResponseBody201ServerImageId'
  -> GHC.Maybe.Maybe GHC.Types.Double -- ^ 'postServersResponseBody201ServerImageImageSize'
  -> Data.Aeson.Types.Internal.Object -- ^ 'postServersResponseBody201ServerImageLabels'
  -> GHC.Maybe.Maybe Data.Text.Internal.Text -- ^ 'postServersResponseBody201ServerImageName'
  -> PostServersResponseBody201ServerImageOsFlavor -- ^ 'postServersResponseBody201ServerImageOsFlavor'
  -> GHC.Maybe.Maybe Data.Text.Internal.Text -- ^ 'postServersResponseBody201ServerImageOsVersion'
  -> PostServersResponseBody201ServerImageProtection -- ^ 'postServersResponseBody201ServerImageProtection'
  -> PostServersResponseBody201ServerImageStatus -- ^ 'postServersResponseBody201ServerImageStatus'
  -> PostServersResponseBody201ServerImageType -- ^ 'postServersResponseBody201ServerImageType'
  -> PostServersResponseBody201ServerImage
mkPostServersResponseBody201ServerImage postServersResponseBody201ServerImageBoundTo postServersResponseBody201ServerImageCreated postServersResponseBody201ServerImageCreatedFrom postServersResponseBody201ServerImageDeleted postServersResponseBody201ServerImageDeprecated postServersResponseBody201ServerImageDescription postServersResponseBody201ServerImageDiskSize postServersResponseBody201ServerImageId postServersResponseBody201ServerImageImageSize postServersResponseBody201ServerImageLabels postServersResponseBody201ServerImageName postServersResponseBody201ServerImageOsFlavor postServersResponseBody201ServerImageOsVersion postServersResponseBody201ServerImageProtection postServersResponseBody201ServerImageStatus postServersResponseBody201ServerImageType = PostServersResponseBody201ServerImage{postServersResponseBody201ServerImageBoundTo = postServersResponseBody201ServerImageBoundTo,
postServersResponseBody201ServerImageBuildId = GHC.Maybe.Nothing,
postServersResponseBody201ServerImageCreated = postServersResponseBody201ServerImageCreated,
postServersResponseBody201ServerImageCreatedFrom = postServersResponseBody201ServerImageCreatedFrom,
postServersResponseBody201ServerImageDeleted = postServersResponseBody201ServerImageDeleted,
postServersResponseBody201ServerImageDeprecated = postServersResponseBody201ServerImageDeprecated,
postServersResponseBody201ServerImageDescription = postServersResponseBody201ServerImageDescription,
postServersResponseBody201ServerImageDiskSize = postServersResponseBody201ServerImageDiskSize,
postServersResponseBody201ServerImageId = postServersResponseBody201ServerImageId,
postServersResponseBody201ServerImageImageSize = postServersResponseBody201ServerImageImageSize,
postServersResponseBody201ServerImageLabels = postServersResponseBody201ServerImageLabels,
postServersResponseBody201ServerImageName = postServersResponseBody201ServerImageName,
postServersResponseBody201ServerImageOsFlavor = postServersResponseBody201ServerImageOsFlavor,
postServersResponseBody201ServerImageOsVersion = postServersResponseBody201ServerImageOsVersion,
postServersResponseBody201ServerImageProtection = postServersResponseBody201ServerImageProtection,
postServersResponseBody201ServerImageRapidDeploy = GHC.Maybe.Nothing,
postServersResponseBody201ServerImageStatus = postServersResponseBody201ServerImageStatus,
postServersResponseBody201ServerImageType = postServersResponseBody201ServerImageType}
-- | Defines the object schema located at @paths.\/servers.POST.responses.201.content.application\/json.schema.properties.server.properties.image.properties.created_from@ in the specification.
-- 
-- Information about the Server the Image was created from
data PostServersResponseBody201ServerImageCreatedFrom = PostServersResponseBody201ServerImageCreatedFrom {
  -- | id: ID of the Server the Image was created from
  postServersResponseBody201ServerImageCreatedFromId :: GHC.Types.Int
  -- | name: Server name at the time the Image was created
  , postServersResponseBody201ServerImageCreatedFromName :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersResponseBody201ServerImageCreatedFrom
    where toJSON obj = Data.Aeson.Types.Internal.object ("id" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageCreatedFromId obj : "name" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageCreatedFromName obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("id" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageCreatedFromId obj) GHC.Base.<> ("name" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageCreatedFromName obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersResponseBody201ServerImageCreatedFrom
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersResponseBody201ServerImageCreatedFrom" (\obj -> (GHC.Base.pure PostServersResponseBody201ServerImageCreatedFrom GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name"))
-- | Create a new 'PostServersResponseBody201ServerImageCreatedFrom' with all required fields.
mkPostServersResponseBody201ServerImageCreatedFrom :: GHC.Types.Int -- ^ 'postServersResponseBody201ServerImageCreatedFromId'
  -> Data.Text.Internal.Text -- ^ 'postServersResponseBody201ServerImageCreatedFromName'
  -> PostServersResponseBody201ServerImageCreatedFrom
mkPostServersResponseBody201ServerImageCreatedFrom postServersResponseBody201ServerImageCreatedFromId postServersResponseBody201ServerImageCreatedFromName = PostServersResponseBody201ServerImageCreatedFrom{postServersResponseBody201ServerImageCreatedFromId = postServersResponseBody201ServerImageCreatedFromId,
                                                                                                                                                                                                              postServersResponseBody201ServerImageCreatedFromName = postServersResponseBody201ServerImageCreatedFromName}
-- | Defines the enum schema located at @paths.\/servers.POST.responses.201.content.application\/json.schema.properties.server.properties.image.properties.os_flavor@ in the specification.
-- 
-- Flavor of operating system contained in the Image
data PostServersResponseBody201ServerImageOsFlavor =
   PostServersResponseBody201ServerImageOsFlavorOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostServersResponseBody201ServerImageOsFlavorTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostServersResponseBody201ServerImageOsFlavorEnumUbuntu -- ^ Represents the JSON value @"ubuntu"@
  | PostServersResponseBody201ServerImageOsFlavorEnumCentos -- ^ Represents the JSON value @"centos"@
  | PostServersResponseBody201ServerImageOsFlavorEnumDebian -- ^ Represents the JSON value @"debian"@
  | PostServersResponseBody201ServerImageOsFlavorEnumFedora -- ^ Represents the JSON value @"fedora"@
  | PostServersResponseBody201ServerImageOsFlavorEnumUnknown -- ^ Represents the JSON value @"unknown"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersResponseBody201ServerImageOsFlavor
    where toJSON (PostServersResponseBody201ServerImageOsFlavorOther val) = val
          toJSON (PostServersResponseBody201ServerImageOsFlavorTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PostServersResponseBody201ServerImageOsFlavorEnumUbuntu) = "ubuntu"
          toJSON (PostServersResponseBody201ServerImageOsFlavorEnumCentos) = "centos"
          toJSON (PostServersResponseBody201ServerImageOsFlavorEnumDebian) = "debian"
          toJSON (PostServersResponseBody201ServerImageOsFlavorEnumFedora) = "fedora"
          toJSON (PostServersResponseBody201ServerImageOsFlavorEnumUnknown) = "unknown"
instance Data.Aeson.Types.FromJSON.FromJSON PostServersResponseBody201ServerImageOsFlavor
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "ubuntu" -> PostServersResponseBody201ServerImageOsFlavorEnumUbuntu
                                            | val GHC.Classes.== "centos" -> PostServersResponseBody201ServerImageOsFlavorEnumCentos
                                            | val GHC.Classes.== "debian" -> PostServersResponseBody201ServerImageOsFlavorEnumDebian
                                            | val GHC.Classes.== "fedora" -> PostServersResponseBody201ServerImageOsFlavorEnumFedora
                                            | val GHC.Classes.== "unknown" -> PostServersResponseBody201ServerImageOsFlavorEnumUnknown
                                            | GHC.Base.otherwise -> PostServersResponseBody201ServerImageOsFlavorOther val)
-- | Defines the object schema located at @paths.\/servers.POST.responses.201.content.application\/json.schema.properties.server.properties.image.properties.protection@ in the specification.
-- 
-- Protection configuration for the Resource
data PostServersResponseBody201ServerImageProtection = PostServersResponseBody201ServerImageProtection {
  -- | delete: If true, prevents the Resource from being deleted
  postServersResponseBody201ServerImageProtectionDelete :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersResponseBody201ServerImageProtection
    where toJSON obj = Data.Aeson.Types.Internal.object ("delete" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageProtectionDelete obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("delete" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerImageProtectionDelete obj)
instance Data.Aeson.Types.FromJSON.FromJSON PostServersResponseBody201ServerImageProtection
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersResponseBody201ServerImageProtection" (\obj -> GHC.Base.pure PostServersResponseBody201ServerImageProtection GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "delete"))
-- | Create a new 'PostServersResponseBody201ServerImageProtection' with all required fields.
mkPostServersResponseBody201ServerImageProtection :: GHC.Types.Bool -- ^ 'postServersResponseBody201ServerImageProtectionDelete'
  -> PostServersResponseBody201ServerImageProtection
mkPostServersResponseBody201ServerImageProtection postServersResponseBody201ServerImageProtectionDelete = PostServersResponseBody201ServerImageProtection{postServersResponseBody201ServerImageProtectionDelete = postServersResponseBody201ServerImageProtectionDelete}
-- | Defines the enum schema located at @paths.\/servers.POST.responses.201.content.application\/json.schema.properties.server.properties.image.properties.status@ in the specification.
-- 
-- Whether the Image can be used or if it\'s still being created or unavailable
data PostServersResponseBody201ServerImageStatus =
   PostServersResponseBody201ServerImageStatusOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostServersResponseBody201ServerImageStatusTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostServersResponseBody201ServerImageStatusEnumAvailable -- ^ Represents the JSON value @"available"@
  | PostServersResponseBody201ServerImageStatusEnumCreating -- ^ Represents the JSON value @"creating"@
  | PostServersResponseBody201ServerImageStatusEnumUnavailable -- ^ Represents the JSON value @"unavailable"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersResponseBody201ServerImageStatus
    where toJSON (PostServersResponseBody201ServerImageStatusOther val) = val
          toJSON (PostServersResponseBody201ServerImageStatusTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PostServersResponseBody201ServerImageStatusEnumAvailable) = "available"
          toJSON (PostServersResponseBody201ServerImageStatusEnumCreating) = "creating"
          toJSON (PostServersResponseBody201ServerImageStatusEnumUnavailable) = "unavailable"
instance Data.Aeson.Types.FromJSON.FromJSON PostServersResponseBody201ServerImageStatus
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "available" -> PostServersResponseBody201ServerImageStatusEnumAvailable
                                            | val GHC.Classes.== "creating" -> PostServersResponseBody201ServerImageStatusEnumCreating
                                            | val GHC.Classes.== "unavailable" -> PostServersResponseBody201ServerImageStatusEnumUnavailable
                                            | GHC.Base.otherwise -> PostServersResponseBody201ServerImageStatusOther val)
-- | Defines the enum schema located at @paths.\/servers.POST.responses.201.content.application\/json.schema.properties.server.properties.image.properties.type@ in the specification.
-- 
-- Type of the Image
data PostServersResponseBody201ServerImageType =
   PostServersResponseBody201ServerImageTypeOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostServersResponseBody201ServerImageTypeTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostServersResponseBody201ServerImageTypeEnumSystem -- ^ Represents the JSON value @"system"@
  | PostServersResponseBody201ServerImageTypeEnumApp -- ^ Represents the JSON value @"app"@
  | PostServersResponseBody201ServerImageTypeEnumSnapshot -- ^ Represents the JSON value @"snapshot"@
  | PostServersResponseBody201ServerImageTypeEnumBackup -- ^ Represents the JSON value @"backup"@
  | PostServersResponseBody201ServerImageTypeEnumTemporary -- ^ Represents the JSON value @"temporary"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersResponseBody201ServerImageType
    where toJSON (PostServersResponseBody201ServerImageTypeOther val) = val
          toJSON (PostServersResponseBody201ServerImageTypeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PostServersResponseBody201ServerImageTypeEnumSystem) = "system"
          toJSON (PostServersResponseBody201ServerImageTypeEnumApp) = "app"
          toJSON (PostServersResponseBody201ServerImageTypeEnumSnapshot) = "snapshot"
          toJSON (PostServersResponseBody201ServerImageTypeEnumBackup) = "backup"
          toJSON (PostServersResponseBody201ServerImageTypeEnumTemporary) = "temporary"
instance Data.Aeson.Types.FromJSON.FromJSON PostServersResponseBody201ServerImageType
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "system" -> PostServersResponseBody201ServerImageTypeEnumSystem
                                            | val GHC.Classes.== "app" -> PostServersResponseBody201ServerImageTypeEnumApp
                                            | val GHC.Classes.== "snapshot" -> PostServersResponseBody201ServerImageTypeEnumSnapshot
                                            | val GHC.Classes.== "backup" -> PostServersResponseBody201ServerImageTypeEnumBackup
                                            | val GHC.Classes.== "temporary" -> PostServersResponseBody201ServerImageTypeEnumTemporary
                                            | GHC.Base.otherwise -> PostServersResponseBody201ServerImageTypeOther val)
-- | Defines the object schema located at @paths.\/servers.POST.responses.201.content.application\/json.schema.properties.server.properties.iso@ in the specification.
-- 
-- ISO Image that is attached to this Server. Null if no ISO is attached.
data PostServersResponseBody201ServerIso = PostServersResponseBody201ServerIso {
  -- | deprecated: ISO 8601 timestamp of deprecation, null if ISO is still available. After the deprecation time it will no longer be possible to attach the ISO to Servers.
  postServersResponseBody201ServerIsoDeprecated :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | description: Description of the ISO
  , postServersResponseBody201ServerIsoDescription :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , postServersResponseBody201ServerIsoId :: GHC.Types.Int
  -- | name: Unique identifier of the ISO. Only set for public ISOs
  , postServersResponseBody201ServerIsoName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | type: Type of the ISO
  , postServersResponseBody201ServerIsoType :: PostServersResponseBody201ServerIsoType
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersResponseBody201ServerIso
    where toJSON obj = Data.Aeson.Types.Internal.object ("deprecated" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerIsoDeprecated obj : "description" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerIsoDescription obj : "id" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerIsoId obj : "name" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerIsoName obj : "type" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerIsoType obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("deprecated" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerIsoDeprecated obj) GHC.Base.<> (("description" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerIsoDescription obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerIsoId obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerIsoName obj) GHC.Base.<> ("type" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerIsoType obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersResponseBody201ServerIso
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersResponseBody201ServerIso" (\obj -> ((((GHC.Base.pure PostServersResponseBody201ServerIso GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "deprecated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Create a new 'PostServersResponseBody201ServerIso' with all required fields.
mkPostServersResponseBody201ServerIso :: GHC.Maybe.Maybe Data.Text.Internal.Text -- ^ 'postServersResponseBody201ServerIsoDeprecated'
  -> Data.Text.Internal.Text -- ^ 'postServersResponseBody201ServerIsoDescription'
  -> GHC.Types.Int -- ^ 'postServersResponseBody201ServerIsoId'
  -> GHC.Maybe.Maybe Data.Text.Internal.Text -- ^ 'postServersResponseBody201ServerIsoName'
  -> PostServersResponseBody201ServerIsoType -- ^ 'postServersResponseBody201ServerIsoType'
  -> PostServersResponseBody201ServerIso
mkPostServersResponseBody201ServerIso postServersResponseBody201ServerIsoDeprecated postServersResponseBody201ServerIsoDescription postServersResponseBody201ServerIsoId postServersResponseBody201ServerIsoName postServersResponseBody201ServerIsoType = PostServersResponseBody201ServerIso{postServersResponseBody201ServerIsoDeprecated = postServersResponseBody201ServerIsoDeprecated,
                                                                                                                                                                                                                                                                                               postServersResponseBody201ServerIsoDescription = postServersResponseBody201ServerIsoDescription,
                                                                                                                                                                                                                                                                                               postServersResponseBody201ServerIsoId = postServersResponseBody201ServerIsoId,
                                                                                                                                                                                                                                                                                               postServersResponseBody201ServerIsoName = postServersResponseBody201ServerIsoName,
                                                                                                                                                                                                                                                                                               postServersResponseBody201ServerIsoType = postServersResponseBody201ServerIsoType}
-- | Defines the enum schema located at @paths.\/servers.POST.responses.201.content.application\/json.schema.properties.server.properties.iso.properties.type@ in the specification.
-- 
-- Type of the ISO
data PostServersResponseBody201ServerIsoType =
   PostServersResponseBody201ServerIsoTypeOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostServersResponseBody201ServerIsoTypeTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostServersResponseBody201ServerIsoTypeEnumPublic -- ^ Represents the JSON value @"public"@
  | PostServersResponseBody201ServerIsoTypeEnumPrivate -- ^ Represents the JSON value @"private"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersResponseBody201ServerIsoType
    where toJSON (PostServersResponseBody201ServerIsoTypeOther val) = val
          toJSON (PostServersResponseBody201ServerIsoTypeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PostServersResponseBody201ServerIsoTypeEnumPublic) = "public"
          toJSON (PostServersResponseBody201ServerIsoTypeEnumPrivate) = "private"
instance Data.Aeson.Types.FromJSON.FromJSON PostServersResponseBody201ServerIsoType
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "public" -> PostServersResponseBody201ServerIsoTypeEnumPublic
                                            | val GHC.Classes.== "private" -> PostServersResponseBody201ServerIsoTypeEnumPrivate
                                            | GHC.Base.otherwise -> PostServersResponseBody201ServerIsoTypeOther val)
-- | Defines the object schema located at @paths.\/servers.POST.responses.201.content.application\/json.schema.properties.server.properties.placement_group@ in the specification.
-- 
-- 
data PostServersResponseBody201ServerPlacementGroup = PostServersResponseBody201ServerPlacementGroup {
  -- | created: Point in time when the Resource was created (in ISO-8601 format)
  postServersResponseBody201ServerPlacementGroupCreated :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , postServersResponseBody201ServerPlacementGroupId :: GHC.Types.Int
  -- | labels: User-defined labels (key-value pairs)
  , postServersResponseBody201ServerPlacementGroupLabels :: Data.Aeson.Types.Internal.Object
  -- | name: Name of the Resource. Must be unique per Project.
  , postServersResponseBody201ServerPlacementGroupName :: Data.Text.Internal.Text
  -- | servers: Array of IDs of Servers that are part of this Placement Group
  , postServersResponseBody201ServerPlacementGroupServers :: ([GHC.Types.Int])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersResponseBody201ServerPlacementGroup
    where toJSON obj = Data.Aeson.Types.Internal.object ("created" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPlacementGroupCreated obj : "id" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPlacementGroupId obj : "labels" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPlacementGroupLabels obj : "name" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPlacementGroupName obj : "servers" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPlacementGroupServers obj : "type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "spread" : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("created" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPlacementGroupCreated obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPlacementGroupId obj) GHC.Base.<> (("labels" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPlacementGroupLabels obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPlacementGroupName obj) GHC.Base.<> (("servers" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPlacementGroupServers obj) GHC.Base.<> ("type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "spread"))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersResponseBody201ServerPlacementGroup
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersResponseBody201ServerPlacementGroup" (\obj -> ((((GHC.Base.pure PostServersResponseBody201ServerPlacementGroup GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "labels")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "servers"))
-- | Create a new 'PostServersResponseBody201ServerPlacementGroup' with all required fields.
mkPostServersResponseBody201ServerPlacementGroup :: Data.Text.Internal.Text -- ^ 'postServersResponseBody201ServerPlacementGroupCreated'
  -> GHC.Types.Int -- ^ 'postServersResponseBody201ServerPlacementGroupId'
  -> Data.Aeson.Types.Internal.Object -- ^ 'postServersResponseBody201ServerPlacementGroupLabels'
  -> Data.Text.Internal.Text -- ^ 'postServersResponseBody201ServerPlacementGroupName'
  -> [GHC.Types.Int] -- ^ 'postServersResponseBody201ServerPlacementGroupServers'
  -> PostServersResponseBody201ServerPlacementGroup
mkPostServersResponseBody201ServerPlacementGroup postServersResponseBody201ServerPlacementGroupCreated postServersResponseBody201ServerPlacementGroupId postServersResponseBody201ServerPlacementGroupLabels postServersResponseBody201ServerPlacementGroupName postServersResponseBody201ServerPlacementGroupServers = PostServersResponseBody201ServerPlacementGroup{postServersResponseBody201ServerPlacementGroupCreated = postServersResponseBody201ServerPlacementGroupCreated,
                                                                                                                                                                                                                                                                                                                                                                       postServersResponseBody201ServerPlacementGroupId = postServersResponseBody201ServerPlacementGroupId,
                                                                                                                                                                                                                                                                                                                                                                       postServersResponseBody201ServerPlacementGroupLabels = postServersResponseBody201ServerPlacementGroupLabels,
                                                                                                                                                                                                                                                                                                                                                                       postServersResponseBody201ServerPlacementGroupName = postServersResponseBody201ServerPlacementGroupName,
                                                                                                                                                                                                                                                                                                                                                                       postServersResponseBody201ServerPlacementGroupServers = postServersResponseBody201ServerPlacementGroupServers}
-- | Defines the object schema located at @paths.\/servers.POST.responses.201.content.application\/json.schema.properties.server.properties.private_net.items@ in the specification.
-- 
-- 
data PostServersResponseBody201ServerPrivateNet = PostServersResponseBody201ServerPrivateNet {
  -- | alias_ips
  postServersResponseBody201ServerPrivateNetAliasIps :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  -- | ip
  , postServersResponseBody201ServerPrivateNetIp :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | mac_address
  , postServersResponseBody201ServerPrivateNetMacAddress :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | network
  , postServersResponseBody201ServerPrivateNetNetwork :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersResponseBody201ServerPrivateNet
    where toJSON obj = Data.Aeson.Types.Internal.object ("alias_ips" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPrivateNetAliasIps obj : "ip" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPrivateNetIp obj : "mac_address" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPrivateNetMacAddress obj : "network" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPrivateNetNetwork obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("alias_ips" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPrivateNetAliasIps obj) GHC.Base.<> (("ip" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPrivateNetIp obj) GHC.Base.<> (("mac_address" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPrivateNetMacAddress obj) GHC.Base.<> ("network" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPrivateNetNetwork obj))))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersResponseBody201ServerPrivateNet
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersResponseBody201ServerPrivateNet" (\obj -> (((GHC.Base.pure PostServersResponseBody201ServerPrivateNet GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "alias_ips")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "mac_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "network"))
-- | Create a new 'PostServersResponseBody201ServerPrivateNet' with all required fields.
mkPostServersResponseBody201ServerPrivateNet :: PostServersResponseBody201ServerPrivateNet
mkPostServersResponseBody201ServerPrivateNet = PostServersResponseBody201ServerPrivateNet{postServersResponseBody201ServerPrivateNetAliasIps = GHC.Maybe.Nothing,
                                                                                          postServersResponseBody201ServerPrivateNetIp = GHC.Maybe.Nothing,
                                                                                          postServersResponseBody201ServerPrivateNetMacAddress = GHC.Maybe.Nothing,
                                                                                          postServersResponseBody201ServerPrivateNetNetwork = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/servers.POST.responses.201.content.application\/json.schema.properties.server.properties.protection@ in the specification.
-- 
-- Protection configuration for the Server
data PostServersResponseBody201ServerProtection = PostServersResponseBody201ServerProtection {
  -- | delete: If true, prevents the Server from being deleted
  postServersResponseBody201ServerProtectionDelete :: GHC.Types.Bool
  -- | rebuild: If true, prevents the Server from being rebuilt
  , postServersResponseBody201ServerProtectionRebuild :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersResponseBody201ServerProtection
    where toJSON obj = Data.Aeson.Types.Internal.object ("delete" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerProtectionDelete obj : "rebuild" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerProtectionRebuild obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("delete" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerProtectionDelete obj) GHC.Base.<> ("rebuild" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerProtectionRebuild obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersResponseBody201ServerProtection
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersResponseBody201ServerProtection" (\obj -> (GHC.Base.pure PostServersResponseBody201ServerProtection GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "delete")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "rebuild"))
-- | Create a new 'PostServersResponseBody201ServerProtection' with all required fields.
mkPostServersResponseBody201ServerProtection :: GHC.Types.Bool -- ^ 'postServersResponseBody201ServerProtectionDelete'
  -> GHC.Types.Bool -- ^ 'postServersResponseBody201ServerProtectionRebuild'
  -> PostServersResponseBody201ServerProtection
mkPostServersResponseBody201ServerProtection postServersResponseBody201ServerProtectionDelete postServersResponseBody201ServerProtectionRebuild = PostServersResponseBody201ServerProtection{postServersResponseBody201ServerProtectionDelete = postServersResponseBody201ServerProtectionDelete,
                                                                                                                                                                                             postServersResponseBody201ServerProtectionRebuild = postServersResponseBody201ServerProtectionRebuild}
-- | Defines the object schema located at @paths.\/servers.POST.responses.201.content.application\/json.schema.properties.server.properties.public_net@ in the specification.
-- 
-- Public network information. The Server\'s IPv4 address can be found in \`public_net->ipv4->ip\`
data PostServersResponseBody201ServerPublicNet = PostServersResponseBody201ServerPublicNet {
  -- | firewalls: Firewalls applied to the public network interface of this Server
  postServersResponseBody201ServerPublicNetFirewalls :: (GHC.Maybe.Maybe ([PostServersResponseBody201ServerPublicNetFirewalls]))
  -- | floating_ips: IDs of Floating IPs assigned to this Server
  , postServersResponseBody201ServerPublicNetFloatingIps :: ([GHC.Types.Int])
  -- | ipv4: IP address (v4) and its reverse DNS entry of this Server
  , postServersResponseBody201ServerPublicNetIpv4 :: PostServersResponseBody201ServerPublicNetIpv4
  -- | ipv6: IPv6 network assigned to this Server and its reverse DNS entry
  , postServersResponseBody201ServerPublicNetIpv6 :: PostServersResponseBody201ServerPublicNetIpv6
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersResponseBody201ServerPublicNet
    where toJSON obj = Data.Aeson.Types.Internal.object ("firewalls" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPublicNetFirewalls obj : "floating_ips" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPublicNetFloatingIps obj : "ipv4" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPublicNetIpv4 obj : "ipv6" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPublicNetIpv6 obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("firewalls" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPublicNetFirewalls obj) GHC.Base.<> (("floating_ips" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPublicNetFloatingIps obj) GHC.Base.<> (("ipv4" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPublicNetIpv4 obj) GHC.Base.<> ("ipv6" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPublicNetIpv6 obj))))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersResponseBody201ServerPublicNet
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersResponseBody201ServerPublicNet" (\obj -> (((GHC.Base.pure PostServersResponseBody201ServerPublicNet GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "firewalls")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "floating_ips")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ipv4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ipv6"))
-- | Create a new 'PostServersResponseBody201ServerPublicNet' with all required fields.
mkPostServersResponseBody201ServerPublicNet :: [GHC.Types.Int] -- ^ 'postServersResponseBody201ServerPublicNetFloatingIps'
  -> PostServersResponseBody201ServerPublicNetIpv4 -- ^ 'postServersResponseBody201ServerPublicNetIpv4'
  -> PostServersResponseBody201ServerPublicNetIpv6 -- ^ 'postServersResponseBody201ServerPublicNetIpv6'
  -> PostServersResponseBody201ServerPublicNet
mkPostServersResponseBody201ServerPublicNet postServersResponseBody201ServerPublicNetFloatingIps postServersResponseBody201ServerPublicNetIpv4 postServersResponseBody201ServerPublicNetIpv6 = PostServersResponseBody201ServerPublicNet{postServersResponseBody201ServerPublicNetFirewalls = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                         postServersResponseBody201ServerPublicNetFloatingIps = postServersResponseBody201ServerPublicNetFloatingIps,
                                                                                                                                                                                                                                         postServersResponseBody201ServerPublicNetIpv4 = postServersResponseBody201ServerPublicNetIpv4,
                                                                                                                                                                                                                                         postServersResponseBody201ServerPublicNetIpv6 = postServersResponseBody201ServerPublicNetIpv6}
-- | Defines the object schema located at @paths.\/servers.POST.responses.201.content.application\/json.schema.properties.server.properties.public_net.properties.firewalls.items@ in the specification.
-- 
-- 
data PostServersResponseBody201ServerPublicNetFirewalls = PostServersResponseBody201ServerPublicNetFirewalls {
  -- | id: ID of the Resource
  postServersResponseBody201ServerPublicNetFirewallsId :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | status: Status of the Firewall on the Server
  , postServersResponseBody201ServerPublicNetFirewallsStatus :: (GHC.Maybe.Maybe PostServersResponseBody201ServerPublicNetFirewallsStatus)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersResponseBody201ServerPublicNetFirewalls
    where toJSON obj = Data.Aeson.Types.Internal.object ("id" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPublicNetFirewallsId obj : "status" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPublicNetFirewallsStatus obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("id" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPublicNetFirewallsId obj) GHC.Base.<> ("status" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPublicNetFirewallsStatus obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersResponseBody201ServerPublicNetFirewalls
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersResponseBody201ServerPublicNetFirewalls" (\obj -> (GHC.Base.pure PostServersResponseBody201ServerPublicNetFirewalls GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status"))
-- | Create a new 'PostServersResponseBody201ServerPublicNetFirewalls' with all required fields.
mkPostServersResponseBody201ServerPublicNetFirewalls :: PostServersResponseBody201ServerPublicNetFirewalls
mkPostServersResponseBody201ServerPublicNetFirewalls = PostServersResponseBody201ServerPublicNetFirewalls{postServersResponseBody201ServerPublicNetFirewallsId = GHC.Maybe.Nothing,
                                                                                                          postServersResponseBody201ServerPublicNetFirewallsStatus = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/servers.POST.responses.201.content.application\/json.schema.properties.server.properties.public_net.properties.firewalls.items.properties.status@ in the specification.
-- 
-- Status of the Firewall on the Server
data PostServersResponseBody201ServerPublicNetFirewallsStatus =
   PostServersResponseBody201ServerPublicNetFirewallsStatusOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostServersResponseBody201ServerPublicNetFirewallsStatusTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostServersResponseBody201ServerPublicNetFirewallsStatusEnumApplied -- ^ Represents the JSON value @"applied"@
  | PostServersResponseBody201ServerPublicNetFirewallsStatusEnumPending -- ^ Represents the JSON value @"pending"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersResponseBody201ServerPublicNetFirewallsStatus
    where toJSON (PostServersResponseBody201ServerPublicNetFirewallsStatusOther val) = val
          toJSON (PostServersResponseBody201ServerPublicNetFirewallsStatusTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PostServersResponseBody201ServerPublicNetFirewallsStatusEnumApplied) = "applied"
          toJSON (PostServersResponseBody201ServerPublicNetFirewallsStatusEnumPending) = "pending"
instance Data.Aeson.Types.FromJSON.FromJSON PostServersResponseBody201ServerPublicNetFirewallsStatus
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "applied" -> PostServersResponseBody201ServerPublicNetFirewallsStatusEnumApplied
                                            | val GHC.Classes.== "pending" -> PostServersResponseBody201ServerPublicNetFirewallsStatusEnumPending
                                            | GHC.Base.otherwise -> PostServersResponseBody201ServerPublicNetFirewallsStatusOther val)
-- | Defines the object schema located at @paths.\/servers.POST.responses.201.content.application\/json.schema.properties.server.properties.public_net.properties.ipv4@ in the specification.
-- 
-- IP address (v4) and its reverse DNS entry of this Server
data PostServersResponseBody201ServerPublicNetIpv4 = PostServersResponseBody201ServerPublicNetIpv4 {
  -- | blocked: If the IP is blocked by our anti abuse dept
  postServersResponseBody201ServerPublicNetIpv4Blocked :: GHC.Types.Bool
  -- | dns_ptr: Reverse DNS PTR entry for the IPv4 addresses of this Server
  , postServersResponseBody201ServerPublicNetIpv4DnsPtr :: Data.Text.Internal.Text
  -- | ip: IP address (v4) of this Server
  , postServersResponseBody201ServerPublicNetIpv4Ip :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersResponseBody201ServerPublicNetIpv4
    where toJSON obj = Data.Aeson.Types.Internal.object ("blocked" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPublicNetIpv4Blocked obj : "dns_ptr" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPublicNetIpv4DnsPtr obj : "ip" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPublicNetIpv4Ip obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("blocked" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPublicNetIpv4Blocked obj) GHC.Base.<> (("dns_ptr" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPublicNetIpv4DnsPtr obj) GHC.Base.<> ("ip" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPublicNetIpv4Ip obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersResponseBody201ServerPublicNetIpv4
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersResponseBody201ServerPublicNetIpv4" (\obj -> ((GHC.Base.pure PostServersResponseBody201ServerPublicNetIpv4 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "blocked")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "dns_ptr")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ip"))
-- | Create a new 'PostServersResponseBody201ServerPublicNetIpv4' with all required fields.
mkPostServersResponseBody201ServerPublicNetIpv4 :: GHC.Types.Bool -- ^ 'postServersResponseBody201ServerPublicNetIpv4Blocked'
  -> Data.Text.Internal.Text -- ^ 'postServersResponseBody201ServerPublicNetIpv4DnsPtr'
  -> Data.Text.Internal.Text -- ^ 'postServersResponseBody201ServerPublicNetIpv4Ip'
  -> PostServersResponseBody201ServerPublicNetIpv4
mkPostServersResponseBody201ServerPublicNetIpv4 postServersResponseBody201ServerPublicNetIpv4Blocked postServersResponseBody201ServerPublicNetIpv4DnsPtr postServersResponseBody201ServerPublicNetIpv4Ip = PostServersResponseBody201ServerPublicNetIpv4{postServersResponseBody201ServerPublicNetIpv4Blocked = postServersResponseBody201ServerPublicNetIpv4Blocked,
                                                                                                                                                                                                                                                         postServersResponseBody201ServerPublicNetIpv4DnsPtr = postServersResponseBody201ServerPublicNetIpv4DnsPtr,
                                                                                                                                                                                                                                                         postServersResponseBody201ServerPublicNetIpv4Ip = postServersResponseBody201ServerPublicNetIpv4Ip}
-- | Defines the object schema located at @paths.\/servers.POST.responses.201.content.application\/json.schema.properties.server.properties.public_net.properties.ipv6@ in the specification.
-- 
-- IPv6 network assigned to this Server and its reverse DNS entry
data PostServersResponseBody201ServerPublicNetIpv6 = PostServersResponseBody201ServerPublicNetIpv6 {
  -- | blocked: If the IP is blocked by our anti abuse dept
  postServersResponseBody201ServerPublicNetIpv6Blocked :: GHC.Types.Bool
  -- | dns_ptr: Reverse DNS PTR entries for the IPv6 addresses of this Server, \`null\` by default
  , postServersResponseBody201ServerPublicNetIpv6DnsPtr :: (GHC.Maybe.Maybe ([PostServersResponseBody201ServerPublicNetIpv6DnsPtr]))
  -- | ip: IP address (v4) of this Server
  , postServersResponseBody201ServerPublicNetIpv6Ip :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersResponseBody201ServerPublicNetIpv6
    where toJSON obj = Data.Aeson.Types.Internal.object ("blocked" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPublicNetIpv6Blocked obj : "dns_ptr" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPublicNetIpv6DnsPtr obj : "ip" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPublicNetIpv6Ip obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("blocked" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPublicNetIpv6Blocked obj) GHC.Base.<> (("dns_ptr" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPublicNetIpv6DnsPtr obj) GHC.Base.<> ("ip" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPublicNetIpv6Ip obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersResponseBody201ServerPublicNetIpv6
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersResponseBody201ServerPublicNetIpv6" (\obj -> ((GHC.Base.pure PostServersResponseBody201ServerPublicNetIpv6 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "blocked")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "dns_ptr")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ip"))
-- | Create a new 'PostServersResponseBody201ServerPublicNetIpv6' with all required fields.
mkPostServersResponseBody201ServerPublicNetIpv6 :: GHC.Types.Bool -- ^ 'postServersResponseBody201ServerPublicNetIpv6Blocked'
  -> GHC.Maybe.Maybe ([PostServersResponseBody201ServerPublicNetIpv6DnsPtr]) -- ^ 'postServersResponseBody201ServerPublicNetIpv6DnsPtr'
  -> Data.Text.Internal.Text -- ^ 'postServersResponseBody201ServerPublicNetIpv6Ip'
  -> PostServersResponseBody201ServerPublicNetIpv6
mkPostServersResponseBody201ServerPublicNetIpv6 postServersResponseBody201ServerPublicNetIpv6Blocked postServersResponseBody201ServerPublicNetIpv6DnsPtr postServersResponseBody201ServerPublicNetIpv6Ip = PostServersResponseBody201ServerPublicNetIpv6{postServersResponseBody201ServerPublicNetIpv6Blocked = postServersResponseBody201ServerPublicNetIpv6Blocked,
                                                                                                                                                                                                                                                         postServersResponseBody201ServerPublicNetIpv6DnsPtr = postServersResponseBody201ServerPublicNetIpv6DnsPtr,
                                                                                                                                                                                                                                                         postServersResponseBody201ServerPublicNetIpv6Ip = postServersResponseBody201ServerPublicNetIpv6Ip}
-- | Defines the object schema located at @paths.\/servers.POST.responses.201.content.application\/json.schema.properties.server.properties.public_net.properties.ipv6.properties.dns_ptr.items@ in the specification.
-- 
-- 
data PostServersResponseBody201ServerPublicNetIpv6DnsPtr = PostServersResponseBody201ServerPublicNetIpv6DnsPtr {
  -- | dns_ptr: DNS pointer for the specific IP address
  postServersResponseBody201ServerPublicNetIpv6DnsPtrDnsPtr :: Data.Text.Internal.Text
  -- | ip: Single IPv6 address of this Server for which the reverse DNS entry has been set up
  , postServersResponseBody201ServerPublicNetIpv6DnsPtrIp :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersResponseBody201ServerPublicNetIpv6DnsPtr
    where toJSON obj = Data.Aeson.Types.Internal.object ("dns_ptr" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPublicNetIpv6DnsPtrDnsPtr obj : "ip" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPublicNetIpv6DnsPtrIp obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("dns_ptr" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPublicNetIpv6DnsPtrDnsPtr obj) GHC.Base.<> ("ip" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerPublicNetIpv6DnsPtrIp obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersResponseBody201ServerPublicNetIpv6DnsPtr
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersResponseBody201ServerPublicNetIpv6DnsPtr" (\obj -> (GHC.Base.pure PostServersResponseBody201ServerPublicNetIpv6DnsPtr GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "dns_ptr")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ip"))
-- | Create a new 'PostServersResponseBody201ServerPublicNetIpv6DnsPtr' with all required fields.
mkPostServersResponseBody201ServerPublicNetIpv6DnsPtr :: Data.Text.Internal.Text -- ^ 'postServersResponseBody201ServerPublicNetIpv6DnsPtrDnsPtr'
  -> Data.Text.Internal.Text -- ^ 'postServersResponseBody201ServerPublicNetIpv6DnsPtrIp'
  -> PostServersResponseBody201ServerPublicNetIpv6DnsPtr
mkPostServersResponseBody201ServerPublicNetIpv6DnsPtr postServersResponseBody201ServerPublicNetIpv6DnsPtrDnsPtr postServersResponseBody201ServerPublicNetIpv6DnsPtrIp = PostServersResponseBody201ServerPublicNetIpv6DnsPtr{postServersResponseBody201ServerPublicNetIpv6DnsPtrDnsPtr = postServersResponseBody201ServerPublicNetIpv6DnsPtrDnsPtr,
                                                                                                                                                                                                                            postServersResponseBody201ServerPublicNetIpv6DnsPtrIp = postServersResponseBody201ServerPublicNetIpv6DnsPtrIp}
-- | Defines the object schema located at @paths.\/servers.POST.responses.201.content.application\/json.schema.properties.server.properties.server_type@ in the specification.
-- 
-- Type of Server - determines how much ram, disk and cpu a Server has
data PostServersResponseBody201ServerServerType = PostServersResponseBody201ServerServerType {
  -- | cores: Number of cpu cores a Server of this type will have
  postServersResponseBody201ServerServerTypeCores :: GHC.Types.Double
  -- | cpu_type: Type of cpu
  , postServersResponseBody201ServerServerTypeCpuType :: PostServersResponseBody201ServerServerTypeCpuType
  -- | deprecated: True if Server type is deprecated
  , postServersResponseBody201ServerServerTypeDeprecated :: GHC.Types.Bool
  -- | description: Description of the Server type
  , postServersResponseBody201ServerServerTypeDescription :: Data.Text.Internal.Text
  -- | disk: Disk size a Server of this type will have in GB
  , postServersResponseBody201ServerServerTypeDisk :: GHC.Types.Double
  -- | id: ID of the Server type
  , postServersResponseBody201ServerServerTypeId :: GHC.Types.Int
  -- | memory: Memory a Server of this type will have in GB
  , postServersResponseBody201ServerServerTypeMemory :: GHC.Types.Double
  -- | name: Unique identifier of the Server type
  , postServersResponseBody201ServerServerTypeName :: Data.Text.Internal.Text
  -- | prices: Prices in different Locations
  , postServersResponseBody201ServerServerTypePrices :: ([PostServersResponseBody201ServerServerTypePrices])
  -- | storage_type: Type of Server boot drive. Local has higher speed. Network has better availability.
  , postServersResponseBody201ServerServerTypeStorageType :: PostServersResponseBody201ServerServerTypeStorageType
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersResponseBody201ServerServerType
    where toJSON obj = Data.Aeson.Types.Internal.object ("cores" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerServerTypeCores obj : "cpu_type" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerServerTypeCpuType obj : "deprecated" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerServerTypeDeprecated obj : "description" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerServerTypeDescription obj : "disk" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerServerTypeDisk obj : "id" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerServerTypeId obj : "memory" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerServerTypeMemory obj : "name" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerServerTypeName obj : "prices" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerServerTypePrices obj : "storage_type" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerServerTypeStorageType obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("cores" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerServerTypeCores obj) GHC.Base.<> (("cpu_type" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerServerTypeCpuType obj) GHC.Base.<> (("deprecated" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerServerTypeDeprecated obj) GHC.Base.<> (("description" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerServerTypeDescription obj) GHC.Base.<> (("disk" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerServerTypeDisk obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerServerTypeId obj) GHC.Base.<> (("memory" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerServerTypeMemory obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerServerTypeName obj) GHC.Base.<> (("prices" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerServerTypePrices obj) GHC.Base.<> ("storage_type" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerServerTypeStorageType obj))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersResponseBody201ServerServerType
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersResponseBody201ServerServerType" (\obj -> (((((((((GHC.Base.pure PostServersResponseBody201ServerServerType GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cores")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cpu_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "deprecated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "disk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "memory")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "prices")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "storage_type"))
-- | Create a new 'PostServersResponseBody201ServerServerType' with all required fields.
mkPostServersResponseBody201ServerServerType :: GHC.Types.Double -- ^ 'postServersResponseBody201ServerServerTypeCores'
  -> PostServersResponseBody201ServerServerTypeCpuType -- ^ 'postServersResponseBody201ServerServerTypeCpuType'
  -> GHC.Types.Bool -- ^ 'postServersResponseBody201ServerServerTypeDeprecated'
  -> Data.Text.Internal.Text -- ^ 'postServersResponseBody201ServerServerTypeDescription'
  -> GHC.Types.Double -- ^ 'postServersResponseBody201ServerServerTypeDisk'
  -> GHC.Types.Int -- ^ 'postServersResponseBody201ServerServerTypeId'
  -> GHC.Types.Double -- ^ 'postServersResponseBody201ServerServerTypeMemory'
  -> Data.Text.Internal.Text -- ^ 'postServersResponseBody201ServerServerTypeName'
  -> [PostServersResponseBody201ServerServerTypePrices] -- ^ 'postServersResponseBody201ServerServerTypePrices'
  -> PostServersResponseBody201ServerServerTypeStorageType -- ^ 'postServersResponseBody201ServerServerTypeStorageType'
  -> PostServersResponseBody201ServerServerType
mkPostServersResponseBody201ServerServerType postServersResponseBody201ServerServerTypeCores postServersResponseBody201ServerServerTypeCpuType postServersResponseBody201ServerServerTypeDeprecated postServersResponseBody201ServerServerTypeDescription postServersResponseBody201ServerServerTypeDisk postServersResponseBody201ServerServerTypeId postServersResponseBody201ServerServerTypeMemory postServersResponseBody201ServerServerTypeName postServersResponseBody201ServerServerTypePrices postServersResponseBody201ServerServerTypeStorageType = PostServersResponseBody201ServerServerType{postServersResponseBody201ServerServerTypeCores = postServersResponseBody201ServerServerTypeCores,
postServersResponseBody201ServerServerTypeCpuType = postServersResponseBody201ServerServerTypeCpuType,
postServersResponseBody201ServerServerTypeDeprecated = postServersResponseBody201ServerServerTypeDeprecated,
postServersResponseBody201ServerServerTypeDescription = postServersResponseBody201ServerServerTypeDescription,
postServersResponseBody201ServerServerTypeDisk = postServersResponseBody201ServerServerTypeDisk,
postServersResponseBody201ServerServerTypeId = postServersResponseBody201ServerServerTypeId,
postServersResponseBody201ServerServerTypeMemory = postServersResponseBody201ServerServerTypeMemory,
postServersResponseBody201ServerServerTypeName = postServersResponseBody201ServerServerTypeName,
postServersResponseBody201ServerServerTypePrices = postServersResponseBody201ServerServerTypePrices,
postServersResponseBody201ServerServerTypeStorageType = postServersResponseBody201ServerServerTypeStorageType}
-- | Defines the enum schema located at @paths.\/servers.POST.responses.201.content.application\/json.schema.properties.server.properties.server_type.properties.cpu_type@ in the specification.
-- 
-- Type of cpu
data PostServersResponseBody201ServerServerTypeCpuType =
   PostServersResponseBody201ServerServerTypeCpuTypeOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostServersResponseBody201ServerServerTypeCpuTypeTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostServersResponseBody201ServerServerTypeCpuTypeEnumShared -- ^ Represents the JSON value @"shared"@
  | PostServersResponseBody201ServerServerTypeCpuTypeEnumDedicated -- ^ Represents the JSON value @"dedicated"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersResponseBody201ServerServerTypeCpuType
    where toJSON (PostServersResponseBody201ServerServerTypeCpuTypeOther val) = val
          toJSON (PostServersResponseBody201ServerServerTypeCpuTypeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PostServersResponseBody201ServerServerTypeCpuTypeEnumShared) = "shared"
          toJSON (PostServersResponseBody201ServerServerTypeCpuTypeEnumDedicated) = "dedicated"
instance Data.Aeson.Types.FromJSON.FromJSON PostServersResponseBody201ServerServerTypeCpuType
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "shared" -> PostServersResponseBody201ServerServerTypeCpuTypeEnumShared
                                            | val GHC.Classes.== "dedicated" -> PostServersResponseBody201ServerServerTypeCpuTypeEnumDedicated
                                            | GHC.Base.otherwise -> PostServersResponseBody201ServerServerTypeCpuTypeOther val)
-- | Defines the object schema located at @paths.\/servers.POST.responses.201.content.application\/json.schema.properties.server.properties.server_type.properties.prices.items@ in the specification.
-- 
-- 
data PostServersResponseBody201ServerServerTypePrices = PostServersResponseBody201ServerServerTypePrices {
  -- | location: Name of the Location the price is for
  postServersResponseBody201ServerServerTypePricesLocation :: Data.Text.Internal.Text
  -- | price_hourly: Hourly costs for a Server type in this Location
  , postServersResponseBody201ServerServerTypePricesPriceHourly :: PostServersResponseBody201ServerServerTypePricesPriceHourly
  -- | price_monthly: Monthly costs for a Server type in this Location
  , postServersResponseBody201ServerServerTypePricesPriceMonthly :: PostServersResponseBody201ServerServerTypePricesPriceMonthly
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersResponseBody201ServerServerTypePrices
    where toJSON obj = Data.Aeson.Types.Internal.object ("location" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerServerTypePricesLocation obj : "price_hourly" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerServerTypePricesPriceHourly obj : "price_monthly" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerServerTypePricesPriceMonthly obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("location" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerServerTypePricesLocation obj) GHC.Base.<> (("price_hourly" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerServerTypePricesPriceHourly obj) GHC.Base.<> ("price_monthly" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerServerTypePricesPriceMonthly obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersResponseBody201ServerServerTypePrices
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersResponseBody201ServerServerTypePrices" (\obj -> ((GHC.Base.pure PostServersResponseBody201ServerServerTypePrices GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "location")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price_hourly")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price_monthly"))
-- | Create a new 'PostServersResponseBody201ServerServerTypePrices' with all required fields.
mkPostServersResponseBody201ServerServerTypePrices :: Data.Text.Internal.Text -- ^ 'postServersResponseBody201ServerServerTypePricesLocation'
  -> PostServersResponseBody201ServerServerTypePricesPriceHourly -- ^ 'postServersResponseBody201ServerServerTypePricesPriceHourly'
  -> PostServersResponseBody201ServerServerTypePricesPriceMonthly -- ^ 'postServersResponseBody201ServerServerTypePricesPriceMonthly'
  -> PostServersResponseBody201ServerServerTypePrices
mkPostServersResponseBody201ServerServerTypePrices postServersResponseBody201ServerServerTypePricesLocation postServersResponseBody201ServerServerTypePricesPriceHourly postServersResponseBody201ServerServerTypePricesPriceMonthly = PostServersResponseBody201ServerServerTypePrices{postServersResponseBody201ServerServerTypePricesLocation = postServersResponseBody201ServerServerTypePricesLocation,
                                                                                                                                                                                                                                                                                        postServersResponseBody201ServerServerTypePricesPriceHourly = postServersResponseBody201ServerServerTypePricesPriceHourly,
                                                                                                                                                                                                                                                                                        postServersResponseBody201ServerServerTypePricesPriceMonthly = postServersResponseBody201ServerServerTypePricesPriceMonthly}
-- | Defines the object schema located at @paths.\/servers.POST.responses.201.content.application\/json.schema.properties.server.properties.server_type.properties.prices.items.properties.price_hourly@ in the specification.
-- 
-- Hourly costs for a Server type in this Location
data PostServersResponseBody201ServerServerTypePricesPriceHourly = PostServersResponseBody201ServerServerTypePricesPriceHourly {
  -- | gross: Price with VAT added
  postServersResponseBody201ServerServerTypePricesPriceHourlyGross :: Data.Text.Internal.Text
  -- | net: Price without VAT
  , postServersResponseBody201ServerServerTypePricesPriceHourlyNet :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersResponseBody201ServerServerTypePricesPriceHourly
    where toJSON obj = Data.Aeson.Types.Internal.object ("gross" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerServerTypePricesPriceHourlyGross obj : "net" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerServerTypePricesPriceHourlyNet obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("gross" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerServerTypePricesPriceHourlyGross obj) GHC.Base.<> ("net" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerServerTypePricesPriceHourlyNet obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersResponseBody201ServerServerTypePricesPriceHourly
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersResponseBody201ServerServerTypePricesPriceHourly" (\obj -> (GHC.Base.pure PostServersResponseBody201ServerServerTypePricesPriceHourly GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "gross")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "net"))
-- | Create a new 'PostServersResponseBody201ServerServerTypePricesPriceHourly' with all required fields.
mkPostServersResponseBody201ServerServerTypePricesPriceHourly :: Data.Text.Internal.Text -- ^ 'postServersResponseBody201ServerServerTypePricesPriceHourlyGross'
  -> Data.Text.Internal.Text -- ^ 'postServersResponseBody201ServerServerTypePricesPriceHourlyNet'
  -> PostServersResponseBody201ServerServerTypePricesPriceHourly
mkPostServersResponseBody201ServerServerTypePricesPriceHourly postServersResponseBody201ServerServerTypePricesPriceHourlyGross postServersResponseBody201ServerServerTypePricesPriceHourlyNet = PostServersResponseBody201ServerServerTypePricesPriceHourly{postServersResponseBody201ServerServerTypePricesPriceHourlyGross = postServersResponseBody201ServerServerTypePricesPriceHourlyGross,
                                                                                                                                                                                                                                                            postServersResponseBody201ServerServerTypePricesPriceHourlyNet = postServersResponseBody201ServerServerTypePricesPriceHourlyNet}
-- | Defines the object schema located at @paths.\/servers.POST.responses.201.content.application\/json.schema.properties.server.properties.server_type.properties.prices.items.properties.price_monthly@ in the specification.
-- 
-- Monthly costs for a Server type in this Location
data PostServersResponseBody201ServerServerTypePricesPriceMonthly = PostServersResponseBody201ServerServerTypePricesPriceMonthly {
  -- | gross: Price with VAT added
  postServersResponseBody201ServerServerTypePricesPriceMonthlyGross :: Data.Text.Internal.Text
  -- | net: Price without VAT
  , postServersResponseBody201ServerServerTypePricesPriceMonthlyNet :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersResponseBody201ServerServerTypePricesPriceMonthly
    where toJSON obj = Data.Aeson.Types.Internal.object ("gross" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerServerTypePricesPriceMonthlyGross obj : "net" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerServerTypePricesPriceMonthlyNet obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("gross" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerServerTypePricesPriceMonthlyGross obj) GHC.Base.<> ("net" Data.Aeson.Types.ToJSON..= postServersResponseBody201ServerServerTypePricesPriceMonthlyNet obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersResponseBody201ServerServerTypePricesPriceMonthly
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersResponseBody201ServerServerTypePricesPriceMonthly" (\obj -> (GHC.Base.pure PostServersResponseBody201ServerServerTypePricesPriceMonthly GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "gross")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "net"))
-- | Create a new 'PostServersResponseBody201ServerServerTypePricesPriceMonthly' with all required fields.
mkPostServersResponseBody201ServerServerTypePricesPriceMonthly :: Data.Text.Internal.Text -- ^ 'postServersResponseBody201ServerServerTypePricesPriceMonthlyGross'
  -> Data.Text.Internal.Text -- ^ 'postServersResponseBody201ServerServerTypePricesPriceMonthlyNet'
  -> PostServersResponseBody201ServerServerTypePricesPriceMonthly
mkPostServersResponseBody201ServerServerTypePricesPriceMonthly postServersResponseBody201ServerServerTypePricesPriceMonthlyGross postServersResponseBody201ServerServerTypePricesPriceMonthlyNet = PostServersResponseBody201ServerServerTypePricesPriceMonthly{postServersResponseBody201ServerServerTypePricesPriceMonthlyGross = postServersResponseBody201ServerServerTypePricesPriceMonthlyGross,
                                                                                                                                                                                                                                                                postServersResponseBody201ServerServerTypePricesPriceMonthlyNet = postServersResponseBody201ServerServerTypePricesPriceMonthlyNet}
-- | Defines the enum schema located at @paths.\/servers.POST.responses.201.content.application\/json.schema.properties.server.properties.server_type.properties.storage_type@ in the specification.
-- 
-- Type of Server boot drive. Local has higher speed. Network has better availability.
data PostServersResponseBody201ServerServerTypeStorageType =
   PostServersResponseBody201ServerServerTypeStorageTypeOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostServersResponseBody201ServerServerTypeStorageTypeTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostServersResponseBody201ServerServerTypeStorageTypeEnumLocal -- ^ Represents the JSON value @"local"@
  | PostServersResponseBody201ServerServerTypeStorageTypeEnumNetwork -- ^ Represents the JSON value @"network"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersResponseBody201ServerServerTypeStorageType
    where toJSON (PostServersResponseBody201ServerServerTypeStorageTypeOther val) = val
          toJSON (PostServersResponseBody201ServerServerTypeStorageTypeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PostServersResponseBody201ServerServerTypeStorageTypeEnumLocal) = "local"
          toJSON (PostServersResponseBody201ServerServerTypeStorageTypeEnumNetwork) = "network"
instance Data.Aeson.Types.FromJSON.FromJSON PostServersResponseBody201ServerServerTypeStorageType
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "local" -> PostServersResponseBody201ServerServerTypeStorageTypeEnumLocal
                                            | val GHC.Classes.== "network" -> PostServersResponseBody201ServerServerTypeStorageTypeEnumNetwork
                                            | GHC.Base.otherwise -> PostServersResponseBody201ServerServerTypeStorageTypeOther val)
-- | Defines the enum schema located at @paths.\/servers.POST.responses.201.content.application\/json.schema.properties.server.properties.status@ in the specification.
-- 
-- Status of the Server
data PostServersResponseBody201ServerStatus =
   PostServersResponseBody201ServerStatusOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostServersResponseBody201ServerStatusTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostServersResponseBody201ServerStatusEnumRunning -- ^ Represents the JSON value @"running"@
  | PostServersResponseBody201ServerStatusEnumInitializing -- ^ Represents the JSON value @"initializing"@
  | PostServersResponseBody201ServerStatusEnumStarting -- ^ Represents the JSON value @"starting"@
  | PostServersResponseBody201ServerStatusEnumStopping -- ^ Represents the JSON value @"stopping"@
  | PostServersResponseBody201ServerStatusEnumOff -- ^ Represents the JSON value @"off"@
  | PostServersResponseBody201ServerStatusEnumDeleting -- ^ Represents the JSON value @"deleting"@
  | PostServersResponseBody201ServerStatusEnumMigrating -- ^ Represents the JSON value @"migrating"@
  | PostServersResponseBody201ServerStatusEnumRebuilding -- ^ Represents the JSON value @"rebuilding"@
  | PostServersResponseBody201ServerStatusEnumUnknown -- ^ Represents the JSON value @"unknown"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersResponseBody201ServerStatus
    where toJSON (PostServersResponseBody201ServerStatusOther val) = val
          toJSON (PostServersResponseBody201ServerStatusTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PostServersResponseBody201ServerStatusEnumRunning) = "running"
          toJSON (PostServersResponseBody201ServerStatusEnumInitializing) = "initializing"
          toJSON (PostServersResponseBody201ServerStatusEnumStarting) = "starting"
          toJSON (PostServersResponseBody201ServerStatusEnumStopping) = "stopping"
          toJSON (PostServersResponseBody201ServerStatusEnumOff) = "off"
          toJSON (PostServersResponseBody201ServerStatusEnumDeleting) = "deleting"
          toJSON (PostServersResponseBody201ServerStatusEnumMigrating) = "migrating"
          toJSON (PostServersResponseBody201ServerStatusEnumRebuilding) = "rebuilding"
          toJSON (PostServersResponseBody201ServerStatusEnumUnknown) = "unknown"
instance Data.Aeson.Types.FromJSON.FromJSON PostServersResponseBody201ServerStatus
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "running" -> PostServersResponseBody201ServerStatusEnumRunning
                                            | val GHC.Classes.== "initializing" -> PostServersResponseBody201ServerStatusEnumInitializing
                                            | val GHC.Classes.== "starting" -> PostServersResponseBody201ServerStatusEnumStarting
                                            | val GHC.Classes.== "stopping" -> PostServersResponseBody201ServerStatusEnumStopping
                                            | val GHC.Classes.== "off" -> PostServersResponseBody201ServerStatusEnumOff
                                            | val GHC.Classes.== "deleting" -> PostServersResponseBody201ServerStatusEnumDeleting
                                            | val GHC.Classes.== "migrating" -> PostServersResponseBody201ServerStatusEnumMigrating
                                            | val GHC.Classes.== "rebuilding" -> PostServersResponseBody201ServerStatusEnumRebuilding
                                            | val GHC.Classes.== "unknown" -> PostServersResponseBody201ServerStatusEnumUnknown
                                            | GHC.Base.otherwise -> PostServersResponseBody201ServerStatusOther val)
-- | > POST /servers
-- 
-- The same as 'postServers' but accepts an explicit configuration.
postServersWithConfiguration :: forall m . HCloud.Common.MonadHTTP m => HCloud.Common.Configuration -- ^ The configuration to use in the request
  -> GHC.Maybe.Maybe PostServersRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response PostServersResponse) -- ^ Monadic computation which returns the result of the operation
postServersWithConfiguration config
                             body = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostServersResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostServersResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                     PostServersResponseBody201)
                                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/servers") GHC.Base.mempty body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /servers
-- 
-- The same as 'postServers' but returns the raw 'Data.ByteString.Char8.ByteString'.
postServersRaw :: forall m . HCloud.Common.MonadHTTP m => GHC.Maybe.Maybe PostServersRequestBody -- ^ The request body to send
  -> HCloud.Common.HttpT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postServersRaw body = GHC.Base.id (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/servers") GHC.Base.mempty body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /servers
-- 
-- The same as 'postServers' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postServersWithConfigurationRaw :: forall m . HCloud.Common.MonadHTTP m => HCloud.Common.Configuration -- ^ The configuration to use in the request
  -> GHC.Maybe.Maybe PostServersRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postServersWithConfigurationRaw config
                                body = GHC.Base.id (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/servers") GHC.Base.mempty body HCloud.Common.RequestBodyEncodingJSON)
