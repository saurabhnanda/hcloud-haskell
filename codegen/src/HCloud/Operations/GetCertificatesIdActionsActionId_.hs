-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation getCertificates_Id_Actions_ActionId_
module HCloud.Operations.GetCertificatesIdActionsActionId_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > GET /certificates/{id}/actions/{action_id}
-- 
-- Returns a specific Action for a Certificate. Only type \`managed\` Certificates have Actions.
getCertificates_Id_Actions_ActionId_ :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer                                                                                                                         -- ^ id: ID of the Certificate
  -> GHC.Integer.Type.Integer                                                                                                                         -- ^ action_id: ID of the Action
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response GetCertificatesIdActionsActionIdResponse))     -- ^ Monad containing the result of the operation
getCertificates_Id_Actions_ActionId_ config
                                     id
                                     actionId = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetCertificatesIdActionsActionIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetCertificatesIdActionsActionIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          GetCertificatesIdActionsActionIdResponseBody200)
                                                                                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/certificates/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ("/actions/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel actionId)) GHC.Base.++ ""))))) [])
-- | > GET /certificates/{id}/actions/{action_id}
-- 
-- The same as 'getCertificates_Id_Actions_ActionId_' but returns the raw 'Data.ByteString.Char8.ByteString'
getCertificates_Id_Actions_ActionId_Raw :: forall m s . (HCloud.Common.MonadHTTP m,
                                                         HCloud.Common.SecurityScheme s) =>
                                           HCloud.Common.Configuration s ->
                                           GHC.Integer.Type.Integer ->
                                           GHC.Integer.Type.Integer ->
                                           m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                 (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getCertificates_Id_Actions_ActionId_Raw config
                                        id
                                        actionId = GHC.Base.id (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/certificates/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ("/actions/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel actionId)) GHC.Base.++ ""))))) [])
-- | > GET /certificates/{id}/actions/{action_id}
-- 
-- Monadic version of 'getCertificates_Id_Actions_ActionId_' (use with 'HCloud.Common.runWithConfiguration')
getCertificates_Id_Actions_ActionId_M :: forall m s . (HCloud.Common.MonadHTTP m,
                                                       HCloud.Common.SecurityScheme s) =>
                                         GHC.Integer.Type.Integer ->
                                         GHC.Integer.Type.Integer ->
                                         Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                            m
                                                                            (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                                (Network.HTTP.Client.Types.Response GetCertificatesIdActionsActionIdResponse))
getCertificates_Id_Actions_ActionId_M id
                                      actionId = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetCertificatesIdActionsActionIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetCertificatesIdActionsActionIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           GetCertificatesIdActionsActionIdResponseBody200)
                                                                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/certificates/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ("/actions/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel actionId)) GHC.Base.++ ""))))) [])
-- | > GET /certificates/{id}/actions/{action_id}
-- 
-- Monadic version of 'getCertificates_Id_Actions_ActionId_Raw' (use with 'HCloud.Common.runWithConfiguration')
getCertificates_Id_Actions_ActionId_RawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                          HCloud.Common.SecurityScheme s) =>
                                            GHC.Integer.Type.Integer ->
                                            GHC.Integer.Type.Integer ->
                                            Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                               m
                                                                               (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                                   (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getCertificates_Id_Actions_ActionId_RawM id
                                         actionId = GHC.Base.id (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/certificates/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ("/actions/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel actionId)) GHC.Base.++ ""))))) [])
-- | Represents a response of the operation 'getCertificates_Id_Actions_ActionId_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetCertificatesIdActionsActionIdResponseError' is used.
data GetCertificatesIdActionsActionIdResponse =                                                  
   GetCertificatesIdActionsActionIdResponseError GHC.Base.String                                 -- ^ Means either no matching case available or a parse error
  | GetCertificatesIdActionsActionIdResponse200 GetCertificatesIdActionsActionIdResponseBody200  -- ^ The \`action\` key contains the Certificate Action
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema GetCertificatesIdActionsActionIdResponseBody200
-- 
-- 
data GetCertificatesIdActionsActionIdResponseBody200 = GetCertificatesIdActionsActionIdResponseBody200 {
  -- | action
  getCertificatesIdActionsActionIdResponseBody200Action :: GetCertificatesIdActionsActionIdResponseBody200Action
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetCertificatesIdActionsActionIdResponseBody200
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "action" (getCertificatesIdActionsActionIdResponseBody200Action obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "action" (getCertificatesIdActionsActionIdResponseBody200Action obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetCertificatesIdActionsActionIdResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetCertificatesIdActionsActionIdResponseBody200" (\obj -> GHC.Base.pure GetCertificatesIdActionsActionIdResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "action"))
-- | Defines the data type for the schema GetCertificatesIdActionsActionIdResponseBody200Action
-- 
-- 
data GetCertificatesIdActionsActionIdResponseBody200Action = GetCertificatesIdActionsActionIdResponseBody200Action {
  -- | command: Command executed in the Action
  getCertificatesIdActionsActionIdResponseBody200ActionCommand :: Data.Text.Internal.Text
  -- | error: Error message for the Action if error occurred, otherwise null
  , getCertificatesIdActionsActionIdResponseBody200ActionError :: GetCertificatesIdActionsActionIdResponseBody200ActionError
  -- | finished: Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
  , getCertificatesIdActionsActionIdResponseBody200ActionFinished :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , getCertificatesIdActionsActionIdResponseBody200ActionId :: GHC.Integer.Type.Integer
  -- | progress: Progress of Action in percent
  , getCertificatesIdActionsActionIdResponseBody200ActionProgress :: GHC.Types.Double
  -- | resources: Resources the Action relates to
  , getCertificatesIdActionsActionIdResponseBody200ActionResources :: ([] GetCertificatesIdActionsActionIdResponseBody200ActionResources)
  -- | started: Point in time when the Action was started (in ISO-8601 format)
  , getCertificatesIdActionsActionIdResponseBody200ActionStarted :: Data.Text.Internal.Text
  -- | status: Status of the Action
  , getCertificatesIdActionsActionIdResponseBody200ActionStatus :: GetCertificatesIdActionsActionIdResponseBody200ActionStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetCertificatesIdActionsActionIdResponseBody200Action
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "command" (getCertificatesIdActionsActionIdResponseBody200ActionCommand obj) : (Data.Aeson..=) "error" (getCertificatesIdActionsActionIdResponseBody200ActionError obj) : (Data.Aeson..=) "finished" (getCertificatesIdActionsActionIdResponseBody200ActionFinished obj) : (Data.Aeson..=) "id" (getCertificatesIdActionsActionIdResponseBody200ActionId obj) : (Data.Aeson..=) "progress" (getCertificatesIdActionsActionIdResponseBody200ActionProgress obj) : (Data.Aeson..=) "resources" (getCertificatesIdActionsActionIdResponseBody200ActionResources obj) : (Data.Aeson..=) "started" (getCertificatesIdActionsActionIdResponseBody200ActionStarted obj) : (Data.Aeson..=) "status" (getCertificatesIdActionsActionIdResponseBody200ActionStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "command" (getCertificatesIdActionsActionIdResponseBody200ActionCommand obj) GHC.Base.<> ((Data.Aeson..=) "error" (getCertificatesIdActionsActionIdResponseBody200ActionError obj) GHC.Base.<> ((Data.Aeson..=) "finished" (getCertificatesIdActionsActionIdResponseBody200ActionFinished obj) GHC.Base.<> ((Data.Aeson..=) "id" (getCertificatesIdActionsActionIdResponseBody200ActionId obj) GHC.Base.<> ((Data.Aeson..=) "progress" (getCertificatesIdActionsActionIdResponseBody200ActionProgress obj) GHC.Base.<> ((Data.Aeson..=) "resources" (getCertificatesIdActionsActionIdResponseBody200ActionResources obj) GHC.Base.<> ((Data.Aeson..=) "started" (getCertificatesIdActionsActionIdResponseBody200ActionStarted obj) GHC.Base.<> (Data.Aeson..=) "status" (getCertificatesIdActionsActionIdResponseBody200ActionStatus obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetCertificatesIdActionsActionIdResponseBody200Action
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetCertificatesIdActionsActionIdResponseBody200Action" (\obj -> (((((((GHC.Base.pure GetCertificatesIdActionsActionIdResponseBody200Action GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "command")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "finished")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "started")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Defines the data type for the schema GetCertificatesIdActionsActionIdResponseBody200ActionError
-- 
-- Error message for the Action if error occurred, otherwise null
data GetCertificatesIdActionsActionIdResponseBody200ActionError = GetCertificatesIdActionsActionIdResponseBody200ActionError {
  -- | code: Fixed machine readable code
  getCertificatesIdActionsActionIdResponseBody200ActionErrorCode :: Data.Text.Internal.Text
  -- | message: Humanized error message
  , getCertificatesIdActionsActionIdResponseBody200ActionErrorMessage :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetCertificatesIdActionsActionIdResponseBody200ActionError
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "code" (getCertificatesIdActionsActionIdResponseBody200ActionErrorCode obj) : (Data.Aeson..=) "message" (getCertificatesIdActionsActionIdResponseBody200ActionErrorMessage obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "code" (getCertificatesIdActionsActionIdResponseBody200ActionErrorCode obj) GHC.Base.<> (Data.Aeson..=) "message" (getCertificatesIdActionsActionIdResponseBody200ActionErrorMessage obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetCertificatesIdActionsActionIdResponseBody200ActionError
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetCertificatesIdActionsActionIdResponseBody200ActionError" (\obj -> (GHC.Base.pure GetCertificatesIdActionsActionIdResponseBody200ActionError GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Defines the data type for the schema GetCertificatesIdActionsActionIdResponseBody200ActionResources
-- 
-- 
data GetCertificatesIdActionsActionIdResponseBody200ActionResources = GetCertificatesIdActionsActionIdResponseBody200ActionResources {
  -- | id: ID of the Resource
  getCertificatesIdActionsActionIdResponseBody200ActionResourcesId :: GHC.Integer.Type.Integer
  -- | type: Type of resource referenced
  , getCertificatesIdActionsActionIdResponseBody200ActionResourcesType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetCertificatesIdActionsActionIdResponseBody200ActionResources
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (getCertificatesIdActionsActionIdResponseBody200ActionResourcesId obj) : (Data.Aeson..=) "type" (getCertificatesIdActionsActionIdResponseBody200ActionResourcesType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (getCertificatesIdActionsActionIdResponseBody200ActionResourcesId obj) GHC.Base.<> (Data.Aeson..=) "type" (getCertificatesIdActionsActionIdResponseBody200ActionResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetCertificatesIdActionsActionIdResponseBody200ActionResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetCertificatesIdActionsActionIdResponseBody200ActionResources" (\obj -> (GHC.Base.pure GetCertificatesIdActionsActionIdResponseBody200ActionResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema GetCertificatesIdActionsActionIdResponseBody200ActionStatus
-- 
-- Status of the Action
data GetCertificatesIdActionsActionIdResponseBody200ActionStatus
    = GetCertificatesIdActionsActionIdResponseBody200ActionStatusEnumOther Data.Aeson.Types.Internal.Value
    | GetCertificatesIdActionsActionIdResponseBody200ActionStatusEnumTyped Data.Text.Internal.Text
    | GetCertificatesIdActionsActionIdResponseBody200ActionStatusEnumStringError
    | GetCertificatesIdActionsActionIdResponseBody200ActionStatusEnumStringRunning
    | GetCertificatesIdActionsActionIdResponseBody200ActionStatusEnumStringSuccess
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetCertificatesIdActionsActionIdResponseBody200ActionStatus
    where toJSON (GetCertificatesIdActionsActionIdResponseBody200ActionStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetCertificatesIdActionsActionIdResponseBody200ActionStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetCertificatesIdActionsActionIdResponseBody200ActionStatusEnumStringError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error"
          toJSON (GetCertificatesIdActionsActionIdResponseBody200ActionStatusEnumStringRunning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running"
          toJSON (GetCertificatesIdActionsActionIdResponseBody200ActionStatusEnumStringSuccess) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success"
instance Data.Aeson.FromJSON GetCertificatesIdActionsActionIdResponseBody200ActionStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error")
                                          then GetCertificatesIdActionsActionIdResponseBody200ActionStatusEnumStringError
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running")
                                                then GetCertificatesIdActionsActionIdResponseBody200ActionStatusEnumStringRunning
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success")
                                                      then GetCertificatesIdActionsActionIdResponseBody200ActionStatusEnumStringSuccess
                                                      else GetCertificatesIdActionsActionIdResponseBody200ActionStatusEnumOther val)
