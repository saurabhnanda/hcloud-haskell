-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation postFirewalls_Id_ActionsApplyToResources
module HCloud.Operations.PostFirewallsIdActionsApplyToResources where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > POST /firewalls/{id}/actions/apply_to_resources
-- 
-- Applies one Firewall to multiple resources.
-- 
-- Currently servers (public network interface) and label selectors are supported.
-- 
-- \#\#\#\# Call specific error codes
-- 
-- | Code                        | Description                                             |
-- |-----------------------------|---------------------------------------------------------|
-- | \`firewall_already_applied\`  | Firewall was already applied on resource                |
-- | \`incompatible_network_type\` | The Network type is incompatible for the given resource |
postFirewalls_Id_ActionsApplyToResources :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer                                                                                                                             -- ^ id: ID of the Firewall
  -> GHC.Maybe.Maybe PostFirewallsIdActionsApplyToResourcesRequestBody                                                                                    -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response PostFirewallsIdActionsApplyToResourcesResponse))   -- ^ Monad containing the result of the operation
postFirewalls_Id_ActionsApplyToResources config
                                         id
                                         body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostFirewallsIdActionsApplyToResourcesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostFirewallsIdActionsApplyToResourcesResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      PostFirewallsIdActionsApplyToResourcesResponseBody201)
                                                                                                                                                                                                                                | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/firewalls/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/apply_to_resources"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /firewalls/{id}/actions/apply_to_resources
-- 
-- The same as 'postFirewalls_Id_ActionsApplyToResources' but returns the raw 'Data.ByteString.Char8.ByteString'
postFirewalls_Id_ActionsApplyToResourcesRaw :: forall m s . (HCloud.Common.MonadHTTP m,
                                                             HCloud.Common.SecurityScheme s) =>
                                               HCloud.Common.Configuration s ->
                                               GHC.Integer.Type.Integer ->
                                               GHC.Maybe.Maybe PostFirewallsIdActionsApplyToResourcesRequestBody ->
                                               m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                     (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postFirewalls_Id_ActionsApplyToResourcesRaw config
                                            id
                                            body = GHC.Base.id (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/firewalls/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/apply_to_resources"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /firewalls/{id}/actions/apply_to_resources
-- 
-- Monadic version of 'postFirewalls_Id_ActionsApplyToResources' (use with 'HCloud.Common.runWithConfiguration')
postFirewalls_Id_ActionsApplyToResourcesM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                           HCloud.Common.SecurityScheme s) =>
                                             GHC.Integer.Type.Integer ->
                                             GHC.Maybe.Maybe PostFirewallsIdActionsApplyToResourcesRequestBody ->
                                             Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                                m
                                                                                (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                                    (Network.HTTP.Client.Types.Response PostFirewallsIdActionsApplyToResourcesResponse))
postFirewalls_Id_ActionsApplyToResourcesM id
                                          body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostFirewallsIdActionsApplyToResourcesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostFirewallsIdActionsApplyToResourcesResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       PostFirewallsIdActionsApplyToResourcesResponseBody201)
                                                                                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/firewalls/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/apply_to_resources"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /firewalls/{id}/actions/apply_to_resources
-- 
-- Monadic version of 'postFirewalls_Id_ActionsApplyToResourcesRaw' (use with 'HCloud.Common.runWithConfiguration')
postFirewalls_Id_ActionsApplyToResourcesRawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                              HCloud.Common.SecurityScheme s) =>
                                                GHC.Integer.Type.Integer ->
                                                GHC.Maybe.Maybe PostFirewallsIdActionsApplyToResourcesRequestBody ->
                                                Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                                   m
                                                                                   (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                                       (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postFirewalls_Id_ActionsApplyToResourcesRawM id
                                             body = GHC.Base.id (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/firewalls/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/apply_to_resources"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema postFirewalls_Id_ActionsApplyToResourcesRequestBody
-- 
-- 
data PostFirewallsIdActionsApplyToResourcesRequestBody = PostFirewallsIdActionsApplyToResourcesRequestBody {
  -- | apply_to: Resources the Firewall should be applied to
  postFirewallsIdActionsApplyToResourcesRequestBodyApplyTo :: ([] PostFirewallsIdActionsApplyToResourcesRequestBodyApplyTo)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFirewallsIdActionsApplyToResourcesRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "apply_to" (postFirewallsIdActionsApplyToResourcesRequestBodyApplyTo obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "apply_to" (postFirewallsIdActionsApplyToResourcesRequestBodyApplyTo obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostFirewallsIdActionsApplyToResourcesRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFirewallsIdActionsApplyToResourcesRequestBody" (\obj -> GHC.Base.pure PostFirewallsIdActionsApplyToResourcesRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "apply_to"))
-- | Defines the data type for the schema postFirewalls_Id_ActionsApplyToResourcesRequestBodyApply_to
-- 
-- 
data PostFirewallsIdActionsApplyToResourcesRequestBodyApplyTo = PostFirewallsIdActionsApplyToResourcesRequestBodyApplyTo {
  -- | label_selector: Configuration for type label_selector, required if type is \`label_selector\`
  postFirewallsIdActionsApplyToResourcesRequestBodyApplyToLabelSelector :: (GHC.Maybe.Maybe PostFirewallsIdActionsApplyToResourcesRequestBodyApplyToLabelSelector)
  -- | server: Configuration for type server, required if type is \`server\`
  , postFirewallsIdActionsApplyToResourcesRequestBodyApplyToServer :: (GHC.Maybe.Maybe PostFirewallsIdActionsApplyToResourcesRequestBodyApplyToServer)
  -- | type: Type of the resource
  , postFirewallsIdActionsApplyToResourcesRequestBodyApplyToType :: (GHC.Maybe.Maybe PostFirewallsIdActionsApplyToResourcesRequestBodyApplyToType)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFirewallsIdActionsApplyToResourcesRequestBodyApplyTo
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "label_selector" (postFirewallsIdActionsApplyToResourcesRequestBodyApplyToLabelSelector obj) : (Data.Aeson..=) "server" (postFirewallsIdActionsApplyToResourcesRequestBodyApplyToServer obj) : (Data.Aeson..=) "type" (postFirewallsIdActionsApplyToResourcesRequestBodyApplyToType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "label_selector" (postFirewallsIdActionsApplyToResourcesRequestBodyApplyToLabelSelector obj) GHC.Base.<> ((Data.Aeson..=) "server" (postFirewallsIdActionsApplyToResourcesRequestBodyApplyToServer obj) GHC.Base.<> (Data.Aeson..=) "type" (postFirewallsIdActionsApplyToResourcesRequestBodyApplyToType obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PostFirewallsIdActionsApplyToResourcesRequestBodyApplyTo
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFirewallsIdActionsApplyToResourcesRequestBodyApplyTo" (\obj -> ((GHC.Base.pure PostFirewallsIdActionsApplyToResourcesRequestBodyApplyTo GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label_selector")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "server")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))
-- | Defines the data type for the schema postFirewalls_Id_ActionsApplyToResourcesRequestBodyApply_toLabel_selector
-- 
-- Configuration for type label_selector, required if type is \`label_selector\`
data PostFirewallsIdActionsApplyToResourcesRequestBodyApplyToLabelSelector = PostFirewallsIdActionsApplyToResourcesRequestBodyApplyToLabelSelector {
  -- | selector: Label selector
  postFirewallsIdActionsApplyToResourcesRequestBodyApplyToLabelSelectorSelector :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFirewallsIdActionsApplyToResourcesRequestBodyApplyToLabelSelector
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "selector" (postFirewallsIdActionsApplyToResourcesRequestBodyApplyToLabelSelectorSelector obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "selector" (postFirewallsIdActionsApplyToResourcesRequestBodyApplyToLabelSelectorSelector obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostFirewallsIdActionsApplyToResourcesRequestBodyApplyToLabelSelector
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFirewallsIdActionsApplyToResourcesRequestBodyApplyToLabelSelector" (\obj -> GHC.Base.pure PostFirewallsIdActionsApplyToResourcesRequestBodyApplyToLabelSelector GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "selector"))
-- | Defines the data type for the schema postFirewalls_Id_ActionsApplyToResourcesRequestBodyApply_toServer
-- 
-- Configuration for type server, required if type is \`server\`
data PostFirewallsIdActionsApplyToResourcesRequestBodyApplyToServer = PostFirewallsIdActionsApplyToResourcesRequestBodyApplyToServer {
  -- | id: ID of the Server
  postFirewallsIdActionsApplyToResourcesRequestBodyApplyToServerId :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFirewallsIdActionsApplyToResourcesRequestBodyApplyToServer
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (postFirewallsIdActionsApplyToResourcesRequestBodyApplyToServerId obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (postFirewallsIdActionsApplyToResourcesRequestBodyApplyToServerId obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostFirewallsIdActionsApplyToResourcesRequestBodyApplyToServer
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFirewallsIdActionsApplyToResourcesRequestBodyApplyToServer" (\obj -> GHC.Base.pure PostFirewallsIdActionsApplyToResourcesRequestBodyApplyToServer GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id"))
-- | Defines the enum schema postFirewalls_Id_ActionsApplyToResourcesRequestBodyApply_toType
-- 
-- Type of the resource
data PostFirewallsIdActionsApplyToResourcesRequestBodyApplyToType
    = PostFirewallsIdActionsApplyToResourcesRequestBodyApplyToTypeEnumOther Data.Aeson.Types.Internal.Value
    | PostFirewallsIdActionsApplyToResourcesRequestBodyApplyToTypeEnumTyped Data.Text.Internal.Text
    | PostFirewallsIdActionsApplyToResourcesRequestBodyApplyToTypeEnumStringLabelSelector
    | PostFirewallsIdActionsApplyToResourcesRequestBodyApplyToTypeEnumStringServer
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFirewallsIdActionsApplyToResourcesRequestBodyApplyToType
    where toJSON (PostFirewallsIdActionsApplyToResourcesRequestBodyApplyToTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostFirewallsIdActionsApplyToResourcesRequestBodyApplyToTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostFirewallsIdActionsApplyToResourcesRequestBodyApplyToTypeEnumStringLabelSelector) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "label_selector"
          toJSON (PostFirewallsIdActionsApplyToResourcesRequestBodyApplyToTypeEnumStringServer) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "server"
instance Data.Aeson.FromJSON PostFirewallsIdActionsApplyToResourcesRequestBodyApplyToType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "label_selector")
                                          then PostFirewallsIdActionsApplyToResourcesRequestBodyApplyToTypeEnumStringLabelSelector
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "server")
                                                then PostFirewallsIdActionsApplyToResourcesRequestBodyApplyToTypeEnumStringServer
                                                else PostFirewallsIdActionsApplyToResourcesRequestBodyApplyToTypeEnumOther val)
-- | Represents a response of the operation 'postFirewalls_Id_ActionsApplyToResources'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostFirewallsIdActionsApplyToResourcesResponseError' is used.
data PostFirewallsIdActionsApplyToResourcesResponse =                                                        
   PostFirewallsIdActionsApplyToResourcesResponseError GHC.Base.String                                       -- ^ Means either no matching case available or a parse error
  | PostFirewallsIdActionsApplyToResourcesResponse201 PostFirewallsIdActionsApplyToResourcesResponseBody201  -- ^ The \`actions\` key contains multiple \`apply_firewall\` Actions
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema PostFirewallsIdActionsApplyToResourcesResponseBody201
-- 
-- 
data PostFirewallsIdActionsApplyToResourcesResponseBody201 = PostFirewallsIdActionsApplyToResourcesResponseBody201 {
  -- | actions
  postFirewallsIdActionsApplyToResourcesResponseBody201Actions :: ([] PostFirewallsIdActionsApplyToResourcesResponseBody201Actions)
  -- | meta
  , postFirewallsIdActionsApplyToResourcesResponseBody201Meta :: (GHC.Maybe.Maybe PostFirewallsIdActionsApplyToResourcesResponseBody201Meta)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFirewallsIdActionsApplyToResourcesResponseBody201
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "actions" (postFirewallsIdActionsApplyToResourcesResponseBody201Actions obj) : (Data.Aeson..=) "meta" (postFirewallsIdActionsApplyToResourcesResponseBody201Meta obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "actions" (postFirewallsIdActionsApplyToResourcesResponseBody201Actions obj) GHC.Base.<> (Data.Aeson..=) "meta" (postFirewallsIdActionsApplyToResourcesResponseBody201Meta obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostFirewallsIdActionsApplyToResourcesResponseBody201
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFirewallsIdActionsApplyToResourcesResponseBody201" (\obj -> (GHC.Base.pure PostFirewallsIdActionsApplyToResourcesResponseBody201 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "actions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "meta"))
-- | Defines the data type for the schema PostFirewallsIdActionsApplyToResourcesResponseBody201Actions
-- 
-- 
data PostFirewallsIdActionsApplyToResourcesResponseBody201Actions = PostFirewallsIdActionsApplyToResourcesResponseBody201Actions {
  -- | command: Command executed in the Action
  postFirewallsIdActionsApplyToResourcesResponseBody201ActionsCommand :: Data.Text.Internal.Text
  -- | error: Error message for the Action if error occurred, otherwise null
  , postFirewallsIdActionsApplyToResourcesResponseBody201ActionsError :: PostFirewallsIdActionsApplyToResourcesResponseBody201ActionsError
  -- | finished: Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
  , postFirewallsIdActionsApplyToResourcesResponseBody201ActionsFinished :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , postFirewallsIdActionsApplyToResourcesResponseBody201ActionsId :: GHC.Integer.Type.Integer
  -- | progress: Progress of Action in percent
  , postFirewallsIdActionsApplyToResourcesResponseBody201ActionsProgress :: GHC.Types.Double
  -- | resources: Resources the Action relates to
  , postFirewallsIdActionsApplyToResourcesResponseBody201ActionsResources :: ([] PostFirewallsIdActionsApplyToResourcesResponseBody201ActionsResources)
  -- | started: Point in time when the Action was started (in ISO-8601 format)
  , postFirewallsIdActionsApplyToResourcesResponseBody201ActionsStarted :: Data.Text.Internal.Text
  -- | status: Status of the Action
  , postFirewallsIdActionsApplyToResourcesResponseBody201ActionsStatus :: PostFirewallsIdActionsApplyToResourcesResponseBody201ActionsStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFirewallsIdActionsApplyToResourcesResponseBody201Actions
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "command" (postFirewallsIdActionsApplyToResourcesResponseBody201ActionsCommand obj) : (Data.Aeson..=) "error" (postFirewallsIdActionsApplyToResourcesResponseBody201ActionsError obj) : (Data.Aeson..=) "finished" (postFirewallsIdActionsApplyToResourcesResponseBody201ActionsFinished obj) : (Data.Aeson..=) "id" (postFirewallsIdActionsApplyToResourcesResponseBody201ActionsId obj) : (Data.Aeson..=) "progress" (postFirewallsIdActionsApplyToResourcesResponseBody201ActionsProgress obj) : (Data.Aeson..=) "resources" (postFirewallsIdActionsApplyToResourcesResponseBody201ActionsResources obj) : (Data.Aeson..=) "started" (postFirewallsIdActionsApplyToResourcesResponseBody201ActionsStarted obj) : (Data.Aeson..=) "status" (postFirewallsIdActionsApplyToResourcesResponseBody201ActionsStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "command" (postFirewallsIdActionsApplyToResourcesResponseBody201ActionsCommand obj) GHC.Base.<> ((Data.Aeson..=) "error" (postFirewallsIdActionsApplyToResourcesResponseBody201ActionsError obj) GHC.Base.<> ((Data.Aeson..=) "finished" (postFirewallsIdActionsApplyToResourcesResponseBody201ActionsFinished obj) GHC.Base.<> ((Data.Aeson..=) "id" (postFirewallsIdActionsApplyToResourcesResponseBody201ActionsId obj) GHC.Base.<> ((Data.Aeson..=) "progress" (postFirewallsIdActionsApplyToResourcesResponseBody201ActionsProgress obj) GHC.Base.<> ((Data.Aeson..=) "resources" (postFirewallsIdActionsApplyToResourcesResponseBody201ActionsResources obj) GHC.Base.<> ((Data.Aeson..=) "started" (postFirewallsIdActionsApplyToResourcesResponseBody201ActionsStarted obj) GHC.Base.<> (Data.Aeson..=) "status" (postFirewallsIdActionsApplyToResourcesResponseBody201ActionsStatus obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostFirewallsIdActionsApplyToResourcesResponseBody201Actions
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFirewallsIdActionsApplyToResourcesResponseBody201Actions" (\obj -> (((((((GHC.Base.pure PostFirewallsIdActionsApplyToResourcesResponseBody201Actions GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "command")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "finished")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "started")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Defines the data type for the schema PostFirewallsIdActionsApplyToResourcesResponseBody201ActionsError
-- 
-- Error message for the Action if error occurred, otherwise null
data PostFirewallsIdActionsApplyToResourcesResponseBody201ActionsError = PostFirewallsIdActionsApplyToResourcesResponseBody201ActionsError {
  -- | code: Fixed machine readable code
  postFirewallsIdActionsApplyToResourcesResponseBody201ActionsErrorCode :: Data.Text.Internal.Text
  -- | message: Humanized error message
  , postFirewallsIdActionsApplyToResourcesResponseBody201ActionsErrorMessage :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFirewallsIdActionsApplyToResourcesResponseBody201ActionsError
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "code" (postFirewallsIdActionsApplyToResourcesResponseBody201ActionsErrorCode obj) : (Data.Aeson..=) "message" (postFirewallsIdActionsApplyToResourcesResponseBody201ActionsErrorMessage obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "code" (postFirewallsIdActionsApplyToResourcesResponseBody201ActionsErrorCode obj) GHC.Base.<> (Data.Aeson..=) "message" (postFirewallsIdActionsApplyToResourcesResponseBody201ActionsErrorMessage obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostFirewallsIdActionsApplyToResourcesResponseBody201ActionsError
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFirewallsIdActionsApplyToResourcesResponseBody201ActionsError" (\obj -> (GHC.Base.pure PostFirewallsIdActionsApplyToResourcesResponseBody201ActionsError GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Defines the data type for the schema PostFirewallsIdActionsApplyToResourcesResponseBody201ActionsResources
-- 
-- 
data PostFirewallsIdActionsApplyToResourcesResponseBody201ActionsResources = PostFirewallsIdActionsApplyToResourcesResponseBody201ActionsResources {
  -- | id: ID of the Resource
  postFirewallsIdActionsApplyToResourcesResponseBody201ActionsResourcesId :: GHC.Integer.Type.Integer
  -- | type: Type of resource referenced
  , postFirewallsIdActionsApplyToResourcesResponseBody201ActionsResourcesType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFirewallsIdActionsApplyToResourcesResponseBody201ActionsResources
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (postFirewallsIdActionsApplyToResourcesResponseBody201ActionsResourcesId obj) : (Data.Aeson..=) "type" (postFirewallsIdActionsApplyToResourcesResponseBody201ActionsResourcesType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (postFirewallsIdActionsApplyToResourcesResponseBody201ActionsResourcesId obj) GHC.Base.<> (Data.Aeson..=) "type" (postFirewallsIdActionsApplyToResourcesResponseBody201ActionsResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostFirewallsIdActionsApplyToResourcesResponseBody201ActionsResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFirewallsIdActionsApplyToResourcesResponseBody201ActionsResources" (\obj -> (GHC.Base.pure PostFirewallsIdActionsApplyToResourcesResponseBody201ActionsResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema PostFirewallsIdActionsApplyToResourcesResponseBody201ActionsStatus
-- 
-- Status of the Action
data PostFirewallsIdActionsApplyToResourcesResponseBody201ActionsStatus
    = PostFirewallsIdActionsApplyToResourcesResponseBody201ActionsStatusEnumOther Data.Aeson.Types.Internal.Value
    | PostFirewallsIdActionsApplyToResourcesResponseBody201ActionsStatusEnumTyped Data.Text.Internal.Text
    | PostFirewallsIdActionsApplyToResourcesResponseBody201ActionsStatusEnumStringError
    | PostFirewallsIdActionsApplyToResourcesResponseBody201ActionsStatusEnumStringRunning
    | PostFirewallsIdActionsApplyToResourcesResponseBody201ActionsStatusEnumStringSuccess
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFirewallsIdActionsApplyToResourcesResponseBody201ActionsStatus
    where toJSON (PostFirewallsIdActionsApplyToResourcesResponseBody201ActionsStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostFirewallsIdActionsApplyToResourcesResponseBody201ActionsStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostFirewallsIdActionsApplyToResourcesResponseBody201ActionsStatusEnumStringError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error"
          toJSON (PostFirewallsIdActionsApplyToResourcesResponseBody201ActionsStatusEnumStringRunning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running"
          toJSON (PostFirewallsIdActionsApplyToResourcesResponseBody201ActionsStatusEnumStringSuccess) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success"
instance Data.Aeson.FromJSON PostFirewallsIdActionsApplyToResourcesResponseBody201ActionsStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error")
                                          then PostFirewallsIdActionsApplyToResourcesResponseBody201ActionsStatusEnumStringError
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running")
                                                then PostFirewallsIdActionsApplyToResourcesResponseBody201ActionsStatusEnumStringRunning
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success")
                                                      then PostFirewallsIdActionsApplyToResourcesResponseBody201ActionsStatusEnumStringSuccess
                                                      else PostFirewallsIdActionsApplyToResourcesResponseBody201ActionsStatusEnumOther val)
-- | Defines the data type for the schema PostFirewallsIdActionsApplyToResourcesResponseBody201Meta
-- 
-- 
data PostFirewallsIdActionsApplyToResourcesResponseBody201Meta = PostFirewallsIdActionsApplyToResourcesResponseBody201Meta {
  -- | pagination
  postFirewallsIdActionsApplyToResourcesResponseBody201MetaPagination :: PostFirewallsIdActionsApplyToResourcesResponseBody201MetaPagination
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFirewallsIdActionsApplyToResourcesResponseBody201Meta
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "pagination" (postFirewallsIdActionsApplyToResourcesResponseBody201MetaPagination obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "pagination" (postFirewallsIdActionsApplyToResourcesResponseBody201MetaPagination obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostFirewallsIdActionsApplyToResourcesResponseBody201Meta
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFirewallsIdActionsApplyToResourcesResponseBody201Meta" (\obj -> GHC.Base.pure PostFirewallsIdActionsApplyToResourcesResponseBody201Meta GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pagination"))
-- | Defines the data type for the schema PostFirewallsIdActionsApplyToResourcesResponseBody201MetaPagination
-- 
-- 
data PostFirewallsIdActionsApplyToResourcesResponseBody201MetaPagination = PostFirewallsIdActionsApplyToResourcesResponseBody201MetaPagination {
  -- | last_page: ID of the last page available. Can be null if the current page is the last one.
  postFirewallsIdActionsApplyToResourcesResponseBody201MetaPaginationLastPage :: GHC.Types.Double
  -- | next_page: ID of the next page. Can be null if the current page is the last one.
  , postFirewallsIdActionsApplyToResourcesResponseBody201MetaPaginationNextPage :: GHC.Types.Double
  -- | page: Current page number
  , postFirewallsIdActionsApplyToResourcesResponseBody201MetaPaginationPage :: GHC.Types.Double
  -- | per_page: Maximum number of items shown per page in the response
  , postFirewallsIdActionsApplyToResourcesResponseBody201MetaPaginationPerPage :: GHC.Types.Double
  -- | previous_page: ID of the previous page. Can be null if the current page is the first one.
  , postFirewallsIdActionsApplyToResourcesResponseBody201MetaPaginationPreviousPage :: GHC.Types.Double
  -- | total_entries: The total number of entries that exist in the database for this query. Nullable if unknown.
  , postFirewallsIdActionsApplyToResourcesResponseBody201MetaPaginationTotalEntries :: GHC.Types.Double
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostFirewallsIdActionsApplyToResourcesResponseBody201MetaPagination
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "last_page" (postFirewallsIdActionsApplyToResourcesResponseBody201MetaPaginationLastPage obj) : (Data.Aeson..=) "next_page" (postFirewallsIdActionsApplyToResourcesResponseBody201MetaPaginationNextPage obj) : (Data.Aeson..=) "page" (postFirewallsIdActionsApplyToResourcesResponseBody201MetaPaginationPage obj) : (Data.Aeson..=) "per_page" (postFirewallsIdActionsApplyToResourcesResponseBody201MetaPaginationPerPage obj) : (Data.Aeson..=) "previous_page" (postFirewallsIdActionsApplyToResourcesResponseBody201MetaPaginationPreviousPage obj) : (Data.Aeson..=) "total_entries" (postFirewallsIdActionsApplyToResourcesResponseBody201MetaPaginationTotalEntries obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "last_page" (postFirewallsIdActionsApplyToResourcesResponseBody201MetaPaginationLastPage obj) GHC.Base.<> ((Data.Aeson..=) "next_page" (postFirewallsIdActionsApplyToResourcesResponseBody201MetaPaginationNextPage obj) GHC.Base.<> ((Data.Aeson..=) "page" (postFirewallsIdActionsApplyToResourcesResponseBody201MetaPaginationPage obj) GHC.Base.<> ((Data.Aeson..=) "per_page" (postFirewallsIdActionsApplyToResourcesResponseBody201MetaPaginationPerPage obj) GHC.Base.<> ((Data.Aeson..=) "previous_page" (postFirewallsIdActionsApplyToResourcesResponseBody201MetaPaginationPreviousPage obj) GHC.Base.<> (Data.Aeson..=) "total_entries" (postFirewallsIdActionsApplyToResourcesResponseBody201MetaPaginationTotalEntries obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostFirewallsIdActionsApplyToResourcesResponseBody201MetaPagination
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFirewallsIdActionsApplyToResourcesResponseBody201MetaPagination" (\obj -> (((((GHC.Base.pure PostFirewallsIdActionsApplyToResourcesResponseBody201MetaPagination GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "last_page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "next_page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "per_page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "previous_page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "total_entries"))
