-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation getCertificates
module HCloud.Operations.GetCertificates where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > GET /certificates
-- 
-- Returns all Certificate objects.
getCertificates :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Maybe.Maybe Data.Text.Internal.Text                                                                                     -- ^ sort: Can be used multiple times.
  -> GHC.Maybe.Maybe Data.Text.Internal.Text                                                                                     -- ^ name: Can be used to filter resources by their name. The response will only contain the resources matching the specified name
  -> GHC.Maybe.Maybe Data.Text.Internal.Text                                                                                     -- ^ label_selector: Can be used to filter resources by labels. The response will only contain resources matching the label selector.
  -> GHC.Maybe.Maybe Data.Text.Internal.Text                                                                                     -- ^ type: Can be used multiple times. The response will only contain Certificates matching the type.
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response GetCertificatesResponse)) -- ^ Monad containing the result of the operation
getCertificates config
                sort
                name
                labelSelector
                type' = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetCertificatesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetCertificatesResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                GetCertificatesResponseBody200)
                                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/certificates") ((Data.Text.pack "sort",
                                                                                                                                                                                                                                                                                                                                                                                                                          HCloud.Common.stringifyModel Data.Functor.<$> sort) : ((Data.Text.pack "name",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   HCloud.Common.stringifyModel Data.Functor.<$> name) : ((Data.Text.pack "label_selector",
loud.Common.stringifyModel Data.Functor.<$> labelSelector) : ((Data.Text.pack "type",
loud.Common.stringifyModel Data.Functor.<$> type') : [])))))
-- | > GET /certificates
-- 
-- The same as 'getCertificates' but returns the raw 'Data.ByteString.Char8.ByteString'
getCertificatesRaw :: forall m s . (HCloud.Common.MonadHTTP m,
                                    HCloud.Common.SecurityScheme s) =>
                      HCloud.Common.Configuration s ->
                      GHC.Maybe.Maybe Data.Text.Internal.Text ->
                      GHC.Maybe.Maybe Data.Text.Internal.Text ->
                      GHC.Maybe.Maybe Data.Text.Internal.Text ->
                      GHC.Maybe.Maybe Data.Text.Internal.Text ->
                      m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                            (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getCertificatesRaw config
                   sort
                   name
                   labelSelector
                   type' = GHC.Base.id (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/certificates") ((Data.Text.pack "sort",
                                                                                                                                                                             HCloud.Common.stringifyModel Data.Functor.<$> sort) : ((Data.Text.pack "name",
                                                                                                                                                                                                                                      HCloud.Common.stringifyModel Data.Functor.<$> name) : ((Data.Text.pack "label_selector",
                                                                                                                                                                                                                                                                                               HCloud.Common.stringifyModel Data.Functor.<$> labelSelector) : ((Data.Text.pack "type",
                                                                                                                                                                                                                                                                                                                                                                 HCloud.Common.stringifyModel Data.Functor.<$> type') : [])))))
-- | > GET /certificates
-- 
-- Monadic version of 'getCertificates' (use with 'HCloud.Common.runWithConfiguration')
getCertificatesM :: forall m s . (HCloud.Common.MonadHTTP m,
                                  HCloud.Common.SecurityScheme s) =>
                    GHC.Maybe.Maybe Data.Text.Internal.Text ->
                    GHC.Maybe.Maybe Data.Text.Internal.Text ->
                    GHC.Maybe.Maybe Data.Text.Internal.Text ->
                    GHC.Maybe.Maybe Data.Text.Internal.Text ->
                    Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                       m
                                                       (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                           (Network.HTTP.Client.Types.Response GetCertificatesResponse))
getCertificatesM sort
                 name
                 labelSelector
                 type' = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetCertificatesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetCertificatesResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                 GetCertificatesResponseBody200)
                                                                                                                                                                                  | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/certificates") ((Data.Text.pack "sort",
                                                                                                                                                                                                                                                                                                                                                                                                                     HCloud.Common.stringifyModel Data.Functor.<$> sort) : ((Data.Text.pack "name",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              HCloud.Common.stringifyModel Data.Functor.<$> name) : ((Data.Text.pack "label_selector",
loud.Common.stringifyModel Data.Functor.<$> labelSelector) : ((Data.Text.pack "type",
loud.Common.stringifyModel Data.Functor.<$> type') : [])))))
-- | > GET /certificates
-- 
-- Monadic version of 'getCertificatesRaw' (use with 'HCloud.Common.runWithConfiguration')
getCertificatesRawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                     HCloud.Common.SecurityScheme s) =>
                       GHC.Maybe.Maybe Data.Text.Internal.Text ->
                       GHC.Maybe.Maybe Data.Text.Internal.Text ->
                       GHC.Maybe.Maybe Data.Text.Internal.Text ->
                       GHC.Maybe.Maybe Data.Text.Internal.Text ->
                       Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                          m
                                                          (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                              (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getCertificatesRawM sort
                    name
                    labelSelector
                    type' = GHC.Base.id (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/certificates") ((Data.Text.pack "sort",
                                                                                                                                                                        HCloud.Common.stringifyModel Data.Functor.<$> sort) : ((Data.Text.pack "name",
                                                                                                                                                                                                                                 HCloud.Common.stringifyModel Data.Functor.<$> name) : ((Data.Text.pack "label_selector",
                                                                                                                                                                                                                                                                                          HCloud.Common.stringifyModel Data.Functor.<$> labelSelector) : ((Data.Text.pack "type",
                                                                                                                                                                                                                                                                                                                                                            HCloud.Common.stringifyModel Data.Functor.<$> type') : [])))))
-- | Represents a response of the operation 'getCertificates'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetCertificatesResponseError' is used.
data GetCertificatesResponse =                                 
   GetCertificatesResponseError GHC.Base.String                -- ^ Means either no matching case available or a parse error
  | GetCertificatesResponse200 GetCertificatesResponseBody200  -- ^ The \`certificates\` key contains an array of Certificate objects
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema GetCertificatesResponseBody200
-- 
-- 
data GetCertificatesResponseBody200 = GetCertificatesResponseBody200 {
  -- | certificates
  getCertificatesResponseBody200Certificates :: ([] GetCertificatesResponseBody200Certificates)
  -- | meta
  , getCertificatesResponseBody200Meta :: (GHC.Maybe.Maybe GetCertificatesResponseBody200Meta)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetCertificatesResponseBody200
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "certificates" (getCertificatesResponseBody200Certificates obj) : (Data.Aeson..=) "meta" (getCertificatesResponseBody200Meta obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "certificates" (getCertificatesResponseBody200Certificates obj) GHC.Base.<> (Data.Aeson..=) "meta" (getCertificatesResponseBody200Meta obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetCertificatesResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetCertificatesResponseBody200" (\obj -> (GHC.Base.pure GetCertificatesResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "certificates")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "meta"))
-- | Defines the data type for the schema GetCertificatesResponseBody200Certificates
-- 
-- 
data GetCertificatesResponseBody200Certificates = GetCertificatesResponseBody200Certificates {
  -- | certificate: Certificate and chain in PEM format, in order so that each record directly certifies the one preceding
  getCertificatesResponseBody200CertificatesCertificate :: Data.Text.Internal.Text
  -- | created: Point in time when the Resource was created (in ISO-8601 format)
  , getCertificatesResponseBody200CertificatesCreated :: Data.Text.Internal.Text
  -- | domain_names: Domains and subdomains covered by the Certificate
  , getCertificatesResponseBody200CertificatesDomainNames :: ([] Data.Text.Internal.Text)
  -- | fingerprint: SHA256 fingerprint of the Certificate
  , getCertificatesResponseBody200CertificatesFingerprint :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , getCertificatesResponseBody200CertificatesId :: GHC.Integer.Type.Integer
  -- | labels: User-defined labels (key-value pairs)
  , getCertificatesResponseBody200CertificatesLabels :: GetCertificatesResponseBody200CertificatesLabels
  -- | name: Name of the Resource. Must be unique per Project.
  , getCertificatesResponseBody200CertificatesName :: Data.Text.Internal.Text
  -- | not_valid_after: Point in time when the Certificate stops being valid (in ISO-8601 format)
  , getCertificatesResponseBody200CertificatesNotValidAfter :: Data.Text.Internal.Text
  -- | not_valid_before: Point in time when the Certificate becomes valid (in ISO-8601 format)
  , getCertificatesResponseBody200CertificatesNotValidBefore :: Data.Text.Internal.Text
  -- | status: Current status of a type \`managed\` Certificate, always *null* for type \`uploaded\` Certificates
  , getCertificatesResponseBody200CertificatesStatus :: (GHC.Maybe.Maybe GetCertificatesResponseBody200CertificatesStatus)
  -- | type: Type of the Certificate
  , getCertificatesResponseBody200CertificatesType :: (GHC.Maybe.Maybe GetCertificatesResponseBody200CertificatesType)
  -- | used_by: Resources currently using the Certificate
  , getCertificatesResponseBody200CertificatesUsedBy :: ([] GetCertificatesResponseBody200CertificatesUsedBy)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetCertificatesResponseBody200Certificates
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "certificate" (getCertificatesResponseBody200CertificatesCertificate obj) : (Data.Aeson..=) "created" (getCertificatesResponseBody200CertificatesCreated obj) : (Data.Aeson..=) "domain_names" (getCertificatesResponseBody200CertificatesDomainNames obj) : (Data.Aeson..=) "fingerprint" (getCertificatesResponseBody200CertificatesFingerprint obj) : (Data.Aeson..=) "id" (getCertificatesResponseBody200CertificatesId obj) : (Data.Aeson..=) "labels" (getCertificatesResponseBody200CertificatesLabels obj) : (Data.Aeson..=) "name" (getCertificatesResponseBody200CertificatesName obj) : (Data.Aeson..=) "not_valid_after" (getCertificatesResponseBody200CertificatesNotValidAfter obj) : (Data.Aeson..=) "not_valid_before" (getCertificatesResponseBody200CertificatesNotValidBefore obj) : (Data.Aeson..=) "status" (getCertificatesResponseBody200CertificatesStatus obj) : (Data.Aeson..=) "type" (getCertificatesResponseBody200CertificatesType obj) : (Data.Aeson..=) "used_by" (getCertificatesResponseBody200CertificatesUsedBy obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "certificate" (getCertificatesResponseBody200CertificatesCertificate obj) GHC.Base.<> ((Data.Aeson..=) "created" (getCertificatesResponseBody200CertificatesCreated obj) GHC.Base.<> ((Data.Aeson..=) "domain_names" (getCertificatesResponseBody200CertificatesDomainNames obj) GHC.Base.<> ((Data.Aeson..=) "fingerprint" (getCertificatesResponseBody200CertificatesFingerprint obj) GHC.Base.<> ((Data.Aeson..=) "id" (getCertificatesResponseBody200CertificatesId obj) GHC.Base.<> ((Data.Aeson..=) "labels" (getCertificatesResponseBody200CertificatesLabels obj) GHC.Base.<> ((Data.Aeson..=) "name" (getCertificatesResponseBody200CertificatesName obj) GHC.Base.<> ((Data.Aeson..=) "not_valid_after" (getCertificatesResponseBody200CertificatesNotValidAfter obj) GHC.Base.<> ((Data.Aeson..=) "not_valid_before" (getCertificatesResponseBody200CertificatesNotValidBefore obj) GHC.Base.<> ((Data.Aeson..=) "status" (getCertificatesResponseBody200CertificatesStatus obj) GHC.Base.<> ((Data.Aeson..=) "type" (getCertificatesResponseBody200CertificatesType obj) GHC.Base.<> (Data.Aeson..=) "used_by" (getCertificatesResponseBody200CertificatesUsedBy obj))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetCertificatesResponseBody200Certificates
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetCertificatesResponseBody200Certificates" (\obj -> (((((((((((GHC.Base.pure GetCertificatesResponseBody200Certificates GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "certificate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "domain_names")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "labels")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "not_valid_after")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "not_valid_before")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "used_by"))
-- | Defines the data type for the schema GetCertificatesResponseBody200CertificatesLabels
-- 
-- User-defined labels (key-value pairs)
data GetCertificatesResponseBody200CertificatesLabels = GetCertificatesResponseBody200CertificatesLabels {
  
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetCertificatesResponseBody200CertificatesLabels
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON GetCertificatesResponseBody200CertificatesLabels
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetCertificatesResponseBody200CertificatesLabels" (\obj -> GHC.Base.pure GetCertificatesResponseBody200CertificatesLabels)
-- | Defines the data type for the schema GetCertificatesResponseBody200CertificatesStatus
-- 
-- Current status of a type \`managed\` Certificate, always *null* for type \`uploaded\` Certificates
data GetCertificatesResponseBody200CertificatesStatus = GetCertificatesResponseBody200CertificatesStatus {
  -- | error: If issuance or renewal reports \`failed\`, this property contains information about what happened
  getCertificatesResponseBody200CertificatesStatusError :: (GHC.Maybe.Maybe GetCertificatesResponseBody200CertificatesStatusError)
  -- | issuance: Status of the issuance process of the Certificate
  , getCertificatesResponseBody200CertificatesStatusIssuance :: (GHC.Maybe.Maybe GetCertificatesResponseBody200CertificatesStatusIssuance)
  -- | renewal: Status of the renewal process of the Certificate.
  , getCertificatesResponseBody200CertificatesStatusRenewal :: (GHC.Maybe.Maybe GetCertificatesResponseBody200CertificatesStatusRenewal)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetCertificatesResponseBody200CertificatesStatus
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "error" (getCertificatesResponseBody200CertificatesStatusError obj) : (Data.Aeson..=) "issuance" (getCertificatesResponseBody200CertificatesStatusIssuance obj) : (Data.Aeson..=) "renewal" (getCertificatesResponseBody200CertificatesStatusRenewal obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "error" (getCertificatesResponseBody200CertificatesStatusError obj) GHC.Base.<> ((Data.Aeson..=) "issuance" (getCertificatesResponseBody200CertificatesStatusIssuance obj) GHC.Base.<> (Data.Aeson..=) "renewal" (getCertificatesResponseBody200CertificatesStatusRenewal obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetCertificatesResponseBody200CertificatesStatus
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetCertificatesResponseBody200CertificatesStatus" (\obj -> ((GHC.Base.pure GetCertificatesResponseBody200CertificatesStatus GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "issuance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "renewal"))
-- | Defines the data type for the schema GetCertificatesResponseBody200CertificatesStatusError
-- 
-- If issuance or renewal reports \`failed\`, this property contains information about what happened
data GetCertificatesResponseBody200CertificatesStatusError = GetCertificatesResponseBody200CertificatesStatusError {
  -- | code
  getCertificatesResponseBody200CertificatesStatusErrorCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | message
  , getCertificatesResponseBody200CertificatesStatusErrorMessage :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetCertificatesResponseBody200CertificatesStatusError
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "code" (getCertificatesResponseBody200CertificatesStatusErrorCode obj) : (Data.Aeson..=) "message" (getCertificatesResponseBody200CertificatesStatusErrorMessage obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "code" (getCertificatesResponseBody200CertificatesStatusErrorCode obj) GHC.Base.<> (Data.Aeson..=) "message" (getCertificatesResponseBody200CertificatesStatusErrorMessage obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetCertificatesResponseBody200CertificatesStatusError
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetCertificatesResponseBody200CertificatesStatusError" (\obj -> (GHC.Base.pure GetCertificatesResponseBody200CertificatesStatusError GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "message"))
-- | Defines the enum schema GetCertificatesResponseBody200CertificatesStatusIssuance
-- 
-- Status of the issuance process of the Certificate
data GetCertificatesResponseBody200CertificatesStatusIssuance
    = GetCertificatesResponseBody200CertificatesStatusIssuanceEnumOther Data.Aeson.Types.Internal.Value
    | GetCertificatesResponseBody200CertificatesStatusIssuanceEnumTyped Data.Text.Internal.Text
    | GetCertificatesResponseBody200CertificatesStatusIssuanceEnumStringCompleted
    | GetCertificatesResponseBody200CertificatesStatusIssuanceEnumStringFailed
    | GetCertificatesResponseBody200CertificatesStatusIssuanceEnumStringPending
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetCertificatesResponseBody200CertificatesStatusIssuance
    where toJSON (GetCertificatesResponseBody200CertificatesStatusIssuanceEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetCertificatesResponseBody200CertificatesStatusIssuanceEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetCertificatesResponseBody200CertificatesStatusIssuanceEnumStringCompleted) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "completed"
          toJSON (GetCertificatesResponseBody200CertificatesStatusIssuanceEnumStringFailed) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "failed"
          toJSON (GetCertificatesResponseBody200CertificatesStatusIssuanceEnumStringPending) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pending"
instance Data.Aeson.FromJSON GetCertificatesResponseBody200CertificatesStatusIssuance
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "completed")
                                          then GetCertificatesResponseBody200CertificatesStatusIssuanceEnumStringCompleted
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "failed")
                                                then GetCertificatesResponseBody200CertificatesStatusIssuanceEnumStringFailed
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pending")
                                                      then GetCertificatesResponseBody200CertificatesStatusIssuanceEnumStringPending
                                                      else GetCertificatesResponseBody200CertificatesStatusIssuanceEnumOther val)
-- | Defines the enum schema GetCertificatesResponseBody200CertificatesStatusRenewal
-- 
-- Status of the renewal process of the Certificate.
data GetCertificatesResponseBody200CertificatesStatusRenewal
    = GetCertificatesResponseBody200CertificatesStatusRenewalEnumOther Data.Aeson.Types.Internal.Value
    | GetCertificatesResponseBody200CertificatesStatusRenewalEnumTyped Data.Text.Internal.Text
    | GetCertificatesResponseBody200CertificatesStatusRenewalEnumStringFailed
    | GetCertificatesResponseBody200CertificatesStatusRenewalEnumStringPending
    | GetCertificatesResponseBody200CertificatesStatusRenewalEnumStringScheduled
    | GetCertificatesResponseBody200CertificatesStatusRenewalEnumStringUnavailable
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetCertificatesResponseBody200CertificatesStatusRenewal
    where toJSON (GetCertificatesResponseBody200CertificatesStatusRenewalEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetCertificatesResponseBody200CertificatesStatusRenewalEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetCertificatesResponseBody200CertificatesStatusRenewalEnumStringFailed) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "failed"
          toJSON (GetCertificatesResponseBody200CertificatesStatusRenewalEnumStringPending) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pending"
          toJSON (GetCertificatesResponseBody200CertificatesStatusRenewalEnumStringScheduled) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "scheduled"
          toJSON (GetCertificatesResponseBody200CertificatesStatusRenewalEnumStringUnavailable) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "unavailable"
instance Data.Aeson.FromJSON GetCertificatesResponseBody200CertificatesStatusRenewal
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "failed")
                                          then GetCertificatesResponseBody200CertificatesStatusRenewalEnumStringFailed
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pending")
                                                then GetCertificatesResponseBody200CertificatesStatusRenewalEnumStringPending
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "scheduled")
                                                      then GetCertificatesResponseBody200CertificatesStatusRenewalEnumStringScheduled
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "unavailable")
                                                            then GetCertificatesResponseBody200CertificatesStatusRenewalEnumStringUnavailable
                                                            else GetCertificatesResponseBody200CertificatesStatusRenewalEnumOther val)
-- | Defines the enum schema GetCertificatesResponseBody200CertificatesType
-- 
-- Type of the Certificate
data GetCertificatesResponseBody200CertificatesType
    = GetCertificatesResponseBody200CertificatesTypeEnumOther Data.Aeson.Types.Internal.Value
    | GetCertificatesResponseBody200CertificatesTypeEnumTyped Data.Text.Internal.Text
    | GetCertificatesResponseBody200CertificatesTypeEnumStringManaged
    | GetCertificatesResponseBody200CertificatesTypeEnumStringUploaded
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetCertificatesResponseBody200CertificatesType
    where toJSON (GetCertificatesResponseBody200CertificatesTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetCertificatesResponseBody200CertificatesTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetCertificatesResponseBody200CertificatesTypeEnumStringManaged) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "managed"
          toJSON (GetCertificatesResponseBody200CertificatesTypeEnumStringUploaded) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "uploaded"
instance Data.Aeson.FromJSON GetCertificatesResponseBody200CertificatesType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "managed")
                                          then GetCertificatesResponseBody200CertificatesTypeEnumStringManaged
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "uploaded")
                                                then GetCertificatesResponseBody200CertificatesTypeEnumStringUploaded
                                                else GetCertificatesResponseBody200CertificatesTypeEnumOther val)
-- | Defines the data type for the schema GetCertificatesResponseBody200CertificatesUsed_by
-- 
-- 
data GetCertificatesResponseBody200CertificatesUsedBy = GetCertificatesResponseBody200CertificatesUsedBy {
  -- | id: ID of resource referenced
  getCertificatesResponseBody200CertificatesUsedById :: GHC.Integer.Type.Integer
  -- | type: Type of resource referenced
  , getCertificatesResponseBody200CertificatesUsedByType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetCertificatesResponseBody200CertificatesUsedBy
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (getCertificatesResponseBody200CertificatesUsedById obj) : (Data.Aeson..=) "type" (getCertificatesResponseBody200CertificatesUsedByType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (getCertificatesResponseBody200CertificatesUsedById obj) GHC.Base.<> (Data.Aeson..=) "type" (getCertificatesResponseBody200CertificatesUsedByType obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetCertificatesResponseBody200CertificatesUsedBy
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetCertificatesResponseBody200CertificatesUsedBy" (\obj -> (GHC.Base.pure GetCertificatesResponseBody200CertificatesUsedBy GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the data type for the schema GetCertificatesResponseBody200Meta
-- 
-- 
data GetCertificatesResponseBody200Meta = GetCertificatesResponseBody200Meta {
  -- | pagination
  getCertificatesResponseBody200MetaPagination :: GetCertificatesResponseBody200MetaPagination
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetCertificatesResponseBody200Meta
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "pagination" (getCertificatesResponseBody200MetaPagination obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "pagination" (getCertificatesResponseBody200MetaPagination obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetCertificatesResponseBody200Meta
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetCertificatesResponseBody200Meta" (\obj -> GHC.Base.pure GetCertificatesResponseBody200Meta GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pagination"))
-- | Defines the data type for the schema GetCertificatesResponseBody200MetaPagination
-- 
-- 
data GetCertificatesResponseBody200MetaPagination = GetCertificatesResponseBody200MetaPagination {
  -- | last_page: ID of the last page available. Can be null if the current page is the last one.
  getCertificatesResponseBody200MetaPaginationLastPage :: GHC.Types.Double
  -- | next_page: ID of the next page. Can be null if the current page is the last one.
  , getCertificatesResponseBody200MetaPaginationNextPage :: GHC.Types.Double
  -- | page: Current page number
  , getCertificatesResponseBody200MetaPaginationPage :: GHC.Types.Double
  -- | per_page: Maximum number of items shown per page in the response
  , getCertificatesResponseBody200MetaPaginationPerPage :: GHC.Types.Double
  -- | previous_page: ID of the previous page. Can be null if the current page is the first one.
  , getCertificatesResponseBody200MetaPaginationPreviousPage :: GHC.Types.Double
  -- | total_entries: The total number of entries that exist in the database for this query. Nullable if unknown.
  , getCertificatesResponseBody200MetaPaginationTotalEntries :: GHC.Types.Double
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetCertificatesResponseBody200MetaPagination
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "last_page" (getCertificatesResponseBody200MetaPaginationLastPage obj) : (Data.Aeson..=) "next_page" (getCertificatesResponseBody200MetaPaginationNextPage obj) : (Data.Aeson..=) "page" (getCertificatesResponseBody200MetaPaginationPage obj) : (Data.Aeson..=) "per_page" (getCertificatesResponseBody200MetaPaginationPerPage obj) : (Data.Aeson..=) "previous_page" (getCertificatesResponseBody200MetaPaginationPreviousPage obj) : (Data.Aeson..=) "total_entries" (getCertificatesResponseBody200MetaPaginationTotalEntries obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "last_page" (getCertificatesResponseBody200MetaPaginationLastPage obj) GHC.Base.<> ((Data.Aeson..=) "next_page" (getCertificatesResponseBody200MetaPaginationNextPage obj) GHC.Base.<> ((Data.Aeson..=) "page" (getCertificatesResponseBody200MetaPaginationPage obj) GHC.Base.<> ((Data.Aeson..=) "per_page" (getCertificatesResponseBody200MetaPaginationPerPage obj) GHC.Base.<> ((Data.Aeson..=) "previous_page" (getCertificatesResponseBody200MetaPaginationPreviousPage obj) GHC.Base.<> (Data.Aeson..=) "total_entries" (getCertificatesResponseBody200MetaPaginationTotalEntries obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetCertificatesResponseBody200MetaPagination
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetCertificatesResponseBody200MetaPagination" (\obj -> (((((GHC.Base.pure GetCertificatesResponseBody200MetaPagination GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "last_page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "next_page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "per_page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "previous_page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "total_entries"))
