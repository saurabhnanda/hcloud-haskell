-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation getPlacementGroups
module HCloud.Operations.GetPlacementGroups where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > GET /placement_groups
-- 
-- Returns all PlacementGroup objects.
getPlacementGroups :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Maybe.Maybe Data.Text.Internal.Text                                                                                        -- ^ sort: Can be used multiple times.
  -> GHC.Maybe.Maybe Data.Text.Internal.Text                                                                                        -- ^ name: Can be used to filter resources by their name. The response will only contain the resources matching the specified name
  -> GHC.Maybe.Maybe Data.Text.Internal.Text                                                                                        -- ^ label_selector: Can be used to filter resources by labels. The response will only contain resources matching the label selector.
  -> GHC.Maybe.Maybe Data.Text.Internal.Text                                                                                        -- ^ type: Can be used multiple times. The response will only contain PlacementGroups matching the type.
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response GetPlacementGroupsResponse)) -- ^ Monad containing the result of the operation
getPlacementGroups config
                   sort
                   name
                   labelSelector
                   type' = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetPlacementGroupsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetPlacementGroupsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                         GetPlacementGroupsResponseBody200)
                                                                                                                                                                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/placement_groups") ((Data.Text.pack "sort",
                                                                                                                                                                                                                                                                                                                                                                                                                                    HCloud.Common.stringifyModel Data.Functor.<$> sort) : ((Data.Text.pack "name",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             HCloud.Common.stringifyModel Data.Functor.<$> name) : ((Data.Text.pack "label_selector",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      HCloud.Common.stringifyModel Data.Functor.<$> labelSelector) : ((Data.Text.pack "type",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        HCloud.Common.stringifyModel Data.Functor.<$> type') : [])))))
-- | > GET /placement_groups
-- 
-- The same as 'getPlacementGroups' but returns the raw 'Data.ByteString.Char8.ByteString'
getPlacementGroupsRaw :: forall m s . (HCloud.Common.MonadHTTP m,
                                       HCloud.Common.SecurityScheme s) =>
                         HCloud.Common.Configuration s ->
                         GHC.Maybe.Maybe Data.Text.Internal.Text ->
                         GHC.Maybe.Maybe Data.Text.Internal.Text ->
                         GHC.Maybe.Maybe Data.Text.Internal.Text ->
                         GHC.Maybe.Maybe Data.Text.Internal.Text ->
                         m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                               (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getPlacementGroupsRaw config
                      sort
                      name
                      labelSelector
                      type' = GHC.Base.id (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/placement_groups") ((Data.Text.pack "sort",
                                                                                                                                                                                    HCloud.Common.stringifyModel Data.Functor.<$> sort) : ((Data.Text.pack "name",
                                                                                                                                                                                                                                             HCloud.Common.stringifyModel Data.Functor.<$> name) : ((Data.Text.pack "label_selector",
                                                                                                                                                                                                                                                                                                      HCloud.Common.stringifyModel Data.Functor.<$> labelSelector) : ((Data.Text.pack "type",
                                                                                                                                                                                                                                                                                                                                                                        HCloud.Common.stringifyModel Data.Functor.<$> type') : [])))))
-- | > GET /placement_groups
-- 
-- Monadic version of 'getPlacementGroups' (use with 'HCloud.Common.runWithConfiguration')
getPlacementGroupsM :: forall m s . (HCloud.Common.MonadHTTP m,
                                     HCloud.Common.SecurityScheme s) =>
                       GHC.Maybe.Maybe Data.Text.Internal.Text ->
                       GHC.Maybe.Maybe Data.Text.Internal.Text ->
                       GHC.Maybe.Maybe Data.Text.Internal.Text ->
                       GHC.Maybe.Maybe Data.Text.Internal.Text ->
                       Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                          m
                                                          (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                              (Network.HTTP.Client.Types.Response GetPlacementGroupsResponse))
getPlacementGroupsM sort
                    name
                    labelSelector
                    type' = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetPlacementGroupsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetPlacementGroupsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          GetPlacementGroupsResponseBody200)
                                                                                                                                                                                        | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/placement_groups") ((Data.Text.pack "sort",
                                                                                                                                                                                                                                                                                                                                                                                                                               HCloud.Common.stringifyModel Data.Functor.<$> sort) : ((Data.Text.pack "name",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        HCloud.Common.stringifyModel Data.Functor.<$> name) : ((Data.Text.pack "label_selector",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 HCloud.Common.stringifyModel Data.Functor.<$> labelSelector) : ((Data.Text.pack "type",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   HCloud.Common.stringifyModel Data.Functor.<$> type') : [])))))
-- | > GET /placement_groups
-- 
-- Monadic version of 'getPlacementGroupsRaw' (use with 'HCloud.Common.runWithConfiguration')
getPlacementGroupsRawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                        HCloud.Common.SecurityScheme s) =>
                          GHC.Maybe.Maybe Data.Text.Internal.Text ->
                          GHC.Maybe.Maybe Data.Text.Internal.Text ->
                          GHC.Maybe.Maybe Data.Text.Internal.Text ->
                          GHC.Maybe.Maybe Data.Text.Internal.Text ->
                          Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                             m
                                                             (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                 (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getPlacementGroupsRawM sort
                       name
                       labelSelector
                       type' = GHC.Base.id (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/placement_groups") ((Data.Text.pack "sort",
                                                                                                                                                                               HCloud.Common.stringifyModel Data.Functor.<$> sort) : ((Data.Text.pack "name",
                                                                                                                                                                                                                                        HCloud.Common.stringifyModel Data.Functor.<$> name) : ((Data.Text.pack "label_selector",
                                                                                                                                                                                                                                                                                                 HCloud.Common.stringifyModel Data.Functor.<$> labelSelector) : ((Data.Text.pack "type",
                                                                                                                                                                                                                                                                                                                                                                   HCloud.Common.stringifyModel Data.Functor.<$> type') : [])))))
-- | Represents a response of the operation 'getPlacementGroups'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetPlacementGroupsResponseError' is used.
data GetPlacementGroupsResponse =                                    
   GetPlacementGroupsResponseError GHC.Base.String                   -- ^ Means either no matching case available or a parse error
  | GetPlacementGroupsResponse200 GetPlacementGroupsResponseBody200  -- ^ The \`placement_groups\` key contains an array of PlacementGroup objects
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema GetPlacementGroupsResponseBody200
-- 
-- 
data GetPlacementGroupsResponseBody200 = GetPlacementGroupsResponseBody200 {
  -- | meta
  getPlacementGroupsResponseBody200Meta :: (GHC.Maybe.Maybe GetPlacementGroupsResponseBody200Meta)
  -- | placement_groups
  , getPlacementGroupsResponseBody200PlacementGroups :: ([] GetPlacementGroupsResponseBody200PlacementGroups)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetPlacementGroupsResponseBody200
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "meta" (getPlacementGroupsResponseBody200Meta obj) : (Data.Aeson..=) "placement_groups" (getPlacementGroupsResponseBody200PlacementGroups obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "meta" (getPlacementGroupsResponseBody200Meta obj) GHC.Base.<> (Data.Aeson..=) "placement_groups" (getPlacementGroupsResponseBody200PlacementGroups obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetPlacementGroupsResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPlacementGroupsResponseBody200" (\obj -> (GHC.Base.pure GetPlacementGroupsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "meta")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "placement_groups"))
-- | Defines the data type for the schema GetPlacementGroupsResponseBody200Meta
-- 
-- 
data GetPlacementGroupsResponseBody200Meta = GetPlacementGroupsResponseBody200Meta {
  -- | pagination
  getPlacementGroupsResponseBody200MetaPagination :: GetPlacementGroupsResponseBody200MetaPagination
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetPlacementGroupsResponseBody200Meta
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "pagination" (getPlacementGroupsResponseBody200MetaPagination obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "pagination" (getPlacementGroupsResponseBody200MetaPagination obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetPlacementGroupsResponseBody200Meta
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPlacementGroupsResponseBody200Meta" (\obj -> GHC.Base.pure GetPlacementGroupsResponseBody200Meta GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pagination"))
-- | Defines the data type for the schema GetPlacementGroupsResponseBody200MetaPagination
-- 
-- 
data GetPlacementGroupsResponseBody200MetaPagination = GetPlacementGroupsResponseBody200MetaPagination {
  -- | last_page: ID of the last page available. Can be null if the current page is the last one.
  getPlacementGroupsResponseBody200MetaPaginationLastPage :: GHC.Types.Double
  -- | next_page: ID of the next page. Can be null if the current page is the last one.
  , getPlacementGroupsResponseBody200MetaPaginationNextPage :: GHC.Types.Double
  -- | page: Current page number
  , getPlacementGroupsResponseBody200MetaPaginationPage :: GHC.Types.Double
  -- | per_page: Maximum number of items shown per page in the response
  , getPlacementGroupsResponseBody200MetaPaginationPerPage :: GHC.Types.Double
  -- | previous_page: ID of the previous page. Can be null if the current page is the first one.
  , getPlacementGroupsResponseBody200MetaPaginationPreviousPage :: GHC.Types.Double
  -- | total_entries: The total number of entries that exist in the database for this query. Nullable if unknown.
  , getPlacementGroupsResponseBody200MetaPaginationTotalEntries :: GHC.Types.Double
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetPlacementGroupsResponseBody200MetaPagination
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "last_page" (getPlacementGroupsResponseBody200MetaPaginationLastPage obj) : (Data.Aeson..=) "next_page" (getPlacementGroupsResponseBody200MetaPaginationNextPage obj) : (Data.Aeson..=) "page" (getPlacementGroupsResponseBody200MetaPaginationPage obj) : (Data.Aeson..=) "per_page" (getPlacementGroupsResponseBody200MetaPaginationPerPage obj) : (Data.Aeson..=) "previous_page" (getPlacementGroupsResponseBody200MetaPaginationPreviousPage obj) : (Data.Aeson..=) "total_entries" (getPlacementGroupsResponseBody200MetaPaginationTotalEntries obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "last_page" (getPlacementGroupsResponseBody200MetaPaginationLastPage obj) GHC.Base.<> ((Data.Aeson..=) "next_page" (getPlacementGroupsResponseBody200MetaPaginationNextPage obj) GHC.Base.<> ((Data.Aeson..=) "page" (getPlacementGroupsResponseBody200MetaPaginationPage obj) GHC.Base.<> ((Data.Aeson..=) "per_page" (getPlacementGroupsResponseBody200MetaPaginationPerPage obj) GHC.Base.<> ((Data.Aeson..=) "previous_page" (getPlacementGroupsResponseBody200MetaPaginationPreviousPage obj) GHC.Base.<> (Data.Aeson..=) "total_entries" (getPlacementGroupsResponseBody200MetaPaginationTotalEntries obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetPlacementGroupsResponseBody200MetaPagination
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPlacementGroupsResponseBody200MetaPagination" (\obj -> (((((GHC.Base.pure GetPlacementGroupsResponseBody200MetaPagination GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "last_page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "next_page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "per_page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "previous_page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "total_entries"))
-- | Defines the data type for the schema GetPlacementGroupsResponseBody200Placement_groups
-- 
-- 
data GetPlacementGroupsResponseBody200PlacementGroups = GetPlacementGroupsResponseBody200PlacementGroups {
  -- | created: Point in time when the Resource was created (in ISO-8601 format)
  getPlacementGroupsResponseBody200PlacementGroupsCreated :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , getPlacementGroupsResponseBody200PlacementGroupsId :: GHC.Integer.Type.Integer
  -- | labels: User-defined labels (key-value pairs)
  , getPlacementGroupsResponseBody200PlacementGroupsLabels :: GetPlacementGroupsResponseBody200PlacementGroupsLabels
  -- | name: Name of the Resource. Must be unique per Project.
  , getPlacementGroupsResponseBody200PlacementGroupsName :: Data.Text.Internal.Text
  -- | servers: Array of IDs of Servers that are part of this Placement Group
  , getPlacementGroupsResponseBody200PlacementGroupsServers :: ([] GHC.Integer.Type.Integer)
  -- | type: Type of the Placement Group
  , getPlacementGroupsResponseBody200PlacementGroupsType :: GetPlacementGroupsResponseBody200PlacementGroupsType
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetPlacementGroupsResponseBody200PlacementGroups
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "created" (getPlacementGroupsResponseBody200PlacementGroupsCreated obj) : (Data.Aeson..=) "id" (getPlacementGroupsResponseBody200PlacementGroupsId obj) : (Data.Aeson..=) "labels" (getPlacementGroupsResponseBody200PlacementGroupsLabels obj) : (Data.Aeson..=) "name" (getPlacementGroupsResponseBody200PlacementGroupsName obj) : (Data.Aeson..=) "servers" (getPlacementGroupsResponseBody200PlacementGroupsServers obj) : (Data.Aeson..=) "type" (getPlacementGroupsResponseBody200PlacementGroupsType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "created" (getPlacementGroupsResponseBody200PlacementGroupsCreated obj) GHC.Base.<> ((Data.Aeson..=) "id" (getPlacementGroupsResponseBody200PlacementGroupsId obj) GHC.Base.<> ((Data.Aeson..=) "labels" (getPlacementGroupsResponseBody200PlacementGroupsLabels obj) GHC.Base.<> ((Data.Aeson..=) "name" (getPlacementGroupsResponseBody200PlacementGroupsName obj) GHC.Base.<> ((Data.Aeson..=) "servers" (getPlacementGroupsResponseBody200PlacementGroupsServers obj) GHC.Base.<> (Data.Aeson..=) "type" (getPlacementGroupsResponseBody200PlacementGroupsType obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetPlacementGroupsResponseBody200PlacementGroups
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPlacementGroupsResponseBody200PlacementGroups" (\obj -> (((((GHC.Base.pure GetPlacementGroupsResponseBody200PlacementGroups GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "labels")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "servers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the data type for the schema GetPlacementGroupsResponseBody200Placement_groupsLabels
-- 
-- User-defined labels (key-value pairs)
data GetPlacementGroupsResponseBody200PlacementGroupsLabels = GetPlacementGroupsResponseBody200PlacementGroupsLabels {
  
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetPlacementGroupsResponseBody200PlacementGroupsLabels
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON GetPlacementGroupsResponseBody200PlacementGroupsLabels
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPlacementGroupsResponseBody200PlacementGroupsLabels" (\obj -> GHC.Base.pure GetPlacementGroupsResponseBody200PlacementGroupsLabels)
-- | Defines the enum schema GetPlacementGroupsResponseBody200Placement_groupsType
-- 
-- Type of the Placement Group
data GetPlacementGroupsResponseBody200PlacementGroupsType
    = GetPlacementGroupsResponseBody200PlacementGroupsTypeEnumOther Data.Aeson.Types.Internal.Value
    | GetPlacementGroupsResponseBody200PlacementGroupsTypeEnumTyped Data.Text.Internal.Text
    | GetPlacementGroupsResponseBody200PlacementGroupsTypeEnumStringSpread
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetPlacementGroupsResponseBody200PlacementGroupsType
    where toJSON (GetPlacementGroupsResponseBody200PlacementGroupsTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetPlacementGroupsResponseBody200PlacementGroupsTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetPlacementGroupsResponseBody200PlacementGroupsTypeEnumStringSpread) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "spread"
instance Data.Aeson.FromJSON GetPlacementGroupsResponseBody200PlacementGroupsType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "spread")
                                          then GetPlacementGroupsResponseBody200PlacementGroupsTypeEnumStringSpread
                                          else GetPlacementGroupsResponseBody200PlacementGroupsTypeEnumOther val)
