-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation postPlacementGroups
module HCloud.Operations.PostPlacementGroups where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > POST /placement_groups
-- 
-- Creates a new PlacementGroup.
postPlacementGroups :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Maybe.Maybe PostPlacementGroupsRequestBody                                                                                  -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response PostPlacementGroupsResponse)) -- ^ Monad containing the result of the operation
postPlacementGroups config
                    body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostPlacementGroupsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostPlacementGroupsResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                           PostPlacementGroupsResponseBody201)
                                                                                                                                                                                        | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/placement_groups") [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /placement_groups
-- 
-- The same as 'postPlacementGroups' but returns the raw 'Data.ByteString.Char8.ByteString'
postPlacementGroupsRaw :: forall m s . (HCloud.Common.MonadHTTP m,
                                        HCloud.Common.SecurityScheme s) =>
                          HCloud.Common.Configuration s ->
                          GHC.Maybe.Maybe PostPlacementGroupsRequestBody ->
                          m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postPlacementGroupsRaw config
                       body = GHC.Base.id (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/placement_groups") [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /placement_groups
-- 
-- Monadic version of 'postPlacementGroups' (use with 'HCloud.Common.runWithConfiguration')
postPlacementGroupsM :: forall m s . (HCloud.Common.MonadHTTP m,
                                      HCloud.Common.SecurityScheme s) =>
                        GHC.Maybe.Maybe PostPlacementGroupsRequestBody ->
                        Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                           m
                                                           (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                               (Network.HTTP.Client.Types.Response PostPlacementGroupsResponse))
postPlacementGroupsM body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostPlacementGroupsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostPlacementGroupsResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                            PostPlacementGroupsResponseBody201)
                                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/placement_groups") [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /placement_groups
-- 
-- Monadic version of 'postPlacementGroupsRaw' (use with 'HCloud.Common.runWithConfiguration')
postPlacementGroupsRawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                         HCloud.Common.SecurityScheme s) =>
                           GHC.Maybe.Maybe PostPlacementGroupsRequestBody ->
                           Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                              m
                                                              (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                  (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postPlacementGroupsRawM body = GHC.Base.id (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/placement_groups") [] body HCloud.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema postPlacementGroupsRequestBody
-- 
-- 
data PostPlacementGroupsRequestBody = PostPlacementGroupsRequestBody {
  -- | labels: User-defined labels (key-value pairs)
  postPlacementGroupsRequestBodyLabels :: (GHC.Maybe.Maybe PostPlacementGroupsRequestBodyLabels)
  -- | name: Name of the PlacementGroup
  , postPlacementGroupsRequestBodyName :: Data.Text.Internal.Text
  -- | type: Define the Placement Group Type.
  , postPlacementGroupsRequestBodyType :: PostPlacementGroupsRequestBodyType
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostPlacementGroupsRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "labels" (postPlacementGroupsRequestBodyLabels obj) : (Data.Aeson..=) "name" (postPlacementGroupsRequestBodyName obj) : (Data.Aeson..=) "type" (postPlacementGroupsRequestBodyType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "labels" (postPlacementGroupsRequestBodyLabels obj) GHC.Base.<> ((Data.Aeson..=) "name" (postPlacementGroupsRequestBodyName obj) GHC.Base.<> (Data.Aeson..=) "type" (postPlacementGroupsRequestBodyType obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PostPlacementGroupsRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostPlacementGroupsRequestBody" (\obj -> ((GHC.Base.pure PostPlacementGroupsRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "labels")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the data type for the schema postPlacementGroupsRequestBodyLabels
-- 
-- User-defined labels (key-value pairs)
data PostPlacementGroupsRequestBodyLabels = PostPlacementGroupsRequestBodyLabels {
  
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostPlacementGroupsRequestBodyLabels
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON PostPlacementGroupsRequestBodyLabels
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostPlacementGroupsRequestBodyLabels" (\obj -> GHC.Base.pure PostPlacementGroupsRequestBodyLabels)
-- | Defines the enum schema postPlacementGroupsRequestBodyType
-- 
-- Define the Placement Group Type.
data PostPlacementGroupsRequestBodyType
    = PostPlacementGroupsRequestBodyTypeEnumOther Data.Aeson.Types.Internal.Value
    | PostPlacementGroupsRequestBodyTypeEnumTyped Data.Text.Internal.Text
    | PostPlacementGroupsRequestBodyTypeEnumStringSpread
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostPlacementGroupsRequestBodyType
    where toJSON (PostPlacementGroupsRequestBodyTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostPlacementGroupsRequestBodyTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostPlacementGroupsRequestBodyTypeEnumStringSpread) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "spread"
instance Data.Aeson.FromJSON PostPlacementGroupsRequestBodyType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "spread")
                                          then PostPlacementGroupsRequestBodyTypeEnumStringSpread
                                          else PostPlacementGroupsRequestBodyTypeEnumOther val)
-- | Represents a response of the operation 'postPlacementGroups'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostPlacementGroupsResponseError' is used.
data PostPlacementGroupsResponse =                                     
   PostPlacementGroupsResponseError GHC.Base.String                    -- ^ Means either no matching case available or a parse error
  | PostPlacementGroupsResponse201 PostPlacementGroupsResponseBody201  -- ^ The \`PlacementGroup\` key contains the PlacementGroup that was just created.
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema PostPlacementGroupsResponseBody201
-- 
-- 
data PostPlacementGroupsResponseBody201 = PostPlacementGroupsResponseBody201 {
  -- | action
  postPlacementGroupsResponseBody201Action :: (GHC.Maybe.Maybe PostPlacementGroupsResponseBody201Action)
  -- | placement_group
  , postPlacementGroupsResponseBody201PlacementGroup :: PostPlacementGroupsResponseBody201PlacementGroup
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostPlacementGroupsResponseBody201
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "action" (postPlacementGroupsResponseBody201Action obj) : (Data.Aeson..=) "placement_group" (postPlacementGroupsResponseBody201PlacementGroup obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "action" (postPlacementGroupsResponseBody201Action obj) GHC.Base.<> (Data.Aeson..=) "placement_group" (postPlacementGroupsResponseBody201PlacementGroup obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostPlacementGroupsResponseBody201
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostPlacementGroupsResponseBody201" (\obj -> (GHC.Base.pure PostPlacementGroupsResponseBody201 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "action")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "placement_group"))
-- | Defines the data type for the schema PostPlacementGroupsResponseBody201Action
-- 
-- 
data PostPlacementGroupsResponseBody201Action = PostPlacementGroupsResponseBody201Action {
  -- | command: Command executed in the Action
  postPlacementGroupsResponseBody201ActionCommand :: Data.Text.Internal.Text
  -- | error: Error message for the Action if error occurred, otherwise null
  , postPlacementGroupsResponseBody201ActionError :: PostPlacementGroupsResponseBody201ActionError
  -- | finished: Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
  , postPlacementGroupsResponseBody201ActionFinished :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , postPlacementGroupsResponseBody201ActionId :: GHC.Integer.Type.Integer
  -- | progress: Progress of Action in percent
  , postPlacementGroupsResponseBody201ActionProgress :: GHC.Types.Double
  -- | resources: Resources the Action relates to
  , postPlacementGroupsResponseBody201ActionResources :: ([] PostPlacementGroupsResponseBody201ActionResources)
  -- | started: Point in time when the Action was started (in ISO-8601 format)
  , postPlacementGroupsResponseBody201ActionStarted :: Data.Text.Internal.Text
  -- | status: Status of the Action
  , postPlacementGroupsResponseBody201ActionStatus :: PostPlacementGroupsResponseBody201ActionStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostPlacementGroupsResponseBody201Action
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "command" (postPlacementGroupsResponseBody201ActionCommand obj) : (Data.Aeson..=) "error" (postPlacementGroupsResponseBody201ActionError obj) : (Data.Aeson..=) "finished" (postPlacementGroupsResponseBody201ActionFinished obj) : (Data.Aeson..=) "id" (postPlacementGroupsResponseBody201ActionId obj) : (Data.Aeson..=) "progress" (postPlacementGroupsResponseBody201ActionProgress obj) : (Data.Aeson..=) "resources" (postPlacementGroupsResponseBody201ActionResources obj) : (Data.Aeson..=) "started" (postPlacementGroupsResponseBody201ActionStarted obj) : (Data.Aeson..=) "status" (postPlacementGroupsResponseBody201ActionStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "command" (postPlacementGroupsResponseBody201ActionCommand obj) GHC.Base.<> ((Data.Aeson..=) "error" (postPlacementGroupsResponseBody201ActionError obj) GHC.Base.<> ((Data.Aeson..=) "finished" (postPlacementGroupsResponseBody201ActionFinished obj) GHC.Base.<> ((Data.Aeson..=) "id" (postPlacementGroupsResponseBody201ActionId obj) GHC.Base.<> ((Data.Aeson..=) "progress" (postPlacementGroupsResponseBody201ActionProgress obj) GHC.Base.<> ((Data.Aeson..=) "resources" (postPlacementGroupsResponseBody201ActionResources obj) GHC.Base.<> ((Data.Aeson..=) "started" (postPlacementGroupsResponseBody201ActionStarted obj) GHC.Base.<> (Data.Aeson..=) "status" (postPlacementGroupsResponseBody201ActionStatus obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostPlacementGroupsResponseBody201Action
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostPlacementGroupsResponseBody201Action" (\obj -> (((((((GHC.Base.pure PostPlacementGroupsResponseBody201Action GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "command")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "finished")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "started")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Defines the data type for the schema PostPlacementGroupsResponseBody201ActionError
-- 
-- Error message for the Action if error occurred, otherwise null
data PostPlacementGroupsResponseBody201ActionError = PostPlacementGroupsResponseBody201ActionError {
  -- | code: Fixed machine readable code
  postPlacementGroupsResponseBody201ActionErrorCode :: Data.Text.Internal.Text
  -- | message: Humanized error message
  , postPlacementGroupsResponseBody201ActionErrorMessage :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostPlacementGroupsResponseBody201ActionError
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "code" (postPlacementGroupsResponseBody201ActionErrorCode obj) : (Data.Aeson..=) "message" (postPlacementGroupsResponseBody201ActionErrorMessage obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "code" (postPlacementGroupsResponseBody201ActionErrorCode obj) GHC.Base.<> (Data.Aeson..=) "message" (postPlacementGroupsResponseBody201ActionErrorMessage obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostPlacementGroupsResponseBody201ActionError
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostPlacementGroupsResponseBody201ActionError" (\obj -> (GHC.Base.pure PostPlacementGroupsResponseBody201ActionError GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Defines the data type for the schema PostPlacementGroupsResponseBody201ActionResources
-- 
-- 
data PostPlacementGroupsResponseBody201ActionResources = PostPlacementGroupsResponseBody201ActionResources {
  -- | id: ID of the Resource
  postPlacementGroupsResponseBody201ActionResourcesId :: GHC.Integer.Type.Integer
  -- | type: Type of resource referenced
  , postPlacementGroupsResponseBody201ActionResourcesType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostPlacementGroupsResponseBody201ActionResources
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (postPlacementGroupsResponseBody201ActionResourcesId obj) : (Data.Aeson..=) "type" (postPlacementGroupsResponseBody201ActionResourcesType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (postPlacementGroupsResponseBody201ActionResourcesId obj) GHC.Base.<> (Data.Aeson..=) "type" (postPlacementGroupsResponseBody201ActionResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostPlacementGroupsResponseBody201ActionResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostPlacementGroupsResponseBody201ActionResources" (\obj -> (GHC.Base.pure PostPlacementGroupsResponseBody201ActionResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema PostPlacementGroupsResponseBody201ActionStatus
-- 
-- Status of the Action
data PostPlacementGroupsResponseBody201ActionStatus
    = PostPlacementGroupsResponseBody201ActionStatusEnumOther Data.Aeson.Types.Internal.Value
    | PostPlacementGroupsResponseBody201ActionStatusEnumTyped Data.Text.Internal.Text
    | PostPlacementGroupsResponseBody201ActionStatusEnumStringError
    | PostPlacementGroupsResponseBody201ActionStatusEnumStringRunning
    | PostPlacementGroupsResponseBody201ActionStatusEnumStringSuccess
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostPlacementGroupsResponseBody201ActionStatus
    where toJSON (PostPlacementGroupsResponseBody201ActionStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostPlacementGroupsResponseBody201ActionStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostPlacementGroupsResponseBody201ActionStatusEnumStringError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error"
          toJSON (PostPlacementGroupsResponseBody201ActionStatusEnumStringRunning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running"
          toJSON (PostPlacementGroupsResponseBody201ActionStatusEnumStringSuccess) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success"
instance Data.Aeson.FromJSON PostPlacementGroupsResponseBody201ActionStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error")
                                          then PostPlacementGroupsResponseBody201ActionStatusEnumStringError
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running")
                                                then PostPlacementGroupsResponseBody201ActionStatusEnumStringRunning
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success")
                                                      then PostPlacementGroupsResponseBody201ActionStatusEnumStringSuccess
                                                      else PostPlacementGroupsResponseBody201ActionStatusEnumOther val)
-- | Defines the data type for the schema PostPlacementGroupsResponseBody201Placement_group
-- 
-- 
data PostPlacementGroupsResponseBody201PlacementGroup = PostPlacementGroupsResponseBody201PlacementGroup {
  -- | created: Point in time when the Resource was created (in ISO-8601 format)
  postPlacementGroupsResponseBody201PlacementGroupCreated :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , postPlacementGroupsResponseBody201PlacementGroupId :: GHC.Integer.Type.Integer
  -- | labels: User-defined labels (key-value pairs)
  , postPlacementGroupsResponseBody201PlacementGroupLabels :: PostPlacementGroupsResponseBody201PlacementGroupLabels
  -- | name: Name of the Resource. Must be unique per Project.
  , postPlacementGroupsResponseBody201PlacementGroupName :: Data.Text.Internal.Text
  -- | servers: Array of IDs of Servers that are part of this Placement Group
  , postPlacementGroupsResponseBody201PlacementGroupServers :: ([] GHC.Integer.Type.Integer)
  -- | type: Type of the Placement Group
  , postPlacementGroupsResponseBody201PlacementGroupType :: PostPlacementGroupsResponseBody201PlacementGroupType
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostPlacementGroupsResponseBody201PlacementGroup
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "created" (postPlacementGroupsResponseBody201PlacementGroupCreated obj) : (Data.Aeson..=) "id" (postPlacementGroupsResponseBody201PlacementGroupId obj) : (Data.Aeson..=) "labels" (postPlacementGroupsResponseBody201PlacementGroupLabels obj) : (Data.Aeson..=) "name" (postPlacementGroupsResponseBody201PlacementGroupName obj) : (Data.Aeson..=) "servers" (postPlacementGroupsResponseBody201PlacementGroupServers obj) : (Data.Aeson..=) "type" (postPlacementGroupsResponseBody201PlacementGroupType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "created" (postPlacementGroupsResponseBody201PlacementGroupCreated obj) GHC.Base.<> ((Data.Aeson..=) "id" (postPlacementGroupsResponseBody201PlacementGroupId obj) GHC.Base.<> ((Data.Aeson..=) "labels" (postPlacementGroupsResponseBody201PlacementGroupLabels obj) GHC.Base.<> ((Data.Aeson..=) "name" (postPlacementGroupsResponseBody201PlacementGroupName obj) GHC.Base.<> ((Data.Aeson..=) "servers" (postPlacementGroupsResponseBody201PlacementGroupServers obj) GHC.Base.<> (Data.Aeson..=) "type" (postPlacementGroupsResponseBody201PlacementGroupType obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostPlacementGroupsResponseBody201PlacementGroup
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostPlacementGroupsResponseBody201PlacementGroup" (\obj -> (((((GHC.Base.pure PostPlacementGroupsResponseBody201PlacementGroup GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "labels")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "servers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the data type for the schema PostPlacementGroupsResponseBody201Placement_groupLabels
-- 
-- User-defined labels (key-value pairs)
data PostPlacementGroupsResponseBody201PlacementGroupLabels = PostPlacementGroupsResponseBody201PlacementGroupLabels {
  
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostPlacementGroupsResponseBody201PlacementGroupLabels
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON PostPlacementGroupsResponseBody201PlacementGroupLabels
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostPlacementGroupsResponseBody201PlacementGroupLabels" (\obj -> GHC.Base.pure PostPlacementGroupsResponseBody201PlacementGroupLabels)
-- | Defines the enum schema PostPlacementGroupsResponseBody201Placement_groupType
-- 
-- Type of the Placement Group
data PostPlacementGroupsResponseBody201PlacementGroupType
    = PostPlacementGroupsResponseBody201PlacementGroupTypeEnumOther Data.Aeson.Types.Internal.Value
    | PostPlacementGroupsResponseBody201PlacementGroupTypeEnumTyped Data.Text.Internal.Text
    | PostPlacementGroupsResponseBody201PlacementGroupTypeEnumStringSpread
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostPlacementGroupsResponseBody201PlacementGroupType
    where toJSON (PostPlacementGroupsResponseBody201PlacementGroupTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostPlacementGroupsResponseBody201PlacementGroupTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostPlacementGroupsResponseBody201PlacementGroupTypeEnumStringSpread) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "spread"
instance Data.Aeson.FromJSON PostPlacementGroupsResponseBody201PlacementGroupType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "spread")
                                          then PostPlacementGroupsResponseBody201PlacementGroupTypeEnumStringSpread
                                          else PostPlacementGroupsResponseBody201PlacementGroupTypeEnumOther val)
