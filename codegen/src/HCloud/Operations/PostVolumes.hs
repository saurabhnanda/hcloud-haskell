-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation postVolumes
module HCloud.Operations.PostVolumes where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > POST /volumes
-- 
-- Creates a new Volume attached to a Server. If you want to create a Volume that is not attached to a Server, you need to provide the \`location\` key instead of \`server\`. This can be either the ID or the name of the Location this Volume will be created in. Note that a Volume can be attached to a Server only in the same Location as the Volume itself.
-- 
-- Specifying the Server during Volume creation will automatically attach the Volume to that Server after it has been initialized. In that case, the \`next_actions\` key in the response is an array which contains a single \`attach_volume\` action.
-- 
-- The minimum Volume size is 10GB and the maximum size is 10TB (10240GB).
-- 
-- A volumeâ€™s name can consist of alphanumeric characters, dashes, underscores, and dots, but has to start and end with an alphanumeric character. The total length is limited to 64 characters. Volume names must be unique per Project.
-- 
-- \#\#\#\# Call specific error codes
-- 
-- | Code                                | Description                                         |
-- |-------------------------------------|-----------------------------------------------------|
-- | \`no_space_left_in_location\`         | There is no volume space left in the given location |
postVolumes :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Maybe.Maybe PostVolumesRequestBody                                                                                  -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response PostVolumesResponse)) -- ^ Monad containing the result of the operation
postVolumes config
            body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostVolumesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostVolumesResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                   PostVolumesResponseBody201)
                                                                                                                                                                        | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/volumes") [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /volumes
-- 
-- The same as 'postVolumes' but returns the raw 'Data.ByteString.Char8.ByteString'
postVolumesRaw :: forall m s . (HCloud.Common.MonadHTTP m,
                                HCloud.Common.SecurityScheme s) =>
                  HCloud.Common.Configuration s ->
                  GHC.Maybe.Maybe PostVolumesRequestBody ->
                  m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                        (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postVolumesRaw config
               body = GHC.Base.id (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/volumes") [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /volumes
-- 
-- Monadic version of 'postVolumes' (use with 'HCloud.Common.runWithConfiguration')
postVolumesM :: forall m s . (HCloud.Common.MonadHTTP m,
                              HCloud.Common.SecurityScheme s) =>
                GHC.Maybe.Maybe PostVolumesRequestBody ->
                Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                   m
                                                   (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                       (Network.HTTP.Client.Types.Response PostVolumesResponse))
postVolumesM body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostVolumesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostVolumesResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                    PostVolumesResponseBody201)
                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/volumes") [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /volumes
-- 
-- Monadic version of 'postVolumesRaw' (use with 'HCloud.Common.runWithConfiguration')
postVolumesRawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                 HCloud.Common.SecurityScheme s) =>
                   GHC.Maybe.Maybe PostVolumesRequestBody ->
                   Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                      m
                                                      (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                          (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postVolumesRawM body = GHC.Base.id (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/volumes") [] body HCloud.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema postVolumesRequestBody
-- 
-- 
data PostVolumesRequestBody = PostVolumesRequestBody {
  -- | automount: Auto-mount Volume after attach. \`server\` must be provided.
  postVolumesRequestBodyAutomount :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | format: Format Volume after creation. One of: \`xfs\`, \`ext4\`
  , postVolumesRequestBodyFormat :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | labels: User-defined labels (key-value pairs)
  , postVolumesRequestBodyLabels :: (GHC.Maybe.Maybe PostVolumesRequestBodyLabels)
  -- | location: Location to create the Volume in (can be omitted if Server is specified)
  , postVolumesRequestBodyLocation :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | name: Name of the volume
  , postVolumesRequestBodyName :: Data.Text.Internal.Text
  -- | server: Server to which to attach the Volume once it\'s created (Volume will be created in the same Location as the server)
  , postVolumesRequestBodyServer :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)
  -- | size: Size of the Volume in GB
  , postVolumesRequestBodySize :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostVolumesRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "automount" (postVolumesRequestBodyAutomount obj) : (Data.Aeson..=) "format" (postVolumesRequestBodyFormat obj) : (Data.Aeson..=) "labels" (postVolumesRequestBodyLabels obj) : (Data.Aeson..=) "location" (postVolumesRequestBodyLocation obj) : (Data.Aeson..=) "name" (postVolumesRequestBodyName obj) : (Data.Aeson..=) "server" (postVolumesRequestBodyServer obj) : (Data.Aeson..=) "size" (postVolumesRequestBodySize obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "automount" (postVolumesRequestBodyAutomount obj) GHC.Base.<> ((Data.Aeson..=) "format" (postVolumesRequestBodyFormat obj) GHC.Base.<> ((Data.Aeson..=) "labels" (postVolumesRequestBodyLabels obj) GHC.Base.<> ((Data.Aeson..=) "location" (postVolumesRequestBodyLocation obj) GHC.Base.<> ((Data.Aeson..=) "name" (postVolumesRequestBodyName obj) GHC.Base.<> ((Data.Aeson..=) "server" (postVolumesRequestBodyServer obj) GHC.Base.<> (Data.Aeson..=) "size" (postVolumesRequestBodySize obj)))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostVolumesRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostVolumesRequestBody" (\obj -> ((((((GHC.Base.pure PostVolumesRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "automount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "format")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "labels")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "location")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "server")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "size"))
-- | Defines the data type for the schema postVolumesRequestBodyLabels
-- 
-- User-defined labels (key-value pairs)
data PostVolumesRequestBodyLabels = PostVolumesRequestBodyLabels {
  
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostVolumesRequestBodyLabels
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON PostVolumesRequestBodyLabels
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostVolumesRequestBodyLabels" (\obj -> GHC.Base.pure PostVolumesRequestBodyLabels)
-- | Represents a response of the operation 'postVolumes'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostVolumesResponseError' is used.
data PostVolumesResponse =                             
   PostVolumesResponseError GHC.Base.String            -- ^ Means either no matching case available or a parse error
  | PostVolumesResponse201 PostVolumesResponseBody201  -- ^ The \`volume\` key contains the Volume that was just created  The \`action\` key contains the Action tracking Volume creation 
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema PostVolumesResponseBody201
-- 
-- 
data PostVolumesResponseBody201 = PostVolumesResponseBody201 {
  -- | action
  postVolumesResponseBody201Action :: PostVolumesResponseBody201Action
  -- | next_actions
  , postVolumesResponseBody201NextActions :: ([] PostVolumesResponseBody201NextActions)
  -- | volume
  , postVolumesResponseBody201Volume :: PostVolumesResponseBody201Volume
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostVolumesResponseBody201
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "action" (postVolumesResponseBody201Action obj) : (Data.Aeson..=) "next_actions" (postVolumesResponseBody201NextActions obj) : (Data.Aeson..=) "volume" (postVolumesResponseBody201Volume obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "action" (postVolumesResponseBody201Action obj) GHC.Base.<> ((Data.Aeson..=) "next_actions" (postVolumesResponseBody201NextActions obj) GHC.Base.<> (Data.Aeson..=) "volume" (postVolumesResponseBody201Volume obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PostVolumesResponseBody201
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostVolumesResponseBody201" (\obj -> ((GHC.Base.pure PostVolumesResponseBody201 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "action")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "next_actions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "volume"))
-- | Defines the data type for the schema PostVolumesResponseBody201Action
-- 
-- 
data PostVolumesResponseBody201Action = PostVolumesResponseBody201Action {
  -- | command: Command executed in the Action
  postVolumesResponseBody201ActionCommand :: Data.Text.Internal.Text
  -- | error: Error message for the Action if error occurred, otherwise null
  , postVolumesResponseBody201ActionError :: PostVolumesResponseBody201ActionError
  -- | finished: Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
  , postVolumesResponseBody201ActionFinished :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , postVolumesResponseBody201ActionId :: GHC.Integer.Type.Integer
  -- | progress: Progress of Action in percent
  , postVolumesResponseBody201ActionProgress :: GHC.Types.Double
  -- | resources: Resources the Action relates to
  , postVolumesResponseBody201ActionResources :: ([] PostVolumesResponseBody201ActionResources)
  -- | started: Point in time when the Action was started (in ISO-8601 format)
  , postVolumesResponseBody201ActionStarted :: Data.Text.Internal.Text
  -- | status: Status of the Action
  , postVolumesResponseBody201ActionStatus :: PostVolumesResponseBody201ActionStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostVolumesResponseBody201Action
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "command" (postVolumesResponseBody201ActionCommand obj) : (Data.Aeson..=) "error" (postVolumesResponseBody201ActionError obj) : (Data.Aeson..=) "finished" (postVolumesResponseBody201ActionFinished obj) : (Data.Aeson..=) "id" (postVolumesResponseBody201ActionId obj) : (Data.Aeson..=) "progress" (postVolumesResponseBody201ActionProgress obj) : (Data.Aeson..=) "resources" (postVolumesResponseBody201ActionResources obj) : (Data.Aeson..=) "started" (postVolumesResponseBody201ActionStarted obj) : (Data.Aeson..=) "status" (postVolumesResponseBody201ActionStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "command" (postVolumesResponseBody201ActionCommand obj) GHC.Base.<> ((Data.Aeson..=) "error" (postVolumesResponseBody201ActionError obj) GHC.Base.<> ((Data.Aeson..=) "finished" (postVolumesResponseBody201ActionFinished obj) GHC.Base.<> ((Data.Aeson..=) "id" (postVolumesResponseBody201ActionId obj) GHC.Base.<> ((Data.Aeson..=) "progress" (postVolumesResponseBody201ActionProgress obj) GHC.Base.<> ((Data.Aeson..=) "resources" (postVolumesResponseBody201ActionResources obj) GHC.Base.<> ((Data.Aeson..=) "started" (postVolumesResponseBody201ActionStarted obj) GHC.Base.<> (Data.Aeson..=) "status" (postVolumesResponseBody201ActionStatus obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostVolumesResponseBody201Action
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostVolumesResponseBody201Action" (\obj -> (((((((GHC.Base.pure PostVolumesResponseBody201Action GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "command")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "finished")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "started")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Defines the data type for the schema PostVolumesResponseBody201ActionError
-- 
-- Error message for the Action if error occurred, otherwise null
data PostVolumesResponseBody201ActionError = PostVolumesResponseBody201ActionError {
  -- | code: Fixed machine readable code
  postVolumesResponseBody201ActionErrorCode :: Data.Text.Internal.Text
  -- | message: Humanized error message
  , postVolumesResponseBody201ActionErrorMessage :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostVolumesResponseBody201ActionError
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "code" (postVolumesResponseBody201ActionErrorCode obj) : (Data.Aeson..=) "message" (postVolumesResponseBody201ActionErrorMessage obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "code" (postVolumesResponseBody201ActionErrorCode obj) GHC.Base.<> (Data.Aeson..=) "message" (postVolumesResponseBody201ActionErrorMessage obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostVolumesResponseBody201ActionError
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostVolumesResponseBody201ActionError" (\obj -> (GHC.Base.pure PostVolumesResponseBody201ActionError GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Defines the data type for the schema PostVolumesResponseBody201ActionResources
-- 
-- 
data PostVolumesResponseBody201ActionResources = PostVolumesResponseBody201ActionResources {
  -- | id: ID of the Resource
  postVolumesResponseBody201ActionResourcesId :: GHC.Integer.Type.Integer
  -- | type: Type of resource referenced
  , postVolumesResponseBody201ActionResourcesType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostVolumesResponseBody201ActionResources
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (postVolumesResponseBody201ActionResourcesId obj) : (Data.Aeson..=) "type" (postVolumesResponseBody201ActionResourcesType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (postVolumesResponseBody201ActionResourcesId obj) GHC.Base.<> (Data.Aeson..=) "type" (postVolumesResponseBody201ActionResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostVolumesResponseBody201ActionResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostVolumesResponseBody201ActionResources" (\obj -> (GHC.Base.pure PostVolumesResponseBody201ActionResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema PostVolumesResponseBody201ActionStatus
-- 
-- Status of the Action
data PostVolumesResponseBody201ActionStatus
    = PostVolumesResponseBody201ActionStatusEnumOther Data.Aeson.Types.Internal.Value
    | PostVolumesResponseBody201ActionStatusEnumTyped Data.Text.Internal.Text
    | PostVolumesResponseBody201ActionStatusEnumStringError
    | PostVolumesResponseBody201ActionStatusEnumStringRunning
    | PostVolumesResponseBody201ActionStatusEnumStringSuccess
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostVolumesResponseBody201ActionStatus
    where toJSON (PostVolumesResponseBody201ActionStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostVolumesResponseBody201ActionStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostVolumesResponseBody201ActionStatusEnumStringError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error"
          toJSON (PostVolumesResponseBody201ActionStatusEnumStringRunning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running"
          toJSON (PostVolumesResponseBody201ActionStatusEnumStringSuccess) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success"
instance Data.Aeson.FromJSON PostVolumesResponseBody201ActionStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error")
                                          then PostVolumesResponseBody201ActionStatusEnumStringError
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running")
                                                then PostVolumesResponseBody201ActionStatusEnumStringRunning
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success")
                                                      then PostVolumesResponseBody201ActionStatusEnumStringSuccess
                                                      else PostVolumesResponseBody201ActionStatusEnumOther val)
-- | Defines the data type for the schema PostVolumesResponseBody201Next_actions
-- 
-- 
data PostVolumesResponseBody201NextActions = PostVolumesResponseBody201NextActions {
  -- | command: Command executed in the Action
  postVolumesResponseBody201NextActionsCommand :: Data.Text.Internal.Text
  -- | error: Error message for the Action if error occurred, otherwise null
  , postVolumesResponseBody201NextActionsError :: PostVolumesResponseBody201NextActionsError
  -- | finished: Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
  , postVolumesResponseBody201NextActionsFinished :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , postVolumesResponseBody201NextActionsId :: GHC.Integer.Type.Integer
  -- | progress: Progress of Action in percent
  , postVolumesResponseBody201NextActionsProgress :: GHC.Types.Double
  -- | resources: Resources the Action relates to
  , postVolumesResponseBody201NextActionsResources :: ([] PostVolumesResponseBody201NextActionsResources)
  -- | started: Point in time when the Action was started (in ISO-8601 format)
  , postVolumesResponseBody201NextActionsStarted :: Data.Text.Internal.Text
  -- | status: Status of the Action
  , postVolumesResponseBody201NextActionsStatus :: PostVolumesResponseBody201NextActionsStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostVolumesResponseBody201NextActions
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "command" (postVolumesResponseBody201NextActionsCommand obj) : (Data.Aeson..=) "error" (postVolumesResponseBody201NextActionsError obj) : (Data.Aeson..=) "finished" (postVolumesResponseBody201NextActionsFinished obj) : (Data.Aeson..=) "id" (postVolumesResponseBody201NextActionsId obj) : (Data.Aeson..=) "progress" (postVolumesResponseBody201NextActionsProgress obj) : (Data.Aeson..=) "resources" (postVolumesResponseBody201NextActionsResources obj) : (Data.Aeson..=) "started" (postVolumesResponseBody201NextActionsStarted obj) : (Data.Aeson..=) "status" (postVolumesResponseBody201NextActionsStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "command" (postVolumesResponseBody201NextActionsCommand obj) GHC.Base.<> ((Data.Aeson..=) "error" (postVolumesResponseBody201NextActionsError obj) GHC.Base.<> ((Data.Aeson..=) "finished" (postVolumesResponseBody201NextActionsFinished obj) GHC.Base.<> ((Data.Aeson..=) "id" (postVolumesResponseBody201NextActionsId obj) GHC.Base.<> ((Data.Aeson..=) "progress" (postVolumesResponseBody201NextActionsProgress obj) GHC.Base.<> ((Data.Aeson..=) "resources" (postVolumesResponseBody201NextActionsResources obj) GHC.Base.<> ((Data.Aeson..=) "started" (postVolumesResponseBody201NextActionsStarted obj) GHC.Base.<> (Data.Aeson..=) "status" (postVolumesResponseBody201NextActionsStatus obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostVolumesResponseBody201NextActions
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostVolumesResponseBody201NextActions" (\obj -> (((((((GHC.Base.pure PostVolumesResponseBody201NextActions GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "command")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "finished")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "started")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Defines the data type for the schema PostVolumesResponseBody201Next_actionsError
-- 
-- Error message for the Action if error occurred, otherwise null
data PostVolumesResponseBody201NextActionsError = PostVolumesResponseBody201NextActionsError {
  -- | code: Fixed machine readable code
  postVolumesResponseBody201NextActionsErrorCode :: Data.Text.Internal.Text
  -- | message: Humanized error message
  , postVolumesResponseBody201NextActionsErrorMessage :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostVolumesResponseBody201NextActionsError
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "code" (postVolumesResponseBody201NextActionsErrorCode obj) : (Data.Aeson..=) "message" (postVolumesResponseBody201NextActionsErrorMessage obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "code" (postVolumesResponseBody201NextActionsErrorCode obj) GHC.Base.<> (Data.Aeson..=) "message" (postVolumesResponseBody201NextActionsErrorMessage obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostVolumesResponseBody201NextActionsError
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostVolumesResponseBody201NextActionsError" (\obj -> (GHC.Base.pure PostVolumesResponseBody201NextActionsError GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Defines the data type for the schema PostVolumesResponseBody201Next_actionsResources
-- 
-- 
data PostVolumesResponseBody201NextActionsResources = PostVolumesResponseBody201NextActionsResources {
  -- | id: ID of the Resource
  postVolumesResponseBody201NextActionsResourcesId :: GHC.Integer.Type.Integer
  -- | type: Type of resource referenced
  , postVolumesResponseBody201NextActionsResourcesType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostVolumesResponseBody201NextActionsResources
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (postVolumesResponseBody201NextActionsResourcesId obj) : (Data.Aeson..=) "type" (postVolumesResponseBody201NextActionsResourcesType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (postVolumesResponseBody201NextActionsResourcesId obj) GHC.Base.<> (Data.Aeson..=) "type" (postVolumesResponseBody201NextActionsResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostVolumesResponseBody201NextActionsResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostVolumesResponseBody201NextActionsResources" (\obj -> (GHC.Base.pure PostVolumesResponseBody201NextActionsResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema PostVolumesResponseBody201Next_actionsStatus
-- 
-- Status of the Action
data PostVolumesResponseBody201NextActionsStatus
    = PostVolumesResponseBody201NextActionsStatusEnumOther Data.Aeson.Types.Internal.Value
    | PostVolumesResponseBody201NextActionsStatusEnumTyped Data.Text.Internal.Text
    | PostVolumesResponseBody201NextActionsStatusEnumStringError
    | PostVolumesResponseBody201NextActionsStatusEnumStringRunning
    | PostVolumesResponseBody201NextActionsStatusEnumStringSuccess
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostVolumesResponseBody201NextActionsStatus
    where toJSON (PostVolumesResponseBody201NextActionsStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostVolumesResponseBody201NextActionsStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostVolumesResponseBody201NextActionsStatusEnumStringError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error"
          toJSON (PostVolumesResponseBody201NextActionsStatusEnumStringRunning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running"
          toJSON (PostVolumesResponseBody201NextActionsStatusEnumStringSuccess) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success"
instance Data.Aeson.FromJSON PostVolumesResponseBody201NextActionsStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error")
                                          then PostVolumesResponseBody201NextActionsStatusEnumStringError
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running")
                                                then PostVolumesResponseBody201NextActionsStatusEnumStringRunning
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success")
                                                      then PostVolumesResponseBody201NextActionsStatusEnumStringSuccess
                                                      else PostVolumesResponseBody201NextActionsStatusEnumOther val)
-- | Defines the data type for the schema PostVolumesResponseBody201Volume
-- 
-- 
data PostVolumesResponseBody201Volume = PostVolumesResponseBody201Volume {
  -- | created: Point in time when the Resource was created (in ISO-8601 format)
  postVolumesResponseBody201VolumeCreated :: Data.Text.Internal.Text
  -- | format: Filesystem of the Volume if formatted on creation, null if not formatted on creation
  , postVolumesResponseBody201VolumeFormat :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , postVolumesResponseBody201VolumeId :: GHC.Integer.Type.Integer
  -- | labels: User-defined labels (key-value pairs)
  , postVolumesResponseBody201VolumeLabels :: PostVolumesResponseBody201VolumeLabels
  -- | linux_device: Device path on the file system for the Volume
  , postVolumesResponseBody201VolumeLinuxDevice :: Data.Text.Internal.Text
  -- | location: Location of the Volume. Volume can only be attached to Servers in the same Location.
  , postVolumesResponseBody201VolumeLocation :: PostVolumesResponseBody201VolumeLocation
  -- | name: Name of the Resource. Must be unique per Project.
  , postVolumesResponseBody201VolumeName :: Data.Text.Internal.Text
  -- | protection: Protection configuration for the Resource
  , postVolumesResponseBody201VolumeProtection :: PostVolumesResponseBody201VolumeProtection
  -- | server: ID of the Server the Volume is attached to, null if it is not attached at all
  , postVolumesResponseBody201VolumeServer :: GHC.Integer.Type.Integer
  -- | size: Size in GB of the Volume
  , postVolumesResponseBody201VolumeSize :: GHC.Types.Double
  -- | status: Current status of the Volume
  , postVolumesResponseBody201VolumeStatus :: PostVolumesResponseBody201VolumeStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostVolumesResponseBody201Volume
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "created" (postVolumesResponseBody201VolumeCreated obj) : (Data.Aeson..=) "format" (postVolumesResponseBody201VolumeFormat obj) : (Data.Aeson..=) "id" (postVolumesResponseBody201VolumeId obj) : (Data.Aeson..=) "labels" (postVolumesResponseBody201VolumeLabels obj) : (Data.Aeson..=) "linux_device" (postVolumesResponseBody201VolumeLinuxDevice obj) : (Data.Aeson..=) "location" (postVolumesResponseBody201VolumeLocation obj) : (Data.Aeson..=) "name" (postVolumesResponseBody201VolumeName obj) : (Data.Aeson..=) "protection" (postVolumesResponseBody201VolumeProtection obj) : (Data.Aeson..=) "server" (postVolumesResponseBody201VolumeServer obj) : (Data.Aeson..=) "size" (postVolumesResponseBody201VolumeSize obj) : (Data.Aeson..=) "status" (postVolumesResponseBody201VolumeStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "created" (postVolumesResponseBody201VolumeCreated obj) GHC.Base.<> ((Data.Aeson..=) "format" (postVolumesResponseBody201VolumeFormat obj) GHC.Base.<> ((Data.Aeson..=) "id" (postVolumesResponseBody201VolumeId obj) GHC.Base.<> ((Data.Aeson..=) "labels" (postVolumesResponseBody201VolumeLabels obj) GHC.Base.<> ((Data.Aeson..=) "linux_device" (postVolumesResponseBody201VolumeLinuxDevice obj) GHC.Base.<> ((Data.Aeson..=) "location" (postVolumesResponseBody201VolumeLocation obj) GHC.Base.<> ((Data.Aeson..=) "name" (postVolumesResponseBody201VolumeName obj) GHC.Base.<> ((Data.Aeson..=) "protection" (postVolumesResponseBody201VolumeProtection obj) GHC.Base.<> ((Data.Aeson..=) "server" (postVolumesResponseBody201VolumeServer obj) GHC.Base.<> ((Data.Aeson..=) "size" (postVolumesResponseBody201VolumeSize obj) GHC.Base.<> (Data.Aeson..=) "status" (postVolumesResponseBody201VolumeStatus obj)))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostVolumesResponseBody201Volume
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostVolumesResponseBody201Volume" (\obj -> ((((((((((GHC.Base.pure PostVolumesResponseBody201Volume GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "format")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "labels")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "linux_device")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "location")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "protection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "server")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "size")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Defines the data type for the schema PostVolumesResponseBody201VolumeLabels
-- 
-- User-defined labels (key-value pairs)
data PostVolumesResponseBody201VolumeLabels = PostVolumesResponseBody201VolumeLabels {
  
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostVolumesResponseBody201VolumeLabels
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON PostVolumesResponseBody201VolumeLabels
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostVolumesResponseBody201VolumeLabels" (\obj -> GHC.Base.pure PostVolumesResponseBody201VolumeLabels)
-- | Defines the data type for the schema PostVolumesResponseBody201VolumeLocation
-- 
-- Location of the Volume. Volume can only be attached to Servers in the same Location.
data PostVolumesResponseBody201VolumeLocation = PostVolumesResponseBody201VolumeLocation {
  -- | city: City the Location is closest to
  postVolumesResponseBody201VolumeLocationCity :: Data.Text.Internal.Text
  -- | country: ISO 3166-1 alpha-2 code of the country the Location resides in
  , postVolumesResponseBody201VolumeLocationCountry :: Data.Text.Internal.Text
  -- | description: Description of the Location
  , postVolumesResponseBody201VolumeLocationDescription :: Data.Text.Internal.Text
  -- | id: ID of the Location
  , postVolumesResponseBody201VolumeLocationId :: GHC.Types.Double
  -- | latitude: Latitude of the city closest to the Location
  , postVolumesResponseBody201VolumeLocationLatitude :: GHC.Types.Double
  -- | longitude: Longitude of the city closest to the Location
  , postVolumesResponseBody201VolumeLocationLongitude :: GHC.Types.Double
  -- | name: Unique identifier of the Location
  , postVolumesResponseBody201VolumeLocationName :: Data.Text.Internal.Text
  -- | network_zone: Name of network zone this Location resides in
  , postVolumesResponseBody201VolumeLocationNetworkZone :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostVolumesResponseBody201VolumeLocation
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (postVolumesResponseBody201VolumeLocationCity obj) : (Data.Aeson..=) "country" (postVolumesResponseBody201VolumeLocationCountry obj) : (Data.Aeson..=) "description" (postVolumesResponseBody201VolumeLocationDescription obj) : (Data.Aeson..=) "id" (postVolumesResponseBody201VolumeLocationId obj) : (Data.Aeson..=) "latitude" (postVolumesResponseBody201VolumeLocationLatitude obj) : (Data.Aeson..=) "longitude" (postVolumesResponseBody201VolumeLocationLongitude obj) : (Data.Aeson..=) "name" (postVolumesResponseBody201VolumeLocationName obj) : (Data.Aeson..=) "network_zone" (postVolumesResponseBody201VolumeLocationNetworkZone obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (postVolumesResponseBody201VolumeLocationCity obj) GHC.Base.<> ((Data.Aeson..=) "country" (postVolumesResponseBody201VolumeLocationCountry obj) GHC.Base.<> ((Data.Aeson..=) "description" (postVolumesResponseBody201VolumeLocationDescription obj) GHC.Base.<> ((Data.Aeson..=) "id" (postVolumesResponseBody201VolumeLocationId obj) GHC.Base.<> ((Data.Aeson..=) "latitude" (postVolumesResponseBody201VolumeLocationLatitude obj) GHC.Base.<> ((Data.Aeson..=) "longitude" (postVolumesResponseBody201VolumeLocationLongitude obj) GHC.Base.<> ((Data.Aeson..=) "name" (postVolumesResponseBody201VolumeLocationName obj) GHC.Base.<> (Data.Aeson..=) "network_zone" (postVolumesResponseBody201VolumeLocationNetworkZone obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostVolumesResponseBody201VolumeLocation
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostVolumesResponseBody201VolumeLocation" (\obj -> (((((((GHC.Base.pure PostVolumesResponseBody201VolumeLocation GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "latitude")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "longitude")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "network_zone"))
-- | Defines the data type for the schema PostVolumesResponseBody201VolumeProtection
-- 
-- Protection configuration for the Resource
data PostVolumesResponseBody201VolumeProtection = PostVolumesResponseBody201VolumeProtection {
  -- | delete: If true, prevents the Resource from being deleted
  postVolumesResponseBody201VolumeProtectionDelete :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostVolumesResponseBody201VolumeProtection
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "delete" (postVolumesResponseBody201VolumeProtectionDelete obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "delete" (postVolumesResponseBody201VolumeProtectionDelete obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostVolumesResponseBody201VolumeProtection
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostVolumesResponseBody201VolumeProtection" (\obj -> GHC.Base.pure PostVolumesResponseBody201VolumeProtection GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "delete"))
-- | Defines the enum schema PostVolumesResponseBody201VolumeStatus
-- 
-- Current status of the Volume
data PostVolumesResponseBody201VolumeStatus
    = PostVolumesResponseBody201VolumeStatusEnumOther Data.Aeson.Types.Internal.Value
    | PostVolumesResponseBody201VolumeStatusEnumTyped Data.Text.Internal.Text
    | PostVolumesResponseBody201VolumeStatusEnumStringAvailable
    | PostVolumesResponseBody201VolumeStatusEnumStringCreating
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostVolumesResponseBody201VolumeStatus
    where toJSON (PostVolumesResponseBody201VolumeStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostVolumesResponseBody201VolumeStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostVolumesResponseBody201VolumeStatusEnumStringAvailable) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "available"
          toJSON (PostVolumesResponseBody201VolumeStatusEnumStringCreating) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "creating"
instance Data.Aeson.FromJSON PostVolumesResponseBody201VolumeStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "available")
                                          then PostVolumesResponseBody201VolumeStatusEnumStringAvailable
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "creating")
                                                then PostVolumesResponseBody201VolumeStatusEnumStringCreating
                                                else PostVolumesResponseBody201VolumeStatusEnumOther val)
