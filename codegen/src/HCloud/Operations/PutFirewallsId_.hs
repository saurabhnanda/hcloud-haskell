-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation putFirewalls_Id_
module HCloud.Operations.PutFirewallsId_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > PUT /firewalls/{id}
-- 
-- Updates the Firewall.
-- 
-- Note that when updating labels, the Firewall\'s current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.
-- 
-- Note: if the Firewall object changes during the request, the response will be a “conflict” error.
putFirewalls_Id_ :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer                                                                                                     -- ^ id: ID of the resource
  -> GHC.Maybe.Maybe PutFirewallsIdRequestBody                                                                                    -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response PutFirewallsIdResponse))   -- ^ Monad containing the result of the operation
putFirewalls_Id_ config
                 id
                 body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PutFirewallsIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PutFirewallsIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                              PutFirewallsIdResponseBody200)
                                                                                                                                                                                | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack ("/firewalls/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > PUT /firewalls/{id}
-- 
-- The same as 'putFirewalls_Id_' but returns the raw 'Data.ByteString.Char8.ByteString'
putFirewalls_Id_Raw :: forall m s . (HCloud.Common.MonadHTTP m,
                                     HCloud.Common.SecurityScheme s) =>
                       HCloud.Common.Configuration s ->
                       GHC.Integer.Type.Integer ->
                       GHC.Maybe.Maybe PutFirewallsIdRequestBody ->
                       m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                             (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
putFirewalls_Id_Raw config
                    id
                    body = GHC.Base.id (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack ("/firewalls/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > PUT /firewalls/{id}
-- 
-- Monadic version of 'putFirewalls_Id_' (use with 'HCloud.Common.runWithConfiguration')
putFirewalls_Id_M :: forall m s . (HCloud.Common.MonadHTTP m,
                                   HCloud.Common.SecurityScheme s) =>
                     GHC.Integer.Type.Integer ->
                     GHC.Maybe.Maybe PutFirewallsIdRequestBody ->
                     Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                        m
                                                        (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                            (Network.HTTP.Client.Types.Response PutFirewallsIdResponse))
putFirewalls_Id_M id
                  body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PutFirewallsIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PutFirewallsIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                               PutFirewallsIdResponseBody200)
                                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack ("/firewalls/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > PUT /firewalls/{id}
-- 
-- Monadic version of 'putFirewalls_Id_Raw' (use with 'HCloud.Common.runWithConfiguration')
putFirewalls_Id_RawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                      HCloud.Common.SecurityScheme s) =>
                        GHC.Integer.Type.Integer ->
                        GHC.Maybe.Maybe PutFirewallsIdRequestBody ->
                        Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                           m
                                                           (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                               (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
putFirewalls_Id_RawM id
                     body = GHC.Base.id (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack ("/firewalls/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema putFirewalls_Id_RequestBody
-- 
-- 
data PutFirewallsIdRequestBody = PutFirewallsIdRequestBody {
  -- | labels: User-defined labels (key-value pairs)
  putFirewallsIdRequestBodyLabels :: (GHC.Maybe.Maybe PutFirewallsIdRequestBodyLabels)
  -- | name: New Firewall name
  , putFirewallsIdRequestBodyName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutFirewallsIdRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "labels" (putFirewallsIdRequestBodyLabels obj) : (Data.Aeson..=) "name" (putFirewallsIdRequestBodyName obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "labels" (putFirewallsIdRequestBodyLabels obj) GHC.Base.<> (Data.Aeson..=) "name" (putFirewallsIdRequestBodyName obj))
instance Data.Aeson.Types.FromJSON.FromJSON PutFirewallsIdRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutFirewallsIdRequestBody" (\obj -> (GHC.Base.pure PutFirewallsIdRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "labels")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name"))
-- | Defines the data type for the schema putFirewalls_Id_RequestBodyLabels
-- 
-- User-defined labels (key-value pairs)
data PutFirewallsIdRequestBodyLabels = PutFirewallsIdRequestBodyLabels {
  
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutFirewallsIdRequestBodyLabels
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON PutFirewallsIdRequestBodyLabels
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutFirewallsIdRequestBodyLabels" (\obj -> GHC.Base.pure PutFirewallsIdRequestBodyLabels)
-- | Represents a response of the operation 'putFirewalls_Id_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PutFirewallsIdResponseError' is used.
data PutFirewallsIdResponse =                                
   PutFirewallsIdResponseError GHC.Base.String               -- ^ Means either no matching case available or a parse error
  | PutFirewallsIdResponse200 PutFirewallsIdResponseBody200  -- ^ The \`firewall\` key contains the Firewall that was just updated
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema PutFirewallsIdResponseBody200
-- 
-- 
data PutFirewallsIdResponseBody200 = PutFirewallsIdResponseBody200 {
  -- | firewall
  putFirewallsIdResponseBody200Firewall :: PutFirewallsIdResponseBody200Firewall
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutFirewallsIdResponseBody200
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "firewall" (putFirewallsIdResponseBody200Firewall obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "firewall" (putFirewallsIdResponseBody200Firewall obj))
instance Data.Aeson.Types.FromJSON.FromJSON PutFirewallsIdResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutFirewallsIdResponseBody200" (\obj -> GHC.Base.pure PutFirewallsIdResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "firewall"))
-- | Defines the data type for the schema PutFirewallsIdResponseBody200Firewall
-- 
-- 
data PutFirewallsIdResponseBody200Firewall = PutFirewallsIdResponseBody200Firewall {
  -- | applied_to
  putFirewallsIdResponseBody200FirewallAppliedTo :: ([] PutFirewallsIdResponseBody200FirewallAppliedTo)
  -- | created: Point in time when the Resource was created (in ISO-8601 format)
  , putFirewallsIdResponseBody200FirewallCreated :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , putFirewallsIdResponseBody200FirewallId :: GHC.Integer.Type.Integer
  -- | labels: User-defined labels (key-value pairs)
  , putFirewallsIdResponseBody200FirewallLabels :: (GHC.Maybe.Maybe PutFirewallsIdResponseBody200FirewallLabels)
  -- | name: Name of the Resource. Must be unique per Project.
  , putFirewallsIdResponseBody200FirewallName :: Data.Text.Internal.Text
  -- | rules
  , putFirewallsIdResponseBody200FirewallRules :: ([] PutFirewallsIdResponseBody200FirewallRules)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutFirewallsIdResponseBody200Firewall
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "applied_to" (putFirewallsIdResponseBody200FirewallAppliedTo obj) : (Data.Aeson..=) "created" (putFirewallsIdResponseBody200FirewallCreated obj) : (Data.Aeson..=) "id" (putFirewallsIdResponseBody200FirewallId obj) : (Data.Aeson..=) "labels" (putFirewallsIdResponseBody200FirewallLabels obj) : (Data.Aeson..=) "name" (putFirewallsIdResponseBody200FirewallName obj) : (Data.Aeson..=) "rules" (putFirewallsIdResponseBody200FirewallRules obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "applied_to" (putFirewallsIdResponseBody200FirewallAppliedTo obj) GHC.Base.<> ((Data.Aeson..=) "created" (putFirewallsIdResponseBody200FirewallCreated obj) GHC.Base.<> ((Data.Aeson..=) "id" (putFirewallsIdResponseBody200FirewallId obj) GHC.Base.<> ((Data.Aeson..=) "labels" (putFirewallsIdResponseBody200FirewallLabels obj) GHC.Base.<> ((Data.Aeson..=) "name" (putFirewallsIdResponseBody200FirewallName obj) GHC.Base.<> (Data.Aeson..=) "rules" (putFirewallsIdResponseBody200FirewallRules obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON PutFirewallsIdResponseBody200Firewall
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutFirewallsIdResponseBody200Firewall" (\obj -> (((((GHC.Base.pure PutFirewallsIdResponseBody200Firewall GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "applied_to")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "labels")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "rules"))
-- | Defines the data type for the schema PutFirewallsIdResponseBody200FirewallApplied_to
-- 
-- 
data PutFirewallsIdResponseBody200FirewallAppliedTo = PutFirewallsIdResponseBody200FirewallAppliedTo {
  -- | applied_to_resources
  putFirewallsIdResponseBody200FirewallAppliedToAppliedToResources :: (GHC.Maybe.Maybe ([] PutFirewallsIdResponseBody200FirewallAppliedToAppliedToResources))
  -- | label_selector
  , putFirewallsIdResponseBody200FirewallAppliedToLabelSelector :: (GHC.Maybe.Maybe PutFirewallsIdResponseBody200FirewallAppliedToLabelSelector)
  -- | server
  , putFirewallsIdResponseBody200FirewallAppliedToServer :: (GHC.Maybe.Maybe PutFirewallsIdResponseBody200FirewallAppliedToServer)
  -- | type: Type of resource referenced
  , putFirewallsIdResponseBody200FirewallAppliedToType :: PutFirewallsIdResponseBody200FirewallAppliedToType
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutFirewallsIdResponseBody200FirewallAppliedTo
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "applied_to_resources" (putFirewallsIdResponseBody200FirewallAppliedToAppliedToResources obj) : (Data.Aeson..=) "label_selector" (putFirewallsIdResponseBody200FirewallAppliedToLabelSelector obj) : (Data.Aeson..=) "server" (putFirewallsIdResponseBody200FirewallAppliedToServer obj) : (Data.Aeson..=) "type" (putFirewallsIdResponseBody200FirewallAppliedToType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "applied_to_resources" (putFirewallsIdResponseBody200FirewallAppliedToAppliedToResources obj) GHC.Base.<> ((Data.Aeson..=) "label_selector" (putFirewallsIdResponseBody200FirewallAppliedToLabelSelector obj) GHC.Base.<> ((Data.Aeson..=) "server" (putFirewallsIdResponseBody200FirewallAppliedToServer obj) GHC.Base.<> (Data.Aeson..=) "type" (putFirewallsIdResponseBody200FirewallAppliedToType obj))))
instance Data.Aeson.Types.FromJSON.FromJSON PutFirewallsIdResponseBody200FirewallAppliedTo
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutFirewallsIdResponseBody200FirewallAppliedTo" (\obj -> (((GHC.Base.pure PutFirewallsIdResponseBody200FirewallAppliedTo GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "applied_to_resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label_selector")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "server")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the data type for the schema PutFirewallsIdResponseBody200FirewallApplied_toApplied_to_resources
-- 
-- 
data PutFirewallsIdResponseBody200FirewallAppliedToAppliedToResources = PutFirewallsIdResponseBody200FirewallAppliedToAppliedToResources {
  -- | server
  putFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesServer :: (GHC.Maybe.Maybe PutFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesServer)
  -- | type: Type of resource referenced
  , putFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesType :: (GHC.Maybe.Maybe PutFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesType)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutFirewallsIdResponseBody200FirewallAppliedToAppliedToResources
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "server" (putFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesServer obj) : (Data.Aeson..=) "type" (putFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "server" (putFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesServer obj) GHC.Base.<> (Data.Aeson..=) "type" (putFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON PutFirewallsIdResponseBody200FirewallAppliedToAppliedToResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutFirewallsIdResponseBody200FirewallAppliedToAppliedToResources" (\obj -> (GHC.Base.pure PutFirewallsIdResponseBody200FirewallAppliedToAppliedToResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "server")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))
-- | Defines the data type for the schema PutFirewallsIdResponseBody200FirewallApplied_toApplied_to_resourcesServer
-- 
-- 
data PutFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesServer = PutFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesServer {
  -- | id: ID of the Resource
  putFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesServerId :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesServer
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (putFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesServerId obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (putFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesServerId obj))
instance Data.Aeson.Types.FromJSON.FromJSON PutFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesServer
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesServer" (\obj -> GHC.Base.pure PutFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesServer GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id"))
-- | Defines the enum schema PutFirewallsIdResponseBody200FirewallApplied_toApplied_to_resourcesType
-- 
-- Type of resource referenced
data PutFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesType
    = PutFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesTypeEnumOther Data.Aeson.Types.Internal.Value
    | PutFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesTypeEnumTyped Data.Text.Internal.Text
    | PutFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesTypeEnumStringServer
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesType
    where toJSON (PutFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PutFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PutFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesTypeEnumStringServer) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "server"
instance Data.Aeson.FromJSON PutFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "server")
                                          then PutFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesTypeEnumStringServer
                                          else PutFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesTypeEnumOther val)
-- | Defines the data type for the schema PutFirewallsIdResponseBody200FirewallApplied_toLabel_selector
-- 
-- 
data PutFirewallsIdResponseBody200FirewallAppliedToLabelSelector = PutFirewallsIdResponseBody200FirewallAppliedToLabelSelector {
  -- | selector: Label selector
  putFirewallsIdResponseBody200FirewallAppliedToLabelSelectorSelector :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutFirewallsIdResponseBody200FirewallAppliedToLabelSelector
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "selector" (putFirewallsIdResponseBody200FirewallAppliedToLabelSelectorSelector obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "selector" (putFirewallsIdResponseBody200FirewallAppliedToLabelSelectorSelector obj))
instance Data.Aeson.Types.FromJSON.FromJSON PutFirewallsIdResponseBody200FirewallAppliedToLabelSelector
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutFirewallsIdResponseBody200FirewallAppliedToLabelSelector" (\obj -> GHC.Base.pure PutFirewallsIdResponseBody200FirewallAppliedToLabelSelector GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "selector"))
-- | Defines the data type for the schema PutFirewallsIdResponseBody200FirewallApplied_toServer
-- 
-- 
data PutFirewallsIdResponseBody200FirewallAppliedToServer = PutFirewallsIdResponseBody200FirewallAppliedToServer {
  -- | id: ID of the Resource
  putFirewallsIdResponseBody200FirewallAppliedToServerId :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutFirewallsIdResponseBody200FirewallAppliedToServer
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (putFirewallsIdResponseBody200FirewallAppliedToServerId obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (putFirewallsIdResponseBody200FirewallAppliedToServerId obj))
instance Data.Aeson.Types.FromJSON.FromJSON PutFirewallsIdResponseBody200FirewallAppliedToServer
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutFirewallsIdResponseBody200FirewallAppliedToServer" (\obj -> GHC.Base.pure PutFirewallsIdResponseBody200FirewallAppliedToServer GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id"))
-- | Defines the enum schema PutFirewallsIdResponseBody200FirewallApplied_toType
-- 
-- Type of resource referenced
data PutFirewallsIdResponseBody200FirewallAppliedToType
    = PutFirewallsIdResponseBody200FirewallAppliedToTypeEnumOther Data.Aeson.Types.Internal.Value
    | PutFirewallsIdResponseBody200FirewallAppliedToTypeEnumTyped Data.Text.Internal.Text
    | PutFirewallsIdResponseBody200FirewallAppliedToTypeEnumStringLabelSelector
    | PutFirewallsIdResponseBody200FirewallAppliedToTypeEnumStringServer
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutFirewallsIdResponseBody200FirewallAppliedToType
    where toJSON (PutFirewallsIdResponseBody200FirewallAppliedToTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PutFirewallsIdResponseBody200FirewallAppliedToTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PutFirewallsIdResponseBody200FirewallAppliedToTypeEnumStringLabelSelector) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "label_selector"
          toJSON (PutFirewallsIdResponseBody200FirewallAppliedToTypeEnumStringServer) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "server"
instance Data.Aeson.FromJSON PutFirewallsIdResponseBody200FirewallAppliedToType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "label_selector")
                                          then PutFirewallsIdResponseBody200FirewallAppliedToTypeEnumStringLabelSelector
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "server")
                                                then PutFirewallsIdResponseBody200FirewallAppliedToTypeEnumStringServer
                                                else PutFirewallsIdResponseBody200FirewallAppliedToTypeEnumOther val)
-- | Defines the data type for the schema PutFirewallsIdResponseBody200FirewallLabels
-- 
-- User-defined labels (key-value pairs)
data PutFirewallsIdResponseBody200FirewallLabels = PutFirewallsIdResponseBody200FirewallLabels {
  
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutFirewallsIdResponseBody200FirewallLabels
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON PutFirewallsIdResponseBody200FirewallLabels
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutFirewallsIdResponseBody200FirewallLabels" (\obj -> GHC.Base.pure PutFirewallsIdResponseBody200FirewallLabels)
-- | Defines the data type for the schema PutFirewallsIdResponseBody200FirewallRules
-- 
-- 
data PutFirewallsIdResponseBody200FirewallRules = PutFirewallsIdResponseBody200FirewallRules {
  -- | description: Description of the Rule
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 255
  putFirewallsIdResponseBody200FirewallRulesDescription :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | destination_ips: List of permitted IPv4\/IPv6 addresses in CIDR notation. Use \`0.0.0.0\/0\` to allow all IPv4 addresses and \`::\/0\` to allow all IPv6 addresses. You can specify 100 CIDRs at most.
  , putFirewallsIdResponseBody200FirewallRulesDestinationIps :: (GHC.Maybe.Maybe ([] Data.Text.Internal.Text))
  -- | direction: Select traffic direction on which rule should be applied. Use \`source_ips\` for direction \`in\` and \`destination_ips\` for direction \`out\`.
  , putFirewallsIdResponseBody200FirewallRulesDirection :: PutFirewallsIdResponseBody200FirewallRulesDirection
  -- | port: Port or port range to which traffic will be allowed, only applicable for protocols TCP and UDP. A port range can be specified by separating two ports with a dash, e.g \`1024-5000\`.
  , putFirewallsIdResponseBody200FirewallRulesPort :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | protocol: Type of traffic to allow
  , putFirewallsIdResponseBody200FirewallRulesProtocol :: PutFirewallsIdResponseBody200FirewallRulesProtocol
  -- | source_ips: List of permitted IPv4\/IPv6 addresses in CIDR notation. Use \`0.0.0.0\/0\` to allow all IPv4 addresses and \`::\/0\` to allow all IPv6 addresses. You can specify 100 CIDRs at most.
  , putFirewallsIdResponseBody200FirewallRulesSourceIps :: (GHC.Maybe.Maybe ([] Data.Text.Internal.Text))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutFirewallsIdResponseBody200FirewallRules
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "description" (putFirewallsIdResponseBody200FirewallRulesDescription obj) : (Data.Aeson..=) "destination_ips" (putFirewallsIdResponseBody200FirewallRulesDestinationIps obj) : (Data.Aeson..=) "direction" (putFirewallsIdResponseBody200FirewallRulesDirection obj) : (Data.Aeson..=) "port" (putFirewallsIdResponseBody200FirewallRulesPort obj) : (Data.Aeson..=) "protocol" (putFirewallsIdResponseBody200FirewallRulesProtocol obj) : (Data.Aeson..=) "source_ips" (putFirewallsIdResponseBody200FirewallRulesSourceIps obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "description" (putFirewallsIdResponseBody200FirewallRulesDescription obj) GHC.Base.<> ((Data.Aeson..=) "destination_ips" (putFirewallsIdResponseBody200FirewallRulesDestinationIps obj) GHC.Base.<> ((Data.Aeson..=) "direction" (putFirewallsIdResponseBody200FirewallRulesDirection obj) GHC.Base.<> ((Data.Aeson..=) "port" (putFirewallsIdResponseBody200FirewallRulesPort obj) GHC.Base.<> ((Data.Aeson..=) "protocol" (putFirewallsIdResponseBody200FirewallRulesProtocol obj) GHC.Base.<> (Data.Aeson..=) "source_ips" (putFirewallsIdResponseBody200FirewallRulesSourceIps obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON PutFirewallsIdResponseBody200FirewallRules
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PutFirewallsIdResponseBody200FirewallRules" (\obj -> (((((GHC.Base.pure PutFirewallsIdResponseBody200FirewallRules GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "destination_ips")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "direction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "protocol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "source_ips"))
-- | Defines the enum schema PutFirewallsIdResponseBody200FirewallRulesDirection
-- 
-- Select traffic direction on which rule should be applied. Use \`source_ips\` for direction \`in\` and \`destination_ips\` for direction \`out\`.
data PutFirewallsIdResponseBody200FirewallRulesDirection
    = PutFirewallsIdResponseBody200FirewallRulesDirectionEnumOther Data.Aeson.Types.Internal.Value
    | PutFirewallsIdResponseBody200FirewallRulesDirectionEnumTyped Data.Text.Internal.Text
    | PutFirewallsIdResponseBody200FirewallRulesDirectionEnumStringIn
    | PutFirewallsIdResponseBody200FirewallRulesDirectionEnumStringOut
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutFirewallsIdResponseBody200FirewallRulesDirection
    where toJSON (PutFirewallsIdResponseBody200FirewallRulesDirectionEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PutFirewallsIdResponseBody200FirewallRulesDirectionEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PutFirewallsIdResponseBody200FirewallRulesDirectionEnumStringIn) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "in"
          toJSON (PutFirewallsIdResponseBody200FirewallRulesDirectionEnumStringOut) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "out"
instance Data.Aeson.FromJSON PutFirewallsIdResponseBody200FirewallRulesDirection
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "in")
                                          then PutFirewallsIdResponseBody200FirewallRulesDirectionEnumStringIn
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "out")
                                                then PutFirewallsIdResponseBody200FirewallRulesDirectionEnumStringOut
                                                else PutFirewallsIdResponseBody200FirewallRulesDirectionEnumOther val)
-- | Defines the enum schema PutFirewallsIdResponseBody200FirewallRulesProtocol
-- 
-- Type of traffic to allow
data PutFirewallsIdResponseBody200FirewallRulesProtocol
    = PutFirewallsIdResponseBody200FirewallRulesProtocolEnumOther Data.Aeson.Types.Internal.Value
    | PutFirewallsIdResponseBody200FirewallRulesProtocolEnumTyped Data.Text.Internal.Text
    | PutFirewallsIdResponseBody200FirewallRulesProtocolEnumStringEsp
    | PutFirewallsIdResponseBody200FirewallRulesProtocolEnumStringGre
    | PutFirewallsIdResponseBody200FirewallRulesProtocolEnumStringIcmp
    | PutFirewallsIdResponseBody200FirewallRulesProtocolEnumStringTcp
    | PutFirewallsIdResponseBody200FirewallRulesProtocolEnumStringUdp
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PutFirewallsIdResponseBody200FirewallRulesProtocol
    where toJSON (PutFirewallsIdResponseBody200FirewallRulesProtocolEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PutFirewallsIdResponseBody200FirewallRulesProtocolEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PutFirewallsIdResponseBody200FirewallRulesProtocolEnumStringEsp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "esp"
          toJSON (PutFirewallsIdResponseBody200FirewallRulesProtocolEnumStringGre) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "gre"
          toJSON (PutFirewallsIdResponseBody200FirewallRulesProtocolEnumStringIcmp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "icmp"
          toJSON (PutFirewallsIdResponseBody200FirewallRulesProtocolEnumStringTcp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tcp"
          toJSON (PutFirewallsIdResponseBody200FirewallRulesProtocolEnumStringUdp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "udp"
instance Data.Aeson.FromJSON PutFirewallsIdResponseBody200FirewallRulesProtocol
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "esp")
                                          then PutFirewallsIdResponseBody200FirewallRulesProtocolEnumStringEsp
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "gre")
                                                then PutFirewallsIdResponseBody200FirewallRulesProtocolEnumStringGre
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "icmp")
                                                      then PutFirewallsIdResponseBody200FirewallRulesProtocolEnumStringIcmp
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tcp")
                                                            then PutFirewallsIdResponseBody200FirewallRulesProtocolEnumStringTcp
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "udp")
                                                                  then PutFirewallsIdResponseBody200FirewallRulesProtocolEnumStringUdp
                                                                  else PutFirewallsIdResponseBody200FirewallRulesProtocolEnumOther val)
