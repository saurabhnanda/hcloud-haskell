-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation getPricing
module HCloud.Operations.GetPricing where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > GET /pricing
-- 
-- Returns prices for all resources available on the platform. VAT and currency of the Project owner are used for calculations.
-- 
-- Both net and gross prices are included in the response.
getPricing :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response GetPricingResponse)) -- ^ Monad containing the result of the operation
getPricing config = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetPricingResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetPricingResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                  GetPricingResponseBody200)
                                                                                                                                                                        | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/pricing") [])
-- | > GET /pricing
-- 
-- The same as 'getPricing' but returns the raw 'Data.ByteString.Char8.ByteString'
getPricingRaw :: forall m s . (HCloud.Common.MonadHTTP m,
                               HCloud.Common.SecurityScheme s) =>
                 HCloud.Common.Configuration s ->
                 m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                       (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getPricingRaw config = GHC.Base.id (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/pricing") [])
-- | > GET /pricing
-- 
-- Monadic version of 'getPricing' (use with 'HCloud.Common.runWithConfiguration')
getPricingM :: forall m s . (HCloud.Common.MonadHTTP m,
                             HCloud.Common.SecurityScheme s) =>
               Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                  m
                                                  (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                      (Network.HTTP.Client.Types.Response GetPricingResponse))
getPricingM = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetPricingResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetPricingResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                            GetPricingResponseBody200)
                                                                                                                                                                  | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/pricing") [])
-- | > GET /pricing
-- 
-- Monadic version of 'getPricingRaw' (use with 'HCloud.Common.runWithConfiguration')
getPricingRawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                HCloud.Common.SecurityScheme s) =>
                  Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                     m
                                                     (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                         (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getPricingRawM = GHC.Base.id (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/pricing") [])
-- | Represents a response of the operation 'getPricing'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetPricingResponseError' is used.
data GetPricingResponse =                            
   GetPricingResponseError GHC.Base.String           -- ^ Means either no matching case available or a parse error
  | GetPricingResponse200 GetPricingResponseBody200  -- ^ The \`pricing\` key in the reply contains an pricing object with this structure
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema GetPricingResponseBody200
-- 
-- 
data GetPricingResponseBody200 = GetPricingResponseBody200 {
  -- | pricing
  getPricingResponseBody200Pricing :: GetPricingResponseBody200Pricing
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetPricingResponseBody200
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "pricing" (getPricingResponseBody200Pricing obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "pricing" (getPricingResponseBody200Pricing obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetPricingResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPricingResponseBody200" (\obj -> GHC.Base.pure GetPricingResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pricing"))
-- | Defines the data type for the schema GetPricingResponseBody200Pricing
-- 
-- 
data GetPricingResponseBody200Pricing = GetPricingResponseBody200Pricing {
  -- | currency: Currency the returned prices are expressed in, coded according to ISO 4217
  getPricingResponseBody200PricingCurrency :: Data.Text.Internal.Text
  -- | floating_ip: The cost of one Floating IP per month
  , getPricingResponseBody200PricingFloatingIp :: GetPricingResponseBody200PricingFloatingIp
  -- | floating_ips: Costs of Floating IPs types per Location and type
  , getPricingResponseBody200PricingFloatingIps :: ([] GetPricingResponseBody200PricingFloatingIps)
  -- | image: The cost of Image per GB\/month
  , getPricingResponseBody200PricingImage :: GetPricingResponseBody200PricingImage
  -- | load_balancer_types: Costs of Load Balancer types per Location and type
  , getPricingResponseBody200PricingLoadBalancerTypes :: ([] GetPricingResponseBody200PricingLoadBalancerTypes)
  -- | server_backup: Will increase base Server costs by specific percentage
  , getPricingResponseBody200PricingServerBackup :: GetPricingResponseBody200PricingServerBackup
  -- | server_types: Costs of Server types per Location and type
  , getPricingResponseBody200PricingServerTypes :: ([] GetPricingResponseBody200PricingServerTypes)
  -- | traffic: The cost of additional traffic per TB
  , getPricingResponseBody200PricingTraffic :: GetPricingResponseBody200PricingTraffic
  -- | vat_rate: The VAT rate used for calculating prices with VAT
  , getPricingResponseBody200PricingVatRate :: Data.Text.Internal.Text
  -- | volume: The cost of Volume per GB\/month
  , getPricingResponseBody200PricingVolume :: GetPricingResponseBody200PricingVolume
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetPricingResponseBody200Pricing
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "currency" (getPricingResponseBody200PricingCurrency obj) : (Data.Aeson..=) "floating_ip" (getPricingResponseBody200PricingFloatingIp obj) : (Data.Aeson..=) "floating_ips" (getPricingResponseBody200PricingFloatingIps obj) : (Data.Aeson..=) "image" (getPricingResponseBody200PricingImage obj) : (Data.Aeson..=) "load_balancer_types" (getPricingResponseBody200PricingLoadBalancerTypes obj) : (Data.Aeson..=) "server_backup" (getPricingResponseBody200PricingServerBackup obj) : (Data.Aeson..=) "server_types" (getPricingResponseBody200PricingServerTypes obj) : (Data.Aeson..=) "traffic" (getPricingResponseBody200PricingTraffic obj) : (Data.Aeson..=) "vat_rate" (getPricingResponseBody200PricingVatRate obj) : (Data.Aeson..=) "volume" (getPricingResponseBody200PricingVolume obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "currency" (getPricingResponseBody200PricingCurrency obj) GHC.Base.<> ((Data.Aeson..=) "floating_ip" (getPricingResponseBody200PricingFloatingIp obj) GHC.Base.<> ((Data.Aeson..=) "floating_ips" (getPricingResponseBody200PricingFloatingIps obj) GHC.Base.<> ((Data.Aeson..=) "image" (getPricingResponseBody200PricingImage obj) GHC.Base.<> ((Data.Aeson..=) "load_balancer_types" (getPricingResponseBody200PricingLoadBalancerTypes obj) GHC.Base.<> ((Data.Aeson..=) "server_backup" (getPricingResponseBody200PricingServerBackup obj) GHC.Base.<> ((Data.Aeson..=) "server_types" (getPricingResponseBody200PricingServerTypes obj) GHC.Base.<> ((Data.Aeson..=) "traffic" (getPricingResponseBody200PricingTraffic obj) GHC.Base.<> ((Data.Aeson..=) "vat_rate" (getPricingResponseBody200PricingVatRate obj) GHC.Base.<> (Data.Aeson..=) "volume" (getPricingResponseBody200PricingVolume obj))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetPricingResponseBody200Pricing
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPricingResponseBody200Pricing" (\obj -> (((((((((GHC.Base.pure GetPricingResponseBody200Pricing GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "floating_ip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "floating_ips")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "image")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "load_balancer_types")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "server_backup")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "server_types")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "traffic")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "vat_rate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "volume"))
-- | Defines the data type for the schema GetPricingResponseBody200PricingFloating_ip
-- 
-- The cost of one Floating IP per month
data GetPricingResponseBody200PricingFloatingIp = GetPricingResponseBody200PricingFloatingIp {
  -- | price_monthly
  getPricingResponseBody200PricingFloatingIpPriceMonthly :: GetPricingResponseBody200PricingFloatingIpPriceMonthly
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetPricingResponseBody200PricingFloatingIp
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "price_monthly" (getPricingResponseBody200PricingFloatingIpPriceMonthly obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "price_monthly" (getPricingResponseBody200PricingFloatingIpPriceMonthly obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetPricingResponseBody200PricingFloatingIp
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPricingResponseBody200PricingFloatingIp" (\obj -> GHC.Base.pure GetPricingResponseBody200PricingFloatingIp GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price_monthly"))
-- | Defines the data type for the schema GetPricingResponseBody200PricingFloating_ipPrice_monthly
-- 
-- 
data GetPricingResponseBody200PricingFloatingIpPriceMonthly = GetPricingResponseBody200PricingFloatingIpPriceMonthly {
  -- | gross: Price with VAT added
  getPricingResponseBody200PricingFloatingIpPriceMonthlyGross :: Data.Text.Internal.Text
  -- | net: Price without VAT
  , getPricingResponseBody200PricingFloatingIpPriceMonthlyNet :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetPricingResponseBody200PricingFloatingIpPriceMonthly
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "gross" (getPricingResponseBody200PricingFloatingIpPriceMonthlyGross obj) : (Data.Aeson..=) "net" (getPricingResponseBody200PricingFloatingIpPriceMonthlyNet obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "gross" (getPricingResponseBody200PricingFloatingIpPriceMonthlyGross obj) GHC.Base.<> (Data.Aeson..=) "net" (getPricingResponseBody200PricingFloatingIpPriceMonthlyNet obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetPricingResponseBody200PricingFloatingIpPriceMonthly
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPricingResponseBody200PricingFloatingIpPriceMonthly" (\obj -> (GHC.Base.pure GetPricingResponseBody200PricingFloatingIpPriceMonthly GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "gross")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "net"))
-- | Defines the data type for the schema GetPricingResponseBody200PricingFloating_ips
-- 
-- 
data GetPricingResponseBody200PricingFloatingIps = GetPricingResponseBody200PricingFloatingIps {
  -- | prices: Floating IP type costs per Location
  getPricingResponseBody200PricingFloatingIpsPrices :: ([] GetPricingResponseBody200PricingFloatingIpsPrices)
  -- | type: The type of the Floating IP
  , getPricingResponseBody200PricingFloatingIpsType :: GetPricingResponseBody200PricingFloatingIpsType
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetPricingResponseBody200PricingFloatingIps
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "prices" (getPricingResponseBody200PricingFloatingIpsPrices obj) : (Data.Aeson..=) "type" (getPricingResponseBody200PricingFloatingIpsType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "prices" (getPricingResponseBody200PricingFloatingIpsPrices obj) GHC.Base.<> (Data.Aeson..=) "type" (getPricingResponseBody200PricingFloatingIpsType obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetPricingResponseBody200PricingFloatingIps
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPricingResponseBody200PricingFloatingIps" (\obj -> (GHC.Base.pure GetPricingResponseBody200PricingFloatingIps GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "prices")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the data type for the schema GetPricingResponseBody200PricingFloating_ipsPrices
-- 
-- 
data GetPricingResponseBody200PricingFloatingIpsPrices = GetPricingResponseBody200PricingFloatingIpsPrices {
  -- | location: Name of the Location the price is for
  getPricingResponseBody200PricingFloatingIpsPricesLocation :: Data.Text.Internal.Text
  -- | price_monthly: Monthly costs for a Floating IP type in this Location
  , getPricingResponseBody200PricingFloatingIpsPricesPriceMonthly :: GetPricingResponseBody200PricingFloatingIpsPricesPriceMonthly
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetPricingResponseBody200PricingFloatingIpsPrices
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "location" (getPricingResponseBody200PricingFloatingIpsPricesLocation obj) : (Data.Aeson..=) "price_monthly" (getPricingResponseBody200PricingFloatingIpsPricesPriceMonthly obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "location" (getPricingResponseBody200PricingFloatingIpsPricesLocation obj) GHC.Base.<> (Data.Aeson..=) "price_monthly" (getPricingResponseBody200PricingFloatingIpsPricesPriceMonthly obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetPricingResponseBody200PricingFloatingIpsPrices
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPricingResponseBody200PricingFloatingIpsPrices" (\obj -> (GHC.Base.pure GetPricingResponseBody200PricingFloatingIpsPrices GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "location")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price_monthly"))
-- | Defines the data type for the schema GetPricingResponseBody200PricingFloating_ipsPricesPrice_monthly
-- 
-- Monthly costs for a Floating IP type in this Location
data GetPricingResponseBody200PricingFloatingIpsPricesPriceMonthly = GetPricingResponseBody200PricingFloatingIpsPricesPriceMonthly {
  -- | gross: Price with VAT added
  getPricingResponseBody200PricingFloatingIpsPricesPriceMonthlyGross :: Data.Text.Internal.Text
  -- | net: Price without VAT
  , getPricingResponseBody200PricingFloatingIpsPricesPriceMonthlyNet :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetPricingResponseBody200PricingFloatingIpsPricesPriceMonthly
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "gross" (getPricingResponseBody200PricingFloatingIpsPricesPriceMonthlyGross obj) : (Data.Aeson..=) "net" (getPricingResponseBody200PricingFloatingIpsPricesPriceMonthlyNet obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "gross" (getPricingResponseBody200PricingFloatingIpsPricesPriceMonthlyGross obj) GHC.Base.<> (Data.Aeson..=) "net" (getPricingResponseBody200PricingFloatingIpsPricesPriceMonthlyNet obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetPricingResponseBody200PricingFloatingIpsPricesPriceMonthly
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPricingResponseBody200PricingFloatingIpsPricesPriceMonthly" (\obj -> (GHC.Base.pure GetPricingResponseBody200PricingFloatingIpsPricesPriceMonthly GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "gross")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "net"))
-- | Defines the enum schema GetPricingResponseBody200PricingFloating_ipsType
-- 
-- The type of the Floating IP
data GetPricingResponseBody200PricingFloatingIpsType
    = GetPricingResponseBody200PricingFloatingIpsTypeEnumOther Data.Aeson.Types.Internal.Value
    | GetPricingResponseBody200PricingFloatingIpsTypeEnumTyped Data.Text.Internal.Text
    | GetPricingResponseBody200PricingFloatingIpsTypeEnumStringIpv4
    | GetPricingResponseBody200PricingFloatingIpsTypeEnumStringIpv6
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetPricingResponseBody200PricingFloatingIpsType
    where toJSON (GetPricingResponseBody200PricingFloatingIpsTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetPricingResponseBody200PricingFloatingIpsTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetPricingResponseBody200PricingFloatingIpsTypeEnumStringIpv4) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ipv4"
          toJSON (GetPricingResponseBody200PricingFloatingIpsTypeEnumStringIpv6) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ipv6"
instance Data.Aeson.FromJSON GetPricingResponseBody200PricingFloatingIpsType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ipv4")
                                          then GetPricingResponseBody200PricingFloatingIpsTypeEnumStringIpv4
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ipv6")
                                                then GetPricingResponseBody200PricingFloatingIpsTypeEnumStringIpv6
                                                else GetPricingResponseBody200PricingFloatingIpsTypeEnumOther val)
-- | Defines the data type for the schema GetPricingResponseBody200PricingImage
-- 
-- The cost of Image per GB\/month
data GetPricingResponseBody200PricingImage = GetPricingResponseBody200PricingImage {
  -- | price_per_gb_month
  getPricingResponseBody200PricingImagePricePerGbMonth :: GetPricingResponseBody200PricingImagePricePerGbMonth
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetPricingResponseBody200PricingImage
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "price_per_gb_month" (getPricingResponseBody200PricingImagePricePerGbMonth obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "price_per_gb_month" (getPricingResponseBody200PricingImagePricePerGbMonth obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetPricingResponseBody200PricingImage
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPricingResponseBody200PricingImage" (\obj -> GHC.Base.pure GetPricingResponseBody200PricingImage GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price_per_gb_month"))
-- | Defines the data type for the schema GetPricingResponseBody200PricingImagePrice_per_gb_month
-- 
-- 
data GetPricingResponseBody200PricingImagePricePerGbMonth = GetPricingResponseBody200PricingImagePricePerGbMonth {
  -- | gross: Price with VAT added
  getPricingResponseBody200PricingImagePricePerGbMonthGross :: Data.Text.Internal.Text
  -- | net: Price without VAT
  , getPricingResponseBody200PricingImagePricePerGbMonthNet :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetPricingResponseBody200PricingImagePricePerGbMonth
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "gross" (getPricingResponseBody200PricingImagePricePerGbMonthGross obj) : (Data.Aeson..=) "net" (getPricingResponseBody200PricingImagePricePerGbMonthNet obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "gross" (getPricingResponseBody200PricingImagePricePerGbMonthGross obj) GHC.Base.<> (Data.Aeson..=) "net" (getPricingResponseBody200PricingImagePricePerGbMonthNet obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetPricingResponseBody200PricingImagePricePerGbMonth
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPricingResponseBody200PricingImagePricePerGbMonth" (\obj -> (GHC.Base.pure GetPricingResponseBody200PricingImagePricePerGbMonth GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "gross")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "net"))
-- | Defines the data type for the schema GetPricingResponseBody200PricingLoad_balancer_types
-- 
-- 
data GetPricingResponseBody200PricingLoadBalancerTypes = GetPricingResponseBody200PricingLoadBalancerTypes {
  -- | id: ID of the Load Balancer type the price is for
  getPricingResponseBody200PricingLoadBalancerTypesId :: GHC.Types.Double
  -- | name: Name of the Load Balancer type the price is for
  , getPricingResponseBody200PricingLoadBalancerTypesName :: Data.Text.Internal.Text
  -- | prices: Load Balancer type costs per Location
  , getPricingResponseBody200PricingLoadBalancerTypesPrices :: ([] GetPricingResponseBody200PricingLoadBalancerTypesPrices)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetPricingResponseBody200PricingLoadBalancerTypes
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (getPricingResponseBody200PricingLoadBalancerTypesId obj) : (Data.Aeson..=) "name" (getPricingResponseBody200PricingLoadBalancerTypesName obj) : (Data.Aeson..=) "prices" (getPricingResponseBody200PricingLoadBalancerTypesPrices obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (getPricingResponseBody200PricingLoadBalancerTypesId obj) GHC.Base.<> ((Data.Aeson..=) "name" (getPricingResponseBody200PricingLoadBalancerTypesName obj) GHC.Base.<> (Data.Aeson..=) "prices" (getPricingResponseBody200PricingLoadBalancerTypesPrices obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPricingResponseBody200PricingLoadBalancerTypes
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPricingResponseBody200PricingLoadBalancerTypes" (\obj -> ((GHC.Base.pure GetPricingResponseBody200PricingLoadBalancerTypes GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "prices"))
-- | Defines the data type for the schema GetPricingResponseBody200PricingLoad_balancer_typesPrices
-- 
-- 
data GetPricingResponseBody200PricingLoadBalancerTypesPrices = GetPricingResponseBody200PricingLoadBalancerTypesPrices {
  -- | location: Name of the Location the price is for
  getPricingResponseBody200PricingLoadBalancerTypesPricesLocation :: Data.Text.Internal.Text
  -- | price_hourly: Hourly costs for a Load Balancer type in this network zone
  , getPricingResponseBody200PricingLoadBalancerTypesPricesPriceHourly :: GetPricingResponseBody200PricingLoadBalancerTypesPricesPriceHourly
  -- | price_monthly: Monthly costs for a Load Balancer type in this network zone
  , getPricingResponseBody200PricingLoadBalancerTypesPricesPriceMonthly :: GetPricingResponseBody200PricingLoadBalancerTypesPricesPriceMonthly
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetPricingResponseBody200PricingLoadBalancerTypesPrices
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "location" (getPricingResponseBody200PricingLoadBalancerTypesPricesLocation obj) : (Data.Aeson..=) "price_hourly" (getPricingResponseBody200PricingLoadBalancerTypesPricesPriceHourly obj) : (Data.Aeson..=) "price_monthly" (getPricingResponseBody200PricingLoadBalancerTypesPricesPriceMonthly obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "location" (getPricingResponseBody200PricingLoadBalancerTypesPricesLocation obj) GHC.Base.<> ((Data.Aeson..=) "price_hourly" (getPricingResponseBody200PricingLoadBalancerTypesPricesPriceHourly obj) GHC.Base.<> (Data.Aeson..=) "price_monthly" (getPricingResponseBody200PricingLoadBalancerTypesPricesPriceMonthly obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPricingResponseBody200PricingLoadBalancerTypesPrices
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPricingResponseBody200PricingLoadBalancerTypesPrices" (\obj -> ((GHC.Base.pure GetPricingResponseBody200PricingLoadBalancerTypesPrices GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "location")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price_hourly")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price_monthly"))
-- | Defines the data type for the schema GetPricingResponseBody200PricingLoad_balancer_typesPricesPrice_hourly
-- 
-- Hourly costs for a Load Balancer type in this network zone
data GetPricingResponseBody200PricingLoadBalancerTypesPricesPriceHourly = GetPricingResponseBody200PricingLoadBalancerTypesPricesPriceHourly {
  -- | gross: Price with VAT added
  getPricingResponseBody200PricingLoadBalancerTypesPricesPriceHourlyGross :: Data.Text.Internal.Text
  -- | net: Price without VAT
  , getPricingResponseBody200PricingLoadBalancerTypesPricesPriceHourlyNet :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetPricingResponseBody200PricingLoadBalancerTypesPricesPriceHourly
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "gross" (getPricingResponseBody200PricingLoadBalancerTypesPricesPriceHourlyGross obj) : (Data.Aeson..=) "net" (getPricingResponseBody200PricingLoadBalancerTypesPricesPriceHourlyNet obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "gross" (getPricingResponseBody200PricingLoadBalancerTypesPricesPriceHourlyGross obj) GHC.Base.<> (Data.Aeson..=) "net" (getPricingResponseBody200PricingLoadBalancerTypesPricesPriceHourlyNet obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetPricingResponseBody200PricingLoadBalancerTypesPricesPriceHourly
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPricingResponseBody200PricingLoadBalancerTypesPricesPriceHourly" (\obj -> (GHC.Base.pure GetPricingResponseBody200PricingLoadBalancerTypesPricesPriceHourly GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "gross")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "net"))
-- | Defines the data type for the schema GetPricingResponseBody200PricingLoad_balancer_typesPricesPrice_monthly
-- 
-- Monthly costs for a Load Balancer type in this network zone
data GetPricingResponseBody200PricingLoadBalancerTypesPricesPriceMonthly = GetPricingResponseBody200PricingLoadBalancerTypesPricesPriceMonthly {
  -- | gross: Price with VAT added
  getPricingResponseBody200PricingLoadBalancerTypesPricesPriceMonthlyGross :: Data.Text.Internal.Text
  -- | net: Price without VAT
  , getPricingResponseBody200PricingLoadBalancerTypesPricesPriceMonthlyNet :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetPricingResponseBody200PricingLoadBalancerTypesPricesPriceMonthly
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "gross" (getPricingResponseBody200PricingLoadBalancerTypesPricesPriceMonthlyGross obj) : (Data.Aeson..=) "net" (getPricingResponseBody200PricingLoadBalancerTypesPricesPriceMonthlyNet obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "gross" (getPricingResponseBody200PricingLoadBalancerTypesPricesPriceMonthlyGross obj) GHC.Base.<> (Data.Aeson..=) "net" (getPricingResponseBody200PricingLoadBalancerTypesPricesPriceMonthlyNet obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetPricingResponseBody200PricingLoadBalancerTypesPricesPriceMonthly
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPricingResponseBody200PricingLoadBalancerTypesPricesPriceMonthly" (\obj -> (GHC.Base.pure GetPricingResponseBody200PricingLoadBalancerTypesPricesPriceMonthly GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "gross")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "net"))
-- | Defines the data type for the schema GetPricingResponseBody200PricingServer_backup
-- 
-- Will increase base Server costs by specific percentage
data GetPricingResponseBody200PricingServerBackup = GetPricingResponseBody200PricingServerBackup {
  -- | percentage: Percentage by how much the base price will increase
  getPricingResponseBody200PricingServerBackupPercentage :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetPricingResponseBody200PricingServerBackup
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "percentage" (getPricingResponseBody200PricingServerBackupPercentage obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "percentage" (getPricingResponseBody200PricingServerBackupPercentage obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetPricingResponseBody200PricingServerBackup
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPricingResponseBody200PricingServerBackup" (\obj -> GHC.Base.pure GetPricingResponseBody200PricingServerBackup GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "percentage"))
-- | Defines the data type for the schema GetPricingResponseBody200PricingServer_types
-- 
-- 
data GetPricingResponseBody200PricingServerTypes = GetPricingResponseBody200PricingServerTypes {
  -- | id: ID of the Server type the price is for
  getPricingResponseBody200PricingServerTypesId :: GHC.Types.Double
  -- | name: Name of the Server type the price is for
  , getPricingResponseBody200PricingServerTypesName :: Data.Text.Internal.Text
  -- | prices: Server type costs per Location
  , getPricingResponseBody200PricingServerTypesPrices :: ([] GetPricingResponseBody200PricingServerTypesPrices)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetPricingResponseBody200PricingServerTypes
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (getPricingResponseBody200PricingServerTypesId obj) : (Data.Aeson..=) "name" (getPricingResponseBody200PricingServerTypesName obj) : (Data.Aeson..=) "prices" (getPricingResponseBody200PricingServerTypesPrices obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (getPricingResponseBody200PricingServerTypesId obj) GHC.Base.<> ((Data.Aeson..=) "name" (getPricingResponseBody200PricingServerTypesName obj) GHC.Base.<> (Data.Aeson..=) "prices" (getPricingResponseBody200PricingServerTypesPrices obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPricingResponseBody200PricingServerTypes
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPricingResponseBody200PricingServerTypes" (\obj -> ((GHC.Base.pure GetPricingResponseBody200PricingServerTypes GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "prices"))
-- | Defines the data type for the schema GetPricingResponseBody200PricingServer_typesPrices
-- 
-- 
data GetPricingResponseBody200PricingServerTypesPrices = GetPricingResponseBody200PricingServerTypesPrices {
  -- | location: Name of the Location the price is for
  getPricingResponseBody200PricingServerTypesPricesLocation :: Data.Text.Internal.Text
  -- | price_hourly: Hourly costs for a Server type in this Location
  , getPricingResponseBody200PricingServerTypesPricesPriceHourly :: GetPricingResponseBody200PricingServerTypesPricesPriceHourly
  -- | price_monthly: Monthly costs for a Server type in this Location
  , getPricingResponseBody200PricingServerTypesPricesPriceMonthly :: GetPricingResponseBody200PricingServerTypesPricesPriceMonthly
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetPricingResponseBody200PricingServerTypesPrices
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "location" (getPricingResponseBody200PricingServerTypesPricesLocation obj) : (Data.Aeson..=) "price_hourly" (getPricingResponseBody200PricingServerTypesPricesPriceHourly obj) : (Data.Aeson..=) "price_monthly" (getPricingResponseBody200PricingServerTypesPricesPriceMonthly obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "location" (getPricingResponseBody200PricingServerTypesPricesLocation obj) GHC.Base.<> ((Data.Aeson..=) "price_hourly" (getPricingResponseBody200PricingServerTypesPricesPriceHourly obj) GHC.Base.<> (Data.Aeson..=) "price_monthly" (getPricingResponseBody200PricingServerTypesPricesPriceMonthly obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetPricingResponseBody200PricingServerTypesPrices
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPricingResponseBody200PricingServerTypesPrices" (\obj -> ((GHC.Base.pure GetPricingResponseBody200PricingServerTypesPrices GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "location")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price_hourly")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price_monthly"))
-- | Defines the data type for the schema GetPricingResponseBody200PricingServer_typesPricesPrice_hourly
-- 
-- Hourly costs for a Server type in this Location
data GetPricingResponseBody200PricingServerTypesPricesPriceHourly = GetPricingResponseBody200PricingServerTypesPricesPriceHourly {
  -- | gross: Price with VAT added
  getPricingResponseBody200PricingServerTypesPricesPriceHourlyGross :: Data.Text.Internal.Text
  -- | net: Price without VAT
  , getPricingResponseBody200PricingServerTypesPricesPriceHourlyNet :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetPricingResponseBody200PricingServerTypesPricesPriceHourly
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "gross" (getPricingResponseBody200PricingServerTypesPricesPriceHourlyGross obj) : (Data.Aeson..=) "net" (getPricingResponseBody200PricingServerTypesPricesPriceHourlyNet obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "gross" (getPricingResponseBody200PricingServerTypesPricesPriceHourlyGross obj) GHC.Base.<> (Data.Aeson..=) "net" (getPricingResponseBody200PricingServerTypesPricesPriceHourlyNet obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetPricingResponseBody200PricingServerTypesPricesPriceHourly
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPricingResponseBody200PricingServerTypesPricesPriceHourly" (\obj -> (GHC.Base.pure GetPricingResponseBody200PricingServerTypesPricesPriceHourly GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "gross")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "net"))
-- | Defines the data type for the schema GetPricingResponseBody200PricingServer_typesPricesPrice_monthly
-- 
-- Monthly costs for a Server type in this Location
data GetPricingResponseBody200PricingServerTypesPricesPriceMonthly = GetPricingResponseBody200PricingServerTypesPricesPriceMonthly {
  -- | gross: Price with VAT added
  getPricingResponseBody200PricingServerTypesPricesPriceMonthlyGross :: Data.Text.Internal.Text
  -- | net: Price without VAT
  , getPricingResponseBody200PricingServerTypesPricesPriceMonthlyNet :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetPricingResponseBody200PricingServerTypesPricesPriceMonthly
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "gross" (getPricingResponseBody200PricingServerTypesPricesPriceMonthlyGross obj) : (Data.Aeson..=) "net" (getPricingResponseBody200PricingServerTypesPricesPriceMonthlyNet obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "gross" (getPricingResponseBody200PricingServerTypesPricesPriceMonthlyGross obj) GHC.Base.<> (Data.Aeson..=) "net" (getPricingResponseBody200PricingServerTypesPricesPriceMonthlyNet obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetPricingResponseBody200PricingServerTypesPricesPriceMonthly
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPricingResponseBody200PricingServerTypesPricesPriceMonthly" (\obj -> (GHC.Base.pure GetPricingResponseBody200PricingServerTypesPricesPriceMonthly GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "gross")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "net"))
-- | Defines the data type for the schema GetPricingResponseBody200PricingTraffic
-- 
-- The cost of additional traffic per TB
data GetPricingResponseBody200PricingTraffic = GetPricingResponseBody200PricingTraffic {
  -- | price_per_tb
  getPricingResponseBody200PricingTrafficPricePerTb :: GetPricingResponseBody200PricingTrafficPricePerTb
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetPricingResponseBody200PricingTraffic
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "price_per_tb" (getPricingResponseBody200PricingTrafficPricePerTb obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "price_per_tb" (getPricingResponseBody200PricingTrafficPricePerTb obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetPricingResponseBody200PricingTraffic
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPricingResponseBody200PricingTraffic" (\obj -> GHC.Base.pure GetPricingResponseBody200PricingTraffic GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price_per_tb"))
-- | Defines the data type for the schema GetPricingResponseBody200PricingTrafficPrice_per_tb
-- 
-- 
data GetPricingResponseBody200PricingTrafficPricePerTb = GetPricingResponseBody200PricingTrafficPricePerTb {
  -- | gross: Price with VAT added
  getPricingResponseBody200PricingTrafficPricePerTbGross :: Data.Text.Internal.Text
  -- | net: Price without VAT
  , getPricingResponseBody200PricingTrafficPricePerTbNet :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetPricingResponseBody200PricingTrafficPricePerTb
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "gross" (getPricingResponseBody200PricingTrafficPricePerTbGross obj) : (Data.Aeson..=) "net" (getPricingResponseBody200PricingTrafficPricePerTbNet obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "gross" (getPricingResponseBody200PricingTrafficPricePerTbGross obj) GHC.Base.<> (Data.Aeson..=) "net" (getPricingResponseBody200PricingTrafficPricePerTbNet obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetPricingResponseBody200PricingTrafficPricePerTb
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPricingResponseBody200PricingTrafficPricePerTb" (\obj -> (GHC.Base.pure GetPricingResponseBody200PricingTrafficPricePerTb GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "gross")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "net"))
-- | Defines the data type for the schema GetPricingResponseBody200PricingVolume
-- 
-- The cost of Volume per GB\/month
data GetPricingResponseBody200PricingVolume = GetPricingResponseBody200PricingVolume {
  -- | price_per_gb_month
  getPricingResponseBody200PricingVolumePricePerGbMonth :: GetPricingResponseBody200PricingVolumePricePerGbMonth
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetPricingResponseBody200PricingVolume
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "price_per_gb_month" (getPricingResponseBody200PricingVolumePricePerGbMonth obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "price_per_gb_month" (getPricingResponseBody200PricingVolumePricePerGbMonth obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetPricingResponseBody200PricingVolume
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPricingResponseBody200PricingVolume" (\obj -> GHC.Base.pure GetPricingResponseBody200PricingVolume GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price_per_gb_month"))
-- | Defines the data type for the schema GetPricingResponseBody200PricingVolumePrice_per_gb_month
-- 
-- 
data GetPricingResponseBody200PricingVolumePricePerGbMonth = GetPricingResponseBody200PricingVolumePricePerGbMonth {
  -- | gross: Price with VAT added
  getPricingResponseBody200PricingVolumePricePerGbMonthGross :: Data.Text.Internal.Text
  -- | net: Price without VAT
  , getPricingResponseBody200PricingVolumePricePerGbMonthNet :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetPricingResponseBody200PricingVolumePricePerGbMonth
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "gross" (getPricingResponseBody200PricingVolumePricePerGbMonthGross obj) : (Data.Aeson..=) "net" (getPricingResponseBody200PricingVolumePricePerGbMonthNet obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "gross" (getPricingResponseBody200PricingVolumePricePerGbMonthGross obj) GHC.Base.<> (Data.Aeson..=) "net" (getPricingResponseBody200PricingVolumePricePerGbMonthNet obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetPricingResponseBody200PricingVolumePricePerGbMonth
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPricingResponseBody200PricingVolumePricePerGbMonth" (\obj -> (GHC.Base.pure GetPricingResponseBody200PricingVolumePricePerGbMonth GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "gross")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "net"))
