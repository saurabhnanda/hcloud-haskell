-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation getFirewalls_Id_
module HCloud.Operations.GetFirewallsId_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > GET /firewalls/{id}
-- 
-- Gets a specific Firewall object.
getFirewalls_Id_ :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer                                                                                                     -- ^ id: ID of the resource
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response GetFirewallsIdResponse))   -- ^ Monad containing the result of the operation
getFirewalls_Id_ config
                 id = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetFirewallsIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetFirewallsIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                            GetFirewallsIdResponseBody200)
                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/firewalls/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) [])
-- | > GET /firewalls/{id}
-- 
-- The same as 'getFirewalls_Id_' but returns the raw 'Data.ByteString.Char8.ByteString'
getFirewalls_Id_Raw :: forall m s . (HCloud.Common.MonadHTTP m,
                                     HCloud.Common.SecurityScheme s) =>
                       HCloud.Common.Configuration s ->
                       GHC.Integer.Type.Integer ->
                       m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                             (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getFirewalls_Id_Raw config
                    id = GHC.Base.id (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/firewalls/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) [])
-- | > GET /firewalls/{id}
-- 
-- Monadic version of 'getFirewalls_Id_' (use with 'HCloud.Common.runWithConfiguration')
getFirewalls_Id_M :: forall m s . (HCloud.Common.MonadHTTP m,
                                   HCloud.Common.SecurityScheme s) =>
                     GHC.Integer.Type.Integer ->
                     Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                        m
                                                        (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                            (Network.HTTP.Client.Types.Response GetFirewallsIdResponse))
getFirewalls_Id_M id = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetFirewallsIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetFirewallsIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                             GetFirewallsIdResponseBody200)
                                                                                                                                                                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/firewalls/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) [])
-- | > GET /firewalls/{id}
-- 
-- Monadic version of 'getFirewalls_Id_Raw' (use with 'HCloud.Common.runWithConfiguration')
getFirewalls_Id_RawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                      HCloud.Common.SecurityScheme s) =>
                        GHC.Integer.Type.Integer ->
                        Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                           m
                                                           (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                               (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getFirewalls_Id_RawM id = GHC.Base.id (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/firewalls/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) [])
-- | Represents a response of the operation 'getFirewalls_Id_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetFirewallsIdResponseError' is used.
data GetFirewallsIdResponse =                                
   GetFirewallsIdResponseError GHC.Base.String               -- ^ Means either no matching case available or a parse error
  | GetFirewallsIdResponse200 GetFirewallsIdResponseBody200  -- ^ The \`firewall\` key contains a Firewall object
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema GetFirewallsIdResponseBody200
-- 
-- 
data GetFirewallsIdResponseBody200 = GetFirewallsIdResponseBody200 {
  -- | firewall
  getFirewallsIdResponseBody200Firewall :: GetFirewallsIdResponseBody200Firewall
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetFirewallsIdResponseBody200
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "firewall" (getFirewallsIdResponseBody200Firewall obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "firewall" (getFirewallsIdResponseBody200Firewall obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetFirewallsIdResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetFirewallsIdResponseBody200" (\obj -> GHC.Base.pure GetFirewallsIdResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "firewall"))
-- | Defines the data type for the schema GetFirewallsIdResponseBody200Firewall
-- 
-- 
data GetFirewallsIdResponseBody200Firewall = GetFirewallsIdResponseBody200Firewall {
  -- | applied_to
  getFirewallsIdResponseBody200FirewallAppliedTo :: ([] GetFirewallsIdResponseBody200FirewallAppliedTo)
  -- | created: Point in time when the Resource was created (in ISO-8601 format)
  , getFirewallsIdResponseBody200FirewallCreated :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , getFirewallsIdResponseBody200FirewallId :: GHC.Integer.Type.Integer
  -- | labels: User-defined labels (key-value pairs)
  , getFirewallsIdResponseBody200FirewallLabels :: (GHC.Maybe.Maybe GetFirewallsIdResponseBody200FirewallLabels)
  -- | name: Name of the Resource. Must be unique per Project.
  , getFirewallsIdResponseBody200FirewallName :: Data.Text.Internal.Text
  -- | rules
  , getFirewallsIdResponseBody200FirewallRules :: ([] GetFirewallsIdResponseBody200FirewallRules)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetFirewallsIdResponseBody200Firewall
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "applied_to" (getFirewallsIdResponseBody200FirewallAppliedTo obj) : (Data.Aeson..=) "created" (getFirewallsIdResponseBody200FirewallCreated obj) : (Data.Aeson..=) "id" (getFirewallsIdResponseBody200FirewallId obj) : (Data.Aeson..=) "labels" (getFirewallsIdResponseBody200FirewallLabels obj) : (Data.Aeson..=) "name" (getFirewallsIdResponseBody200FirewallName obj) : (Data.Aeson..=) "rules" (getFirewallsIdResponseBody200FirewallRules obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "applied_to" (getFirewallsIdResponseBody200FirewallAppliedTo obj) GHC.Base.<> ((Data.Aeson..=) "created" (getFirewallsIdResponseBody200FirewallCreated obj) GHC.Base.<> ((Data.Aeson..=) "id" (getFirewallsIdResponseBody200FirewallId obj) GHC.Base.<> ((Data.Aeson..=) "labels" (getFirewallsIdResponseBody200FirewallLabels obj) GHC.Base.<> ((Data.Aeson..=) "name" (getFirewallsIdResponseBody200FirewallName obj) GHC.Base.<> (Data.Aeson..=) "rules" (getFirewallsIdResponseBody200FirewallRules obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetFirewallsIdResponseBody200Firewall
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetFirewallsIdResponseBody200Firewall" (\obj -> (((((GHC.Base.pure GetFirewallsIdResponseBody200Firewall GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "applied_to")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "labels")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "rules"))
-- | Defines the data type for the schema GetFirewallsIdResponseBody200FirewallApplied_to
-- 
-- 
data GetFirewallsIdResponseBody200FirewallAppliedTo = GetFirewallsIdResponseBody200FirewallAppliedTo {
  -- | applied_to_resources
  getFirewallsIdResponseBody200FirewallAppliedToAppliedToResources :: (GHC.Maybe.Maybe ([] GetFirewallsIdResponseBody200FirewallAppliedToAppliedToResources))
  -- | label_selector
  , getFirewallsIdResponseBody200FirewallAppliedToLabelSelector :: (GHC.Maybe.Maybe GetFirewallsIdResponseBody200FirewallAppliedToLabelSelector)
  -- | server
  , getFirewallsIdResponseBody200FirewallAppliedToServer :: (GHC.Maybe.Maybe GetFirewallsIdResponseBody200FirewallAppliedToServer)
  -- | type: Type of resource referenced
  , getFirewallsIdResponseBody200FirewallAppliedToType :: GetFirewallsIdResponseBody200FirewallAppliedToType
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetFirewallsIdResponseBody200FirewallAppliedTo
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "applied_to_resources" (getFirewallsIdResponseBody200FirewallAppliedToAppliedToResources obj) : (Data.Aeson..=) "label_selector" (getFirewallsIdResponseBody200FirewallAppliedToLabelSelector obj) : (Data.Aeson..=) "server" (getFirewallsIdResponseBody200FirewallAppliedToServer obj) : (Data.Aeson..=) "type" (getFirewallsIdResponseBody200FirewallAppliedToType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "applied_to_resources" (getFirewallsIdResponseBody200FirewallAppliedToAppliedToResources obj) GHC.Base.<> ((Data.Aeson..=) "label_selector" (getFirewallsIdResponseBody200FirewallAppliedToLabelSelector obj) GHC.Base.<> ((Data.Aeson..=) "server" (getFirewallsIdResponseBody200FirewallAppliedToServer obj) GHC.Base.<> (Data.Aeson..=) "type" (getFirewallsIdResponseBody200FirewallAppliedToType obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetFirewallsIdResponseBody200FirewallAppliedTo
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetFirewallsIdResponseBody200FirewallAppliedTo" (\obj -> (((GHC.Base.pure GetFirewallsIdResponseBody200FirewallAppliedTo GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "applied_to_resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "label_selector")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "server")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the data type for the schema GetFirewallsIdResponseBody200FirewallApplied_toApplied_to_resources
-- 
-- 
data GetFirewallsIdResponseBody200FirewallAppliedToAppliedToResources = GetFirewallsIdResponseBody200FirewallAppliedToAppliedToResources {
  -- | server
  getFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesServer :: (GHC.Maybe.Maybe GetFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesServer)
  -- | type: Type of resource referenced
  , getFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesType :: (GHC.Maybe.Maybe GetFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesType)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetFirewallsIdResponseBody200FirewallAppliedToAppliedToResources
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "server" (getFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesServer obj) : (Data.Aeson..=) "type" (getFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "server" (getFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesServer obj) GHC.Base.<> (Data.Aeson..=) "type" (getFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetFirewallsIdResponseBody200FirewallAppliedToAppliedToResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetFirewallsIdResponseBody200FirewallAppliedToAppliedToResources" (\obj -> (GHC.Base.pure GetFirewallsIdResponseBody200FirewallAppliedToAppliedToResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "server")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))
-- | Defines the data type for the schema GetFirewallsIdResponseBody200FirewallApplied_toApplied_to_resourcesServer
-- 
-- 
data GetFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesServer = GetFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesServer {
  -- | id: ID of the Resource
  getFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesServerId :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesServer
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (getFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesServerId obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (getFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesServerId obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesServer
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesServer" (\obj -> GHC.Base.pure GetFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesServer GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id"))
-- | Defines the enum schema GetFirewallsIdResponseBody200FirewallApplied_toApplied_to_resourcesType
-- 
-- Type of resource referenced
data GetFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesType
    = GetFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesTypeEnumOther Data.Aeson.Types.Internal.Value
    | GetFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesTypeEnumTyped Data.Text.Internal.Text
    | GetFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesTypeEnumStringServer
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesType
    where toJSON (GetFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesTypeEnumStringServer) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "server"
instance Data.Aeson.FromJSON GetFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "server")
                                          then GetFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesTypeEnumStringServer
                                          else GetFirewallsIdResponseBody200FirewallAppliedToAppliedToResourcesTypeEnumOther val)
-- | Defines the data type for the schema GetFirewallsIdResponseBody200FirewallApplied_toLabel_selector
-- 
-- 
data GetFirewallsIdResponseBody200FirewallAppliedToLabelSelector = GetFirewallsIdResponseBody200FirewallAppliedToLabelSelector {
  -- | selector: Label selector
  getFirewallsIdResponseBody200FirewallAppliedToLabelSelectorSelector :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetFirewallsIdResponseBody200FirewallAppliedToLabelSelector
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "selector" (getFirewallsIdResponseBody200FirewallAppliedToLabelSelectorSelector obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "selector" (getFirewallsIdResponseBody200FirewallAppliedToLabelSelectorSelector obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetFirewallsIdResponseBody200FirewallAppliedToLabelSelector
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetFirewallsIdResponseBody200FirewallAppliedToLabelSelector" (\obj -> GHC.Base.pure GetFirewallsIdResponseBody200FirewallAppliedToLabelSelector GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "selector"))
-- | Defines the data type for the schema GetFirewallsIdResponseBody200FirewallApplied_toServer
-- 
-- 
data GetFirewallsIdResponseBody200FirewallAppliedToServer = GetFirewallsIdResponseBody200FirewallAppliedToServer {
  -- | id: ID of the Resource
  getFirewallsIdResponseBody200FirewallAppliedToServerId :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetFirewallsIdResponseBody200FirewallAppliedToServer
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (getFirewallsIdResponseBody200FirewallAppliedToServerId obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (getFirewallsIdResponseBody200FirewallAppliedToServerId obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetFirewallsIdResponseBody200FirewallAppliedToServer
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetFirewallsIdResponseBody200FirewallAppliedToServer" (\obj -> GHC.Base.pure GetFirewallsIdResponseBody200FirewallAppliedToServer GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id"))
-- | Defines the enum schema GetFirewallsIdResponseBody200FirewallApplied_toType
-- 
-- Type of resource referenced
data GetFirewallsIdResponseBody200FirewallAppliedToType
    = GetFirewallsIdResponseBody200FirewallAppliedToTypeEnumOther Data.Aeson.Types.Internal.Value
    | GetFirewallsIdResponseBody200FirewallAppliedToTypeEnumTyped Data.Text.Internal.Text
    | GetFirewallsIdResponseBody200FirewallAppliedToTypeEnumStringLabelSelector
    | GetFirewallsIdResponseBody200FirewallAppliedToTypeEnumStringServer
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetFirewallsIdResponseBody200FirewallAppliedToType
    where toJSON (GetFirewallsIdResponseBody200FirewallAppliedToTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetFirewallsIdResponseBody200FirewallAppliedToTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetFirewallsIdResponseBody200FirewallAppliedToTypeEnumStringLabelSelector) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "label_selector"
          toJSON (GetFirewallsIdResponseBody200FirewallAppliedToTypeEnumStringServer) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "server"
instance Data.Aeson.FromJSON GetFirewallsIdResponseBody200FirewallAppliedToType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "label_selector")
                                          then GetFirewallsIdResponseBody200FirewallAppliedToTypeEnumStringLabelSelector
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "server")
                                                then GetFirewallsIdResponseBody200FirewallAppliedToTypeEnumStringServer
                                                else GetFirewallsIdResponseBody200FirewallAppliedToTypeEnumOther val)
-- | Defines the data type for the schema GetFirewallsIdResponseBody200FirewallLabels
-- 
-- User-defined labels (key-value pairs)
data GetFirewallsIdResponseBody200FirewallLabels = GetFirewallsIdResponseBody200FirewallLabels {
  
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetFirewallsIdResponseBody200FirewallLabels
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON GetFirewallsIdResponseBody200FirewallLabels
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetFirewallsIdResponseBody200FirewallLabels" (\obj -> GHC.Base.pure GetFirewallsIdResponseBody200FirewallLabels)
-- | Defines the data type for the schema GetFirewallsIdResponseBody200FirewallRules
-- 
-- 
data GetFirewallsIdResponseBody200FirewallRules = GetFirewallsIdResponseBody200FirewallRules {
  -- | description: Description of the Rule
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 255
  getFirewallsIdResponseBody200FirewallRulesDescription :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | destination_ips: List of permitted IPv4\/IPv6 addresses in CIDR notation. Use \`0.0.0.0\/0\` to allow all IPv4 addresses and \`::\/0\` to allow all IPv6 addresses. You can specify 100 CIDRs at most.
  , getFirewallsIdResponseBody200FirewallRulesDestinationIps :: (GHC.Maybe.Maybe ([] Data.Text.Internal.Text))
  -- | direction: Select traffic direction on which rule should be applied. Use \`source_ips\` for direction \`in\` and \`destination_ips\` for direction \`out\`.
  , getFirewallsIdResponseBody200FirewallRulesDirection :: GetFirewallsIdResponseBody200FirewallRulesDirection
  -- | port: Port or port range to which traffic will be allowed, only applicable for protocols TCP and UDP. A port range can be specified by separating two ports with a dash, e.g \`1024-5000\`.
  , getFirewallsIdResponseBody200FirewallRulesPort :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | protocol: Type of traffic to allow
  , getFirewallsIdResponseBody200FirewallRulesProtocol :: GetFirewallsIdResponseBody200FirewallRulesProtocol
  -- | source_ips: List of permitted IPv4\/IPv6 addresses in CIDR notation. Use \`0.0.0.0\/0\` to allow all IPv4 addresses and \`::\/0\` to allow all IPv6 addresses. You can specify 100 CIDRs at most.
  , getFirewallsIdResponseBody200FirewallRulesSourceIps :: (GHC.Maybe.Maybe ([] Data.Text.Internal.Text))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetFirewallsIdResponseBody200FirewallRules
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "description" (getFirewallsIdResponseBody200FirewallRulesDescription obj) : (Data.Aeson..=) "destination_ips" (getFirewallsIdResponseBody200FirewallRulesDestinationIps obj) : (Data.Aeson..=) "direction" (getFirewallsIdResponseBody200FirewallRulesDirection obj) : (Data.Aeson..=) "port" (getFirewallsIdResponseBody200FirewallRulesPort obj) : (Data.Aeson..=) "protocol" (getFirewallsIdResponseBody200FirewallRulesProtocol obj) : (Data.Aeson..=) "source_ips" (getFirewallsIdResponseBody200FirewallRulesSourceIps obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "description" (getFirewallsIdResponseBody200FirewallRulesDescription obj) GHC.Base.<> ((Data.Aeson..=) "destination_ips" (getFirewallsIdResponseBody200FirewallRulesDestinationIps obj) GHC.Base.<> ((Data.Aeson..=) "direction" (getFirewallsIdResponseBody200FirewallRulesDirection obj) GHC.Base.<> ((Data.Aeson..=) "port" (getFirewallsIdResponseBody200FirewallRulesPort obj) GHC.Base.<> ((Data.Aeson..=) "protocol" (getFirewallsIdResponseBody200FirewallRulesProtocol obj) GHC.Base.<> (Data.Aeson..=) "source_ips" (getFirewallsIdResponseBody200FirewallRulesSourceIps obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetFirewallsIdResponseBody200FirewallRules
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetFirewallsIdResponseBody200FirewallRules" (\obj -> (((((GHC.Base.pure GetFirewallsIdResponseBody200FirewallRules GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "destination_ips")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "direction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "protocol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "source_ips"))
-- | Defines the enum schema GetFirewallsIdResponseBody200FirewallRulesDirection
-- 
-- Select traffic direction on which rule should be applied. Use \`source_ips\` for direction \`in\` and \`destination_ips\` for direction \`out\`.
data GetFirewallsIdResponseBody200FirewallRulesDirection
    = GetFirewallsIdResponseBody200FirewallRulesDirectionEnumOther Data.Aeson.Types.Internal.Value
    | GetFirewallsIdResponseBody200FirewallRulesDirectionEnumTyped Data.Text.Internal.Text
    | GetFirewallsIdResponseBody200FirewallRulesDirectionEnumStringIn
    | GetFirewallsIdResponseBody200FirewallRulesDirectionEnumStringOut
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetFirewallsIdResponseBody200FirewallRulesDirection
    where toJSON (GetFirewallsIdResponseBody200FirewallRulesDirectionEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetFirewallsIdResponseBody200FirewallRulesDirectionEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetFirewallsIdResponseBody200FirewallRulesDirectionEnumStringIn) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "in"
          toJSON (GetFirewallsIdResponseBody200FirewallRulesDirectionEnumStringOut) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "out"
instance Data.Aeson.FromJSON GetFirewallsIdResponseBody200FirewallRulesDirection
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "in")
                                          then GetFirewallsIdResponseBody200FirewallRulesDirectionEnumStringIn
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "out")
                                                then GetFirewallsIdResponseBody200FirewallRulesDirectionEnumStringOut
                                                else GetFirewallsIdResponseBody200FirewallRulesDirectionEnumOther val)
-- | Defines the enum schema GetFirewallsIdResponseBody200FirewallRulesProtocol
-- 
-- Type of traffic to allow
data GetFirewallsIdResponseBody200FirewallRulesProtocol
    = GetFirewallsIdResponseBody200FirewallRulesProtocolEnumOther Data.Aeson.Types.Internal.Value
    | GetFirewallsIdResponseBody200FirewallRulesProtocolEnumTyped Data.Text.Internal.Text
    | GetFirewallsIdResponseBody200FirewallRulesProtocolEnumStringEsp
    | GetFirewallsIdResponseBody200FirewallRulesProtocolEnumStringGre
    | GetFirewallsIdResponseBody200FirewallRulesProtocolEnumStringIcmp
    | GetFirewallsIdResponseBody200FirewallRulesProtocolEnumStringTcp
    | GetFirewallsIdResponseBody200FirewallRulesProtocolEnumStringUdp
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetFirewallsIdResponseBody200FirewallRulesProtocol
    where toJSON (GetFirewallsIdResponseBody200FirewallRulesProtocolEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetFirewallsIdResponseBody200FirewallRulesProtocolEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetFirewallsIdResponseBody200FirewallRulesProtocolEnumStringEsp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "esp"
          toJSON (GetFirewallsIdResponseBody200FirewallRulesProtocolEnumStringGre) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "gre"
          toJSON (GetFirewallsIdResponseBody200FirewallRulesProtocolEnumStringIcmp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "icmp"
          toJSON (GetFirewallsIdResponseBody200FirewallRulesProtocolEnumStringTcp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tcp"
          toJSON (GetFirewallsIdResponseBody200FirewallRulesProtocolEnumStringUdp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "udp"
instance Data.Aeson.FromJSON GetFirewallsIdResponseBody200FirewallRulesProtocol
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "esp")
                                          then GetFirewallsIdResponseBody200FirewallRulesProtocolEnumStringEsp
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "gre")
                                                then GetFirewallsIdResponseBody200FirewallRulesProtocolEnumStringGre
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "icmp")
                                                      then GetFirewallsIdResponseBody200FirewallRulesProtocolEnumStringIcmp
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tcp")
                                                            then GetFirewallsIdResponseBody200FirewallRulesProtocolEnumStringTcp
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "udp")
                                                                  then GetFirewallsIdResponseBody200FirewallRulesProtocolEnumStringUdp
                                                                  else GetFirewallsIdResponseBody200FirewallRulesProtocolEnumOther val)
