-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation getLoadBalancerTypes_Id_
module HCloud.Operations.GetLoadBalancerTypesId_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > GET /load_balancer_types/{id}
-- 
-- Gets a specific Load Balancer type object.
getLoadBalancerTypes_Id_ :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer                                                                                                             -- ^ id: ID of Load Balancer type
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response GetLoadBalancerTypesIdResponse))   -- ^ Monad containing the result of the operation
getLoadBalancerTypes_Id_ config
                         id = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetLoadBalancerTypesIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetLoadBalancerTypesIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                    GetLoadBalancerTypesIdResponseBody200)
                                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/load_balancer_types/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) [])
-- | > GET /load_balancer_types/{id}
-- 
-- The same as 'getLoadBalancerTypes_Id_' but returns the raw 'Data.ByteString.Char8.ByteString'
getLoadBalancerTypes_Id_Raw :: forall m s . (HCloud.Common.MonadHTTP m,
                                             HCloud.Common.SecurityScheme s) =>
                               HCloud.Common.Configuration s ->
                               GHC.Integer.Type.Integer ->
                               m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                     (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getLoadBalancerTypes_Id_Raw config
                            id = GHC.Base.id (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/load_balancer_types/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) [])
-- | > GET /load_balancer_types/{id}
-- 
-- Monadic version of 'getLoadBalancerTypes_Id_' (use with 'HCloud.Common.runWithConfiguration')
getLoadBalancerTypes_Id_M :: forall m s . (HCloud.Common.MonadHTTP m,
                                           HCloud.Common.SecurityScheme s) =>
                             GHC.Integer.Type.Integer ->
                             Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                m
                                                                (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                    (Network.HTTP.Client.Types.Response GetLoadBalancerTypesIdResponse))
getLoadBalancerTypes_Id_M id = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetLoadBalancerTypesIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetLoadBalancerTypesIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                     GetLoadBalancerTypesIdResponseBody200)
                                                                                                                                                                                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/load_balancer_types/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) [])
-- | > GET /load_balancer_types/{id}
-- 
-- Monadic version of 'getLoadBalancerTypes_Id_Raw' (use with 'HCloud.Common.runWithConfiguration')
getLoadBalancerTypes_Id_RawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                              HCloud.Common.SecurityScheme s) =>
                                GHC.Integer.Type.Integer ->
                                Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                   m
                                                                   (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                       (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getLoadBalancerTypes_Id_RawM id = GHC.Base.id (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/load_balancer_types/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) [])
-- | Represents a response of the operation 'getLoadBalancerTypes_Id_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetLoadBalancerTypesIdResponseError' is used.
data GetLoadBalancerTypesIdResponse =                                        
   GetLoadBalancerTypesIdResponseError GHC.Base.String                       -- ^ Means either no matching case available or a parse error
  | GetLoadBalancerTypesIdResponse200 GetLoadBalancerTypesIdResponseBody200  -- ^ The \`load_balancer_type\` key in the reply contains a Load Balancer type object with this structure
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema GetLoadBalancerTypesIdResponseBody200
-- 
-- 
data GetLoadBalancerTypesIdResponseBody200 = GetLoadBalancerTypesIdResponseBody200 {
  -- | load_balancer_type
  getLoadBalancerTypesIdResponseBody200LoadBalancerType :: (GHC.Maybe.Maybe GetLoadBalancerTypesIdResponseBody200LoadBalancerType)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancerTypesIdResponseBody200
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "load_balancer_type" (getLoadBalancerTypesIdResponseBody200LoadBalancerType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "load_balancer_type" (getLoadBalancerTypesIdResponseBody200LoadBalancerType obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancerTypesIdResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancerTypesIdResponseBody200" (\obj -> GHC.Base.pure GetLoadBalancerTypesIdResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "load_balancer_type"))
-- | Defines the data type for the schema GetLoadBalancerTypesIdResponseBody200Load_balancer_type
-- 
-- 
data GetLoadBalancerTypesIdResponseBody200LoadBalancerType = GetLoadBalancerTypesIdResponseBody200LoadBalancerType {
  -- | deprecated: Point in time when the Load Balancer type is deprecated (in ISO-8601 format)
  getLoadBalancerTypesIdResponseBody200LoadBalancerTypeDeprecated :: Data.Text.Internal.Text
  -- | description: Description of the Load Balancer type
  , getLoadBalancerTypesIdResponseBody200LoadBalancerTypeDescription :: Data.Text.Internal.Text
  -- | id: ID of the Load Balancer type
  , getLoadBalancerTypesIdResponseBody200LoadBalancerTypeId :: GHC.Types.Double
  -- | max_assigned_certificates: Number of SSL Certificates that can be assigned to a single Load Balancer
  , getLoadBalancerTypesIdResponseBody200LoadBalancerTypeMaxAssignedCertificates :: GHC.Types.Double
  -- | max_connections: Number of maximum simultaneous open connections
  , getLoadBalancerTypesIdResponseBody200LoadBalancerTypeMaxConnections :: GHC.Types.Double
  -- | max_services: Number of services a Load Balancer of this type can have
  , getLoadBalancerTypesIdResponseBody200LoadBalancerTypeMaxServices :: GHC.Types.Double
  -- | max_targets: Number of targets a single Load Balancer can have
  , getLoadBalancerTypesIdResponseBody200LoadBalancerTypeMaxTargets :: GHC.Types.Double
  -- | name: Unique identifier of the Load Balancer type
  , getLoadBalancerTypesIdResponseBody200LoadBalancerTypeName :: Data.Text.Internal.Text
  -- | prices: Prices in different network zones
  , getLoadBalancerTypesIdResponseBody200LoadBalancerTypePrices :: ([] GetLoadBalancerTypesIdResponseBody200LoadBalancerTypePrices)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancerTypesIdResponseBody200LoadBalancerType
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "deprecated" (getLoadBalancerTypesIdResponseBody200LoadBalancerTypeDeprecated obj) : (Data.Aeson..=) "description" (getLoadBalancerTypesIdResponseBody200LoadBalancerTypeDescription obj) : (Data.Aeson..=) "id" (getLoadBalancerTypesIdResponseBody200LoadBalancerTypeId obj) : (Data.Aeson..=) "max_assigned_certificates" (getLoadBalancerTypesIdResponseBody200LoadBalancerTypeMaxAssignedCertificates obj) : (Data.Aeson..=) "max_connections" (getLoadBalancerTypesIdResponseBody200LoadBalancerTypeMaxConnections obj) : (Data.Aeson..=) "max_services" (getLoadBalancerTypesIdResponseBody200LoadBalancerTypeMaxServices obj) : (Data.Aeson..=) "max_targets" (getLoadBalancerTypesIdResponseBody200LoadBalancerTypeMaxTargets obj) : (Data.Aeson..=) "name" (getLoadBalancerTypesIdResponseBody200LoadBalancerTypeName obj) : (Data.Aeson..=) "prices" (getLoadBalancerTypesIdResponseBody200LoadBalancerTypePrices obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "deprecated" (getLoadBalancerTypesIdResponseBody200LoadBalancerTypeDeprecated obj) GHC.Base.<> ((Data.Aeson..=) "description" (getLoadBalancerTypesIdResponseBody200LoadBalancerTypeDescription obj) GHC.Base.<> ((Data.Aeson..=) "id" (getLoadBalancerTypesIdResponseBody200LoadBalancerTypeId obj) GHC.Base.<> ((Data.Aeson..=) "max_assigned_certificates" (getLoadBalancerTypesIdResponseBody200LoadBalancerTypeMaxAssignedCertificates obj) GHC.Base.<> ((Data.Aeson..=) "max_connections" (getLoadBalancerTypesIdResponseBody200LoadBalancerTypeMaxConnections obj) GHC.Base.<> ((Data.Aeson..=) "max_services" (getLoadBalancerTypesIdResponseBody200LoadBalancerTypeMaxServices obj) GHC.Base.<> ((Data.Aeson..=) "max_targets" (getLoadBalancerTypesIdResponseBody200LoadBalancerTypeMaxTargets obj) GHC.Base.<> ((Data.Aeson..=) "name" (getLoadBalancerTypesIdResponseBody200LoadBalancerTypeName obj) GHC.Base.<> (Data.Aeson..=) "prices" (getLoadBalancerTypesIdResponseBody200LoadBalancerTypePrices obj)))))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancerTypesIdResponseBody200LoadBalancerType
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancerTypesIdResponseBody200LoadBalancerType" (\obj -> ((((((((GHC.Base.pure GetLoadBalancerTypesIdResponseBody200LoadBalancerType GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "deprecated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "max_assigned_certificates")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "max_connections")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "max_services")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "max_targets")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "prices"))
-- | Defines the data type for the schema GetLoadBalancerTypesIdResponseBody200Load_balancer_typePrices
-- 
-- 
data GetLoadBalancerTypesIdResponseBody200LoadBalancerTypePrices = GetLoadBalancerTypesIdResponseBody200LoadBalancerTypePrices {
  -- | location: Name of the Location the price is for
  getLoadBalancerTypesIdResponseBody200LoadBalancerTypePricesLocation :: Data.Text.Internal.Text
  -- | price_hourly: Hourly costs for a Resource in this Location
  , getLoadBalancerTypesIdResponseBody200LoadBalancerTypePricesPriceHourly :: GetLoadBalancerTypesIdResponseBody200LoadBalancerTypePricesPriceHourly
  -- | price_monthly: Monthly costs for a Resource in this Location
  , getLoadBalancerTypesIdResponseBody200LoadBalancerTypePricesPriceMonthly :: GetLoadBalancerTypesIdResponseBody200LoadBalancerTypePricesPriceMonthly
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancerTypesIdResponseBody200LoadBalancerTypePrices
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "location" (getLoadBalancerTypesIdResponseBody200LoadBalancerTypePricesLocation obj) : (Data.Aeson..=) "price_hourly" (getLoadBalancerTypesIdResponseBody200LoadBalancerTypePricesPriceHourly obj) : (Data.Aeson..=) "price_monthly" (getLoadBalancerTypesIdResponseBody200LoadBalancerTypePricesPriceMonthly obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "location" (getLoadBalancerTypesIdResponseBody200LoadBalancerTypePricesLocation obj) GHC.Base.<> ((Data.Aeson..=) "price_hourly" (getLoadBalancerTypesIdResponseBody200LoadBalancerTypePricesPriceHourly obj) GHC.Base.<> (Data.Aeson..=) "price_monthly" (getLoadBalancerTypesIdResponseBody200LoadBalancerTypePricesPriceMonthly obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancerTypesIdResponseBody200LoadBalancerTypePrices
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancerTypesIdResponseBody200LoadBalancerTypePrices" (\obj -> ((GHC.Base.pure GetLoadBalancerTypesIdResponseBody200LoadBalancerTypePrices GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "location")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price_hourly")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price_monthly"))
-- | Defines the data type for the schema GetLoadBalancerTypesIdResponseBody200Load_balancer_typePricesPrice_hourly
-- 
-- Hourly costs for a Resource in this Location
data GetLoadBalancerTypesIdResponseBody200LoadBalancerTypePricesPriceHourly = GetLoadBalancerTypesIdResponseBody200LoadBalancerTypePricesPriceHourly {
  -- | gross: Price with VAT added
  getLoadBalancerTypesIdResponseBody200LoadBalancerTypePricesPriceHourlyGross :: Data.Text.Internal.Text
  -- | net: Price without VAT
  , getLoadBalancerTypesIdResponseBody200LoadBalancerTypePricesPriceHourlyNet :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancerTypesIdResponseBody200LoadBalancerTypePricesPriceHourly
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "gross" (getLoadBalancerTypesIdResponseBody200LoadBalancerTypePricesPriceHourlyGross obj) : (Data.Aeson..=) "net" (getLoadBalancerTypesIdResponseBody200LoadBalancerTypePricesPriceHourlyNet obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "gross" (getLoadBalancerTypesIdResponseBody200LoadBalancerTypePricesPriceHourlyGross obj) GHC.Base.<> (Data.Aeson..=) "net" (getLoadBalancerTypesIdResponseBody200LoadBalancerTypePricesPriceHourlyNet obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancerTypesIdResponseBody200LoadBalancerTypePricesPriceHourly
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancerTypesIdResponseBody200LoadBalancerTypePricesPriceHourly" (\obj -> (GHC.Base.pure GetLoadBalancerTypesIdResponseBody200LoadBalancerTypePricesPriceHourly GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "gross")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "net"))
-- | Defines the data type for the schema GetLoadBalancerTypesIdResponseBody200Load_balancer_typePricesPrice_monthly
-- 
-- Monthly costs for a Resource in this Location
data GetLoadBalancerTypesIdResponseBody200LoadBalancerTypePricesPriceMonthly = GetLoadBalancerTypesIdResponseBody200LoadBalancerTypePricesPriceMonthly {
  -- | gross: Price with VAT added
  getLoadBalancerTypesIdResponseBody200LoadBalancerTypePricesPriceMonthlyGross :: Data.Text.Internal.Text
  -- | net: Price without VAT
  , getLoadBalancerTypesIdResponseBody200LoadBalancerTypePricesPriceMonthlyNet :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetLoadBalancerTypesIdResponseBody200LoadBalancerTypePricesPriceMonthly
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "gross" (getLoadBalancerTypesIdResponseBody200LoadBalancerTypePricesPriceMonthlyGross obj) : (Data.Aeson..=) "net" (getLoadBalancerTypesIdResponseBody200LoadBalancerTypePricesPriceMonthlyNet obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "gross" (getLoadBalancerTypesIdResponseBody200LoadBalancerTypePricesPriceMonthlyGross obj) GHC.Base.<> (Data.Aeson..=) "net" (getLoadBalancerTypesIdResponseBody200LoadBalancerTypePricesPriceMonthlyNet obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancerTypesIdResponseBody200LoadBalancerTypePricesPriceMonthly
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancerTypesIdResponseBody200LoadBalancerTypePricesPriceMonthly" (\obj -> (GHC.Base.pure GetLoadBalancerTypesIdResponseBody200LoadBalancerTypePricesPriceMonthly GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "gross")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "net"))
