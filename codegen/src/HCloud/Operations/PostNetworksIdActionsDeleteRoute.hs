-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation postNetworks_Id_ActionsDeleteRoute
module HCloud.Operations.PostNetworksIdActionsDeleteRoute where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > POST /networks/{id}/actions/delete_route
-- 
-- Delete a route entry from a Network.
-- 
-- Note: if the Network object changes during the request, the response will be a “conflict” error.
postNetworks_Id_ActionsDeleteRoute :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer                                                                                                                       -- ^ id: ID of the Network
  -> GHC.Maybe.Maybe PostNetworksIdActionsDeleteRouteRequestBody                                                                                    -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response PostNetworksIdActionsDeleteRouteResponse))   -- ^ Monad containing the result of the operation
postNetworks_Id_ActionsDeleteRoute config
                                   id
                                   body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostNetworksIdActionsDeleteRouteResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostNetworksIdActionsDeleteRouteResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    PostNetworksIdActionsDeleteRouteResponseBody201)
                                                                                                                                                                                                                    | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/networks/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/delete_route"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /networks/{id}/actions/delete_route
-- 
-- The same as 'postNetworks_Id_ActionsDeleteRoute' but returns the raw 'Data.ByteString.Char8.ByteString'
postNetworks_Id_ActionsDeleteRouteRaw :: forall m s . (HCloud.Common.MonadHTTP m,
                                                       HCloud.Common.SecurityScheme s) =>
                                         HCloud.Common.Configuration s ->
                                         GHC.Integer.Type.Integer ->
                                         GHC.Maybe.Maybe PostNetworksIdActionsDeleteRouteRequestBody ->
                                         m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                               (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postNetworks_Id_ActionsDeleteRouteRaw config
                                      id
                                      body = GHC.Base.id (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/networks/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/delete_route"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /networks/{id}/actions/delete_route
-- 
-- Monadic version of 'postNetworks_Id_ActionsDeleteRoute' (use with 'HCloud.Common.runWithConfiguration')
postNetworks_Id_ActionsDeleteRouteM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                     HCloud.Common.SecurityScheme s) =>
                                       GHC.Integer.Type.Integer ->
                                       GHC.Maybe.Maybe PostNetworksIdActionsDeleteRouteRequestBody ->
                                       Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                          m
                                                                          (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                              (Network.HTTP.Client.Types.Response PostNetworksIdActionsDeleteRouteResponse))
postNetworks_Id_ActionsDeleteRouteM id
                                    body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostNetworksIdActionsDeleteRouteResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostNetworksIdActionsDeleteRouteResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     PostNetworksIdActionsDeleteRouteResponseBody201)
                                                                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/networks/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/delete_route"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /networks/{id}/actions/delete_route
-- 
-- Monadic version of 'postNetworks_Id_ActionsDeleteRouteRaw' (use with 'HCloud.Common.runWithConfiguration')
postNetworks_Id_ActionsDeleteRouteRawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                        HCloud.Common.SecurityScheme s) =>
                                          GHC.Integer.Type.Integer ->
                                          GHC.Maybe.Maybe PostNetworksIdActionsDeleteRouteRequestBody ->
                                          Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                             m
                                                                             (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                                 (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postNetworks_Id_ActionsDeleteRouteRawM id
                                       body = GHC.Base.id (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/networks/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/delete_route"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema postNetworks_Id_ActionsDeleteRouteRequestBody
-- 
-- 
data PostNetworksIdActionsDeleteRouteRequestBody = PostNetworksIdActionsDeleteRouteRequestBody {
  -- | destination: Destination network or host of this route. Must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first IP of the networks ip_range or with 172.31.1.1. Must be one of the private IPv4 ranges of RFC1918.
  postNetworksIdActionsDeleteRouteRequestBodyDestination :: Data.Text.Internal.Text
  -- | gateway: Gateway for the route. Cannot be the first IP of the networks ip_range, an IP behind a vSwitch or 172.31.1.1, as this IP is being used as a gateway for the public network interface of Servers.
  , postNetworksIdActionsDeleteRouteRequestBodyGateway :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostNetworksIdActionsDeleteRouteRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "destination" (postNetworksIdActionsDeleteRouteRequestBodyDestination obj) : (Data.Aeson..=) "gateway" (postNetworksIdActionsDeleteRouteRequestBodyGateway obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "destination" (postNetworksIdActionsDeleteRouteRequestBodyDestination obj) GHC.Base.<> (Data.Aeson..=) "gateway" (postNetworksIdActionsDeleteRouteRequestBodyGateway obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostNetworksIdActionsDeleteRouteRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostNetworksIdActionsDeleteRouteRequestBody" (\obj -> (GHC.Base.pure PostNetworksIdActionsDeleteRouteRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "destination")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "gateway"))
-- | Represents a response of the operation 'postNetworks_Id_ActionsDeleteRoute'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostNetworksIdActionsDeleteRouteResponseError' is used.
data PostNetworksIdActionsDeleteRouteResponse =                                                  
   PostNetworksIdActionsDeleteRouteResponseError GHC.Base.String                                 -- ^ Means either no matching case available or a parse error
  | PostNetworksIdActionsDeleteRouteResponse201 PostNetworksIdActionsDeleteRouteResponseBody201  -- ^ The \`action\` key contains the \`delete_route\` Action
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema PostNetworksIdActionsDeleteRouteResponseBody201
-- 
-- 
data PostNetworksIdActionsDeleteRouteResponseBody201 = PostNetworksIdActionsDeleteRouteResponseBody201 {
  -- | action
  postNetworksIdActionsDeleteRouteResponseBody201Action :: PostNetworksIdActionsDeleteRouteResponseBody201Action
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostNetworksIdActionsDeleteRouteResponseBody201
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "action" (postNetworksIdActionsDeleteRouteResponseBody201Action obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "action" (postNetworksIdActionsDeleteRouteResponseBody201Action obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostNetworksIdActionsDeleteRouteResponseBody201
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostNetworksIdActionsDeleteRouteResponseBody201" (\obj -> GHC.Base.pure PostNetworksIdActionsDeleteRouteResponseBody201 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "action"))
-- | Defines the data type for the schema PostNetworksIdActionsDeleteRouteResponseBody201Action
-- 
-- 
data PostNetworksIdActionsDeleteRouteResponseBody201Action = PostNetworksIdActionsDeleteRouteResponseBody201Action {
  -- | command: Command executed in the Action
  postNetworksIdActionsDeleteRouteResponseBody201ActionCommand :: Data.Text.Internal.Text
  -- | error: Error message for the Action if error occurred, otherwise null
  , postNetworksIdActionsDeleteRouteResponseBody201ActionError :: PostNetworksIdActionsDeleteRouteResponseBody201ActionError
  -- | finished: Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
  , postNetworksIdActionsDeleteRouteResponseBody201ActionFinished :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , postNetworksIdActionsDeleteRouteResponseBody201ActionId :: GHC.Integer.Type.Integer
  -- | progress: Progress of Action in percent
  , postNetworksIdActionsDeleteRouteResponseBody201ActionProgress :: GHC.Types.Double
  -- | resources: Resources the Action relates to
  , postNetworksIdActionsDeleteRouteResponseBody201ActionResources :: ([] PostNetworksIdActionsDeleteRouteResponseBody201ActionResources)
  -- | started: Point in time when the Action was started (in ISO-8601 format)
  , postNetworksIdActionsDeleteRouteResponseBody201ActionStarted :: Data.Text.Internal.Text
  -- | status: Status of the Action
  , postNetworksIdActionsDeleteRouteResponseBody201ActionStatus :: PostNetworksIdActionsDeleteRouteResponseBody201ActionStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostNetworksIdActionsDeleteRouteResponseBody201Action
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "command" (postNetworksIdActionsDeleteRouteResponseBody201ActionCommand obj) : (Data.Aeson..=) "error" (postNetworksIdActionsDeleteRouteResponseBody201ActionError obj) : (Data.Aeson..=) "finished" (postNetworksIdActionsDeleteRouteResponseBody201ActionFinished obj) : (Data.Aeson..=) "id" (postNetworksIdActionsDeleteRouteResponseBody201ActionId obj) : (Data.Aeson..=) "progress" (postNetworksIdActionsDeleteRouteResponseBody201ActionProgress obj) : (Data.Aeson..=) "resources" (postNetworksIdActionsDeleteRouteResponseBody201ActionResources obj) : (Data.Aeson..=) "started" (postNetworksIdActionsDeleteRouteResponseBody201ActionStarted obj) : (Data.Aeson..=) "status" (postNetworksIdActionsDeleteRouteResponseBody201ActionStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "command" (postNetworksIdActionsDeleteRouteResponseBody201ActionCommand obj) GHC.Base.<> ((Data.Aeson..=) "error" (postNetworksIdActionsDeleteRouteResponseBody201ActionError obj) GHC.Base.<> ((Data.Aeson..=) "finished" (postNetworksIdActionsDeleteRouteResponseBody201ActionFinished obj) GHC.Base.<> ((Data.Aeson..=) "id" (postNetworksIdActionsDeleteRouteResponseBody201ActionId obj) GHC.Base.<> ((Data.Aeson..=) "progress" (postNetworksIdActionsDeleteRouteResponseBody201ActionProgress obj) GHC.Base.<> ((Data.Aeson..=) "resources" (postNetworksIdActionsDeleteRouteResponseBody201ActionResources obj) GHC.Base.<> ((Data.Aeson..=) "started" (postNetworksIdActionsDeleteRouteResponseBody201ActionStarted obj) GHC.Base.<> (Data.Aeson..=) "status" (postNetworksIdActionsDeleteRouteResponseBody201ActionStatus obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostNetworksIdActionsDeleteRouteResponseBody201Action
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostNetworksIdActionsDeleteRouteResponseBody201Action" (\obj -> (((((((GHC.Base.pure PostNetworksIdActionsDeleteRouteResponseBody201Action GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "command")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "finished")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "started")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Defines the data type for the schema PostNetworksIdActionsDeleteRouteResponseBody201ActionError
-- 
-- Error message for the Action if error occurred, otherwise null
data PostNetworksIdActionsDeleteRouteResponseBody201ActionError = PostNetworksIdActionsDeleteRouteResponseBody201ActionError {
  -- | code: Fixed machine readable code
  postNetworksIdActionsDeleteRouteResponseBody201ActionErrorCode :: Data.Text.Internal.Text
  -- | message: Humanized error message
  , postNetworksIdActionsDeleteRouteResponseBody201ActionErrorMessage :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostNetworksIdActionsDeleteRouteResponseBody201ActionError
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "code" (postNetworksIdActionsDeleteRouteResponseBody201ActionErrorCode obj) : (Data.Aeson..=) "message" (postNetworksIdActionsDeleteRouteResponseBody201ActionErrorMessage obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "code" (postNetworksIdActionsDeleteRouteResponseBody201ActionErrorCode obj) GHC.Base.<> (Data.Aeson..=) "message" (postNetworksIdActionsDeleteRouteResponseBody201ActionErrorMessage obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostNetworksIdActionsDeleteRouteResponseBody201ActionError
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostNetworksIdActionsDeleteRouteResponseBody201ActionError" (\obj -> (GHC.Base.pure PostNetworksIdActionsDeleteRouteResponseBody201ActionError GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Defines the data type for the schema PostNetworksIdActionsDeleteRouteResponseBody201ActionResources
-- 
-- 
data PostNetworksIdActionsDeleteRouteResponseBody201ActionResources = PostNetworksIdActionsDeleteRouteResponseBody201ActionResources {
  -- | id: ID of the Resource
  postNetworksIdActionsDeleteRouteResponseBody201ActionResourcesId :: GHC.Integer.Type.Integer
  -- | type: Type of resource referenced
  , postNetworksIdActionsDeleteRouteResponseBody201ActionResourcesType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostNetworksIdActionsDeleteRouteResponseBody201ActionResources
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (postNetworksIdActionsDeleteRouteResponseBody201ActionResourcesId obj) : (Data.Aeson..=) "type" (postNetworksIdActionsDeleteRouteResponseBody201ActionResourcesType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (postNetworksIdActionsDeleteRouteResponseBody201ActionResourcesId obj) GHC.Base.<> (Data.Aeson..=) "type" (postNetworksIdActionsDeleteRouteResponseBody201ActionResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostNetworksIdActionsDeleteRouteResponseBody201ActionResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostNetworksIdActionsDeleteRouteResponseBody201ActionResources" (\obj -> (GHC.Base.pure PostNetworksIdActionsDeleteRouteResponseBody201ActionResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema PostNetworksIdActionsDeleteRouteResponseBody201ActionStatus
-- 
-- Status of the Action
data PostNetworksIdActionsDeleteRouteResponseBody201ActionStatus
    = PostNetworksIdActionsDeleteRouteResponseBody201ActionStatusEnumOther Data.Aeson.Types.Internal.Value
    | PostNetworksIdActionsDeleteRouteResponseBody201ActionStatusEnumTyped Data.Text.Internal.Text
    | PostNetworksIdActionsDeleteRouteResponseBody201ActionStatusEnumStringError
    | PostNetworksIdActionsDeleteRouteResponseBody201ActionStatusEnumStringRunning
    | PostNetworksIdActionsDeleteRouteResponseBody201ActionStatusEnumStringSuccess
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostNetworksIdActionsDeleteRouteResponseBody201ActionStatus
    where toJSON (PostNetworksIdActionsDeleteRouteResponseBody201ActionStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostNetworksIdActionsDeleteRouteResponseBody201ActionStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostNetworksIdActionsDeleteRouteResponseBody201ActionStatusEnumStringError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error"
          toJSON (PostNetworksIdActionsDeleteRouteResponseBody201ActionStatusEnumStringRunning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running"
          toJSON (PostNetworksIdActionsDeleteRouteResponseBody201ActionStatusEnumStringSuccess) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success"
instance Data.Aeson.FromJSON PostNetworksIdActionsDeleteRouteResponseBody201ActionStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error")
                                          then PostNetworksIdActionsDeleteRouteResponseBody201ActionStatusEnumStringError
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running")
                                                then PostNetworksIdActionsDeleteRouteResponseBody201ActionStatusEnumStringRunning
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success")
                                                      then PostNetworksIdActionsDeleteRouteResponseBody201ActionStatusEnumStringSuccess
                                                      else PostNetworksIdActionsDeleteRouteResponseBody201ActionStatusEnumOther val)
