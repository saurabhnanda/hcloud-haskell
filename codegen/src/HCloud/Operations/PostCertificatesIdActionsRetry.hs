-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation postCertificates_Id_ActionsRetry
module HCloud.Operations.PostCertificatesIdActionsRetry where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > POST /certificates/{id}/actions/retry
-- 
-- Retry a failed Certificate issuance or renewal.
-- 
-- Only applicable if the type of the Certificate is \`managed\` and the issuance or renewal status is \`failed\`.
-- 
-- \#\#\#\# Call specific error codes
-- 
-- | Code                                                    | Description                                                               |
-- |---------------------------------------------------------|---------------------------------------------------------------------------|
-- | \`caa_record_does_not_allow_ca\`                          | CAA record does not allow certificate authority                           |
-- | \`ca_dns_validation_failed\`                              | Certificate Authority: DNS validation failed                              |
-- | \`ca_too_many_authorizations_failed_recently\`            | Certificate Authority: Too many authorizations failed recently            |
-- | \`ca_too_many_certificates_issued_for_registered_domain\` | Certificate Authority: Too many certificates issued for registered domain |
-- | \`ca_too_many_duplicate_certificates\`                    | Certificate Authority: Too many duplicate certificates                    |
-- | \`could_not_verify_domain_delegated_to_zone\`             | Could not verify domain delegated to zone                                 |
-- | \`dns_zone_not_found\`                                    | DNS zone not found                                                        |
-- | \`dns_zone_is_secondary_zone\`                            | DNS zone is a secondary zone                                              |
postCertificates_Id_ActionsRetry :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer                                                                                                                     -- ^ id: ID of the Certificate
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response PostCertificatesIdActionsRetryResponse))   -- ^ Monad containing the result of the operation
postCertificates_Id_ActionsRetry config
                                 id = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostCertificatesIdActionsRetryResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostCertificatesIdActionsRetryResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            PostCertificatesIdActionsRetryResponseBody201)
                                                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/certificates/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/retry"))) [])
-- | > POST /certificates/{id}/actions/retry
-- 
-- The same as 'postCertificates_Id_ActionsRetry' but returns the raw 'Data.ByteString.Char8.ByteString'
postCertificates_Id_ActionsRetryRaw :: forall m s . (HCloud.Common.MonadHTTP m,
                                                     HCloud.Common.SecurityScheme s) =>
                                       HCloud.Common.Configuration s ->
                                       GHC.Integer.Type.Integer ->
                                       m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                             (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postCertificates_Id_ActionsRetryRaw config
                                    id = GHC.Base.id (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/certificates/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/retry"))) [])
-- | > POST /certificates/{id}/actions/retry
-- 
-- Monadic version of 'postCertificates_Id_ActionsRetry' (use with 'HCloud.Common.runWithConfiguration')
postCertificates_Id_ActionsRetryM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                   HCloud.Common.SecurityScheme s) =>
                                     GHC.Integer.Type.Integer ->
                                     Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                        m
                                                                        (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                            (Network.HTTP.Client.Types.Response PostCertificatesIdActionsRetryResponse))
postCertificates_Id_ActionsRetryM id = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostCertificatesIdActionsRetryResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostCertificatesIdActionsRetryResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             PostCertificatesIdActionsRetryResponseBody201)
                                                                                                                                                                                                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/certificates/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/retry"))) [])
-- | > POST /certificates/{id}/actions/retry
-- 
-- Monadic version of 'postCertificates_Id_ActionsRetryRaw' (use with 'HCloud.Common.runWithConfiguration')
postCertificates_Id_ActionsRetryRawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                      HCloud.Common.SecurityScheme s) =>
                                        GHC.Integer.Type.Integer ->
                                        Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                           m
                                                                           (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                               (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postCertificates_Id_ActionsRetryRawM id = GHC.Base.id (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/certificates/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/retry"))) [])
-- | Represents a response of the operation 'postCertificates_Id_ActionsRetry'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostCertificatesIdActionsRetryResponseError' is used.
data PostCertificatesIdActionsRetryResponse =                                                
   PostCertificatesIdActionsRetryResponseError GHC.Base.String                               -- ^ Means either no matching case available or a parse error
  | PostCertificatesIdActionsRetryResponse201 PostCertificatesIdActionsRetryResponseBody201  -- ^ The \`action\` key contains the resulting Action
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema PostCertificatesIdActionsRetryResponseBody201
-- 
-- 
data PostCertificatesIdActionsRetryResponseBody201 = PostCertificatesIdActionsRetryResponseBody201 {
  -- | action
  postCertificatesIdActionsRetryResponseBody201Action :: PostCertificatesIdActionsRetryResponseBody201Action
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostCertificatesIdActionsRetryResponseBody201
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "action" (postCertificatesIdActionsRetryResponseBody201Action obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "action" (postCertificatesIdActionsRetryResponseBody201Action obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostCertificatesIdActionsRetryResponseBody201
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostCertificatesIdActionsRetryResponseBody201" (\obj -> GHC.Base.pure PostCertificatesIdActionsRetryResponseBody201 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "action"))
-- | Defines the data type for the schema PostCertificatesIdActionsRetryResponseBody201Action
-- 
-- 
data PostCertificatesIdActionsRetryResponseBody201Action = PostCertificatesIdActionsRetryResponseBody201Action {
  -- | command: Command executed in the Action
  postCertificatesIdActionsRetryResponseBody201ActionCommand :: Data.Text.Internal.Text
  -- | error: Error message for the Action if error occurred, otherwise null
  , postCertificatesIdActionsRetryResponseBody201ActionError :: PostCertificatesIdActionsRetryResponseBody201ActionError
  -- | finished: Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
  , postCertificatesIdActionsRetryResponseBody201ActionFinished :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , postCertificatesIdActionsRetryResponseBody201ActionId :: GHC.Integer.Type.Integer
  -- | progress: Progress of Action in percent
  , postCertificatesIdActionsRetryResponseBody201ActionProgress :: GHC.Types.Double
  -- | resources: Resources the Action relates to
  , postCertificatesIdActionsRetryResponseBody201ActionResources :: ([] PostCertificatesIdActionsRetryResponseBody201ActionResources)
  -- | started: Point in time when the Action was started (in ISO-8601 format)
  , postCertificatesIdActionsRetryResponseBody201ActionStarted :: Data.Text.Internal.Text
  -- | status: Status of the Action
  , postCertificatesIdActionsRetryResponseBody201ActionStatus :: PostCertificatesIdActionsRetryResponseBody201ActionStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostCertificatesIdActionsRetryResponseBody201Action
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "command" (postCertificatesIdActionsRetryResponseBody201ActionCommand obj) : (Data.Aeson..=) "error" (postCertificatesIdActionsRetryResponseBody201ActionError obj) : (Data.Aeson..=) "finished" (postCertificatesIdActionsRetryResponseBody201ActionFinished obj) : (Data.Aeson..=) "id" (postCertificatesIdActionsRetryResponseBody201ActionId obj) : (Data.Aeson..=) "progress" (postCertificatesIdActionsRetryResponseBody201ActionProgress obj) : (Data.Aeson..=) "resources" (postCertificatesIdActionsRetryResponseBody201ActionResources obj) : (Data.Aeson..=) "started" (postCertificatesIdActionsRetryResponseBody201ActionStarted obj) : (Data.Aeson..=) "status" (postCertificatesIdActionsRetryResponseBody201ActionStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "command" (postCertificatesIdActionsRetryResponseBody201ActionCommand obj) GHC.Base.<> ((Data.Aeson..=) "error" (postCertificatesIdActionsRetryResponseBody201ActionError obj) GHC.Base.<> ((Data.Aeson..=) "finished" (postCertificatesIdActionsRetryResponseBody201ActionFinished obj) GHC.Base.<> ((Data.Aeson..=) "id" (postCertificatesIdActionsRetryResponseBody201ActionId obj) GHC.Base.<> ((Data.Aeson..=) "progress" (postCertificatesIdActionsRetryResponseBody201ActionProgress obj) GHC.Base.<> ((Data.Aeson..=) "resources" (postCertificatesIdActionsRetryResponseBody201ActionResources obj) GHC.Base.<> ((Data.Aeson..=) "started" (postCertificatesIdActionsRetryResponseBody201ActionStarted obj) GHC.Base.<> (Data.Aeson..=) "status" (postCertificatesIdActionsRetryResponseBody201ActionStatus obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostCertificatesIdActionsRetryResponseBody201Action
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostCertificatesIdActionsRetryResponseBody201Action" (\obj -> (((((((GHC.Base.pure PostCertificatesIdActionsRetryResponseBody201Action GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "command")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "finished")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "started")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Defines the data type for the schema PostCertificatesIdActionsRetryResponseBody201ActionError
-- 
-- Error message for the Action if error occurred, otherwise null
data PostCertificatesIdActionsRetryResponseBody201ActionError = PostCertificatesIdActionsRetryResponseBody201ActionError {
  -- | code: Fixed machine readable code
  postCertificatesIdActionsRetryResponseBody201ActionErrorCode :: Data.Text.Internal.Text
  -- | message: Humanized error message
  , postCertificatesIdActionsRetryResponseBody201ActionErrorMessage :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostCertificatesIdActionsRetryResponseBody201ActionError
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "code" (postCertificatesIdActionsRetryResponseBody201ActionErrorCode obj) : (Data.Aeson..=) "message" (postCertificatesIdActionsRetryResponseBody201ActionErrorMessage obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "code" (postCertificatesIdActionsRetryResponseBody201ActionErrorCode obj) GHC.Base.<> (Data.Aeson..=) "message" (postCertificatesIdActionsRetryResponseBody201ActionErrorMessage obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostCertificatesIdActionsRetryResponseBody201ActionError
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostCertificatesIdActionsRetryResponseBody201ActionError" (\obj -> (GHC.Base.pure PostCertificatesIdActionsRetryResponseBody201ActionError GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Defines the data type for the schema PostCertificatesIdActionsRetryResponseBody201ActionResources
-- 
-- 
data PostCertificatesIdActionsRetryResponseBody201ActionResources = PostCertificatesIdActionsRetryResponseBody201ActionResources {
  -- | id: ID of the Resource
  postCertificatesIdActionsRetryResponseBody201ActionResourcesId :: GHC.Integer.Type.Integer
  -- | type: Type of resource referenced
  , postCertificatesIdActionsRetryResponseBody201ActionResourcesType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostCertificatesIdActionsRetryResponseBody201ActionResources
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (postCertificatesIdActionsRetryResponseBody201ActionResourcesId obj) : (Data.Aeson..=) "type" (postCertificatesIdActionsRetryResponseBody201ActionResourcesType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (postCertificatesIdActionsRetryResponseBody201ActionResourcesId obj) GHC.Base.<> (Data.Aeson..=) "type" (postCertificatesIdActionsRetryResponseBody201ActionResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostCertificatesIdActionsRetryResponseBody201ActionResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostCertificatesIdActionsRetryResponseBody201ActionResources" (\obj -> (GHC.Base.pure PostCertificatesIdActionsRetryResponseBody201ActionResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema PostCertificatesIdActionsRetryResponseBody201ActionStatus
-- 
-- Status of the Action
data PostCertificatesIdActionsRetryResponseBody201ActionStatus
    = PostCertificatesIdActionsRetryResponseBody201ActionStatusEnumOther Data.Aeson.Types.Internal.Value
    | PostCertificatesIdActionsRetryResponseBody201ActionStatusEnumTyped Data.Text.Internal.Text
    | PostCertificatesIdActionsRetryResponseBody201ActionStatusEnumStringError
    | PostCertificatesIdActionsRetryResponseBody201ActionStatusEnumStringRunning
    | PostCertificatesIdActionsRetryResponseBody201ActionStatusEnumStringSuccess
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostCertificatesIdActionsRetryResponseBody201ActionStatus
    where toJSON (PostCertificatesIdActionsRetryResponseBody201ActionStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostCertificatesIdActionsRetryResponseBody201ActionStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostCertificatesIdActionsRetryResponseBody201ActionStatusEnumStringError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error"
          toJSON (PostCertificatesIdActionsRetryResponseBody201ActionStatusEnumStringRunning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running"
          toJSON (PostCertificatesIdActionsRetryResponseBody201ActionStatusEnumStringSuccess) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success"
instance Data.Aeson.FromJSON PostCertificatesIdActionsRetryResponseBody201ActionStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error")
                                          then PostCertificatesIdActionsRetryResponseBody201ActionStatusEnumStringError
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running")
                                                then PostCertificatesIdActionsRetryResponseBody201ActionStatusEnumStringRunning
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success")
                                                      then PostCertificatesIdActionsRetryResponseBody201ActionStatusEnumStringSuccess
                                                      else PostCertificatesIdActionsRetryResponseBody201ActionStatusEnumOther val)
