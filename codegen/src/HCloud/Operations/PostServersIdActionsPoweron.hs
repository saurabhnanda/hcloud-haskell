-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation postServers_Id_ActionsPoweron
module HCloud.Operations.PostServersIdActionsPoweron where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > POST /servers/{id}/actions/poweron
-- 
-- Starts a Server by turning its power on.
postServers_Id_ActionsPoweron :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer                                                                                                                  -- ^ id: ID of the Server
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response PostServersIdActionsPoweronResponse))   -- ^ Monad containing the result of the operation
postServers_Id_ActionsPoweron config
                              id = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostServersIdActionsPoweronResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostServersIdActionsPoweronResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   PostServersIdActionsPoweronResponseBody201)
                                                                                                                                                                                                        | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/servers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/poweron"))) [])
-- | > POST /servers/{id}/actions/poweron
-- 
-- The same as 'postServers_Id_ActionsPoweron' but returns the raw 'Data.ByteString.Char8.ByteString'
postServers_Id_ActionsPoweronRaw :: forall m s . (HCloud.Common.MonadHTTP m,
                                                  HCloud.Common.SecurityScheme s) =>
                                    HCloud.Common.Configuration s ->
                                    GHC.Integer.Type.Integer ->
                                    m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                          (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postServers_Id_ActionsPoweronRaw config
                                 id = GHC.Base.id (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/servers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/poweron"))) [])
-- | > POST /servers/{id}/actions/poweron
-- 
-- Monadic version of 'postServers_Id_ActionsPoweron' (use with 'HCloud.Common.runWithConfiguration')
postServers_Id_ActionsPoweronM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                HCloud.Common.SecurityScheme s) =>
                                  GHC.Integer.Type.Integer ->
                                  Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                     m
                                                                     (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                         (Network.HTTP.Client.Types.Response PostServersIdActionsPoweronResponse))
postServers_Id_ActionsPoweronM id = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostServersIdActionsPoweronResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostServersIdActionsPoweronResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    PostServersIdActionsPoweronResponseBody201)
                                                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/servers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/poweron"))) [])
-- | > POST /servers/{id}/actions/poweron
-- 
-- Monadic version of 'postServers_Id_ActionsPoweronRaw' (use with 'HCloud.Common.runWithConfiguration')
postServers_Id_ActionsPoweronRawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                   HCloud.Common.SecurityScheme s) =>
                                     GHC.Integer.Type.Integer ->
                                     Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                        m
                                                                        (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                            (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postServers_Id_ActionsPoweronRawM id = GHC.Base.id (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/servers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/poweron"))) [])
-- | Represents a response of the operation 'postServers_Id_ActionsPoweron'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostServersIdActionsPoweronResponseError' is used.
data PostServersIdActionsPoweronResponse =                                             
   PostServersIdActionsPoweronResponseError GHC.Base.String                            -- ^ Means either no matching case available or a parse error
  | PostServersIdActionsPoweronResponse201 PostServersIdActionsPoweronResponseBody201  -- ^ The \`action\` key in the reply contains an Action object with this structure
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema PostServersIdActionsPoweronResponseBody201
-- 
-- 
data PostServersIdActionsPoweronResponseBody201 = PostServersIdActionsPoweronResponseBody201 {
  -- | action
  postServersIdActionsPoweronResponseBody201Action :: PostServersIdActionsPoweronResponseBody201Action
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsPoweronResponseBody201
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "action" (postServersIdActionsPoweronResponseBody201Action obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "action" (postServersIdActionsPoweronResponseBody201Action obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersIdActionsPoweronResponseBody201
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersIdActionsPoweronResponseBody201" (\obj -> GHC.Base.pure PostServersIdActionsPoweronResponseBody201 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "action"))
-- | Defines the data type for the schema PostServersIdActionsPoweronResponseBody201Action
-- 
-- 
data PostServersIdActionsPoweronResponseBody201Action = PostServersIdActionsPoweronResponseBody201Action {
  -- | command: Command executed in the Action
  postServersIdActionsPoweronResponseBody201ActionCommand :: Data.Text.Internal.Text
  -- | error: Error message for the Action if error occurred, otherwise null
  , postServersIdActionsPoweronResponseBody201ActionError :: PostServersIdActionsPoweronResponseBody201ActionError
  -- | finished: Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
  , postServersIdActionsPoweronResponseBody201ActionFinished :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , postServersIdActionsPoweronResponseBody201ActionId :: GHC.Integer.Type.Integer
  -- | progress: Progress of Action in percent
  , postServersIdActionsPoweronResponseBody201ActionProgress :: GHC.Types.Double
  -- | resources: Resources the Action relates to
  , postServersIdActionsPoweronResponseBody201ActionResources :: ([] PostServersIdActionsPoweronResponseBody201ActionResources)
  -- | started: Point in time when the Action was started (in ISO-8601 format)
  , postServersIdActionsPoweronResponseBody201ActionStarted :: Data.Text.Internal.Text
  -- | status: Status of the Action
  , postServersIdActionsPoweronResponseBody201ActionStatus :: PostServersIdActionsPoweronResponseBody201ActionStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsPoweronResponseBody201Action
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "command" (postServersIdActionsPoweronResponseBody201ActionCommand obj) : (Data.Aeson..=) "error" (postServersIdActionsPoweronResponseBody201ActionError obj) : (Data.Aeson..=) "finished" (postServersIdActionsPoweronResponseBody201ActionFinished obj) : (Data.Aeson..=) "id" (postServersIdActionsPoweronResponseBody201ActionId obj) : (Data.Aeson..=) "progress" (postServersIdActionsPoweronResponseBody201ActionProgress obj) : (Data.Aeson..=) "resources" (postServersIdActionsPoweronResponseBody201ActionResources obj) : (Data.Aeson..=) "started" (postServersIdActionsPoweronResponseBody201ActionStarted obj) : (Data.Aeson..=) "status" (postServersIdActionsPoweronResponseBody201ActionStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "command" (postServersIdActionsPoweronResponseBody201ActionCommand obj) GHC.Base.<> ((Data.Aeson..=) "error" (postServersIdActionsPoweronResponseBody201ActionError obj) GHC.Base.<> ((Data.Aeson..=) "finished" (postServersIdActionsPoweronResponseBody201ActionFinished obj) GHC.Base.<> ((Data.Aeson..=) "id" (postServersIdActionsPoweronResponseBody201ActionId obj) GHC.Base.<> ((Data.Aeson..=) "progress" (postServersIdActionsPoweronResponseBody201ActionProgress obj) GHC.Base.<> ((Data.Aeson..=) "resources" (postServersIdActionsPoweronResponseBody201ActionResources obj) GHC.Base.<> ((Data.Aeson..=) "started" (postServersIdActionsPoweronResponseBody201ActionStarted obj) GHC.Base.<> (Data.Aeson..=) "status" (postServersIdActionsPoweronResponseBody201ActionStatus obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersIdActionsPoweronResponseBody201Action
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersIdActionsPoweronResponseBody201Action" (\obj -> (((((((GHC.Base.pure PostServersIdActionsPoweronResponseBody201Action GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "command")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "finished")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "started")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Defines the data type for the schema PostServersIdActionsPoweronResponseBody201ActionError
-- 
-- Error message for the Action if error occurred, otherwise null
data PostServersIdActionsPoweronResponseBody201ActionError = PostServersIdActionsPoweronResponseBody201ActionError {
  -- | code: Fixed machine readable code
  postServersIdActionsPoweronResponseBody201ActionErrorCode :: Data.Text.Internal.Text
  -- | message: Humanized error message
  , postServersIdActionsPoweronResponseBody201ActionErrorMessage :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsPoweronResponseBody201ActionError
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "code" (postServersIdActionsPoweronResponseBody201ActionErrorCode obj) : (Data.Aeson..=) "message" (postServersIdActionsPoweronResponseBody201ActionErrorMessage obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "code" (postServersIdActionsPoweronResponseBody201ActionErrorCode obj) GHC.Base.<> (Data.Aeson..=) "message" (postServersIdActionsPoweronResponseBody201ActionErrorMessage obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersIdActionsPoweronResponseBody201ActionError
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersIdActionsPoweronResponseBody201ActionError" (\obj -> (GHC.Base.pure PostServersIdActionsPoweronResponseBody201ActionError GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Defines the data type for the schema PostServersIdActionsPoweronResponseBody201ActionResources
-- 
-- 
data PostServersIdActionsPoweronResponseBody201ActionResources = PostServersIdActionsPoweronResponseBody201ActionResources {
  -- | id: ID of the Resource
  postServersIdActionsPoweronResponseBody201ActionResourcesId :: GHC.Integer.Type.Integer
  -- | type: Type of resource referenced
  , postServersIdActionsPoweronResponseBody201ActionResourcesType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsPoweronResponseBody201ActionResources
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (postServersIdActionsPoweronResponseBody201ActionResourcesId obj) : (Data.Aeson..=) "type" (postServersIdActionsPoweronResponseBody201ActionResourcesType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (postServersIdActionsPoweronResponseBody201ActionResourcesId obj) GHC.Base.<> (Data.Aeson..=) "type" (postServersIdActionsPoweronResponseBody201ActionResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersIdActionsPoweronResponseBody201ActionResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersIdActionsPoweronResponseBody201ActionResources" (\obj -> (GHC.Base.pure PostServersIdActionsPoweronResponseBody201ActionResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema PostServersIdActionsPoweronResponseBody201ActionStatus
-- 
-- Status of the Action
data PostServersIdActionsPoweronResponseBody201ActionStatus
    = PostServersIdActionsPoweronResponseBody201ActionStatusEnumOther Data.Aeson.Types.Internal.Value
    | PostServersIdActionsPoweronResponseBody201ActionStatusEnumTyped Data.Text.Internal.Text
    | PostServersIdActionsPoweronResponseBody201ActionStatusEnumStringError
    | PostServersIdActionsPoweronResponseBody201ActionStatusEnumStringRunning
    | PostServersIdActionsPoweronResponseBody201ActionStatusEnumStringSuccess
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsPoweronResponseBody201ActionStatus
    where toJSON (PostServersIdActionsPoweronResponseBody201ActionStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostServersIdActionsPoweronResponseBody201ActionStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostServersIdActionsPoweronResponseBody201ActionStatusEnumStringError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error"
          toJSON (PostServersIdActionsPoweronResponseBody201ActionStatusEnumStringRunning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running"
          toJSON (PostServersIdActionsPoweronResponseBody201ActionStatusEnumStringSuccess) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success"
instance Data.Aeson.FromJSON PostServersIdActionsPoweronResponseBody201ActionStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error")
                                          then PostServersIdActionsPoweronResponseBody201ActionStatusEnumStringError
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running")
                                                then PostServersIdActionsPoweronResponseBody201ActionStatusEnumStringRunning
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success")
                                                      then PostServersIdActionsPoweronResponseBody201ActionStatusEnumStringSuccess
                                                      else PostServersIdActionsPoweronResponseBody201ActionStatusEnumOther val)
