-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postServers_Id_ActionsPoweron
module HCloud.Operations.PostServersIdActionsPoweron where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > POST /servers/{id}/actions/poweron
-- 
-- Starts a Server by turning its power on.
postServers_Id_ActionsPoweron :: forall m . HCloud.Common.MonadHTTP m => GHC.Types.Int -- ^ id: ID of the Server
  -> HCloud.Common.HttpT m (Network.HTTP.Client.Types.Response PostServersIdActionsPoweronResponse) -- ^ Monadic computation which returns the result of the operation
postServers_Id_ActionsPoweron id = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostServersIdActionsPoweronResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostServersIdActionsPoweronResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                    PostServersIdActionsPoweronResponseBody201)
                                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/servers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/poweron"))) GHC.Base.mempty)
-- | Represents a response of the operation 'postServers_Id_ActionsPoweron'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostServersIdActionsPoweronResponseError' is used.
data PostServersIdActionsPoweronResponse =
   PostServersIdActionsPoweronResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostServersIdActionsPoweronResponse201 PostServersIdActionsPoweronResponseBody201 -- ^ The \`action\` key in the reply contains an Action object with this structure
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/servers\/{id}\/actions\/poweron.POST.responses.201.content.application\/json.schema@ in the specification.
-- 
-- 
data PostServersIdActionsPoweronResponseBody201 = PostServersIdActionsPoweronResponseBody201 {
  -- | action
  postServersIdActionsPoweronResponseBody201Action :: PostServersIdActionsPoweronResponseBody201Action
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersIdActionsPoweronResponseBody201
    where toJSON obj = Data.Aeson.Types.Internal.object ("action" Data.Aeson.Types.ToJSON..= postServersIdActionsPoweronResponseBody201Action obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("action" Data.Aeson.Types.ToJSON..= postServersIdActionsPoweronResponseBody201Action obj)
instance Data.Aeson.Types.FromJSON.FromJSON PostServersIdActionsPoweronResponseBody201
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersIdActionsPoweronResponseBody201" (\obj -> GHC.Base.pure PostServersIdActionsPoweronResponseBody201 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "action"))
-- | Create a new 'PostServersIdActionsPoweronResponseBody201' with all required fields.
mkPostServersIdActionsPoweronResponseBody201 :: PostServersIdActionsPoweronResponseBody201Action -- ^ 'postServersIdActionsPoweronResponseBody201Action'
  -> PostServersIdActionsPoweronResponseBody201
mkPostServersIdActionsPoweronResponseBody201 postServersIdActionsPoweronResponseBody201Action = PostServersIdActionsPoweronResponseBody201{postServersIdActionsPoweronResponseBody201Action = postServersIdActionsPoweronResponseBody201Action}
-- | Defines the object schema located at @paths.\/servers\/{id}\/actions\/poweron.POST.responses.201.content.application\/json.schema.properties.action@ in the specification.
-- 
-- 
data PostServersIdActionsPoweronResponseBody201Action = PostServersIdActionsPoweronResponseBody201Action {
  -- | command: Command executed in the Action
  postServersIdActionsPoweronResponseBody201ActionCommand :: Data.Text.Internal.Text
  -- | error: Error message for the Action if error occurred, otherwise null
  , postServersIdActionsPoweronResponseBody201ActionError :: (GHC.Maybe.Maybe PostServersIdActionsPoweronResponseBody201ActionError)
  -- | finished: Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
  , postServersIdActionsPoweronResponseBody201ActionFinished :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | id: ID of the Resource
  , postServersIdActionsPoweronResponseBody201ActionId :: GHC.Types.Int
  -- | progress: Progress of Action in percent
  , postServersIdActionsPoweronResponseBody201ActionProgress :: GHC.Types.Double
  -- | resources: Resources the Action relates to
  , postServersIdActionsPoweronResponseBody201ActionResources :: ([PostServersIdActionsPoweronResponseBody201ActionResources])
  -- | started: Point in time when the Action was started (in ISO-8601 format)
  , postServersIdActionsPoweronResponseBody201ActionStarted :: Data.Text.Internal.Text
  -- | status: Status of the Action
  , postServersIdActionsPoweronResponseBody201ActionStatus :: PostServersIdActionsPoweronResponseBody201ActionStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersIdActionsPoweronResponseBody201Action
    where toJSON obj = Data.Aeson.Types.Internal.object ("command" Data.Aeson.Types.ToJSON..= postServersIdActionsPoweronResponseBody201ActionCommand obj : "error" Data.Aeson.Types.ToJSON..= postServersIdActionsPoweronResponseBody201ActionError obj : "finished" Data.Aeson.Types.ToJSON..= postServersIdActionsPoweronResponseBody201ActionFinished obj : "id" Data.Aeson.Types.ToJSON..= postServersIdActionsPoweronResponseBody201ActionId obj : "progress" Data.Aeson.Types.ToJSON..= postServersIdActionsPoweronResponseBody201ActionProgress obj : "resources" Data.Aeson.Types.ToJSON..= postServersIdActionsPoweronResponseBody201ActionResources obj : "started" Data.Aeson.Types.ToJSON..= postServersIdActionsPoweronResponseBody201ActionStarted obj : "status" Data.Aeson.Types.ToJSON..= postServersIdActionsPoweronResponseBody201ActionStatus obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("command" Data.Aeson.Types.ToJSON..= postServersIdActionsPoweronResponseBody201ActionCommand obj) GHC.Base.<> (("error" Data.Aeson.Types.ToJSON..= postServersIdActionsPoweronResponseBody201ActionError obj) GHC.Base.<> (("finished" Data.Aeson.Types.ToJSON..= postServersIdActionsPoweronResponseBody201ActionFinished obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= postServersIdActionsPoweronResponseBody201ActionId obj) GHC.Base.<> (("progress" Data.Aeson.Types.ToJSON..= postServersIdActionsPoweronResponseBody201ActionProgress obj) GHC.Base.<> (("resources" Data.Aeson.Types.ToJSON..= postServersIdActionsPoweronResponseBody201ActionResources obj) GHC.Base.<> (("started" Data.Aeson.Types.ToJSON..= postServersIdActionsPoweronResponseBody201ActionStarted obj) GHC.Base.<> ("status" Data.Aeson.Types.ToJSON..= postServersIdActionsPoweronResponseBody201ActionStatus obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersIdActionsPoweronResponseBody201Action
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersIdActionsPoweronResponseBody201Action" (\obj -> (((((((GHC.Base.pure PostServersIdActionsPoweronResponseBody201Action GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "command")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "finished")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "started")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Create a new 'PostServersIdActionsPoweronResponseBody201Action' with all required fields.
mkPostServersIdActionsPoweronResponseBody201Action :: Data.Text.Internal.Text -- ^ 'postServersIdActionsPoweronResponseBody201ActionCommand'
  -> GHC.Maybe.Maybe PostServersIdActionsPoweronResponseBody201ActionError -- ^ 'postServersIdActionsPoweronResponseBody201ActionError'
  -> GHC.Maybe.Maybe Data.Text.Internal.Text -- ^ 'postServersIdActionsPoweronResponseBody201ActionFinished'
  -> GHC.Types.Int -- ^ 'postServersIdActionsPoweronResponseBody201ActionId'
  -> GHC.Types.Double -- ^ 'postServersIdActionsPoweronResponseBody201ActionProgress'
  -> [PostServersIdActionsPoweronResponseBody201ActionResources] -- ^ 'postServersIdActionsPoweronResponseBody201ActionResources'
  -> Data.Text.Internal.Text -- ^ 'postServersIdActionsPoweronResponseBody201ActionStarted'
  -> PostServersIdActionsPoweronResponseBody201ActionStatus -- ^ 'postServersIdActionsPoweronResponseBody201ActionStatus'
  -> PostServersIdActionsPoweronResponseBody201Action
mkPostServersIdActionsPoweronResponseBody201Action postServersIdActionsPoweronResponseBody201ActionCommand postServersIdActionsPoweronResponseBody201ActionError postServersIdActionsPoweronResponseBody201ActionFinished postServersIdActionsPoweronResponseBody201ActionId postServersIdActionsPoweronResponseBody201ActionProgress postServersIdActionsPoweronResponseBody201ActionResources postServersIdActionsPoweronResponseBody201ActionStarted postServersIdActionsPoweronResponseBody201ActionStatus = PostServersIdActionsPoweronResponseBody201Action{postServersIdActionsPoweronResponseBody201ActionCommand = postServersIdActionsPoweronResponseBody201ActionCommand,
postServersIdActionsPoweronResponseBody201ActionError = postServersIdActionsPoweronResponseBody201ActionError,
postServersIdActionsPoweronResponseBody201ActionFinished = postServersIdActionsPoweronResponseBody201ActionFinished,
postServersIdActionsPoweronResponseBody201ActionId = postServersIdActionsPoweronResponseBody201ActionId,
postServersIdActionsPoweronResponseBody201ActionProgress = postServersIdActionsPoweronResponseBody201ActionProgress,
postServersIdActionsPoweronResponseBody201ActionResources = postServersIdActionsPoweronResponseBody201ActionResources,
postServersIdActionsPoweronResponseBody201ActionStarted = postServersIdActionsPoweronResponseBody201ActionStarted,
postServersIdActionsPoweronResponseBody201ActionStatus = postServersIdActionsPoweronResponseBody201ActionStatus}
-- | Defines the object schema located at @paths.\/servers\/{id}\/actions\/poweron.POST.responses.201.content.application\/json.schema.properties.action.properties.error@ in the specification.
-- 
-- Error message for the Action if error occurred, otherwise null
data PostServersIdActionsPoweronResponseBody201ActionError = PostServersIdActionsPoweronResponseBody201ActionError {
  -- | code: Fixed machine readable code
  postServersIdActionsPoweronResponseBody201ActionErrorCode :: Data.Text.Internal.Text
  -- | message: Humanized error message
  , postServersIdActionsPoweronResponseBody201ActionErrorMessage :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersIdActionsPoweronResponseBody201ActionError
    where toJSON obj = Data.Aeson.Types.Internal.object ("code" Data.Aeson.Types.ToJSON..= postServersIdActionsPoweronResponseBody201ActionErrorCode obj : "message" Data.Aeson.Types.ToJSON..= postServersIdActionsPoweronResponseBody201ActionErrorMessage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("code" Data.Aeson.Types.ToJSON..= postServersIdActionsPoweronResponseBody201ActionErrorCode obj) GHC.Base.<> ("message" Data.Aeson.Types.ToJSON..= postServersIdActionsPoweronResponseBody201ActionErrorMessage obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersIdActionsPoweronResponseBody201ActionError
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersIdActionsPoweronResponseBody201ActionError" (\obj -> (GHC.Base.pure PostServersIdActionsPoweronResponseBody201ActionError GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'PostServersIdActionsPoweronResponseBody201ActionError' with all required fields.
mkPostServersIdActionsPoweronResponseBody201ActionError :: Data.Text.Internal.Text -- ^ 'postServersIdActionsPoweronResponseBody201ActionErrorCode'
  -> Data.Text.Internal.Text -- ^ 'postServersIdActionsPoweronResponseBody201ActionErrorMessage'
  -> PostServersIdActionsPoweronResponseBody201ActionError
mkPostServersIdActionsPoweronResponseBody201ActionError postServersIdActionsPoweronResponseBody201ActionErrorCode postServersIdActionsPoweronResponseBody201ActionErrorMessage = PostServersIdActionsPoweronResponseBody201ActionError{postServersIdActionsPoweronResponseBody201ActionErrorCode = postServersIdActionsPoweronResponseBody201ActionErrorCode,
                                                                                                                                                                                                                                       postServersIdActionsPoweronResponseBody201ActionErrorMessage = postServersIdActionsPoweronResponseBody201ActionErrorMessage}
-- | Defines the object schema located at @paths.\/servers\/{id}\/actions\/poweron.POST.responses.201.content.application\/json.schema.properties.action.properties.resources.items@ in the specification.
-- 
-- 
data PostServersIdActionsPoweronResponseBody201ActionResources = PostServersIdActionsPoweronResponseBody201ActionResources {
  -- | id: ID of the Resource
  postServersIdActionsPoweronResponseBody201ActionResourcesId :: GHC.Types.Int
  -- | type: Type of resource referenced
  , postServersIdActionsPoweronResponseBody201ActionResourcesType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersIdActionsPoweronResponseBody201ActionResources
    where toJSON obj = Data.Aeson.Types.Internal.object ("id" Data.Aeson.Types.ToJSON..= postServersIdActionsPoweronResponseBody201ActionResourcesId obj : "type" Data.Aeson.Types.ToJSON..= postServersIdActionsPoweronResponseBody201ActionResourcesType obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("id" Data.Aeson.Types.ToJSON..= postServersIdActionsPoweronResponseBody201ActionResourcesId obj) GHC.Base.<> ("type" Data.Aeson.Types.ToJSON..= postServersIdActionsPoweronResponseBody201ActionResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersIdActionsPoweronResponseBody201ActionResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersIdActionsPoweronResponseBody201ActionResources" (\obj -> (GHC.Base.pure PostServersIdActionsPoweronResponseBody201ActionResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Create a new 'PostServersIdActionsPoweronResponseBody201ActionResources' with all required fields.
mkPostServersIdActionsPoweronResponseBody201ActionResources :: GHC.Types.Int -- ^ 'postServersIdActionsPoweronResponseBody201ActionResourcesId'
  -> Data.Text.Internal.Text -- ^ 'postServersIdActionsPoweronResponseBody201ActionResourcesType'
  -> PostServersIdActionsPoweronResponseBody201ActionResources
mkPostServersIdActionsPoweronResponseBody201ActionResources postServersIdActionsPoweronResponseBody201ActionResourcesId postServersIdActionsPoweronResponseBody201ActionResourcesType = PostServersIdActionsPoweronResponseBody201ActionResources{postServersIdActionsPoweronResponseBody201ActionResourcesId = postServersIdActionsPoweronResponseBody201ActionResourcesId,
                                                                                                                                                                                                                                                  postServersIdActionsPoweronResponseBody201ActionResourcesType = postServersIdActionsPoweronResponseBody201ActionResourcesType}
-- | Defines the enum schema located at @paths.\/servers\/{id}\/actions\/poweron.POST.responses.201.content.application\/json.schema.properties.action.properties.status@ in the specification.
-- 
-- Status of the Action
data PostServersIdActionsPoweronResponseBody201ActionStatus =
   PostServersIdActionsPoweronResponseBody201ActionStatusOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostServersIdActionsPoweronResponseBody201ActionStatusTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostServersIdActionsPoweronResponseBody201ActionStatusEnumSuccess -- ^ Represents the JSON value @"success"@
  | PostServersIdActionsPoweronResponseBody201ActionStatusEnumRunning -- ^ Represents the JSON value @"running"@
  | PostServersIdActionsPoweronResponseBody201ActionStatusEnumError -- ^ Represents the JSON value @"error"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostServersIdActionsPoweronResponseBody201ActionStatus
    where toJSON (PostServersIdActionsPoweronResponseBody201ActionStatusOther val) = val
          toJSON (PostServersIdActionsPoweronResponseBody201ActionStatusTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PostServersIdActionsPoweronResponseBody201ActionStatusEnumSuccess) = "success"
          toJSON (PostServersIdActionsPoweronResponseBody201ActionStatusEnumRunning) = "running"
          toJSON (PostServersIdActionsPoweronResponseBody201ActionStatusEnumError) = "error"
instance Data.Aeson.Types.FromJSON.FromJSON PostServersIdActionsPoweronResponseBody201ActionStatus
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "success" -> PostServersIdActionsPoweronResponseBody201ActionStatusEnumSuccess
                                            | val GHC.Classes.== "running" -> PostServersIdActionsPoweronResponseBody201ActionStatusEnumRunning
                                            | val GHC.Classes.== "error" -> PostServersIdActionsPoweronResponseBody201ActionStatusEnumError
                                            | GHC.Base.otherwise -> PostServersIdActionsPoweronResponseBody201ActionStatusOther val)
-- | > POST /servers/{id}/actions/poweron
-- 
-- The same as 'postServers_Id_ActionsPoweron' but accepts an explicit configuration.
postServers_Id_ActionsPoweronWithConfiguration :: forall m . HCloud.Common.MonadHTTP m => HCloud.Common.Configuration -- ^ The configuration to use in the request
  -> GHC.Types.Int -- ^ id: ID of the Server
  -> m (Network.HTTP.Client.Types.Response PostServersIdActionsPoweronResponse) -- ^ Monadic computation which returns the result of the operation
postServers_Id_ActionsPoweronWithConfiguration config
                                               id = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostServersIdActionsPoweronResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostServersIdActionsPoweronResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     PostServersIdActionsPoweronResponseBody201)
                                                                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/servers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/poweron"))) GHC.Base.mempty)
-- | > POST /servers/{id}/actions/poweron
-- 
-- The same as 'postServers_Id_ActionsPoweron' but returns the raw 'Data.ByteString.Char8.ByteString'.
postServers_Id_ActionsPoweronRaw :: forall m . HCloud.Common.MonadHTTP m => GHC.Types.Int -- ^ id: ID of the Server
  -> HCloud.Common.HttpT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postServers_Id_ActionsPoweronRaw id = GHC.Base.id (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/servers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/poweron"))) GHC.Base.mempty)
-- | > POST /servers/{id}/actions/poweron
-- 
-- The same as 'postServers_Id_ActionsPoweron' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postServers_Id_ActionsPoweronWithConfigurationRaw :: forall m . HCloud.Common.MonadHTTP m => HCloud.Common.Configuration -- ^ The configuration to use in the request
  -> GHC.Types.Int -- ^ id: ID of the Server
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postServers_Id_ActionsPoweronWithConfigurationRaw config
                                                  id = GHC.Base.id (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/servers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/poweron"))) GHC.Base.mempty)
