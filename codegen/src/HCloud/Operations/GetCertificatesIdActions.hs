-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation getCertificates_Id_Actions
module HCloud.Operations.GetCertificatesIdActions where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > GET /certificates/{id}/actions
-- 
-- Returns all Action objects for a Certificate. You can sort the results by using the \`sort\` URI parameter, and filter them with the \`status\` parameter.
-- 
-- Only type \`managed\` Certificates can have Actions. For type \`uploaded\` Certificates the \`actions\` key will always contain an empty array.
getCertificates_Id_Actions :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer                                                                                                               -- ^ id: ID of the Resource
  -> GHC.Maybe.Maybe Data.Text.Internal.Text                                                                                                -- ^ sort: Can be used multiple times.
  -> GHC.Maybe.Maybe Data.Text.Internal.Text                                                                                                -- ^ status: Can be used multiple times, the response will contain only Actions with specified statuses
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response GetCertificatesIdActionsResponse))   -- ^ Monad containing the result of the operation
getCertificates_Id_Actions config
                           id
                           sort
                           status = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetCertificatesIdActionsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetCertificatesIdActionsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                              GetCertificatesIdActionsResponseBody200)
                                                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/certificates/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions"))) ((Data.Text.pack "sort",
loud.Common.stringifyModel Data.Functor.<$> sort) : ((Data.Text.pack "status",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   HCloud.Common.stringifyModel Data.Functor.<$> status) : [])))
-- | > GET /certificates/{id}/actions
-- 
-- The same as 'getCertificates_Id_Actions' but returns the raw 'Data.ByteString.Char8.ByteString'
getCertificates_Id_ActionsRaw :: forall m s . (HCloud.Common.MonadHTTP m,
                                               HCloud.Common.SecurityScheme s) =>
                                 HCloud.Common.Configuration s ->
                                 GHC.Integer.Type.Integer ->
                                 GHC.Maybe.Maybe Data.Text.Internal.Text ->
                                 GHC.Maybe.Maybe Data.Text.Internal.Text ->
                                 m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                       (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getCertificates_Id_ActionsRaw config
                              id
                              sort
                              status = GHC.Base.id (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/certificates/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions"))) ((Data.Text.pack "sort",
                                                                                                                                                                                                                                                                                                                                                                                                    HCloud.Common.stringifyModel Data.Functor.<$> sort) : ((Data.Text.pack "status",
                                                                                                                                                                                                                                                                                                                                                                                                                                                             HCloud.Common.stringifyModel Data.Functor.<$> status) : [])))
-- | > GET /certificates/{id}/actions
-- 
-- Monadic version of 'getCertificates_Id_Actions' (use with 'HCloud.Common.runWithConfiguration')
getCertificates_Id_ActionsM :: forall m s . (HCloud.Common.MonadHTTP m,
                                             HCloud.Common.SecurityScheme s) =>
                               GHC.Integer.Type.Integer ->
                               GHC.Maybe.Maybe Data.Text.Internal.Text ->
                               GHC.Maybe.Maybe Data.Text.Internal.Text ->
                               Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                  m
                                                                  (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                      (Network.HTTP.Client.Types.Response GetCertificatesIdActionsResponse))
getCertificates_Id_ActionsM id
                            sort
                            status = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetCertificatesIdActionsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetCertificatesIdActionsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                               GetCertificatesIdActionsResponseBody200)
                                                                                                                                                                                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/certificates/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions"))) ((Data.Text.pack "sort",
loud.Common.stringifyModel Data.Functor.<$> sort) : ((Data.Text.pack "status",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              HCloud.Common.stringifyModel Data.Functor.<$> status) : [])))
-- | > GET /certificates/{id}/actions
-- 
-- Monadic version of 'getCertificates_Id_ActionsRaw' (use with 'HCloud.Common.runWithConfiguration')
getCertificates_Id_ActionsRawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                HCloud.Common.SecurityScheme s) =>
                                  GHC.Integer.Type.Integer ->
                                  GHC.Maybe.Maybe Data.Text.Internal.Text ->
                                  GHC.Maybe.Maybe Data.Text.Internal.Text ->
                                  Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                     m
                                                                     (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                         (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getCertificates_Id_ActionsRawM id
                               sort
                               status = GHC.Base.id (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/certificates/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions"))) ((Data.Text.pack "sort",
                                                                                                                                                                                                                                                                                                                                                                                               HCloud.Common.stringifyModel Data.Functor.<$> sort) : ((Data.Text.pack "status",
                                                                                                                                                                                                                                                                                                                                                                                                                                                        HCloud.Common.stringifyModel Data.Functor.<$> status) : [])))
-- | Represents a response of the operation 'getCertificates_Id_Actions'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetCertificatesIdActionsResponseError' is used.
data GetCertificatesIdActionsResponse =                                          
   GetCertificatesIdActionsResponseError GHC.Base.String                         -- ^ Means either no matching case available or a parse error
  | GetCertificatesIdActionsResponse200 GetCertificatesIdActionsResponseBody200  -- ^ The \`actions\` key contains a list of Actions
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema GetCertificatesIdActionsResponseBody200
-- 
-- 
data GetCertificatesIdActionsResponseBody200 = GetCertificatesIdActionsResponseBody200 {
  -- | actions
  getCertificatesIdActionsResponseBody200Actions :: ([] GetCertificatesIdActionsResponseBody200Actions)
  -- | meta
  , getCertificatesIdActionsResponseBody200Meta :: (GHC.Maybe.Maybe GetCertificatesIdActionsResponseBody200Meta)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetCertificatesIdActionsResponseBody200
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "actions" (getCertificatesIdActionsResponseBody200Actions obj) : (Data.Aeson..=) "meta" (getCertificatesIdActionsResponseBody200Meta obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "actions" (getCertificatesIdActionsResponseBody200Actions obj) GHC.Base.<> (Data.Aeson..=) "meta" (getCertificatesIdActionsResponseBody200Meta obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetCertificatesIdActionsResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetCertificatesIdActionsResponseBody200" (\obj -> (GHC.Base.pure GetCertificatesIdActionsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "actions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "meta"))
-- | Defines the data type for the schema GetCertificatesIdActionsResponseBody200Actions
-- 
-- 
data GetCertificatesIdActionsResponseBody200Actions = GetCertificatesIdActionsResponseBody200Actions {
  -- | command: Command executed in the Action
  getCertificatesIdActionsResponseBody200ActionsCommand :: Data.Text.Internal.Text
  -- | error: Error message for the Action if error occurred, otherwise null
  , getCertificatesIdActionsResponseBody200ActionsError :: GetCertificatesIdActionsResponseBody200ActionsError
  -- | finished: Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
  , getCertificatesIdActionsResponseBody200ActionsFinished :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , getCertificatesIdActionsResponseBody200ActionsId :: GHC.Integer.Type.Integer
  -- | progress: Progress of Action in percent
  , getCertificatesIdActionsResponseBody200ActionsProgress :: GHC.Types.Double
  -- | resources: Resources the Action relates to
  , getCertificatesIdActionsResponseBody200ActionsResources :: ([] GetCertificatesIdActionsResponseBody200ActionsResources)
  -- | started: Point in time when the Action was started (in ISO-8601 format)
  , getCertificatesIdActionsResponseBody200ActionsStarted :: Data.Text.Internal.Text
  -- | status: Status of the Action
  , getCertificatesIdActionsResponseBody200ActionsStatus :: GetCertificatesIdActionsResponseBody200ActionsStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetCertificatesIdActionsResponseBody200Actions
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "command" (getCertificatesIdActionsResponseBody200ActionsCommand obj) : (Data.Aeson..=) "error" (getCertificatesIdActionsResponseBody200ActionsError obj) : (Data.Aeson..=) "finished" (getCertificatesIdActionsResponseBody200ActionsFinished obj) : (Data.Aeson..=) "id" (getCertificatesIdActionsResponseBody200ActionsId obj) : (Data.Aeson..=) "progress" (getCertificatesIdActionsResponseBody200ActionsProgress obj) : (Data.Aeson..=) "resources" (getCertificatesIdActionsResponseBody200ActionsResources obj) : (Data.Aeson..=) "started" (getCertificatesIdActionsResponseBody200ActionsStarted obj) : (Data.Aeson..=) "status" (getCertificatesIdActionsResponseBody200ActionsStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "command" (getCertificatesIdActionsResponseBody200ActionsCommand obj) GHC.Base.<> ((Data.Aeson..=) "error" (getCertificatesIdActionsResponseBody200ActionsError obj) GHC.Base.<> ((Data.Aeson..=) "finished" (getCertificatesIdActionsResponseBody200ActionsFinished obj) GHC.Base.<> ((Data.Aeson..=) "id" (getCertificatesIdActionsResponseBody200ActionsId obj) GHC.Base.<> ((Data.Aeson..=) "progress" (getCertificatesIdActionsResponseBody200ActionsProgress obj) GHC.Base.<> ((Data.Aeson..=) "resources" (getCertificatesIdActionsResponseBody200ActionsResources obj) GHC.Base.<> ((Data.Aeson..=) "started" (getCertificatesIdActionsResponseBody200ActionsStarted obj) GHC.Base.<> (Data.Aeson..=) "status" (getCertificatesIdActionsResponseBody200ActionsStatus obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetCertificatesIdActionsResponseBody200Actions
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetCertificatesIdActionsResponseBody200Actions" (\obj -> (((((((GHC.Base.pure GetCertificatesIdActionsResponseBody200Actions GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "command")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "finished")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "started")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Defines the data type for the schema GetCertificatesIdActionsResponseBody200ActionsError
-- 
-- Error message for the Action if error occurred, otherwise null
data GetCertificatesIdActionsResponseBody200ActionsError = GetCertificatesIdActionsResponseBody200ActionsError {
  -- | code: Fixed machine readable code
  getCertificatesIdActionsResponseBody200ActionsErrorCode :: Data.Text.Internal.Text
  -- | message: Humanized error message
  , getCertificatesIdActionsResponseBody200ActionsErrorMessage :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetCertificatesIdActionsResponseBody200ActionsError
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "code" (getCertificatesIdActionsResponseBody200ActionsErrorCode obj) : (Data.Aeson..=) "message" (getCertificatesIdActionsResponseBody200ActionsErrorMessage obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "code" (getCertificatesIdActionsResponseBody200ActionsErrorCode obj) GHC.Base.<> (Data.Aeson..=) "message" (getCertificatesIdActionsResponseBody200ActionsErrorMessage obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetCertificatesIdActionsResponseBody200ActionsError
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetCertificatesIdActionsResponseBody200ActionsError" (\obj -> (GHC.Base.pure GetCertificatesIdActionsResponseBody200ActionsError GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Defines the data type for the schema GetCertificatesIdActionsResponseBody200ActionsResources
-- 
-- 
data GetCertificatesIdActionsResponseBody200ActionsResources = GetCertificatesIdActionsResponseBody200ActionsResources {
  -- | id: ID of the Resource
  getCertificatesIdActionsResponseBody200ActionsResourcesId :: GHC.Integer.Type.Integer
  -- | type: Type of resource referenced
  , getCertificatesIdActionsResponseBody200ActionsResourcesType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetCertificatesIdActionsResponseBody200ActionsResources
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (getCertificatesIdActionsResponseBody200ActionsResourcesId obj) : (Data.Aeson..=) "type" (getCertificatesIdActionsResponseBody200ActionsResourcesType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (getCertificatesIdActionsResponseBody200ActionsResourcesId obj) GHC.Base.<> (Data.Aeson..=) "type" (getCertificatesIdActionsResponseBody200ActionsResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetCertificatesIdActionsResponseBody200ActionsResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetCertificatesIdActionsResponseBody200ActionsResources" (\obj -> (GHC.Base.pure GetCertificatesIdActionsResponseBody200ActionsResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema GetCertificatesIdActionsResponseBody200ActionsStatus
-- 
-- Status of the Action
data GetCertificatesIdActionsResponseBody200ActionsStatus
    = GetCertificatesIdActionsResponseBody200ActionsStatusEnumOther Data.Aeson.Types.Internal.Value
    | GetCertificatesIdActionsResponseBody200ActionsStatusEnumTyped Data.Text.Internal.Text
    | GetCertificatesIdActionsResponseBody200ActionsStatusEnumStringError
    | GetCertificatesIdActionsResponseBody200ActionsStatusEnumStringRunning
    | GetCertificatesIdActionsResponseBody200ActionsStatusEnumStringSuccess
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetCertificatesIdActionsResponseBody200ActionsStatus
    where toJSON (GetCertificatesIdActionsResponseBody200ActionsStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetCertificatesIdActionsResponseBody200ActionsStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetCertificatesIdActionsResponseBody200ActionsStatusEnumStringError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error"
          toJSON (GetCertificatesIdActionsResponseBody200ActionsStatusEnumStringRunning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running"
          toJSON (GetCertificatesIdActionsResponseBody200ActionsStatusEnumStringSuccess) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success"
instance Data.Aeson.FromJSON GetCertificatesIdActionsResponseBody200ActionsStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error")
                                          then GetCertificatesIdActionsResponseBody200ActionsStatusEnumStringError
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running")
                                                then GetCertificatesIdActionsResponseBody200ActionsStatusEnumStringRunning
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success")
                                                      then GetCertificatesIdActionsResponseBody200ActionsStatusEnumStringSuccess
                                                      else GetCertificatesIdActionsResponseBody200ActionsStatusEnumOther val)
-- | Defines the data type for the schema GetCertificatesIdActionsResponseBody200Meta
-- 
-- 
data GetCertificatesIdActionsResponseBody200Meta = GetCertificatesIdActionsResponseBody200Meta {
  -- | pagination
  getCertificatesIdActionsResponseBody200MetaPagination :: GetCertificatesIdActionsResponseBody200MetaPagination
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetCertificatesIdActionsResponseBody200Meta
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "pagination" (getCertificatesIdActionsResponseBody200MetaPagination obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "pagination" (getCertificatesIdActionsResponseBody200MetaPagination obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetCertificatesIdActionsResponseBody200Meta
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetCertificatesIdActionsResponseBody200Meta" (\obj -> GHC.Base.pure GetCertificatesIdActionsResponseBody200Meta GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pagination"))
-- | Defines the data type for the schema GetCertificatesIdActionsResponseBody200MetaPagination
-- 
-- 
data GetCertificatesIdActionsResponseBody200MetaPagination = GetCertificatesIdActionsResponseBody200MetaPagination {
  -- | last_page: ID of the last page available. Can be null if the current page is the last one.
  getCertificatesIdActionsResponseBody200MetaPaginationLastPage :: GHC.Types.Double
  -- | next_page: ID of the next page. Can be null if the current page is the last one.
  , getCertificatesIdActionsResponseBody200MetaPaginationNextPage :: GHC.Types.Double
  -- | page: Current page number
  , getCertificatesIdActionsResponseBody200MetaPaginationPage :: GHC.Types.Double
  -- | per_page: Maximum number of items shown per page in the response
  , getCertificatesIdActionsResponseBody200MetaPaginationPerPage :: GHC.Types.Double
  -- | previous_page: ID of the previous page. Can be null if the current page is the first one.
  , getCertificatesIdActionsResponseBody200MetaPaginationPreviousPage :: GHC.Types.Double
  -- | total_entries: The total number of entries that exist in the database for this query. Nullable if unknown.
  , getCertificatesIdActionsResponseBody200MetaPaginationTotalEntries :: GHC.Types.Double
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetCertificatesIdActionsResponseBody200MetaPagination
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "last_page" (getCertificatesIdActionsResponseBody200MetaPaginationLastPage obj) : (Data.Aeson..=) "next_page" (getCertificatesIdActionsResponseBody200MetaPaginationNextPage obj) : (Data.Aeson..=) "page" (getCertificatesIdActionsResponseBody200MetaPaginationPage obj) : (Data.Aeson..=) "per_page" (getCertificatesIdActionsResponseBody200MetaPaginationPerPage obj) : (Data.Aeson..=) "previous_page" (getCertificatesIdActionsResponseBody200MetaPaginationPreviousPage obj) : (Data.Aeson..=) "total_entries" (getCertificatesIdActionsResponseBody200MetaPaginationTotalEntries obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "last_page" (getCertificatesIdActionsResponseBody200MetaPaginationLastPage obj) GHC.Base.<> ((Data.Aeson..=) "next_page" (getCertificatesIdActionsResponseBody200MetaPaginationNextPage obj) GHC.Base.<> ((Data.Aeson..=) "page" (getCertificatesIdActionsResponseBody200MetaPaginationPage obj) GHC.Base.<> ((Data.Aeson..=) "per_page" (getCertificatesIdActionsResponseBody200MetaPaginationPerPage obj) GHC.Base.<> ((Data.Aeson..=) "previous_page" (getCertificatesIdActionsResponseBody200MetaPaginationPreviousPage obj) GHC.Base.<> (Data.Aeson..=) "total_entries" (getCertificatesIdActionsResponseBody200MetaPaginationTotalEntries obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetCertificatesIdActionsResponseBody200MetaPagination
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetCertificatesIdActionsResponseBody200MetaPagination" (\obj -> (((((GHC.Base.pure GetCertificatesIdActionsResponseBody200MetaPagination GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "last_page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "next_page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "per_page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "previous_page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "total_entries"))
