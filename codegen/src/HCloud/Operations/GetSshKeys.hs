-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getSshKeys
module HCloud.Operations.GetSshKeys where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > GET /ssh_keys
-- 
-- Returns all SSH key objects.
getSshKeys :: forall m . HCloud.Common.MonadHTTP m => GetSshKeysParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> HCloud.Common.HttpT m (Network.HTTP.Client.Types.Response GetSshKeysResponse) -- ^ Monadic computation which returns the result of the operation
getSshKeys parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetSshKeysResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetSshKeysResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                       GetSshKeysResponseBody200)
                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/ssh_keys") [HCloud.Common.QueryParameter (Data.Text.pack "sort") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSshKeysParametersQuerySort parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                          HCloud.Common.QueryParameter (Data.Text.pack "name") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSshKeysParametersQueryName parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                          HCloud.Common.QueryParameter (Data.Text.pack "fingerprint") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSshKeysParametersQueryFingerprint parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                          HCloud.Common.QueryParameter (Data.Text.pack "label_selector") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSshKeysParametersQueryLabelSelector parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/ssh_keys.GET.parameters@ in the specification.
-- 
-- 
data GetSshKeysParameters = GetSshKeysParameters {
  -- | queryFingerprint: Represents the parameter named \'fingerprint\'
  -- 
  -- Can be used to filter SSH keys by their fingerprint. The response will only contain the SSH key matching the specified fingerprint.
  getSshKeysParametersQueryFingerprint :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | queryLabel_selector: Represents the parameter named \'label_selector\'
  -- 
  -- Can be used to filter resources by labels. The response will only contain resources matching the label selector.
  , getSshKeysParametersQueryLabelSelector :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | queryName: Represents the parameter named \'name\'
  -- 
  -- Can be used to filter resources by their name. The response will only contain the resources matching the specified name
  , getSshKeysParametersQueryName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | querySort: Represents the parameter named \'sort\'
  -- 
  -- Can be used multiple times.
  , getSshKeysParametersQuerySort :: (GHC.Maybe.Maybe GetSshKeysParametersQuerySort)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSshKeysParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("queryFingerprint" Data.Aeson.Types.ToJSON..= getSshKeysParametersQueryFingerprint obj : "queryLabel_selector" Data.Aeson.Types.ToJSON..= getSshKeysParametersQueryLabelSelector obj : "queryName" Data.Aeson.Types.ToJSON..= getSshKeysParametersQueryName obj : "querySort" Data.Aeson.Types.ToJSON..= getSshKeysParametersQuerySort obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("queryFingerprint" Data.Aeson.Types.ToJSON..= getSshKeysParametersQueryFingerprint obj) GHC.Base.<> (("queryLabel_selector" Data.Aeson.Types.ToJSON..= getSshKeysParametersQueryLabelSelector obj) GHC.Base.<> (("queryName" Data.Aeson.Types.ToJSON..= getSshKeysParametersQueryName obj) GHC.Base.<> ("querySort" Data.Aeson.Types.ToJSON..= getSshKeysParametersQuerySort obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetSshKeysParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSshKeysParameters" (\obj -> (((GHC.Base.pure GetSshKeysParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryFingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryLabel_selector")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryName")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "querySort"))
-- | Create a new 'GetSshKeysParameters' with all required fields.
mkGetSshKeysParameters :: GetSshKeysParameters
mkGetSshKeysParameters = GetSshKeysParameters{getSshKeysParametersQueryFingerprint = GHC.Maybe.Nothing,
                                              getSshKeysParametersQueryLabelSelector = GHC.Maybe.Nothing,
                                              getSshKeysParametersQueryName = GHC.Maybe.Nothing,
                                              getSshKeysParametersQuerySort = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/ssh_keys.GET.parameters.properties.querySort@ in the specification.
-- 
-- Represents the parameter named \'sort\'
-- 
-- Can be used multiple times.
data GetSshKeysParametersQuerySort =
   GetSshKeysParametersQuerySortOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetSshKeysParametersQuerySortTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetSshKeysParametersQuerySortEnumId -- ^ Represents the JSON value @"id"@
  | GetSshKeysParametersQuerySortEnumIdAsc -- ^ Represents the JSON value @"id:asc"@
  | GetSshKeysParametersQuerySortEnumIdDesc -- ^ Represents the JSON value @"id:desc"@
  | GetSshKeysParametersQuerySortEnumName -- ^ Represents the JSON value @"name"@
  | GetSshKeysParametersQuerySortEnumNameAsc -- ^ Represents the JSON value @"name:asc"@
  | GetSshKeysParametersQuerySortEnumNameDesc -- ^ Represents the JSON value @"name:desc"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSshKeysParametersQuerySort
    where toJSON (GetSshKeysParametersQuerySortOther val) = val
          toJSON (GetSshKeysParametersQuerySortTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetSshKeysParametersQuerySortEnumId) = "id"
          toJSON (GetSshKeysParametersQuerySortEnumIdAsc) = "id:asc"
          toJSON (GetSshKeysParametersQuerySortEnumIdDesc) = "id:desc"
          toJSON (GetSshKeysParametersQuerySortEnumName) = "name"
          toJSON (GetSshKeysParametersQuerySortEnumNameAsc) = "name:asc"
          toJSON (GetSshKeysParametersQuerySortEnumNameDesc) = "name:desc"
instance Data.Aeson.Types.FromJSON.FromJSON GetSshKeysParametersQuerySort
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "id" -> GetSshKeysParametersQuerySortEnumId
                                            | val GHC.Classes.== "id:asc" -> GetSshKeysParametersQuerySortEnumIdAsc
                                            | val GHC.Classes.== "id:desc" -> GetSshKeysParametersQuerySortEnumIdDesc
                                            | val GHC.Classes.== "name" -> GetSshKeysParametersQuerySortEnumName
                                            | val GHC.Classes.== "name:asc" -> GetSshKeysParametersQuerySortEnumNameAsc
                                            | val GHC.Classes.== "name:desc" -> GetSshKeysParametersQuerySortEnumNameDesc
                                            | GHC.Base.otherwise -> GetSshKeysParametersQuerySortOther val)
-- | Represents a response of the operation 'getSshKeys'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSshKeysResponseError' is used.
data GetSshKeysResponse =
   GetSshKeysResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetSshKeysResponse200 GetSshKeysResponseBody200 -- ^ The \`ssh_keys\` key in the reply contains an array of SSH key objects with this structure
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/ssh_keys.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetSshKeysResponseBody200 = GetSshKeysResponseBody200 {
  -- | meta
  getSshKeysResponseBody200Meta :: (GHC.Maybe.Maybe GetSshKeysResponseBody200Meta)
  -- | ssh_keys
  , getSshKeysResponseBody200SshKeys :: ([GetSshKeysResponseBody200SshKeys])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSshKeysResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("meta" Data.Aeson.Types.ToJSON..= getSshKeysResponseBody200Meta obj : "ssh_keys" Data.Aeson.Types.ToJSON..= getSshKeysResponseBody200SshKeys obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("meta" Data.Aeson.Types.ToJSON..= getSshKeysResponseBody200Meta obj) GHC.Base.<> ("ssh_keys" Data.Aeson.Types.ToJSON..= getSshKeysResponseBody200SshKeys obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetSshKeysResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSshKeysResponseBody200" (\obj -> (GHC.Base.pure GetSshKeysResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "meta")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ssh_keys"))
-- | Create a new 'GetSshKeysResponseBody200' with all required fields.
mkGetSshKeysResponseBody200 :: [GetSshKeysResponseBody200SshKeys] -- ^ 'getSshKeysResponseBody200SshKeys'
  -> GetSshKeysResponseBody200
mkGetSshKeysResponseBody200 getSshKeysResponseBody200SshKeys = GetSshKeysResponseBody200{getSshKeysResponseBody200Meta = GHC.Maybe.Nothing,
                                                                                         getSshKeysResponseBody200SshKeys = getSshKeysResponseBody200SshKeys}
-- | Defines the object schema located at @paths.\/ssh_keys.GET.responses.200.content.application\/json.schema.properties.meta@ in the specification.
-- 
-- 
data GetSshKeysResponseBody200Meta = GetSshKeysResponseBody200Meta {
  -- | pagination
  getSshKeysResponseBody200MetaPagination :: GetSshKeysResponseBody200MetaPagination
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSshKeysResponseBody200Meta
    where toJSON obj = Data.Aeson.Types.Internal.object ("pagination" Data.Aeson.Types.ToJSON..= getSshKeysResponseBody200MetaPagination obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("pagination" Data.Aeson.Types.ToJSON..= getSshKeysResponseBody200MetaPagination obj)
instance Data.Aeson.Types.FromJSON.FromJSON GetSshKeysResponseBody200Meta
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSshKeysResponseBody200Meta" (\obj -> GHC.Base.pure GetSshKeysResponseBody200Meta GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pagination"))
-- | Create a new 'GetSshKeysResponseBody200Meta' with all required fields.
mkGetSshKeysResponseBody200Meta :: GetSshKeysResponseBody200MetaPagination -- ^ 'getSshKeysResponseBody200MetaPagination'
  -> GetSshKeysResponseBody200Meta
mkGetSshKeysResponseBody200Meta getSshKeysResponseBody200MetaPagination = GetSshKeysResponseBody200Meta{getSshKeysResponseBody200MetaPagination = getSshKeysResponseBody200MetaPagination}
-- | Defines the object schema located at @paths.\/ssh_keys.GET.responses.200.content.application\/json.schema.properties.meta.properties.pagination@ in the specification.
-- 
-- 
data GetSshKeysResponseBody200MetaPagination = GetSshKeysResponseBody200MetaPagination {
  -- | last_page: ID of the last page available. Can be null if the current page is the last one.
  getSshKeysResponseBody200MetaPaginationLastPage :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | next_page: ID of the next page. Can be null if the current page is the last one.
  , getSshKeysResponseBody200MetaPaginationNextPage :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | page: Current page number
  , getSshKeysResponseBody200MetaPaginationPage :: GHC.Types.Double
  -- | per_page: Maximum number of items shown per page in the response
  , getSshKeysResponseBody200MetaPaginationPerPage :: GHC.Types.Double
  -- | previous_page: ID of the previous page. Can be null if the current page is the first one.
  , getSshKeysResponseBody200MetaPaginationPreviousPage :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | total_entries: The total number of entries that exist in the database for this query. Nullable if unknown.
  , getSshKeysResponseBody200MetaPaginationTotalEntries :: (GHC.Maybe.Maybe GHC.Types.Double)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSshKeysResponseBody200MetaPagination
    where toJSON obj = Data.Aeson.Types.Internal.object ("last_page" Data.Aeson.Types.ToJSON..= getSshKeysResponseBody200MetaPaginationLastPage obj : "next_page" Data.Aeson.Types.ToJSON..= getSshKeysResponseBody200MetaPaginationNextPage obj : "page" Data.Aeson.Types.ToJSON..= getSshKeysResponseBody200MetaPaginationPage obj : "per_page" Data.Aeson.Types.ToJSON..= getSshKeysResponseBody200MetaPaginationPerPage obj : "previous_page" Data.Aeson.Types.ToJSON..= getSshKeysResponseBody200MetaPaginationPreviousPage obj : "total_entries" Data.Aeson.Types.ToJSON..= getSshKeysResponseBody200MetaPaginationTotalEntries obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("last_page" Data.Aeson.Types.ToJSON..= getSshKeysResponseBody200MetaPaginationLastPage obj) GHC.Base.<> (("next_page" Data.Aeson.Types.ToJSON..= getSshKeysResponseBody200MetaPaginationNextPage obj) GHC.Base.<> (("page" Data.Aeson.Types.ToJSON..= getSshKeysResponseBody200MetaPaginationPage obj) GHC.Base.<> (("per_page" Data.Aeson.Types.ToJSON..= getSshKeysResponseBody200MetaPaginationPerPage obj) GHC.Base.<> (("previous_page" Data.Aeson.Types.ToJSON..= getSshKeysResponseBody200MetaPaginationPreviousPage obj) GHC.Base.<> ("total_entries" Data.Aeson.Types.ToJSON..= getSshKeysResponseBody200MetaPaginationTotalEntries obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetSshKeysResponseBody200MetaPagination
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSshKeysResponseBody200MetaPagination" (\obj -> (((((GHC.Base.pure GetSshKeysResponseBody200MetaPagination GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "last_page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "next_page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "per_page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "previous_page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "total_entries"))
-- | Create a new 'GetSshKeysResponseBody200MetaPagination' with all required fields.
mkGetSshKeysResponseBody200MetaPagination :: GHC.Maybe.Maybe GHC.Types.Double -- ^ 'getSshKeysResponseBody200MetaPaginationLastPage'
  -> GHC.Maybe.Maybe GHC.Types.Double -- ^ 'getSshKeysResponseBody200MetaPaginationNextPage'
  -> GHC.Types.Double -- ^ 'getSshKeysResponseBody200MetaPaginationPage'
  -> GHC.Types.Double -- ^ 'getSshKeysResponseBody200MetaPaginationPerPage'
  -> GHC.Maybe.Maybe GHC.Types.Double -- ^ 'getSshKeysResponseBody200MetaPaginationPreviousPage'
  -> GHC.Maybe.Maybe GHC.Types.Double -- ^ 'getSshKeysResponseBody200MetaPaginationTotalEntries'
  -> GetSshKeysResponseBody200MetaPagination
mkGetSshKeysResponseBody200MetaPagination getSshKeysResponseBody200MetaPaginationLastPage getSshKeysResponseBody200MetaPaginationNextPage getSshKeysResponseBody200MetaPaginationPage getSshKeysResponseBody200MetaPaginationPerPage getSshKeysResponseBody200MetaPaginationPreviousPage getSshKeysResponseBody200MetaPaginationTotalEntries = GetSshKeysResponseBody200MetaPagination{getSshKeysResponseBody200MetaPaginationLastPage = getSshKeysResponseBody200MetaPaginationLastPage,
                                                                                                                                                                                                                                                                                                                                                                                       getSshKeysResponseBody200MetaPaginationNextPage = getSshKeysResponseBody200MetaPaginationNextPage,
                                                                                                                                                                                                                                                                                                                                                                                       getSshKeysResponseBody200MetaPaginationPage = getSshKeysResponseBody200MetaPaginationPage,
                                                                                                                                                                                                                                                                                                                                                                                       getSshKeysResponseBody200MetaPaginationPerPage = getSshKeysResponseBody200MetaPaginationPerPage,
                                                                                                                                                                                                                                                                                                                                                                                       getSshKeysResponseBody200MetaPaginationPreviousPage = getSshKeysResponseBody200MetaPaginationPreviousPage,
                                                                                                                                                                                                                                                                                                                                                                                       getSshKeysResponseBody200MetaPaginationTotalEntries = getSshKeysResponseBody200MetaPaginationTotalEntries}
-- | Defines the object schema located at @paths.\/ssh_keys.GET.responses.200.content.application\/json.schema.properties.ssh_keys.items@ in the specification.
-- 
-- 
data GetSshKeysResponseBody200SshKeys = GetSshKeysResponseBody200SshKeys {
  -- | created: Point in time when the Resource was created (in ISO-8601 format)
  getSshKeysResponseBody200SshKeysCreated :: Data.Text.Internal.Text
  -- | fingerprint: Fingerprint of public key
  , getSshKeysResponseBody200SshKeysFingerprint :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , getSshKeysResponseBody200SshKeysId :: GHC.Types.Int
  -- | labels: User-defined labels (key-value pairs)
  , getSshKeysResponseBody200SshKeysLabels :: Data.Aeson.Types.Internal.Object
  -- | name: Name of the Resource. Must be unique per Project.
  , getSshKeysResponseBody200SshKeysName :: Data.Text.Internal.Text
  -- | public_key: Public key
  , getSshKeysResponseBody200SshKeysPublicKey :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetSshKeysResponseBody200SshKeys
    where toJSON obj = Data.Aeson.Types.Internal.object ("created" Data.Aeson.Types.ToJSON..= getSshKeysResponseBody200SshKeysCreated obj : "fingerprint" Data.Aeson.Types.ToJSON..= getSshKeysResponseBody200SshKeysFingerprint obj : "id" Data.Aeson.Types.ToJSON..= getSshKeysResponseBody200SshKeysId obj : "labels" Data.Aeson.Types.ToJSON..= getSshKeysResponseBody200SshKeysLabels obj : "name" Data.Aeson.Types.ToJSON..= getSshKeysResponseBody200SshKeysName obj : "public_key" Data.Aeson.Types.ToJSON..= getSshKeysResponseBody200SshKeysPublicKey obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("created" Data.Aeson.Types.ToJSON..= getSshKeysResponseBody200SshKeysCreated obj) GHC.Base.<> (("fingerprint" Data.Aeson.Types.ToJSON..= getSshKeysResponseBody200SshKeysFingerprint obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= getSshKeysResponseBody200SshKeysId obj) GHC.Base.<> (("labels" Data.Aeson.Types.ToJSON..= getSshKeysResponseBody200SshKeysLabels obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= getSshKeysResponseBody200SshKeysName obj) GHC.Base.<> ("public_key" Data.Aeson.Types.ToJSON..= getSshKeysResponseBody200SshKeysPublicKey obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetSshKeysResponseBody200SshKeys
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSshKeysResponseBody200SshKeys" (\obj -> (((((GHC.Base.pure GetSshKeysResponseBody200SshKeys GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "labels")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "public_key"))
-- | Create a new 'GetSshKeysResponseBody200SshKeys' with all required fields.
mkGetSshKeysResponseBody200SshKeys :: Data.Text.Internal.Text -- ^ 'getSshKeysResponseBody200SshKeysCreated'
  -> Data.Text.Internal.Text -- ^ 'getSshKeysResponseBody200SshKeysFingerprint'
  -> GHC.Types.Int -- ^ 'getSshKeysResponseBody200SshKeysId'
  -> Data.Aeson.Types.Internal.Object -- ^ 'getSshKeysResponseBody200SshKeysLabels'
  -> Data.Text.Internal.Text -- ^ 'getSshKeysResponseBody200SshKeysName'
  -> Data.Text.Internal.Text -- ^ 'getSshKeysResponseBody200SshKeysPublicKey'
  -> GetSshKeysResponseBody200SshKeys
mkGetSshKeysResponseBody200SshKeys getSshKeysResponseBody200SshKeysCreated getSshKeysResponseBody200SshKeysFingerprint getSshKeysResponseBody200SshKeysId getSshKeysResponseBody200SshKeysLabels getSshKeysResponseBody200SshKeysName getSshKeysResponseBody200SshKeysPublicKey = GetSshKeysResponseBody200SshKeys{getSshKeysResponseBody200SshKeysCreated = getSshKeysResponseBody200SshKeysCreated,
                                                                                                                                                                                                                                                                                                                   getSshKeysResponseBody200SshKeysFingerprint = getSshKeysResponseBody200SshKeysFingerprint,
                                                                                                                                                                                                                                                                                                                   getSshKeysResponseBody200SshKeysId = getSshKeysResponseBody200SshKeysId,
                                                                                                                                                                                                                                                                                                                   getSshKeysResponseBody200SshKeysLabels = getSshKeysResponseBody200SshKeysLabels,
                                                                                                                                                                                                                                                                                                                   getSshKeysResponseBody200SshKeysName = getSshKeysResponseBody200SshKeysName,
                                                                                                                                                                                                                                                                                                                   getSshKeysResponseBody200SshKeysPublicKey = getSshKeysResponseBody200SshKeysPublicKey}
-- | > GET /ssh_keys
-- 
-- The same as 'getSshKeys' but accepts an explicit configuration.
getSshKeysWithConfiguration :: forall m . HCloud.Common.MonadHTTP m => HCloud.Common.Configuration -- ^ The configuration to use in the request
  -> GetSshKeysParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetSshKeysResponse) -- ^ Monadic computation which returns the result of the operation
getSshKeysWithConfiguration config
                            parameters = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetSshKeysResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetSshKeysResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                        GetSshKeysResponseBody200)
                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/ssh_keys") [HCloud.Common.QueryParameter (Data.Text.pack "sort") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSshKeysParametersQuerySort parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                 HCloud.Common.QueryParameter (Data.Text.pack "name") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSshKeysParametersQueryName parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                 HCloud.Common.QueryParameter (Data.Text.pack "fingerprint") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSshKeysParametersQueryFingerprint parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                 HCloud.Common.QueryParameter (Data.Text.pack "label_selector") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSshKeysParametersQueryLabelSelector parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /ssh_keys
-- 
-- The same as 'getSshKeys' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSshKeysRaw :: forall m . HCloud.Common.MonadHTTP m => GetSshKeysParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> HCloud.Common.HttpT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getSshKeysRaw parameters = GHC.Base.id (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/ssh_keys") [HCloud.Common.QueryParameter (Data.Text.pack "sort") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSshKeysParametersQuerySort parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                  HCloud.Common.QueryParameter (Data.Text.pack "name") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSshKeysParametersQueryName parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                  HCloud.Common.QueryParameter (Data.Text.pack "fingerprint") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSshKeysParametersQueryFingerprint parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                  HCloud.Common.QueryParameter (Data.Text.pack "label_selector") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSshKeysParametersQueryLabelSelector parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /ssh_keys
-- 
-- The same as 'getSshKeys' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSshKeysWithConfigurationRaw :: forall m . HCloud.Common.MonadHTTP m => HCloud.Common.Configuration -- ^ The configuration to use in the request
  -> GetSshKeysParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getSshKeysWithConfigurationRaw config
                               parameters = GHC.Base.id (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/ssh_keys") [HCloud.Common.QueryParameter (Data.Text.pack "sort") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSshKeysParametersQuerySort parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                         HCloud.Common.QueryParameter (Data.Text.pack "name") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSshKeysParametersQueryName parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                         HCloud.Common.QueryParameter (Data.Text.pack "fingerprint") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSshKeysParametersQueryFingerprint parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                         HCloud.Common.QueryParameter (Data.Text.pack "label_selector") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSshKeysParametersQueryLabelSelector parameters) (Data.Text.pack "form") GHC.Types.False])
