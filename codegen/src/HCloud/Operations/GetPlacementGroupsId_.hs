-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getPlacementGroups_Id_
module HCloud.Operations.GetPlacementGroupsId_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > GET /placement_groups/{id}
-- 
-- Gets a specific PlacementGroup object.
getPlacementGroups_Id_ :: forall m . HCloud.Common.MonadHTTP m => GHC.Types.Int -- ^ id: ID of the resource
  -> HCloud.Common.HttpT m (Network.HTTP.Client.Types.Response GetPlacementGroupsIdResponse) -- ^ Monadic computation which returns the result of the operation
getPlacementGroups_Id_ id = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetPlacementGroupsIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetPlacementGroupsIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                               GetPlacementGroupsIdResponseBody200)
                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/placement_groups/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) GHC.Base.mempty)
-- | Represents a response of the operation 'getPlacementGroups_Id_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetPlacementGroupsIdResponseError' is used.
data GetPlacementGroupsIdResponse =
   GetPlacementGroupsIdResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetPlacementGroupsIdResponse200 GetPlacementGroupsIdResponseBody200 -- ^ The \`placement_group\` key contains a PlacementGroup object
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/placement_groups\/{id}.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetPlacementGroupsIdResponseBody200 = GetPlacementGroupsIdResponseBody200 {
  -- | placement_group
  getPlacementGroupsIdResponseBody200PlacementGroup :: GetPlacementGroupsIdResponseBody200PlacementGroup
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPlacementGroupsIdResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("placement_group" Data.Aeson.Types.ToJSON..= getPlacementGroupsIdResponseBody200PlacementGroup obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("placement_group" Data.Aeson.Types.ToJSON..= getPlacementGroupsIdResponseBody200PlacementGroup obj)
instance Data.Aeson.Types.FromJSON.FromJSON GetPlacementGroupsIdResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPlacementGroupsIdResponseBody200" (\obj -> GHC.Base.pure GetPlacementGroupsIdResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "placement_group"))
-- | Create a new 'GetPlacementGroupsIdResponseBody200' with all required fields.
mkGetPlacementGroupsIdResponseBody200 :: GetPlacementGroupsIdResponseBody200PlacementGroup -- ^ 'getPlacementGroupsIdResponseBody200PlacementGroup'
  -> GetPlacementGroupsIdResponseBody200
mkGetPlacementGroupsIdResponseBody200 getPlacementGroupsIdResponseBody200PlacementGroup = GetPlacementGroupsIdResponseBody200{getPlacementGroupsIdResponseBody200PlacementGroup = getPlacementGroupsIdResponseBody200PlacementGroup}
-- | Defines the object schema located at @paths.\/placement_groups\/{id}.GET.responses.200.content.application\/json.schema.properties.placement_group@ in the specification.
-- 
-- 
data GetPlacementGroupsIdResponseBody200PlacementGroup = GetPlacementGroupsIdResponseBody200PlacementGroup {
  -- | created: Point in time when the Resource was created (in ISO-8601 format)
  getPlacementGroupsIdResponseBody200PlacementGroupCreated :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , getPlacementGroupsIdResponseBody200PlacementGroupId :: GHC.Types.Int
  -- | labels: User-defined labels (key-value pairs)
  , getPlacementGroupsIdResponseBody200PlacementGroupLabels :: Data.Aeson.Types.Internal.Object
  -- | name: Name of the Resource. Must be unique per Project.
  , getPlacementGroupsIdResponseBody200PlacementGroupName :: Data.Text.Internal.Text
  -- | servers: Array of IDs of Servers that are part of this Placement Group
  , getPlacementGroupsIdResponseBody200PlacementGroupServers :: ([GHC.Types.Int])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetPlacementGroupsIdResponseBody200PlacementGroup
    where toJSON obj = Data.Aeson.Types.Internal.object ("created" Data.Aeson.Types.ToJSON..= getPlacementGroupsIdResponseBody200PlacementGroupCreated obj : "id" Data.Aeson.Types.ToJSON..= getPlacementGroupsIdResponseBody200PlacementGroupId obj : "labels" Data.Aeson.Types.ToJSON..= getPlacementGroupsIdResponseBody200PlacementGroupLabels obj : "name" Data.Aeson.Types.ToJSON..= getPlacementGroupsIdResponseBody200PlacementGroupName obj : "servers" Data.Aeson.Types.ToJSON..= getPlacementGroupsIdResponseBody200PlacementGroupServers obj : "type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "spread" : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("created" Data.Aeson.Types.ToJSON..= getPlacementGroupsIdResponseBody200PlacementGroupCreated obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= getPlacementGroupsIdResponseBody200PlacementGroupId obj) GHC.Base.<> (("labels" Data.Aeson.Types.ToJSON..= getPlacementGroupsIdResponseBody200PlacementGroupLabels obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= getPlacementGroupsIdResponseBody200PlacementGroupName obj) GHC.Base.<> (("servers" Data.Aeson.Types.ToJSON..= getPlacementGroupsIdResponseBody200PlacementGroupServers obj) GHC.Base.<> ("type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "spread"))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetPlacementGroupsIdResponseBody200PlacementGroup
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPlacementGroupsIdResponseBody200PlacementGroup" (\obj -> ((((GHC.Base.pure GetPlacementGroupsIdResponseBody200PlacementGroup GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "labels")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "servers"))
-- | Create a new 'GetPlacementGroupsIdResponseBody200PlacementGroup' with all required fields.
mkGetPlacementGroupsIdResponseBody200PlacementGroup :: Data.Text.Internal.Text -- ^ 'getPlacementGroupsIdResponseBody200PlacementGroupCreated'
  -> GHC.Types.Int -- ^ 'getPlacementGroupsIdResponseBody200PlacementGroupId'
  -> Data.Aeson.Types.Internal.Object -- ^ 'getPlacementGroupsIdResponseBody200PlacementGroupLabels'
  -> Data.Text.Internal.Text -- ^ 'getPlacementGroupsIdResponseBody200PlacementGroupName'
  -> [GHC.Types.Int] -- ^ 'getPlacementGroupsIdResponseBody200PlacementGroupServers'
  -> GetPlacementGroupsIdResponseBody200PlacementGroup
mkGetPlacementGroupsIdResponseBody200PlacementGroup getPlacementGroupsIdResponseBody200PlacementGroupCreated getPlacementGroupsIdResponseBody200PlacementGroupId getPlacementGroupsIdResponseBody200PlacementGroupLabels getPlacementGroupsIdResponseBody200PlacementGroupName getPlacementGroupsIdResponseBody200PlacementGroupServers = GetPlacementGroupsIdResponseBody200PlacementGroup{getPlacementGroupsIdResponseBody200PlacementGroupCreated = getPlacementGroupsIdResponseBody200PlacementGroupCreated,
                                                                                                                                                                                                                                                                                                                                                                                            getPlacementGroupsIdResponseBody200PlacementGroupId = getPlacementGroupsIdResponseBody200PlacementGroupId,
                                                                                                                                                                                                                                                                                                                                                                                            getPlacementGroupsIdResponseBody200PlacementGroupLabels = getPlacementGroupsIdResponseBody200PlacementGroupLabels,
                                                                                                                                                                                                                                                                                                                                                                                            getPlacementGroupsIdResponseBody200PlacementGroupName = getPlacementGroupsIdResponseBody200PlacementGroupName,
                                                                                                                                                                                                                                                                                                                                                                                            getPlacementGroupsIdResponseBody200PlacementGroupServers = getPlacementGroupsIdResponseBody200PlacementGroupServers}
-- | > GET /placement_groups/{id}
-- 
-- The same as 'getPlacementGroups_Id_' but accepts an explicit configuration.
getPlacementGroups_Id_WithConfiguration :: forall m . HCloud.Common.MonadHTTP m => HCloud.Common.Configuration -- ^ The configuration to use in the request
  -> GHC.Types.Int -- ^ id: ID of the resource
  -> m (Network.HTTP.Client.Types.Response GetPlacementGroupsIdResponse) -- ^ Monadic computation which returns the result of the operation
getPlacementGroups_Id_WithConfiguration config
                                        id = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetPlacementGroupsIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetPlacementGroupsIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                GetPlacementGroupsIdResponseBody200)
                                                                                                                                                                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/placement_groups/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) GHC.Base.mempty)
-- | > GET /placement_groups/{id}
-- 
-- The same as 'getPlacementGroups_Id_' but returns the raw 'Data.ByteString.Char8.ByteString'.
getPlacementGroups_Id_Raw :: forall m . HCloud.Common.MonadHTTP m => GHC.Types.Int -- ^ id: ID of the resource
  -> HCloud.Common.HttpT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getPlacementGroups_Id_Raw id = GHC.Base.id (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/placement_groups/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) GHC.Base.mempty)
-- | > GET /placement_groups/{id}
-- 
-- The same as 'getPlacementGroups_Id_' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getPlacementGroups_Id_WithConfigurationRaw :: forall m . HCloud.Common.MonadHTTP m => HCloud.Common.Configuration -- ^ The configuration to use in the request
  -> GHC.Types.Int -- ^ id: ID of the resource
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getPlacementGroups_Id_WithConfigurationRaw config
                                           id = GHC.Base.id (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/placement_groups/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) GHC.Base.mempty)
