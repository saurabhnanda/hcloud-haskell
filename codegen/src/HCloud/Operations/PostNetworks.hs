-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation postNetworks
module HCloud.Operations.PostNetworks where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > POST /networks
-- 
-- Creates a network with the specified \`ip_range\`.
-- 
-- You may specify one or more \`subnets\`. You can also add more Subnets later by using the [add subnet action](https:\/\/docs.hetzner.cloud\/\#network-actions-add-a-subnet-to-a-network). If you do not specify an \`ip_range\` in the subnet we will automatically pick the first available \/24 range for you.
-- 
-- You may specify one or more routes in \`routes\`. You can also add more routes later by using the [add route action](https:\/\/docs.hetzner.cloud\/\#network-actions-add-a-route-to-a-network).
postNetworks :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Maybe.Maybe PostNetworksRequestBody                                                                                  -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response PostNetworksResponse)) -- ^ Monad containing the result of the operation
postNetworks config
             body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostNetworksResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostNetworksResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                      PostNetworksResponseBody201)
                                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/networks") [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /networks
-- 
-- The same as 'postNetworks' but returns the raw 'Data.ByteString.Char8.ByteString'
postNetworksRaw :: forall m s . (HCloud.Common.MonadHTTP m,
                                 HCloud.Common.SecurityScheme s) =>
                   HCloud.Common.Configuration s ->
                   GHC.Maybe.Maybe PostNetworksRequestBody ->
                   m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                         (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postNetworksRaw config
                body = GHC.Base.id (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/networks") [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /networks
-- 
-- Monadic version of 'postNetworks' (use with 'HCloud.Common.runWithConfiguration')
postNetworksM :: forall m s . (HCloud.Common.MonadHTTP m,
                               HCloud.Common.SecurityScheme s) =>
                 GHC.Maybe.Maybe PostNetworksRequestBody ->
                 Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                    m
                                                    (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                        (Network.HTTP.Client.Types.Response PostNetworksResponse))
postNetworksM body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostNetworksResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostNetworksResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                       PostNetworksResponseBody201)
                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/networks") [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /networks
-- 
-- Monadic version of 'postNetworksRaw' (use with 'HCloud.Common.runWithConfiguration')
postNetworksRawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                  HCloud.Common.SecurityScheme s) =>
                    GHC.Maybe.Maybe PostNetworksRequestBody ->
                    Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                       m
                                                       (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                           (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postNetworksRawM body = GHC.Base.id (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/networks") [] body HCloud.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema postNetworksRequestBody
-- 
-- 
data PostNetworksRequestBody = PostNetworksRequestBody {
  -- | ip_range: IP range of the whole network which must span all included subnets. Must be one of the private IPv4 ranges of RFC1918. Minimum network size is \/24. We highly recommend that you pick a larger network with a \/16 netmask.
  postNetworksRequestBodyIpRange :: Data.Text.Internal.Text
  -- | labels: User-defined labels (key-value pairs)
  , postNetworksRequestBodyLabels :: (GHC.Maybe.Maybe PostNetworksRequestBodyLabels)
  -- | name: Name of the network
  , postNetworksRequestBodyName :: Data.Text.Internal.Text
  -- | routes: Array of routes set in this network. The destination of the route must be one of the private IPv4 ranges of RFC1918. The gateway must be a subnet\/IP of the ip_range of the network object. The destination must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first IP of the networks ip_range or with 172.31.1.1. The gateway cannot be the first IP of the networks ip_range and also cannot be 172.31.1.1.
  , postNetworksRequestBodyRoutes :: (GHC.Maybe.Maybe ([] PostNetworksRequestBodyRoutes))
  -- | subnets: Array of subnets allocated.
  , postNetworksRequestBodySubnets :: (GHC.Maybe.Maybe ([] PostNetworksRequestBodySubnets))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostNetworksRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "ip_range" (postNetworksRequestBodyIpRange obj) : (Data.Aeson..=) "labels" (postNetworksRequestBodyLabels obj) : (Data.Aeson..=) "name" (postNetworksRequestBodyName obj) : (Data.Aeson..=) "routes" (postNetworksRequestBodyRoutes obj) : (Data.Aeson..=) "subnets" (postNetworksRequestBodySubnets obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "ip_range" (postNetworksRequestBodyIpRange obj) GHC.Base.<> ((Data.Aeson..=) "labels" (postNetworksRequestBodyLabels obj) GHC.Base.<> ((Data.Aeson..=) "name" (postNetworksRequestBodyName obj) GHC.Base.<> ((Data.Aeson..=) "routes" (postNetworksRequestBodyRoutes obj) GHC.Base.<> (Data.Aeson..=) "subnets" (postNetworksRequestBodySubnets obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON PostNetworksRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostNetworksRequestBody" (\obj -> ((((GHC.Base.pure PostNetworksRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ip_range")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "labels")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "routes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subnets"))
-- | Defines the data type for the schema postNetworksRequestBodyLabels
-- 
-- User-defined labels (key-value pairs)
data PostNetworksRequestBodyLabels = PostNetworksRequestBodyLabels {
  -- | labelkey: New label
  postNetworksRequestBodyLabelsLabelkey :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostNetworksRequestBodyLabels
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "labelkey" (postNetworksRequestBodyLabelsLabelkey obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "labelkey" (postNetworksRequestBodyLabelsLabelkey obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostNetworksRequestBodyLabels
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostNetworksRequestBodyLabels" (\obj -> GHC.Base.pure PostNetworksRequestBodyLabels GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "labelkey"))
-- | Defines the data type for the schema postNetworksRequestBodyRoutes
-- 
-- 
data PostNetworksRequestBodyRoutes = PostNetworksRequestBodyRoutes {
  -- | destination: Destination network or host of this route. Must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first IP of the networks ip_range or with 172.31.1.1. Must be one of the private IPv4 ranges of RFC1918.
  postNetworksRequestBodyRoutesDestination :: Data.Text.Internal.Text
  -- | gateway: Gateway for the route. Cannot be the first IP of the networks ip_range and also cannot be 172.31.1.1 as this IP is being used as a gateway for the public network interface of Servers.
  , postNetworksRequestBodyRoutesGateway :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostNetworksRequestBodyRoutes
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "destination" (postNetworksRequestBodyRoutesDestination obj) : (Data.Aeson..=) "gateway" (postNetworksRequestBodyRoutesGateway obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "destination" (postNetworksRequestBodyRoutesDestination obj) GHC.Base.<> (Data.Aeson..=) "gateway" (postNetworksRequestBodyRoutesGateway obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostNetworksRequestBodyRoutes
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostNetworksRequestBodyRoutes" (\obj -> (GHC.Base.pure PostNetworksRequestBodyRoutes GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "destination")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "gateway"))
-- | Defines the data type for the schema postNetworksRequestBodySubnets
-- 
-- 
data PostNetworksRequestBodySubnets = PostNetworksRequestBodySubnets {
  -- | ip_range: Range to allocate IPs from. Must be a Subnet of the ip_range of the parent network object and must not overlap with any other subnets or with any destinations in routes. Minimum Network size is \/30. We suggest that you pick a bigger Network with a \/24 netmask.
  postNetworksRequestBodySubnetsIpRange :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | network_zone: Name of Network zone. Currently eu-central is the only available zone.
  , postNetworksRequestBodySubnetsNetworkZone :: Data.Text.Internal.Text
  -- | type: Type of Subnetwork
  , postNetworksRequestBodySubnetsType :: PostNetworksRequestBodySubnetsType
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostNetworksRequestBodySubnets
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "ip_range" (postNetworksRequestBodySubnetsIpRange obj) : (Data.Aeson..=) "network_zone" (postNetworksRequestBodySubnetsNetworkZone obj) : (Data.Aeson..=) "type" (postNetworksRequestBodySubnetsType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "ip_range" (postNetworksRequestBodySubnetsIpRange obj) GHC.Base.<> ((Data.Aeson..=) "network_zone" (postNetworksRequestBodySubnetsNetworkZone obj) GHC.Base.<> (Data.Aeson..=) "type" (postNetworksRequestBodySubnetsType obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PostNetworksRequestBodySubnets
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostNetworksRequestBodySubnets" (\obj -> ((GHC.Base.pure PostNetworksRequestBodySubnets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip_range")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "network_zone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema postNetworksRequestBodySubnetsType
-- 
-- Type of Subnetwork
data PostNetworksRequestBodySubnetsType
    = PostNetworksRequestBodySubnetsTypeEnumOther Data.Aeson.Types.Internal.Value
    | PostNetworksRequestBodySubnetsTypeEnumTyped Data.Text.Internal.Text
    | PostNetworksRequestBodySubnetsTypeEnumStringCloud
    | PostNetworksRequestBodySubnetsTypeEnumStringServer
    | PostNetworksRequestBodySubnetsTypeEnumStringVswitch
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostNetworksRequestBodySubnetsType
    where toJSON (PostNetworksRequestBodySubnetsTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostNetworksRequestBodySubnetsTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostNetworksRequestBodySubnetsTypeEnumStringCloud) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cloud"
          toJSON (PostNetworksRequestBodySubnetsTypeEnumStringServer) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "server"
          toJSON (PostNetworksRequestBodySubnetsTypeEnumStringVswitch) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "vswitch"
instance Data.Aeson.FromJSON PostNetworksRequestBodySubnetsType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cloud")
                                          then PostNetworksRequestBodySubnetsTypeEnumStringCloud
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "server")
                                                then PostNetworksRequestBodySubnetsTypeEnumStringServer
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "vswitch")
                                                      then PostNetworksRequestBodySubnetsTypeEnumStringVswitch
                                                      else PostNetworksRequestBodySubnetsTypeEnumOther val)
-- | Represents a response of the operation 'postNetworks'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostNetworksResponseError' is used.
data PostNetworksResponse =                              
   PostNetworksResponseError GHC.Base.String             -- ^ Means either no matching case available or a parse error
  | PostNetworksResponse201 PostNetworksResponseBody201  -- ^ The \`network\` key contains the network that was just created
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema PostNetworksResponseBody201
-- 
-- 
data PostNetworksResponseBody201 = PostNetworksResponseBody201 {
  -- | network
  postNetworksResponseBody201Network :: (GHC.Maybe.Maybe PostNetworksResponseBody201Network)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostNetworksResponseBody201
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "network" (postNetworksResponseBody201Network obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "network" (postNetworksResponseBody201Network obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostNetworksResponseBody201
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostNetworksResponseBody201" (\obj -> GHC.Base.pure PostNetworksResponseBody201 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "network"))
-- | Defines the data type for the schema PostNetworksResponseBody201Network
-- 
-- 
data PostNetworksResponseBody201Network = PostNetworksResponseBody201Network {
  -- | created: Point in time when the Network was created (in ISO-8601 format)
  postNetworksResponseBody201NetworkCreated :: Data.Text.Internal.Text
  -- | id: ID of the Network
  , postNetworksResponseBody201NetworkId :: GHC.Integer.Type.Integer
  -- | ip_range: IPv4 prefix of the whole Network
  , postNetworksResponseBody201NetworkIpRange :: Data.Text.Internal.Text
  -- | labels: User-defined labels (key-value pairs)
  , postNetworksResponseBody201NetworkLabels :: PostNetworksResponseBody201NetworkLabels
  -- | load_balancers: Array of IDs of Load Balancers attached to this Network
  , postNetworksResponseBody201NetworkLoadBalancers :: (GHC.Maybe.Maybe ([] GHC.Integer.Type.Integer))
  -- | name: Name of the Network
  , postNetworksResponseBody201NetworkName :: Data.Text.Internal.Text
  -- | protection: Protection configuration for the Network
  , postNetworksResponseBody201NetworkProtection :: PostNetworksResponseBody201NetworkProtection
  -- | routes: Array of routes set in this Network
  , postNetworksResponseBody201NetworkRoutes :: ([] PostNetworksResponseBody201NetworkRoutes)
  -- | servers: Array of IDs of Servers attached to this Network
  , postNetworksResponseBody201NetworkServers :: ([] GHC.Integer.Type.Integer)
  -- | subnets: Array subnets allocated in this Network
  , postNetworksResponseBody201NetworkSubnets :: ([] PostNetworksResponseBody201NetworkSubnets)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostNetworksResponseBody201Network
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "created" (postNetworksResponseBody201NetworkCreated obj) : (Data.Aeson..=) "id" (postNetworksResponseBody201NetworkId obj) : (Data.Aeson..=) "ip_range" (postNetworksResponseBody201NetworkIpRange obj) : (Data.Aeson..=) "labels" (postNetworksResponseBody201NetworkLabels obj) : (Data.Aeson..=) "load_balancers" (postNetworksResponseBody201NetworkLoadBalancers obj) : (Data.Aeson..=) "name" (postNetworksResponseBody201NetworkName obj) : (Data.Aeson..=) "protection" (postNetworksResponseBody201NetworkProtection obj) : (Data.Aeson..=) "routes" (postNetworksResponseBody201NetworkRoutes obj) : (Data.Aeson..=) "servers" (postNetworksResponseBody201NetworkServers obj) : (Data.Aeson..=) "subnets" (postNetworksResponseBody201NetworkSubnets obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "created" (postNetworksResponseBody201NetworkCreated obj) GHC.Base.<> ((Data.Aeson..=) "id" (postNetworksResponseBody201NetworkId obj) GHC.Base.<> ((Data.Aeson..=) "ip_range" (postNetworksResponseBody201NetworkIpRange obj) GHC.Base.<> ((Data.Aeson..=) "labels" (postNetworksResponseBody201NetworkLabels obj) GHC.Base.<> ((Data.Aeson..=) "load_balancers" (postNetworksResponseBody201NetworkLoadBalancers obj) GHC.Base.<> ((Data.Aeson..=) "name" (postNetworksResponseBody201NetworkName obj) GHC.Base.<> ((Data.Aeson..=) "protection" (postNetworksResponseBody201NetworkProtection obj) GHC.Base.<> ((Data.Aeson..=) "routes" (postNetworksResponseBody201NetworkRoutes obj) GHC.Base.<> ((Data.Aeson..=) "servers" (postNetworksResponseBody201NetworkServers obj) GHC.Base.<> (Data.Aeson..=) "subnets" (postNetworksResponseBody201NetworkSubnets obj))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostNetworksResponseBody201Network
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostNetworksResponseBody201Network" (\obj -> (((((((((GHC.Base.pure PostNetworksResponseBody201Network GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ip_range")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "labels")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "load_balancers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "protection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "routes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "servers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "subnets"))
-- | Defines the data type for the schema PostNetworksResponseBody201NetworkLabels
-- 
-- User-defined labels (key-value pairs)
data PostNetworksResponseBody201NetworkLabels = PostNetworksResponseBody201NetworkLabels {
  
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostNetworksResponseBody201NetworkLabels
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON PostNetworksResponseBody201NetworkLabels
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostNetworksResponseBody201NetworkLabels" (\obj -> GHC.Base.pure PostNetworksResponseBody201NetworkLabels)
-- | Defines the data type for the schema PostNetworksResponseBody201NetworkProtection
-- 
-- Protection configuration for the Network
data PostNetworksResponseBody201NetworkProtection = PostNetworksResponseBody201NetworkProtection {
  -- | delete: If true, prevents the Network from being deleted
  postNetworksResponseBody201NetworkProtectionDelete :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostNetworksResponseBody201NetworkProtection
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "delete" (postNetworksResponseBody201NetworkProtectionDelete obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "delete" (postNetworksResponseBody201NetworkProtectionDelete obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostNetworksResponseBody201NetworkProtection
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostNetworksResponseBody201NetworkProtection" (\obj -> GHC.Base.pure PostNetworksResponseBody201NetworkProtection GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "delete"))
-- | Defines the data type for the schema PostNetworksResponseBody201NetworkRoutes
-- 
-- 
data PostNetworksResponseBody201NetworkRoutes = PostNetworksResponseBody201NetworkRoutes {
  -- | destination: Destination network or host of this route. Must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first IP of the networks ip_range or with 172.31.1.1. Must be one of the private IPv4 ranges of RFC1918.
  postNetworksResponseBody201NetworkRoutesDestination :: Data.Text.Internal.Text
  -- | gateway: Gateway for the route. Cannot be the first IP of the networks ip_range and also cannot be 172.31.1.1 as this IP is being used as a gateway for the public network interface of Servers.
  , postNetworksResponseBody201NetworkRoutesGateway :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostNetworksResponseBody201NetworkRoutes
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "destination" (postNetworksResponseBody201NetworkRoutesDestination obj) : (Data.Aeson..=) "gateway" (postNetworksResponseBody201NetworkRoutesGateway obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "destination" (postNetworksResponseBody201NetworkRoutesDestination obj) GHC.Base.<> (Data.Aeson..=) "gateway" (postNetworksResponseBody201NetworkRoutesGateway obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostNetworksResponseBody201NetworkRoutes
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostNetworksResponseBody201NetworkRoutes" (\obj -> (GHC.Base.pure PostNetworksResponseBody201NetworkRoutes GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "destination")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "gateway"))
-- | Defines the data type for the schema PostNetworksResponseBody201NetworkSubnets
-- 
-- 
data PostNetworksResponseBody201NetworkSubnets = PostNetworksResponseBody201NetworkSubnets {
  -- | gateway: Gateway for Servers attached to this subnet. For subnets of type Server this is always the first IP of the network IP range.
  postNetworksResponseBody201NetworkSubnetsGateway :: Data.Text.Internal.Text
  -- | ip_range: Range to allocate IPs from. Must be a Subnet of the ip_range of the parent network object and must not overlap with any other subnets or with any destinations in routes. Minimum Network size is \/30. We suggest that you pick a bigger Network with a \/24 netmask.
  , postNetworksResponseBody201NetworkSubnetsIpRange :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | network_zone: Name of Network zone. Currently eu-central is the only available zone.
  , postNetworksResponseBody201NetworkSubnetsNetworkZone :: Data.Text.Internal.Text
  -- | type: Type of Subnetwork
  , postNetworksResponseBody201NetworkSubnetsType :: PostNetworksResponseBody201NetworkSubnetsType
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostNetworksResponseBody201NetworkSubnets
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "gateway" (postNetworksResponseBody201NetworkSubnetsGateway obj) : (Data.Aeson..=) "ip_range" (postNetworksResponseBody201NetworkSubnetsIpRange obj) : (Data.Aeson..=) "network_zone" (postNetworksResponseBody201NetworkSubnetsNetworkZone obj) : (Data.Aeson..=) "type" (postNetworksResponseBody201NetworkSubnetsType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "gateway" (postNetworksResponseBody201NetworkSubnetsGateway obj) GHC.Base.<> ((Data.Aeson..=) "ip_range" (postNetworksResponseBody201NetworkSubnetsIpRange obj) GHC.Base.<> ((Data.Aeson..=) "network_zone" (postNetworksResponseBody201NetworkSubnetsNetworkZone obj) GHC.Base.<> (Data.Aeson..=) "type" (postNetworksResponseBody201NetworkSubnetsType obj))))
instance Data.Aeson.Types.FromJSON.FromJSON PostNetworksResponseBody201NetworkSubnets
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostNetworksResponseBody201NetworkSubnets" (\obj -> (((GHC.Base.pure PostNetworksResponseBody201NetworkSubnets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "gateway")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip_range")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "network_zone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema PostNetworksResponseBody201NetworkSubnetsType
-- 
-- Type of Subnetwork
data PostNetworksResponseBody201NetworkSubnetsType
    = PostNetworksResponseBody201NetworkSubnetsTypeEnumOther Data.Aeson.Types.Internal.Value
    | PostNetworksResponseBody201NetworkSubnetsTypeEnumTyped Data.Text.Internal.Text
    | PostNetworksResponseBody201NetworkSubnetsTypeEnumStringCloud
    | PostNetworksResponseBody201NetworkSubnetsTypeEnumStringServer
    | PostNetworksResponseBody201NetworkSubnetsTypeEnumStringVswitch
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostNetworksResponseBody201NetworkSubnetsType
    where toJSON (PostNetworksResponseBody201NetworkSubnetsTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostNetworksResponseBody201NetworkSubnetsTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostNetworksResponseBody201NetworkSubnetsTypeEnumStringCloud) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cloud"
          toJSON (PostNetworksResponseBody201NetworkSubnetsTypeEnumStringServer) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "server"
          toJSON (PostNetworksResponseBody201NetworkSubnetsTypeEnumStringVswitch) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "vswitch"
instance Data.Aeson.FromJSON PostNetworksResponseBody201NetworkSubnetsType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cloud")
                                          then PostNetworksResponseBody201NetworkSubnetsTypeEnumStringCloud
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "server")
                                                then PostNetworksResponseBody201NetworkSubnetsTypeEnumStringServer
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "vswitch")
                                                      then PostNetworksResponseBody201NetworkSubnetsTypeEnumStringVswitch
                                                      else PostNetworksResponseBody201NetworkSubnetsTypeEnumOther val)
