-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postNetworks
module HCloud.Operations.PostNetworks where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > POST /networks
-- 
-- Creates a network with the specified \`ip_range\`.
-- 
-- You may specify one or more \`subnets\`. You can also add more Subnets later by using the [add subnet action](https:\/\/docs.hetzner.cloud\/\#network-actions-add-a-subnet-to-a-network). If you do not specify an \`ip_range\` in the subnet we will automatically pick the first available \/24 range for you.
-- 
-- You may specify one or more routes in \`routes\`. You can also add more routes later by using the [add route action](https:\/\/docs.hetzner.cloud\/\#network-actions-add-a-route-to-a-network).
postNetworks :: forall m . HCloud.Common.MonadHTTP m => GHC.Maybe.Maybe PostNetworksRequestBody -- ^ The request body to send
  -> HCloud.Common.HttpT m (Network.HTTP.Client.Types.Response PostNetworksResponse) -- ^ Monadic computation which returns the result of the operation
postNetworks body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostNetworksResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostNetworksResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                       PostNetworksResponseBody201)
                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/networks") GHC.Base.mempty body HCloud.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/networks.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data PostNetworksRequestBody = PostNetworksRequestBody {
  -- | ip_range: IP range of the whole network which must span all included subnets. Must be one of the private IPv4 ranges of RFC1918. Minimum network size is \/24. We highly recommend that you pick a larger network with a \/16 netmask.
  postNetworksRequestBodyIpRange :: Data.Text.Internal.Text
  -- | labels: User-defined labels (key-value pairs)
  , postNetworksRequestBodyLabels :: (GHC.Maybe.Maybe PostNetworksRequestBodyLabels)
  -- | name: Name of the network
  , postNetworksRequestBodyName :: Data.Text.Internal.Text
  -- | routes: Array of routes set in this network. The destination of the route must be one of the private IPv4 ranges of RFC1918. The gateway must be a subnet\/IP of the ip_range of the network object. The destination must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first IP of the networks ip_range or with 172.31.1.1. The gateway cannot be the first IP of the networks ip_range and also cannot be 172.31.1.1.
  , postNetworksRequestBodyRoutes :: (GHC.Maybe.Maybe ([PostNetworksRequestBodyRoutes]))
  -- | subnets: Array of subnets allocated.
  , postNetworksRequestBodySubnets :: (GHC.Maybe.Maybe ([PostNetworksRequestBodySubnets]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostNetworksRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("ip_range" Data.Aeson.Types.ToJSON..= postNetworksRequestBodyIpRange obj : "labels" Data.Aeson.Types.ToJSON..= postNetworksRequestBodyLabels obj : "name" Data.Aeson.Types.ToJSON..= postNetworksRequestBodyName obj : "routes" Data.Aeson.Types.ToJSON..= postNetworksRequestBodyRoutes obj : "subnets" Data.Aeson.Types.ToJSON..= postNetworksRequestBodySubnets obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("ip_range" Data.Aeson.Types.ToJSON..= postNetworksRequestBodyIpRange obj) GHC.Base.<> (("labels" Data.Aeson.Types.ToJSON..= postNetworksRequestBodyLabels obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= postNetworksRequestBodyName obj) GHC.Base.<> (("routes" Data.Aeson.Types.ToJSON..= postNetworksRequestBodyRoutes obj) GHC.Base.<> ("subnets" Data.Aeson.Types.ToJSON..= postNetworksRequestBodySubnets obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON PostNetworksRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostNetworksRequestBody" (\obj -> ((((GHC.Base.pure PostNetworksRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ip_range")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "labels")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "routes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subnets"))
-- | Create a new 'PostNetworksRequestBody' with all required fields.
mkPostNetworksRequestBody :: Data.Text.Internal.Text -- ^ 'postNetworksRequestBodyIpRange'
  -> Data.Text.Internal.Text -- ^ 'postNetworksRequestBodyName'
  -> PostNetworksRequestBody
mkPostNetworksRequestBody postNetworksRequestBodyIpRange postNetworksRequestBodyName = PostNetworksRequestBody{postNetworksRequestBodyIpRange = postNetworksRequestBodyIpRange,
                                                                                                               postNetworksRequestBodyLabels = GHC.Maybe.Nothing,
                                                                                                               postNetworksRequestBodyName = postNetworksRequestBodyName,
                                                                                                               postNetworksRequestBodyRoutes = GHC.Maybe.Nothing,
                                                                                                               postNetworksRequestBodySubnets = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/networks.POST.requestBody.content.application\/json.schema.properties.labels@ in the specification.
-- 
-- User-defined labels (key-value pairs)
data PostNetworksRequestBodyLabels = PostNetworksRequestBodyLabels {
  -- | labelkey: New label
  postNetworksRequestBodyLabelsLabelkey :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostNetworksRequestBodyLabels
    where toJSON obj = Data.Aeson.Types.Internal.object ("labelkey" Data.Aeson.Types.ToJSON..= postNetworksRequestBodyLabelsLabelkey obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("labelkey" Data.Aeson.Types.ToJSON..= postNetworksRequestBodyLabelsLabelkey obj)
instance Data.Aeson.Types.FromJSON.FromJSON PostNetworksRequestBodyLabels
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostNetworksRequestBodyLabels" (\obj -> GHC.Base.pure PostNetworksRequestBodyLabels GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "labelkey"))
-- | Create a new 'PostNetworksRequestBodyLabels' with all required fields.
mkPostNetworksRequestBodyLabels :: PostNetworksRequestBodyLabels
mkPostNetworksRequestBodyLabels = PostNetworksRequestBodyLabels{postNetworksRequestBodyLabelsLabelkey = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/networks.POST.requestBody.content.application\/json.schema.properties.routes.items@ in the specification.
-- 
-- 
data PostNetworksRequestBodyRoutes = PostNetworksRequestBodyRoutes {
  -- | destination: Destination network or host of this route. Must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first IP of the networks ip_range or with 172.31.1.1. Must be one of the private IPv4 ranges of RFC1918.
  postNetworksRequestBodyRoutesDestination :: Data.Text.Internal.Text
  -- | gateway: Gateway for the route. Cannot be the first IP of the networks ip_range and also cannot be 172.31.1.1 as this IP is being used as a gateway for the public network interface of Servers.
  , postNetworksRequestBodyRoutesGateway :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostNetworksRequestBodyRoutes
    where toJSON obj = Data.Aeson.Types.Internal.object ("destination" Data.Aeson.Types.ToJSON..= postNetworksRequestBodyRoutesDestination obj : "gateway" Data.Aeson.Types.ToJSON..= postNetworksRequestBodyRoutesGateway obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("destination" Data.Aeson.Types.ToJSON..= postNetworksRequestBodyRoutesDestination obj) GHC.Base.<> ("gateway" Data.Aeson.Types.ToJSON..= postNetworksRequestBodyRoutesGateway obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostNetworksRequestBodyRoutes
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostNetworksRequestBodyRoutes" (\obj -> (GHC.Base.pure PostNetworksRequestBodyRoutes GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "destination")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "gateway"))
-- | Create a new 'PostNetworksRequestBodyRoutes' with all required fields.
mkPostNetworksRequestBodyRoutes :: Data.Text.Internal.Text -- ^ 'postNetworksRequestBodyRoutesDestination'
  -> Data.Text.Internal.Text -- ^ 'postNetworksRequestBodyRoutesGateway'
  -> PostNetworksRequestBodyRoutes
mkPostNetworksRequestBodyRoutes postNetworksRequestBodyRoutesDestination postNetworksRequestBodyRoutesGateway = PostNetworksRequestBodyRoutes{postNetworksRequestBodyRoutesDestination = postNetworksRequestBodyRoutesDestination,
                                                                                                                                              postNetworksRequestBodyRoutesGateway = postNetworksRequestBodyRoutesGateway}
-- | Defines the object schema located at @paths.\/networks.POST.requestBody.content.application\/json.schema.properties.subnets.items@ in the specification.
-- 
-- 
data PostNetworksRequestBodySubnets = PostNetworksRequestBodySubnets {
  -- | ip_range: Range to allocate IPs from. Must be a Subnet of the ip_range of the parent network object and must not overlap with any other subnets or with any destinations in routes. Minimum Network size is \/30. We suggest that you pick a bigger Network with a \/24 netmask.
  postNetworksRequestBodySubnetsIpRange :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | network_zone: Name of Network zone. Currently eu-central is the only available zone.
  , postNetworksRequestBodySubnetsNetworkZone :: Data.Text.Internal.Text
  -- | type: Type of Subnetwork
  , postNetworksRequestBodySubnetsType :: PostNetworksRequestBodySubnetsType
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostNetworksRequestBodySubnets
    where toJSON obj = Data.Aeson.Types.Internal.object ("ip_range" Data.Aeson.Types.ToJSON..= postNetworksRequestBodySubnetsIpRange obj : "network_zone" Data.Aeson.Types.ToJSON..= postNetworksRequestBodySubnetsNetworkZone obj : "type" Data.Aeson.Types.ToJSON..= postNetworksRequestBodySubnetsType obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("ip_range" Data.Aeson.Types.ToJSON..= postNetworksRequestBodySubnetsIpRange obj) GHC.Base.<> (("network_zone" Data.Aeson.Types.ToJSON..= postNetworksRequestBodySubnetsNetworkZone obj) GHC.Base.<> ("type" Data.Aeson.Types.ToJSON..= postNetworksRequestBodySubnetsType obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PostNetworksRequestBodySubnets
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostNetworksRequestBodySubnets" (\obj -> ((GHC.Base.pure PostNetworksRequestBodySubnets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip_range")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "network_zone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Create a new 'PostNetworksRequestBodySubnets' with all required fields.
mkPostNetworksRequestBodySubnets :: Data.Text.Internal.Text -- ^ 'postNetworksRequestBodySubnetsNetworkZone'
  -> PostNetworksRequestBodySubnetsType -- ^ 'postNetworksRequestBodySubnetsType'
  -> PostNetworksRequestBodySubnets
mkPostNetworksRequestBodySubnets postNetworksRequestBodySubnetsNetworkZone postNetworksRequestBodySubnetsType = PostNetworksRequestBodySubnets{postNetworksRequestBodySubnetsIpRange = GHC.Maybe.Nothing,
                                                                                                                                               postNetworksRequestBodySubnetsNetworkZone = postNetworksRequestBodySubnetsNetworkZone,
                                                                                                                                               postNetworksRequestBodySubnetsType = postNetworksRequestBodySubnetsType}
-- | Defines the enum schema located at @paths.\/networks.POST.requestBody.content.application\/json.schema.properties.subnets.items.properties.type@ in the specification.
-- 
-- Type of Subnetwork
data PostNetworksRequestBodySubnetsType =
   PostNetworksRequestBodySubnetsTypeOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostNetworksRequestBodySubnetsTypeTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostNetworksRequestBodySubnetsTypeEnumCloud -- ^ Represents the JSON value @"cloud"@
  | PostNetworksRequestBodySubnetsTypeEnumServer -- ^ Represents the JSON value @"server"@
  | PostNetworksRequestBodySubnetsTypeEnumVswitch -- ^ Represents the JSON value @"vswitch"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostNetworksRequestBodySubnetsType
    where toJSON (PostNetworksRequestBodySubnetsTypeOther val) = val
          toJSON (PostNetworksRequestBodySubnetsTypeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PostNetworksRequestBodySubnetsTypeEnumCloud) = "cloud"
          toJSON (PostNetworksRequestBodySubnetsTypeEnumServer) = "server"
          toJSON (PostNetworksRequestBodySubnetsTypeEnumVswitch) = "vswitch"
instance Data.Aeson.Types.FromJSON.FromJSON PostNetworksRequestBodySubnetsType
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "cloud" -> PostNetworksRequestBodySubnetsTypeEnumCloud
                                            | val GHC.Classes.== "server" -> PostNetworksRequestBodySubnetsTypeEnumServer
                                            | val GHC.Classes.== "vswitch" -> PostNetworksRequestBodySubnetsTypeEnumVswitch
                                            | GHC.Base.otherwise -> PostNetworksRequestBodySubnetsTypeOther val)
-- | Represents a response of the operation 'postNetworks'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostNetworksResponseError' is used.
data PostNetworksResponse =
   PostNetworksResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostNetworksResponse201 PostNetworksResponseBody201 -- ^ The \`network\` key contains the network that was just created
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/networks.POST.responses.201.content.application\/json.schema@ in the specification.
-- 
-- 
data PostNetworksResponseBody201 = PostNetworksResponseBody201 {
  -- | network
  postNetworksResponseBody201Network :: (GHC.Maybe.Maybe PostNetworksResponseBody201Network)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostNetworksResponseBody201
    where toJSON obj = Data.Aeson.Types.Internal.object ("network" Data.Aeson.Types.ToJSON..= postNetworksResponseBody201Network obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("network" Data.Aeson.Types.ToJSON..= postNetworksResponseBody201Network obj)
instance Data.Aeson.Types.FromJSON.FromJSON PostNetworksResponseBody201
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostNetworksResponseBody201" (\obj -> GHC.Base.pure PostNetworksResponseBody201 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "network"))
-- | Create a new 'PostNetworksResponseBody201' with all required fields.
mkPostNetworksResponseBody201 :: PostNetworksResponseBody201
mkPostNetworksResponseBody201 = PostNetworksResponseBody201{postNetworksResponseBody201Network = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/networks.POST.responses.201.content.application\/json.schema.properties.network@ in the specification.
-- 
-- 
data PostNetworksResponseBody201Network = PostNetworksResponseBody201Network {
  -- | created: Point in time when the Network was created (in ISO-8601 format)
  postNetworksResponseBody201NetworkCreated :: Data.Text.Internal.Text
  -- | id: ID of the Network
  , postNetworksResponseBody201NetworkId :: GHC.Types.Int
  -- | ip_range: IPv4 prefix of the whole Network
  , postNetworksResponseBody201NetworkIpRange :: Data.Text.Internal.Text
  -- | labels: User-defined labels (key-value pairs)
  , postNetworksResponseBody201NetworkLabels :: Data.Aeson.Types.Internal.Object
  -- | load_balancers: Array of IDs of Load Balancers attached to this Network
  , postNetworksResponseBody201NetworkLoadBalancers :: (GHC.Maybe.Maybe ([GHC.Types.Int]))
  -- | name: Name of the Network
  , postNetworksResponseBody201NetworkName :: Data.Text.Internal.Text
  -- | protection: Protection configuration for the Network
  , postNetworksResponseBody201NetworkProtection :: PostNetworksResponseBody201NetworkProtection
  -- | routes: Array of routes set in this Network
  , postNetworksResponseBody201NetworkRoutes :: ([PostNetworksResponseBody201NetworkRoutes])
  -- | servers: Array of IDs of Servers attached to this Network
  , postNetworksResponseBody201NetworkServers :: ([GHC.Types.Int])
  -- | subnets: Array subnets allocated in this Network
  , postNetworksResponseBody201NetworkSubnets :: ([PostNetworksResponseBody201NetworkSubnets])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostNetworksResponseBody201Network
    where toJSON obj = Data.Aeson.Types.Internal.object ("created" Data.Aeson.Types.ToJSON..= postNetworksResponseBody201NetworkCreated obj : "id" Data.Aeson.Types.ToJSON..= postNetworksResponseBody201NetworkId obj : "ip_range" Data.Aeson.Types.ToJSON..= postNetworksResponseBody201NetworkIpRange obj : "labels" Data.Aeson.Types.ToJSON..= postNetworksResponseBody201NetworkLabels obj : "load_balancers" Data.Aeson.Types.ToJSON..= postNetworksResponseBody201NetworkLoadBalancers obj : "name" Data.Aeson.Types.ToJSON..= postNetworksResponseBody201NetworkName obj : "protection" Data.Aeson.Types.ToJSON..= postNetworksResponseBody201NetworkProtection obj : "routes" Data.Aeson.Types.ToJSON..= postNetworksResponseBody201NetworkRoutes obj : "servers" Data.Aeson.Types.ToJSON..= postNetworksResponseBody201NetworkServers obj : "subnets" Data.Aeson.Types.ToJSON..= postNetworksResponseBody201NetworkSubnets obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("created" Data.Aeson.Types.ToJSON..= postNetworksResponseBody201NetworkCreated obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= postNetworksResponseBody201NetworkId obj) GHC.Base.<> (("ip_range" Data.Aeson.Types.ToJSON..= postNetworksResponseBody201NetworkIpRange obj) GHC.Base.<> (("labels" Data.Aeson.Types.ToJSON..= postNetworksResponseBody201NetworkLabels obj) GHC.Base.<> (("load_balancers" Data.Aeson.Types.ToJSON..= postNetworksResponseBody201NetworkLoadBalancers obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= postNetworksResponseBody201NetworkName obj) GHC.Base.<> (("protection" Data.Aeson.Types.ToJSON..= postNetworksResponseBody201NetworkProtection obj) GHC.Base.<> (("routes" Data.Aeson.Types.ToJSON..= postNetworksResponseBody201NetworkRoutes obj) GHC.Base.<> (("servers" Data.Aeson.Types.ToJSON..= postNetworksResponseBody201NetworkServers obj) GHC.Base.<> ("subnets" Data.Aeson.Types.ToJSON..= postNetworksResponseBody201NetworkSubnets obj))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostNetworksResponseBody201Network
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostNetworksResponseBody201Network" (\obj -> (((((((((GHC.Base.pure PostNetworksResponseBody201Network GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ip_range")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "labels")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "load_balancers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "protection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "routes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "servers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "subnets"))
-- | Create a new 'PostNetworksResponseBody201Network' with all required fields.
mkPostNetworksResponseBody201Network :: Data.Text.Internal.Text -- ^ 'postNetworksResponseBody201NetworkCreated'
  -> GHC.Types.Int -- ^ 'postNetworksResponseBody201NetworkId'
  -> Data.Text.Internal.Text -- ^ 'postNetworksResponseBody201NetworkIpRange'
  -> Data.Aeson.Types.Internal.Object -- ^ 'postNetworksResponseBody201NetworkLabels'
  -> Data.Text.Internal.Text -- ^ 'postNetworksResponseBody201NetworkName'
  -> PostNetworksResponseBody201NetworkProtection -- ^ 'postNetworksResponseBody201NetworkProtection'
  -> [PostNetworksResponseBody201NetworkRoutes] -- ^ 'postNetworksResponseBody201NetworkRoutes'
  -> [GHC.Types.Int] -- ^ 'postNetworksResponseBody201NetworkServers'
  -> [PostNetworksResponseBody201NetworkSubnets] -- ^ 'postNetworksResponseBody201NetworkSubnets'
  -> PostNetworksResponseBody201Network
mkPostNetworksResponseBody201Network postNetworksResponseBody201NetworkCreated postNetworksResponseBody201NetworkId postNetworksResponseBody201NetworkIpRange postNetworksResponseBody201NetworkLabels postNetworksResponseBody201NetworkName postNetworksResponseBody201NetworkProtection postNetworksResponseBody201NetworkRoutes postNetworksResponseBody201NetworkServers postNetworksResponseBody201NetworkSubnets = PostNetworksResponseBody201Network{postNetworksResponseBody201NetworkCreated = postNetworksResponseBody201NetworkCreated,
                                                                                                                                                                                                                                                                                                                                                                                                                                                             postNetworksResponseBody201NetworkId = postNetworksResponseBody201NetworkId,
                                                                                                                                                                                                                                                                                                                                                                                                                                                             postNetworksResponseBody201NetworkIpRange = postNetworksResponseBody201NetworkIpRange,
                                                                                                                                                                                                                                                                                                                                                                                                                                                             postNetworksResponseBody201NetworkLabels = postNetworksResponseBody201NetworkLabels,
                                                                                                                                                                                                                                                                                                                                                                                                                                                             postNetworksResponseBody201NetworkLoadBalancers = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                                                                                                                                                                                             postNetworksResponseBody201NetworkName = postNetworksResponseBody201NetworkName,
                                                                                                                                                                                                                                                                                                                                                                                                                                                             postNetworksResponseBody201NetworkProtection = postNetworksResponseBody201NetworkProtection,
                                                                                                                                                                                                                                                                                                                                                                                                                                                             postNetworksResponseBody201NetworkRoutes = postNetworksResponseBody201NetworkRoutes,
                                                                                                                                                                                                                                                                                                                                                                                                                                                             postNetworksResponseBody201NetworkServers = postNetworksResponseBody201NetworkServers,
                                                                                                                                                                                                                                                                                                                                                                                                                                                             postNetworksResponseBody201NetworkSubnets = postNetworksResponseBody201NetworkSubnets}
-- | Defines the object schema located at @paths.\/networks.POST.responses.201.content.application\/json.schema.properties.network.properties.protection@ in the specification.
-- 
-- Protection configuration for the Network
data PostNetworksResponseBody201NetworkProtection = PostNetworksResponseBody201NetworkProtection {
  -- | delete: If true, prevents the Network from being deleted
  postNetworksResponseBody201NetworkProtectionDelete :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostNetworksResponseBody201NetworkProtection
    where toJSON obj = Data.Aeson.Types.Internal.object ("delete" Data.Aeson.Types.ToJSON..= postNetworksResponseBody201NetworkProtectionDelete obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("delete" Data.Aeson.Types.ToJSON..= postNetworksResponseBody201NetworkProtectionDelete obj)
instance Data.Aeson.Types.FromJSON.FromJSON PostNetworksResponseBody201NetworkProtection
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostNetworksResponseBody201NetworkProtection" (\obj -> GHC.Base.pure PostNetworksResponseBody201NetworkProtection GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "delete"))
-- | Create a new 'PostNetworksResponseBody201NetworkProtection' with all required fields.
mkPostNetworksResponseBody201NetworkProtection :: GHC.Types.Bool -- ^ 'postNetworksResponseBody201NetworkProtectionDelete'
  -> PostNetworksResponseBody201NetworkProtection
mkPostNetworksResponseBody201NetworkProtection postNetworksResponseBody201NetworkProtectionDelete = PostNetworksResponseBody201NetworkProtection{postNetworksResponseBody201NetworkProtectionDelete = postNetworksResponseBody201NetworkProtectionDelete}
-- | Defines the object schema located at @paths.\/networks.POST.responses.201.content.application\/json.schema.properties.network.properties.routes.items@ in the specification.
-- 
-- 
data PostNetworksResponseBody201NetworkRoutes = PostNetworksResponseBody201NetworkRoutes {
  -- | destination: Destination network or host of this route. Must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first IP of the networks ip_range or with 172.31.1.1. Must be one of the private IPv4 ranges of RFC1918.
  postNetworksResponseBody201NetworkRoutesDestination :: Data.Text.Internal.Text
  -- | gateway: Gateway for the route. Cannot be the first IP of the networks ip_range and also cannot be 172.31.1.1 as this IP is being used as a gateway for the public network interface of Servers.
  , postNetworksResponseBody201NetworkRoutesGateway :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostNetworksResponseBody201NetworkRoutes
    where toJSON obj = Data.Aeson.Types.Internal.object ("destination" Data.Aeson.Types.ToJSON..= postNetworksResponseBody201NetworkRoutesDestination obj : "gateway" Data.Aeson.Types.ToJSON..= postNetworksResponseBody201NetworkRoutesGateway obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("destination" Data.Aeson.Types.ToJSON..= postNetworksResponseBody201NetworkRoutesDestination obj) GHC.Base.<> ("gateway" Data.Aeson.Types.ToJSON..= postNetworksResponseBody201NetworkRoutesGateway obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostNetworksResponseBody201NetworkRoutes
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostNetworksResponseBody201NetworkRoutes" (\obj -> (GHC.Base.pure PostNetworksResponseBody201NetworkRoutes GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "destination")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "gateway"))
-- | Create a new 'PostNetworksResponseBody201NetworkRoutes' with all required fields.
mkPostNetworksResponseBody201NetworkRoutes :: Data.Text.Internal.Text -- ^ 'postNetworksResponseBody201NetworkRoutesDestination'
  -> Data.Text.Internal.Text -- ^ 'postNetworksResponseBody201NetworkRoutesGateway'
  -> PostNetworksResponseBody201NetworkRoutes
mkPostNetworksResponseBody201NetworkRoutes postNetworksResponseBody201NetworkRoutesDestination postNetworksResponseBody201NetworkRoutesGateway = PostNetworksResponseBody201NetworkRoutes{postNetworksResponseBody201NetworkRoutesDestination = postNetworksResponseBody201NetworkRoutesDestination,
                                                                                                                                                                                          postNetworksResponseBody201NetworkRoutesGateway = postNetworksResponseBody201NetworkRoutesGateway}
-- | Defines the object schema located at @paths.\/networks.POST.responses.201.content.application\/json.schema.properties.network.properties.subnets.items@ in the specification.
-- 
-- 
data PostNetworksResponseBody201NetworkSubnets = PostNetworksResponseBody201NetworkSubnets {
  -- | gateway: Gateway for Servers attached to this subnet. For subnets of type Server this is always the first IP of the network IP range.
  postNetworksResponseBody201NetworkSubnetsGateway :: Data.Text.Internal.Text
  -- | ip_range: Range to allocate IPs from. Must be a Subnet of the ip_range of the parent network object and must not overlap with any other subnets or with any destinations in routes. Minimum Network size is \/30. We suggest that you pick a bigger Network with a \/24 netmask.
  , postNetworksResponseBody201NetworkSubnetsIpRange :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | network_zone: Name of Network zone. Currently eu-central is the only available zone.
  , postNetworksResponseBody201NetworkSubnetsNetworkZone :: Data.Text.Internal.Text
  -- | type: Type of Subnetwork
  , postNetworksResponseBody201NetworkSubnetsType :: PostNetworksResponseBody201NetworkSubnetsType
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostNetworksResponseBody201NetworkSubnets
    where toJSON obj = Data.Aeson.Types.Internal.object ("gateway" Data.Aeson.Types.ToJSON..= postNetworksResponseBody201NetworkSubnetsGateway obj : "ip_range" Data.Aeson.Types.ToJSON..= postNetworksResponseBody201NetworkSubnetsIpRange obj : "network_zone" Data.Aeson.Types.ToJSON..= postNetworksResponseBody201NetworkSubnetsNetworkZone obj : "type" Data.Aeson.Types.ToJSON..= postNetworksResponseBody201NetworkSubnetsType obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("gateway" Data.Aeson.Types.ToJSON..= postNetworksResponseBody201NetworkSubnetsGateway obj) GHC.Base.<> (("ip_range" Data.Aeson.Types.ToJSON..= postNetworksResponseBody201NetworkSubnetsIpRange obj) GHC.Base.<> (("network_zone" Data.Aeson.Types.ToJSON..= postNetworksResponseBody201NetworkSubnetsNetworkZone obj) GHC.Base.<> ("type" Data.Aeson.Types.ToJSON..= postNetworksResponseBody201NetworkSubnetsType obj))))
instance Data.Aeson.Types.FromJSON.FromJSON PostNetworksResponseBody201NetworkSubnets
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostNetworksResponseBody201NetworkSubnets" (\obj -> (((GHC.Base.pure PostNetworksResponseBody201NetworkSubnets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "gateway")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip_range")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "network_zone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Create a new 'PostNetworksResponseBody201NetworkSubnets' with all required fields.
mkPostNetworksResponseBody201NetworkSubnets :: Data.Text.Internal.Text -- ^ 'postNetworksResponseBody201NetworkSubnetsGateway'
  -> Data.Text.Internal.Text -- ^ 'postNetworksResponseBody201NetworkSubnetsNetworkZone'
  -> PostNetworksResponseBody201NetworkSubnetsType -- ^ 'postNetworksResponseBody201NetworkSubnetsType'
  -> PostNetworksResponseBody201NetworkSubnets
mkPostNetworksResponseBody201NetworkSubnets postNetworksResponseBody201NetworkSubnetsGateway postNetworksResponseBody201NetworkSubnetsNetworkZone postNetworksResponseBody201NetworkSubnetsType = PostNetworksResponseBody201NetworkSubnets{postNetworksResponseBody201NetworkSubnetsGateway = postNetworksResponseBody201NetworkSubnetsGateway,
                                                                                                                                                                                                                                            postNetworksResponseBody201NetworkSubnetsIpRange = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                            postNetworksResponseBody201NetworkSubnetsNetworkZone = postNetworksResponseBody201NetworkSubnetsNetworkZone,
                                                                                                                                                                                                                                            postNetworksResponseBody201NetworkSubnetsType = postNetworksResponseBody201NetworkSubnetsType}
-- | Defines the enum schema located at @paths.\/networks.POST.responses.201.content.application\/json.schema.properties.network.properties.subnets.items.properties.type@ in the specification.
-- 
-- Type of Subnetwork
data PostNetworksResponseBody201NetworkSubnetsType =
   PostNetworksResponseBody201NetworkSubnetsTypeOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostNetworksResponseBody201NetworkSubnetsTypeTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostNetworksResponseBody201NetworkSubnetsTypeEnumCloud -- ^ Represents the JSON value @"cloud"@
  | PostNetworksResponseBody201NetworkSubnetsTypeEnumServer -- ^ Represents the JSON value @"server"@
  | PostNetworksResponseBody201NetworkSubnetsTypeEnumVswitch -- ^ Represents the JSON value @"vswitch"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostNetworksResponseBody201NetworkSubnetsType
    where toJSON (PostNetworksResponseBody201NetworkSubnetsTypeOther val) = val
          toJSON (PostNetworksResponseBody201NetworkSubnetsTypeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PostNetworksResponseBody201NetworkSubnetsTypeEnumCloud) = "cloud"
          toJSON (PostNetworksResponseBody201NetworkSubnetsTypeEnumServer) = "server"
          toJSON (PostNetworksResponseBody201NetworkSubnetsTypeEnumVswitch) = "vswitch"
instance Data.Aeson.Types.FromJSON.FromJSON PostNetworksResponseBody201NetworkSubnetsType
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "cloud" -> PostNetworksResponseBody201NetworkSubnetsTypeEnumCloud
                                            | val GHC.Classes.== "server" -> PostNetworksResponseBody201NetworkSubnetsTypeEnumServer
                                            | val GHC.Classes.== "vswitch" -> PostNetworksResponseBody201NetworkSubnetsTypeEnumVswitch
                                            | GHC.Base.otherwise -> PostNetworksResponseBody201NetworkSubnetsTypeOther val)
-- | > POST /networks
-- 
-- The same as 'postNetworks' but accepts an explicit configuration.
postNetworksWithConfiguration :: forall m . HCloud.Common.MonadHTTP m => HCloud.Common.Configuration -- ^ The configuration to use in the request
  -> GHC.Maybe.Maybe PostNetworksRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response PostNetworksResponse) -- ^ Monadic computation which returns the result of the operation
postNetworksWithConfiguration config
                              body = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostNetworksResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostNetworksResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                        PostNetworksResponseBody201)
                                                                                                                                                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/networks") GHC.Base.mempty body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /networks
-- 
-- The same as 'postNetworks' but returns the raw 'Data.ByteString.Char8.ByteString'.
postNetworksRaw :: forall m . HCloud.Common.MonadHTTP m => GHC.Maybe.Maybe PostNetworksRequestBody -- ^ The request body to send
  -> HCloud.Common.HttpT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postNetworksRaw body = GHC.Base.id (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/networks") GHC.Base.mempty body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /networks
-- 
-- The same as 'postNetworks' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postNetworksWithConfigurationRaw :: forall m . HCloud.Common.MonadHTTP m => HCloud.Common.Configuration -- ^ The configuration to use in the request
  -> GHC.Maybe.Maybe PostNetworksRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postNetworksWithConfigurationRaw config
                                 body = GHC.Base.id (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/networks") GHC.Base.mempty body HCloud.Common.RequestBodyEncodingJSON)
