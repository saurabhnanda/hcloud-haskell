-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation postServers_Id_ActionsRebuild
module HCloud.Operations.PostServersIdActionsRebuild where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > POST /servers/{id}/actions/rebuild
-- 
-- Rebuilds a Server overwriting its disk with the content of an Image, thereby **destroying all data** on the target Server
-- 
-- The Image can either be one you have created earlier (\`backup\` or \`snapshot\` Image) or it can be a completely fresh \`system\` Image provided by us. You can get a list of all available Images with \`GET \/images\`.
-- 
-- Your Server will automatically be powered off before the rebuild command executes.
postServers_Id_ActionsRebuild :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer                                                                                                                  -- ^ id: ID of the Server
  -> GHC.Maybe.Maybe PostServersIdActionsRebuildRequestBody                                                                                    -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response PostServersIdActionsRebuildResponse))   -- ^ Monad containing the result of the operation
postServers_Id_ActionsRebuild config
                              id
                              body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostServersIdActionsRebuildResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostServersIdActionsRebuildResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     PostServersIdActionsRebuildResponseBody201)
                                                                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/servers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/rebuild"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /servers/{id}/actions/rebuild
-- 
-- The same as 'postServers_Id_ActionsRebuild' but returns the raw 'Data.ByteString.Char8.ByteString'
postServers_Id_ActionsRebuildRaw :: forall m s . (HCloud.Common.MonadHTTP m,
                                                  HCloud.Common.SecurityScheme s) =>
                                    HCloud.Common.Configuration s ->
                                    GHC.Integer.Type.Integer ->
                                    GHC.Maybe.Maybe PostServersIdActionsRebuildRequestBody ->
                                    m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                          (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postServers_Id_ActionsRebuildRaw config
                                 id
                                 body = GHC.Base.id (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/servers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/rebuild"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /servers/{id}/actions/rebuild
-- 
-- Monadic version of 'postServers_Id_ActionsRebuild' (use with 'HCloud.Common.runWithConfiguration')
postServers_Id_ActionsRebuildM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                HCloud.Common.SecurityScheme s) =>
                                  GHC.Integer.Type.Integer ->
                                  GHC.Maybe.Maybe PostServersIdActionsRebuildRequestBody ->
                                  Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                     m
                                                                     (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                         (Network.HTTP.Client.Types.Response PostServersIdActionsRebuildResponse))
postServers_Id_ActionsRebuildM id
                               body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostServersIdActionsRebuildResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostServersIdActionsRebuildResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      PostServersIdActionsRebuildResponseBody201)
                                                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/servers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/rebuild"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /servers/{id}/actions/rebuild
-- 
-- Monadic version of 'postServers_Id_ActionsRebuildRaw' (use with 'HCloud.Common.runWithConfiguration')
postServers_Id_ActionsRebuildRawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                   HCloud.Common.SecurityScheme s) =>
                                     GHC.Integer.Type.Integer ->
                                     GHC.Maybe.Maybe PostServersIdActionsRebuildRequestBody ->
                                     Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                        m
                                                                        (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                            (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postServers_Id_ActionsRebuildRawM id
                                  body = GHC.Base.id (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/servers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/rebuild"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema postServers_Id_ActionsRebuildRequestBody
-- 
-- 
data PostServersIdActionsRebuildRequestBody = PostServersIdActionsRebuildRequestBody {
  -- | image: ID or name of Image to rebuilt from.
  postServersIdActionsRebuildRequestBodyImage :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsRebuildRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "image" (postServersIdActionsRebuildRequestBodyImage obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "image" (postServersIdActionsRebuildRequestBodyImage obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersIdActionsRebuildRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersIdActionsRebuildRequestBody" (\obj -> GHC.Base.pure PostServersIdActionsRebuildRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "image"))
-- | Represents a response of the operation 'postServers_Id_ActionsRebuild'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostServersIdActionsRebuildResponseError' is used.
data PostServersIdActionsRebuildResponse =                                             
   PostServersIdActionsRebuildResponseError GHC.Base.String                            -- ^ Means either no matching case available or a parse error
  | PostServersIdActionsRebuildResponse201 PostServersIdActionsRebuildResponseBody201  -- ^ The \`action\` key in the reply contains an Action object with this structure
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema PostServersIdActionsRebuildResponseBody201
-- 
-- 
data PostServersIdActionsRebuildResponseBody201 = PostServersIdActionsRebuildResponseBody201 {
  -- | action
  postServersIdActionsRebuildResponseBody201Action :: (GHC.Maybe.Maybe PostServersIdActionsRebuildResponseBody201Action)
  -- | root_password: New root password when not using SSH keys
  , postServersIdActionsRebuildResponseBody201RootPassword :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsRebuildResponseBody201
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "action" (postServersIdActionsRebuildResponseBody201Action obj) : (Data.Aeson..=) "root_password" (postServersIdActionsRebuildResponseBody201RootPassword obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "action" (postServersIdActionsRebuildResponseBody201Action obj) GHC.Base.<> (Data.Aeson..=) "root_password" (postServersIdActionsRebuildResponseBody201RootPassword obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersIdActionsRebuildResponseBody201
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersIdActionsRebuildResponseBody201" (\obj -> (GHC.Base.pure PostServersIdActionsRebuildResponseBody201 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "action")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "root_password"))
-- | Defines the data type for the schema PostServersIdActionsRebuildResponseBody201Action
-- 
-- 
data PostServersIdActionsRebuildResponseBody201Action = PostServersIdActionsRebuildResponseBody201Action {
  -- | command: Command executed in the Action
  postServersIdActionsRebuildResponseBody201ActionCommand :: Data.Text.Internal.Text
  -- | error: Error message for the Action if error occurred, otherwise null
  , postServersIdActionsRebuildResponseBody201ActionError :: PostServersIdActionsRebuildResponseBody201ActionError
  -- | finished: Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
  , postServersIdActionsRebuildResponseBody201ActionFinished :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , postServersIdActionsRebuildResponseBody201ActionId :: GHC.Integer.Type.Integer
  -- | progress: Progress of Action in percent
  , postServersIdActionsRebuildResponseBody201ActionProgress :: GHC.Types.Double
  -- | resources: Resources the Action relates to
  , postServersIdActionsRebuildResponseBody201ActionResources :: ([] PostServersIdActionsRebuildResponseBody201ActionResources)
  -- | started: Point in time when the Action was started (in ISO-8601 format)
  , postServersIdActionsRebuildResponseBody201ActionStarted :: Data.Text.Internal.Text
  -- | status: Status of the Action
  , postServersIdActionsRebuildResponseBody201ActionStatus :: PostServersIdActionsRebuildResponseBody201ActionStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsRebuildResponseBody201Action
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "command" (postServersIdActionsRebuildResponseBody201ActionCommand obj) : (Data.Aeson..=) "error" (postServersIdActionsRebuildResponseBody201ActionError obj) : (Data.Aeson..=) "finished" (postServersIdActionsRebuildResponseBody201ActionFinished obj) : (Data.Aeson..=) "id" (postServersIdActionsRebuildResponseBody201ActionId obj) : (Data.Aeson..=) "progress" (postServersIdActionsRebuildResponseBody201ActionProgress obj) : (Data.Aeson..=) "resources" (postServersIdActionsRebuildResponseBody201ActionResources obj) : (Data.Aeson..=) "started" (postServersIdActionsRebuildResponseBody201ActionStarted obj) : (Data.Aeson..=) "status" (postServersIdActionsRebuildResponseBody201ActionStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "command" (postServersIdActionsRebuildResponseBody201ActionCommand obj) GHC.Base.<> ((Data.Aeson..=) "error" (postServersIdActionsRebuildResponseBody201ActionError obj) GHC.Base.<> ((Data.Aeson..=) "finished" (postServersIdActionsRebuildResponseBody201ActionFinished obj) GHC.Base.<> ((Data.Aeson..=) "id" (postServersIdActionsRebuildResponseBody201ActionId obj) GHC.Base.<> ((Data.Aeson..=) "progress" (postServersIdActionsRebuildResponseBody201ActionProgress obj) GHC.Base.<> ((Data.Aeson..=) "resources" (postServersIdActionsRebuildResponseBody201ActionResources obj) GHC.Base.<> ((Data.Aeson..=) "started" (postServersIdActionsRebuildResponseBody201ActionStarted obj) GHC.Base.<> (Data.Aeson..=) "status" (postServersIdActionsRebuildResponseBody201ActionStatus obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersIdActionsRebuildResponseBody201Action
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersIdActionsRebuildResponseBody201Action" (\obj -> (((((((GHC.Base.pure PostServersIdActionsRebuildResponseBody201Action GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "command")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "finished")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "started")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Defines the data type for the schema PostServersIdActionsRebuildResponseBody201ActionError
-- 
-- Error message for the Action if error occurred, otherwise null
data PostServersIdActionsRebuildResponseBody201ActionError = PostServersIdActionsRebuildResponseBody201ActionError {
  -- | code: Fixed machine readable code
  postServersIdActionsRebuildResponseBody201ActionErrorCode :: Data.Text.Internal.Text
  -- | message: Humanized error message
  , postServersIdActionsRebuildResponseBody201ActionErrorMessage :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsRebuildResponseBody201ActionError
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "code" (postServersIdActionsRebuildResponseBody201ActionErrorCode obj) : (Data.Aeson..=) "message" (postServersIdActionsRebuildResponseBody201ActionErrorMessage obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "code" (postServersIdActionsRebuildResponseBody201ActionErrorCode obj) GHC.Base.<> (Data.Aeson..=) "message" (postServersIdActionsRebuildResponseBody201ActionErrorMessage obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersIdActionsRebuildResponseBody201ActionError
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersIdActionsRebuildResponseBody201ActionError" (\obj -> (GHC.Base.pure PostServersIdActionsRebuildResponseBody201ActionError GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Defines the data type for the schema PostServersIdActionsRebuildResponseBody201ActionResources
-- 
-- 
data PostServersIdActionsRebuildResponseBody201ActionResources = PostServersIdActionsRebuildResponseBody201ActionResources {
  -- | id: ID of the Resource
  postServersIdActionsRebuildResponseBody201ActionResourcesId :: GHC.Integer.Type.Integer
  -- | type: Type of resource referenced
  , postServersIdActionsRebuildResponseBody201ActionResourcesType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsRebuildResponseBody201ActionResources
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (postServersIdActionsRebuildResponseBody201ActionResourcesId obj) : (Data.Aeson..=) "type" (postServersIdActionsRebuildResponseBody201ActionResourcesType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (postServersIdActionsRebuildResponseBody201ActionResourcesId obj) GHC.Base.<> (Data.Aeson..=) "type" (postServersIdActionsRebuildResponseBody201ActionResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersIdActionsRebuildResponseBody201ActionResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersIdActionsRebuildResponseBody201ActionResources" (\obj -> (GHC.Base.pure PostServersIdActionsRebuildResponseBody201ActionResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema PostServersIdActionsRebuildResponseBody201ActionStatus
-- 
-- Status of the Action
data PostServersIdActionsRebuildResponseBody201ActionStatus
    = PostServersIdActionsRebuildResponseBody201ActionStatusEnumOther Data.Aeson.Types.Internal.Value
    | PostServersIdActionsRebuildResponseBody201ActionStatusEnumTyped Data.Text.Internal.Text
    | PostServersIdActionsRebuildResponseBody201ActionStatusEnumStringError
    | PostServersIdActionsRebuildResponseBody201ActionStatusEnumStringRunning
    | PostServersIdActionsRebuildResponseBody201ActionStatusEnumStringSuccess
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsRebuildResponseBody201ActionStatus
    where toJSON (PostServersIdActionsRebuildResponseBody201ActionStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostServersIdActionsRebuildResponseBody201ActionStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostServersIdActionsRebuildResponseBody201ActionStatusEnumStringError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error"
          toJSON (PostServersIdActionsRebuildResponseBody201ActionStatusEnumStringRunning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running"
          toJSON (PostServersIdActionsRebuildResponseBody201ActionStatusEnumStringSuccess) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success"
instance Data.Aeson.FromJSON PostServersIdActionsRebuildResponseBody201ActionStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error")
                                          then PostServersIdActionsRebuildResponseBody201ActionStatusEnumStringError
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running")
                                                then PostServersIdActionsRebuildResponseBody201ActionStatusEnumStringRunning
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success")
                                                      then PostServersIdActionsRebuildResponseBody201ActionStatusEnumStringSuccess
                                                      else PostServersIdActionsRebuildResponseBody201ActionStatusEnumOther val)
