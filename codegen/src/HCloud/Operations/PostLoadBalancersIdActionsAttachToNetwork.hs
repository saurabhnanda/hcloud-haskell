-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation postLoadBalancers_Id_ActionsAttachToNetwork
module HCloud.Operations.PostLoadBalancersIdActionsAttachToNetwork where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > POST /load_balancers/{id}/actions/attach_to_network
-- 
-- Attach a Load Balancer to a Network.
-- 
-- **Call specific error codes**
-- 
-- | Code                             | Description                                                           |
-- |----------------------------------|-----------------------------------------------------------------------|
-- | \`load_balancer_already_attached\` | The Load Balancer is already attached to a network                    |
-- | \`ip_not_available\`               | The provided Network IP is not available                              |
-- | \`no_subnet_available\`            | No Subnet or IP is available for the Load Balancer within the network |
postLoadBalancers_Id_ActionsAttachToNetwork :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer                                                                                                                                -- ^ id: ID of the Load Balancer
  -> GHC.Maybe.Maybe PostLoadBalancersIdActionsAttachToNetworkRequestBody                                                                                    -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response PostLoadBalancersIdActionsAttachToNetworkResponse))   -- ^ Monad containing the result of the operation
postLoadBalancers_Id_ActionsAttachToNetwork config
                                            id
                                            body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostLoadBalancersIdActionsAttachToNetworkResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostLoadBalancersIdActionsAttachToNetworkResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               PostLoadBalancersIdActionsAttachToNetworkResponseBody201)
                                                                                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/load_balancers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/attach_to_network"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /load_balancers/{id}/actions/attach_to_network
-- 
-- The same as 'postLoadBalancers_Id_ActionsAttachToNetwork' but returns the raw 'Data.ByteString.Char8.ByteString'
postLoadBalancers_Id_ActionsAttachToNetworkRaw :: forall m s . (HCloud.Common.MonadHTTP m,
                                                                HCloud.Common.SecurityScheme s) =>
                                                  HCloud.Common.Configuration s ->
                                                  GHC.Integer.Type.Integer ->
                                                  GHC.Maybe.Maybe PostLoadBalancersIdActionsAttachToNetworkRequestBody ->
                                                  m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                        (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postLoadBalancers_Id_ActionsAttachToNetworkRaw config
                                               id
                                               body = GHC.Base.id (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/load_balancers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/attach_to_network"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /load_balancers/{id}/actions/attach_to_network
-- 
-- Monadic version of 'postLoadBalancers_Id_ActionsAttachToNetwork' (use with 'HCloud.Common.runWithConfiguration')
postLoadBalancers_Id_ActionsAttachToNetworkM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                              HCloud.Common.SecurityScheme s) =>
                                                GHC.Integer.Type.Integer ->
                                                GHC.Maybe.Maybe PostLoadBalancersIdActionsAttachToNetworkRequestBody ->
                                                Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                                   m
                                                                                   (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                                       (Network.HTTP.Client.Types.Response PostLoadBalancersIdActionsAttachToNetworkResponse))
postLoadBalancers_Id_ActionsAttachToNetworkM id
                                             body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostLoadBalancersIdActionsAttachToNetworkResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostLoadBalancersIdActionsAttachToNetworkResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                PostLoadBalancersIdActionsAttachToNetworkResponseBody201)
                                                                                                                                                                                                                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/load_balancers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/attach_to_network"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /load_balancers/{id}/actions/attach_to_network
-- 
-- Monadic version of 'postLoadBalancers_Id_ActionsAttachToNetworkRaw' (use with 'HCloud.Common.runWithConfiguration')
postLoadBalancers_Id_ActionsAttachToNetworkRawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                                 HCloud.Common.SecurityScheme s) =>
                                                   GHC.Integer.Type.Integer ->
                                                   GHC.Maybe.Maybe PostLoadBalancersIdActionsAttachToNetworkRequestBody ->
                                                   Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                                      m
                                                                                      (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                                          (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postLoadBalancers_Id_ActionsAttachToNetworkRawM id
                                                body = GHC.Base.id (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/load_balancers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/attach_to_network"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema postLoadBalancers_Id_ActionsAttachToNetworkRequestBody
-- 
-- 
data PostLoadBalancersIdActionsAttachToNetworkRequestBody = PostLoadBalancersIdActionsAttachToNetworkRequestBody {
  -- | ip: IP to request to be assigned to this Load Balancer; if you do not provide this then you will be auto assigned an IP address
  postLoadBalancersIdActionsAttachToNetworkRequestBodyIp :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | network: ID of an existing network to attach the Load Balancer to
  , postLoadBalancersIdActionsAttachToNetworkRequestBodyNetwork :: GHC.Types.Double
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersIdActionsAttachToNetworkRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "ip" (postLoadBalancersIdActionsAttachToNetworkRequestBodyIp obj) : (Data.Aeson..=) "network" (postLoadBalancersIdActionsAttachToNetworkRequestBodyNetwork obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "ip" (postLoadBalancersIdActionsAttachToNetworkRequestBodyIp obj) GHC.Base.<> (Data.Aeson..=) "network" (postLoadBalancersIdActionsAttachToNetworkRequestBodyNetwork obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersIdActionsAttachToNetworkRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersIdActionsAttachToNetworkRequestBody" (\obj -> (GHC.Base.pure PostLoadBalancersIdActionsAttachToNetworkRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "network"))
-- | Represents a response of the operation 'postLoadBalancers_Id_ActionsAttachToNetwork'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostLoadBalancersIdActionsAttachToNetworkResponseError' is used.
data PostLoadBalancersIdActionsAttachToNetworkResponse =                                                           
   PostLoadBalancersIdActionsAttachToNetworkResponseError GHC.Base.String                                          -- ^ Means either no matching case available or a parse error
  | PostLoadBalancersIdActionsAttachToNetworkResponse201 PostLoadBalancersIdActionsAttachToNetworkResponseBody201  -- ^ The \`action\` key contains the \`attach_to_network\` Action
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema PostLoadBalancersIdActionsAttachToNetworkResponseBody201
-- 
-- 
data PostLoadBalancersIdActionsAttachToNetworkResponseBody201 = PostLoadBalancersIdActionsAttachToNetworkResponseBody201 {
  -- | action
  postLoadBalancersIdActionsAttachToNetworkResponseBody201Action :: PostLoadBalancersIdActionsAttachToNetworkResponseBody201Action
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersIdActionsAttachToNetworkResponseBody201
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "action" (postLoadBalancersIdActionsAttachToNetworkResponseBody201Action obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "action" (postLoadBalancersIdActionsAttachToNetworkResponseBody201Action obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersIdActionsAttachToNetworkResponseBody201
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersIdActionsAttachToNetworkResponseBody201" (\obj -> GHC.Base.pure PostLoadBalancersIdActionsAttachToNetworkResponseBody201 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "action"))
-- | Defines the data type for the schema PostLoadBalancersIdActionsAttachToNetworkResponseBody201Action
-- 
-- 
data PostLoadBalancersIdActionsAttachToNetworkResponseBody201Action = PostLoadBalancersIdActionsAttachToNetworkResponseBody201Action {
  -- | command: Command executed in the Action
  postLoadBalancersIdActionsAttachToNetworkResponseBody201ActionCommand :: Data.Text.Internal.Text
  -- | error: Error message for the Action if error occurred, otherwise null
  , postLoadBalancersIdActionsAttachToNetworkResponseBody201ActionError :: PostLoadBalancersIdActionsAttachToNetworkResponseBody201ActionError
  -- | finished: Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
  , postLoadBalancersIdActionsAttachToNetworkResponseBody201ActionFinished :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , postLoadBalancersIdActionsAttachToNetworkResponseBody201ActionId :: GHC.Integer.Type.Integer
  -- | progress: Progress of Action in percent
  , postLoadBalancersIdActionsAttachToNetworkResponseBody201ActionProgress :: GHC.Types.Double
  -- | resources: Resources the Action relates to
  , postLoadBalancersIdActionsAttachToNetworkResponseBody201ActionResources :: ([] PostLoadBalancersIdActionsAttachToNetworkResponseBody201ActionResources)
  -- | started: Point in time when the Action was started (in ISO-8601 format)
  , postLoadBalancersIdActionsAttachToNetworkResponseBody201ActionStarted :: Data.Text.Internal.Text
  -- | status: Status of the Action
  , postLoadBalancersIdActionsAttachToNetworkResponseBody201ActionStatus :: PostLoadBalancersIdActionsAttachToNetworkResponseBody201ActionStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersIdActionsAttachToNetworkResponseBody201Action
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "command" (postLoadBalancersIdActionsAttachToNetworkResponseBody201ActionCommand obj) : (Data.Aeson..=) "error" (postLoadBalancersIdActionsAttachToNetworkResponseBody201ActionError obj) : (Data.Aeson..=) "finished" (postLoadBalancersIdActionsAttachToNetworkResponseBody201ActionFinished obj) : (Data.Aeson..=) "id" (postLoadBalancersIdActionsAttachToNetworkResponseBody201ActionId obj) : (Data.Aeson..=) "progress" (postLoadBalancersIdActionsAttachToNetworkResponseBody201ActionProgress obj) : (Data.Aeson..=) "resources" (postLoadBalancersIdActionsAttachToNetworkResponseBody201ActionResources obj) : (Data.Aeson..=) "started" (postLoadBalancersIdActionsAttachToNetworkResponseBody201ActionStarted obj) : (Data.Aeson..=) "status" (postLoadBalancersIdActionsAttachToNetworkResponseBody201ActionStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "command" (postLoadBalancersIdActionsAttachToNetworkResponseBody201ActionCommand obj) GHC.Base.<> ((Data.Aeson..=) "error" (postLoadBalancersIdActionsAttachToNetworkResponseBody201ActionError obj) GHC.Base.<> ((Data.Aeson..=) "finished" (postLoadBalancersIdActionsAttachToNetworkResponseBody201ActionFinished obj) GHC.Base.<> ((Data.Aeson..=) "id" (postLoadBalancersIdActionsAttachToNetworkResponseBody201ActionId obj) GHC.Base.<> ((Data.Aeson..=) "progress" (postLoadBalancersIdActionsAttachToNetworkResponseBody201ActionProgress obj) GHC.Base.<> ((Data.Aeson..=) "resources" (postLoadBalancersIdActionsAttachToNetworkResponseBody201ActionResources obj) GHC.Base.<> ((Data.Aeson..=) "started" (postLoadBalancersIdActionsAttachToNetworkResponseBody201ActionStarted obj) GHC.Base.<> (Data.Aeson..=) "status" (postLoadBalancersIdActionsAttachToNetworkResponseBody201ActionStatus obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersIdActionsAttachToNetworkResponseBody201Action
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersIdActionsAttachToNetworkResponseBody201Action" (\obj -> (((((((GHC.Base.pure PostLoadBalancersIdActionsAttachToNetworkResponseBody201Action GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "command")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "finished")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "started")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Defines the data type for the schema PostLoadBalancersIdActionsAttachToNetworkResponseBody201ActionError
-- 
-- Error message for the Action if error occurred, otherwise null
data PostLoadBalancersIdActionsAttachToNetworkResponseBody201ActionError = PostLoadBalancersIdActionsAttachToNetworkResponseBody201ActionError {
  -- | code: Fixed machine readable code
  postLoadBalancersIdActionsAttachToNetworkResponseBody201ActionErrorCode :: Data.Text.Internal.Text
  -- | message: Humanized error message
  , postLoadBalancersIdActionsAttachToNetworkResponseBody201ActionErrorMessage :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersIdActionsAttachToNetworkResponseBody201ActionError
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "code" (postLoadBalancersIdActionsAttachToNetworkResponseBody201ActionErrorCode obj) : (Data.Aeson..=) "message" (postLoadBalancersIdActionsAttachToNetworkResponseBody201ActionErrorMessage obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "code" (postLoadBalancersIdActionsAttachToNetworkResponseBody201ActionErrorCode obj) GHC.Base.<> (Data.Aeson..=) "message" (postLoadBalancersIdActionsAttachToNetworkResponseBody201ActionErrorMessage obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersIdActionsAttachToNetworkResponseBody201ActionError
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersIdActionsAttachToNetworkResponseBody201ActionError" (\obj -> (GHC.Base.pure PostLoadBalancersIdActionsAttachToNetworkResponseBody201ActionError GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Defines the data type for the schema PostLoadBalancersIdActionsAttachToNetworkResponseBody201ActionResources
-- 
-- 
data PostLoadBalancersIdActionsAttachToNetworkResponseBody201ActionResources = PostLoadBalancersIdActionsAttachToNetworkResponseBody201ActionResources {
  -- | id: ID of the Resource
  postLoadBalancersIdActionsAttachToNetworkResponseBody201ActionResourcesId :: GHC.Integer.Type.Integer
  -- | type: Type of resource referenced
  , postLoadBalancersIdActionsAttachToNetworkResponseBody201ActionResourcesType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersIdActionsAttachToNetworkResponseBody201ActionResources
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (postLoadBalancersIdActionsAttachToNetworkResponseBody201ActionResourcesId obj) : (Data.Aeson..=) "type" (postLoadBalancersIdActionsAttachToNetworkResponseBody201ActionResourcesType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (postLoadBalancersIdActionsAttachToNetworkResponseBody201ActionResourcesId obj) GHC.Base.<> (Data.Aeson..=) "type" (postLoadBalancersIdActionsAttachToNetworkResponseBody201ActionResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostLoadBalancersIdActionsAttachToNetworkResponseBody201ActionResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLoadBalancersIdActionsAttachToNetworkResponseBody201ActionResources" (\obj -> (GHC.Base.pure PostLoadBalancersIdActionsAttachToNetworkResponseBody201ActionResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema PostLoadBalancersIdActionsAttachToNetworkResponseBody201ActionStatus
-- 
-- Status of the Action
data PostLoadBalancersIdActionsAttachToNetworkResponseBody201ActionStatus
    = PostLoadBalancersIdActionsAttachToNetworkResponseBody201ActionStatusEnumOther Data.Aeson.Types.Internal.Value
    | PostLoadBalancersIdActionsAttachToNetworkResponseBody201ActionStatusEnumTyped Data.Text.Internal.Text
    | PostLoadBalancersIdActionsAttachToNetworkResponseBody201ActionStatusEnumStringError
    | PostLoadBalancersIdActionsAttachToNetworkResponseBody201ActionStatusEnumStringRunning
    | PostLoadBalancersIdActionsAttachToNetworkResponseBody201ActionStatusEnumStringSuccess
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostLoadBalancersIdActionsAttachToNetworkResponseBody201ActionStatus
    where toJSON (PostLoadBalancersIdActionsAttachToNetworkResponseBody201ActionStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostLoadBalancersIdActionsAttachToNetworkResponseBody201ActionStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostLoadBalancersIdActionsAttachToNetworkResponseBody201ActionStatusEnumStringError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error"
          toJSON (PostLoadBalancersIdActionsAttachToNetworkResponseBody201ActionStatusEnumStringRunning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running"
          toJSON (PostLoadBalancersIdActionsAttachToNetworkResponseBody201ActionStatusEnumStringSuccess) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success"
instance Data.Aeson.FromJSON PostLoadBalancersIdActionsAttachToNetworkResponseBody201ActionStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error")
                                          then PostLoadBalancersIdActionsAttachToNetworkResponseBody201ActionStatusEnumStringError
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running")
                                                then PostLoadBalancersIdActionsAttachToNetworkResponseBody201ActionStatusEnumStringRunning
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success")
                                                      then PostLoadBalancersIdActionsAttachToNetworkResponseBody201ActionStatusEnumStringSuccess
                                                      else PostLoadBalancersIdActionsAttachToNetworkResponseBody201ActionStatusEnumOther val)
