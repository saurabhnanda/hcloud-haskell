-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation postServers_Id_ActionsAttachToNetwork
module HCloud.Operations.PostServersIdActionsAttachToNetwork where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > POST /servers/{id}/actions/attach_to_network
-- 
-- Attaches a Server to a network. This will complement the fixed public Server interface by adding an additional ethernet interface to the Server which is connected to the specified network.
-- 
-- The Server will get an IP auto assigned from a subnet of type \`server\` in the same \`network_zone\`.
-- 
-- Using the \`alias_ips\` attribute you can also define one or more additional IPs to the Servers. Please note that you will have to configure these IPs by hand on your Server since only the primary IP will be given out by DHCP.
-- 
-- **Call specific error codes**
-- 
-- | Code                             | Description                                                           |
-- |----------------------------------|-----------------------------------------------------------------------|
-- | \`server_already_attached\`        | The server is already attached to the network                         |
-- | \`ip_not_available\`               | The provided Network IP is not available                              |
-- | \`no_subnet_available\`            | No Subnet or IP is available for the Server within the network        |
-- | \`networks_overlap\`               | The network IP range overlaps with one of the server networks         |
postServers_Id_ActionsAttachToNetwork :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer                                                                                                                          -- ^ id: ID of the Server
  -> GHC.Maybe.Maybe PostServersIdActionsAttachToNetworkRequestBody                                                                                    -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response PostServersIdActionsAttachToNetworkResponse))   -- ^ Monad containing the result of the operation
postServers_Id_ActionsAttachToNetwork config
                                      id
                                      body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostServersIdActionsAttachToNetworkResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostServersIdActionsAttachToNetworkResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             PostServersIdActionsAttachToNetworkResponseBody201)
                                                                                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/servers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/attach_to_network"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /servers/{id}/actions/attach_to_network
-- 
-- The same as 'postServers_Id_ActionsAttachToNetwork' but returns the raw 'Data.ByteString.Char8.ByteString'
postServers_Id_ActionsAttachToNetworkRaw :: forall m s . (HCloud.Common.MonadHTTP m,
                                                          HCloud.Common.SecurityScheme s) =>
                                            HCloud.Common.Configuration s ->
                                            GHC.Integer.Type.Integer ->
                                            GHC.Maybe.Maybe PostServersIdActionsAttachToNetworkRequestBody ->
                                            m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                  (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postServers_Id_ActionsAttachToNetworkRaw config
                                         id
                                         body = GHC.Base.id (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/servers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/attach_to_network"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /servers/{id}/actions/attach_to_network
-- 
-- Monadic version of 'postServers_Id_ActionsAttachToNetwork' (use with 'HCloud.Common.runWithConfiguration')
postServers_Id_ActionsAttachToNetworkM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                        HCloud.Common.SecurityScheme s) =>
                                          GHC.Integer.Type.Integer ->
                                          GHC.Maybe.Maybe PostServersIdActionsAttachToNetworkRequestBody ->
                                          Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                             m
                                                                             (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                                 (Network.HTTP.Client.Types.Response PostServersIdActionsAttachToNetworkResponse))
postServers_Id_ActionsAttachToNetworkM id
                                       body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostServersIdActionsAttachToNetworkResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostServersIdActionsAttachToNetworkResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              PostServersIdActionsAttachToNetworkResponseBody201)
                                                                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/servers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/attach_to_network"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /servers/{id}/actions/attach_to_network
-- 
-- Monadic version of 'postServers_Id_ActionsAttachToNetworkRaw' (use with 'HCloud.Common.runWithConfiguration')
postServers_Id_ActionsAttachToNetworkRawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                           HCloud.Common.SecurityScheme s) =>
                                             GHC.Integer.Type.Integer ->
                                             GHC.Maybe.Maybe PostServersIdActionsAttachToNetworkRequestBody ->
                                             Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                                m
                                                                                (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                                    (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postServers_Id_ActionsAttachToNetworkRawM id
                                          body = GHC.Base.id (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/servers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/attach_to_network"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema postServers_Id_ActionsAttachToNetworkRequestBody
-- 
-- 
data PostServersIdActionsAttachToNetworkRequestBody = PostServersIdActionsAttachToNetworkRequestBody {
  -- | alias_ips: Additional IPs to be assigned to this Server
  postServersIdActionsAttachToNetworkRequestBodyAliasIps :: (GHC.Maybe.Maybe ([] Data.Text.Internal.Text))
  -- | ip: IP to request to be assigned to this Server; if you do not provide this then you will be auto assigned an IP address
  , postServersIdActionsAttachToNetworkRequestBodyIp :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | network: ID of an existing network to attach the Server to
  , postServersIdActionsAttachToNetworkRequestBodyNetwork :: GHC.Integer.Type.Integer
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsAttachToNetworkRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "alias_ips" (postServersIdActionsAttachToNetworkRequestBodyAliasIps obj) : (Data.Aeson..=) "ip" (postServersIdActionsAttachToNetworkRequestBodyIp obj) : (Data.Aeson..=) "network" (postServersIdActionsAttachToNetworkRequestBodyNetwork obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "alias_ips" (postServersIdActionsAttachToNetworkRequestBodyAliasIps obj) GHC.Base.<> ((Data.Aeson..=) "ip" (postServersIdActionsAttachToNetworkRequestBodyIp obj) GHC.Base.<> (Data.Aeson..=) "network" (postServersIdActionsAttachToNetworkRequestBodyNetwork obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersIdActionsAttachToNetworkRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersIdActionsAttachToNetworkRequestBody" (\obj -> ((GHC.Base.pure PostServersIdActionsAttachToNetworkRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "alias_ips")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "network"))
-- | Represents a response of the operation 'postServers_Id_ActionsAttachToNetwork'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostServersIdActionsAttachToNetworkResponseError' is used.
data PostServersIdActionsAttachToNetworkResponse =                                                     
   PostServersIdActionsAttachToNetworkResponseError GHC.Base.String                                    -- ^ Means either no matching case available or a parse error
  | PostServersIdActionsAttachToNetworkResponse201 PostServersIdActionsAttachToNetworkResponseBody201  -- ^ The \`action\` key in the reply contains an Action object with this structure
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema PostServersIdActionsAttachToNetworkResponseBody201
-- 
-- 
data PostServersIdActionsAttachToNetworkResponseBody201 = PostServersIdActionsAttachToNetworkResponseBody201 {
  -- | action
  postServersIdActionsAttachToNetworkResponseBody201Action :: PostServersIdActionsAttachToNetworkResponseBody201Action
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsAttachToNetworkResponseBody201
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "action" (postServersIdActionsAttachToNetworkResponseBody201Action obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "action" (postServersIdActionsAttachToNetworkResponseBody201Action obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersIdActionsAttachToNetworkResponseBody201
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersIdActionsAttachToNetworkResponseBody201" (\obj -> GHC.Base.pure PostServersIdActionsAttachToNetworkResponseBody201 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "action"))
-- | Defines the data type for the schema PostServersIdActionsAttachToNetworkResponseBody201Action
-- 
-- 
data PostServersIdActionsAttachToNetworkResponseBody201Action = PostServersIdActionsAttachToNetworkResponseBody201Action {
  -- | command: Command executed in the Action
  postServersIdActionsAttachToNetworkResponseBody201ActionCommand :: Data.Text.Internal.Text
  -- | error: Error message for the Action if error occurred, otherwise null
  , postServersIdActionsAttachToNetworkResponseBody201ActionError :: PostServersIdActionsAttachToNetworkResponseBody201ActionError
  -- | finished: Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
  , postServersIdActionsAttachToNetworkResponseBody201ActionFinished :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , postServersIdActionsAttachToNetworkResponseBody201ActionId :: GHC.Integer.Type.Integer
  -- | progress: Progress of Action in percent
  , postServersIdActionsAttachToNetworkResponseBody201ActionProgress :: GHC.Types.Double
  -- | resources: Resources the Action relates to
  , postServersIdActionsAttachToNetworkResponseBody201ActionResources :: ([] PostServersIdActionsAttachToNetworkResponseBody201ActionResources)
  -- | started: Point in time when the Action was started (in ISO-8601 format)
  , postServersIdActionsAttachToNetworkResponseBody201ActionStarted :: Data.Text.Internal.Text
  -- | status: Status of the Action
  , postServersIdActionsAttachToNetworkResponseBody201ActionStatus :: PostServersIdActionsAttachToNetworkResponseBody201ActionStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsAttachToNetworkResponseBody201Action
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "command" (postServersIdActionsAttachToNetworkResponseBody201ActionCommand obj) : (Data.Aeson..=) "error" (postServersIdActionsAttachToNetworkResponseBody201ActionError obj) : (Data.Aeson..=) "finished" (postServersIdActionsAttachToNetworkResponseBody201ActionFinished obj) : (Data.Aeson..=) "id" (postServersIdActionsAttachToNetworkResponseBody201ActionId obj) : (Data.Aeson..=) "progress" (postServersIdActionsAttachToNetworkResponseBody201ActionProgress obj) : (Data.Aeson..=) "resources" (postServersIdActionsAttachToNetworkResponseBody201ActionResources obj) : (Data.Aeson..=) "started" (postServersIdActionsAttachToNetworkResponseBody201ActionStarted obj) : (Data.Aeson..=) "status" (postServersIdActionsAttachToNetworkResponseBody201ActionStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "command" (postServersIdActionsAttachToNetworkResponseBody201ActionCommand obj) GHC.Base.<> ((Data.Aeson..=) "error" (postServersIdActionsAttachToNetworkResponseBody201ActionError obj) GHC.Base.<> ((Data.Aeson..=) "finished" (postServersIdActionsAttachToNetworkResponseBody201ActionFinished obj) GHC.Base.<> ((Data.Aeson..=) "id" (postServersIdActionsAttachToNetworkResponseBody201ActionId obj) GHC.Base.<> ((Data.Aeson..=) "progress" (postServersIdActionsAttachToNetworkResponseBody201ActionProgress obj) GHC.Base.<> ((Data.Aeson..=) "resources" (postServersIdActionsAttachToNetworkResponseBody201ActionResources obj) GHC.Base.<> ((Data.Aeson..=) "started" (postServersIdActionsAttachToNetworkResponseBody201ActionStarted obj) GHC.Base.<> (Data.Aeson..=) "status" (postServersIdActionsAttachToNetworkResponseBody201ActionStatus obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersIdActionsAttachToNetworkResponseBody201Action
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersIdActionsAttachToNetworkResponseBody201Action" (\obj -> (((((((GHC.Base.pure PostServersIdActionsAttachToNetworkResponseBody201Action GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "command")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "finished")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "started")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Defines the data type for the schema PostServersIdActionsAttachToNetworkResponseBody201ActionError
-- 
-- Error message for the Action if error occurred, otherwise null
data PostServersIdActionsAttachToNetworkResponseBody201ActionError = PostServersIdActionsAttachToNetworkResponseBody201ActionError {
  -- | code: Fixed machine readable code
  postServersIdActionsAttachToNetworkResponseBody201ActionErrorCode :: Data.Text.Internal.Text
  -- | message: Humanized error message
  , postServersIdActionsAttachToNetworkResponseBody201ActionErrorMessage :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsAttachToNetworkResponseBody201ActionError
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "code" (postServersIdActionsAttachToNetworkResponseBody201ActionErrorCode obj) : (Data.Aeson..=) "message" (postServersIdActionsAttachToNetworkResponseBody201ActionErrorMessage obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "code" (postServersIdActionsAttachToNetworkResponseBody201ActionErrorCode obj) GHC.Base.<> (Data.Aeson..=) "message" (postServersIdActionsAttachToNetworkResponseBody201ActionErrorMessage obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersIdActionsAttachToNetworkResponseBody201ActionError
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersIdActionsAttachToNetworkResponseBody201ActionError" (\obj -> (GHC.Base.pure PostServersIdActionsAttachToNetworkResponseBody201ActionError GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Defines the data type for the schema PostServersIdActionsAttachToNetworkResponseBody201ActionResources
-- 
-- 
data PostServersIdActionsAttachToNetworkResponseBody201ActionResources = PostServersIdActionsAttachToNetworkResponseBody201ActionResources {
  -- | id: ID of the Resource
  postServersIdActionsAttachToNetworkResponseBody201ActionResourcesId :: GHC.Integer.Type.Integer
  -- | type: Type of resource referenced
  , postServersIdActionsAttachToNetworkResponseBody201ActionResourcesType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsAttachToNetworkResponseBody201ActionResources
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (postServersIdActionsAttachToNetworkResponseBody201ActionResourcesId obj) : (Data.Aeson..=) "type" (postServersIdActionsAttachToNetworkResponseBody201ActionResourcesType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (postServersIdActionsAttachToNetworkResponseBody201ActionResourcesId obj) GHC.Base.<> (Data.Aeson..=) "type" (postServersIdActionsAttachToNetworkResponseBody201ActionResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersIdActionsAttachToNetworkResponseBody201ActionResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersIdActionsAttachToNetworkResponseBody201ActionResources" (\obj -> (GHC.Base.pure PostServersIdActionsAttachToNetworkResponseBody201ActionResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema PostServersIdActionsAttachToNetworkResponseBody201ActionStatus
-- 
-- Status of the Action
data PostServersIdActionsAttachToNetworkResponseBody201ActionStatus
    = PostServersIdActionsAttachToNetworkResponseBody201ActionStatusEnumOther Data.Aeson.Types.Internal.Value
    | PostServersIdActionsAttachToNetworkResponseBody201ActionStatusEnumTyped Data.Text.Internal.Text
    | PostServersIdActionsAttachToNetworkResponseBody201ActionStatusEnumStringError
    | PostServersIdActionsAttachToNetworkResponseBody201ActionStatusEnumStringRunning
    | PostServersIdActionsAttachToNetworkResponseBody201ActionStatusEnumStringSuccess
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsAttachToNetworkResponseBody201ActionStatus
    where toJSON (PostServersIdActionsAttachToNetworkResponseBody201ActionStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostServersIdActionsAttachToNetworkResponseBody201ActionStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostServersIdActionsAttachToNetworkResponseBody201ActionStatusEnumStringError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error"
          toJSON (PostServersIdActionsAttachToNetworkResponseBody201ActionStatusEnumStringRunning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running"
          toJSON (PostServersIdActionsAttachToNetworkResponseBody201ActionStatusEnumStringSuccess) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success"
instance Data.Aeson.FromJSON PostServersIdActionsAttachToNetworkResponseBody201ActionStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error")
                                          then PostServersIdActionsAttachToNetworkResponseBody201ActionStatusEnumStringError
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running")
                                                then PostServersIdActionsAttachToNetworkResponseBody201ActionStatusEnumStringRunning
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success")
                                                      then PostServersIdActionsAttachToNetworkResponseBody201ActionStatusEnumStringSuccess
                                                      else PostServersIdActionsAttachToNetworkResponseBody201ActionStatusEnumOther val)
