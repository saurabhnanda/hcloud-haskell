-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation getFloatingIps_Id_Actions
module HCloud.Operations.GetFloatingIpsIdActions where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > GET /floating_ips/{id}/actions
-- 
-- Returns all Action objects for a Floating IP. You can sort the results by using the \`sort\` URI parameter, and filter them with the \`status\` parameter.
getFloatingIps_Id_Actions :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer                                                                                                              -- ^ id: ID of the Floating IP
  -> GHC.Maybe.Maybe Data.Text.Internal.Text                                                                                               -- ^ sort: Can be used multiple times.
  -> GHC.Maybe.Maybe Data.Text.Internal.Text                                                                                               -- ^ status: Can be used multiple times, the response will contain only Actions with specified statuses
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response GetFloatingIpsIdActionsResponse))   -- ^ Monad containing the result of the operation
getFloatingIps_Id_Actions config
                          id
                          sort
                          status = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetFloatingIpsIdActionsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetFloatingIpsIdActionsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                           GetFloatingIpsIdActionsResponseBody200)
                                                                                                                                                                                                    | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/floating_ips/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions"))) ((Data.Text.pack "sort",
loud.Common.stringifyModel Data.Functor.<$> sort) : ((Data.Text.pack "status",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 HCloud.Common.stringifyModel Data.Functor.<$> status) : [])))
-- | > GET /floating_ips/{id}/actions
-- 
-- The same as 'getFloatingIps_Id_Actions' but returns the raw 'Data.ByteString.Char8.ByteString'
getFloatingIps_Id_ActionsRaw :: forall m s . (HCloud.Common.MonadHTTP m,
                                              HCloud.Common.SecurityScheme s) =>
                                HCloud.Common.Configuration s ->
                                GHC.Integer.Type.Integer ->
                                GHC.Maybe.Maybe Data.Text.Internal.Text ->
                                GHC.Maybe.Maybe Data.Text.Internal.Text ->
                                m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                      (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getFloatingIps_Id_ActionsRaw config
                             id
                             sort
                             status = GHC.Base.id (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/floating_ips/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions"))) ((Data.Text.pack "sort",
                                                                                                                                                                                                                                                                                                                                                                                                   HCloud.Common.stringifyModel Data.Functor.<$> sort) : ((Data.Text.pack "status",
                                                                                                                                                                                                                                                                                                                                                                                                                                                            HCloud.Common.stringifyModel Data.Functor.<$> status) : [])))
-- | > GET /floating_ips/{id}/actions
-- 
-- Monadic version of 'getFloatingIps_Id_Actions' (use with 'HCloud.Common.runWithConfiguration')
getFloatingIps_Id_ActionsM :: forall m s . (HCloud.Common.MonadHTTP m,
                                            HCloud.Common.SecurityScheme s) =>
                              GHC.Integer.Type.Integer ->
                              GHC.Maybe.Maybe Data.Text.Internal.Text ->
                              GHC.Maybe.Maybe Data.Text.Internal.Text ->
                              Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                 m
                                                                 (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                     (Network.HTTP.Client.Types.Response GetFloatingIpsIdActionsResponse))
getFloatingIps_Id_ActionsM id
                           sort
                           status = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetFloatingIpsIdActionsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetFloatingIpsIdActionsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                            GetFloatingIpsIdActionsResponseBody200)
                                                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/floating_ips/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions"))) ((Data.Text.pack "sort",
loud.Common.stringifyModel Data.Functor.<$> sort) : ((Data.Text.pack "status",
loud.Common.stringifyModel Data.Functor.<$> status) : [])))
-- | > GET /floating_ips/{id}/actions
-- 
-- Monadic version of 'getFloatingIps_Id_ActionsRaw' (use with 'HCloud.Common.runWithConfiguration')
getFloatingIps_Id_ActionsRawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                               HCloud.Common.SecurityScheme s) =>
                                 GHC.Integer.Type.Integer ->
                                 GHC.Maybe.Maybe Data.Text.Internal.Text ->
                                 GHC.Maybe.Maybe Data.Text.Internal.Text ->
                                 Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                    m
                                                                    (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                        (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getFloatingIps_Id_ActionsRawM id
                              sort
                              status = GHC.Base.id (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/floating_ips/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions"))) ((Data.Text.pack "sort",
                                                                                                                                                                                                                                                                                                                                                                                              HCloud.Common.stringifyModel Data.Functor.<$> sort) : ((Data.Text.pack "status",
                                                                                                                                                                                                                                                                                                                                                                                                                                                       HCloud.Common.stringifyModel Data.Functor.<$> status) : [])))
-- | Represents a response of the operation 'getFloatingIps_Id_Actions'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetFloatingIpsIdActionsResponseError' is used.
data GetFloatingIpsIdActionsResponse =                                         
   GetFloatingIpsIdActionsResponseError GHC.Base.String                        -- ^ Means either no matching case available or a parse error
  | GetFloatingIpsIdActionsResponse200 GetFloatingIpsIdActionsResponseBody200  -- ^ The \`actions\` key contains a list of Actions
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema GetFloatingIpsIdActionsResponseBody200
-- 
-- 
data GetFloatingIpsIdActionsResponseBody200 = GetFloatingIpsIdActionsResponseBody200 {
  -- | actions
  getFloatingIpsIdActionsResponseBody200Actions :: ([] GetFloatingIpsIdActionsResponseBody200Actions)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetFloatingIpsIdActionsResponseBody200
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "actions" (getFloatingIpsIdActionsResponseBody200Actions obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "actions" (getFloatingIpsIdActionsResponseBody200Actions obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetFloatingIpsIdActionsResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetFloatingIpsIdActionsResponseBody200" (\obj -> GHC.Base.pure GetFloatingIpsIdActionsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "actions"))
-- | Defines the data type for the schema GetFloatingIpsIdActionsResponseBody200Actions
-- 
-- 
data GetFloatingIpsIdActionsResponseBody200Actions = GetFloatingIpsIdActionsResponseBody200Actions {
  -- | command: Command executed in the Action
  getFloatingIpsIdActionsResponseBody200ActionsCommand :: Data.Text.Internal.Text
  -- | error: Error message for the Action if error occurred, otherwise null
  , getFloatingIpsIdActionsResponseBody200ActionsError :: GetFloatingIpsIdActionsResponseBody200ActionsError
  -- | finished: Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
  , getFloatingIpsIdActionsResponseBody200ActionsFinished :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , getFloatingIpsIdActionsResponseBody200ActionsId :: GHC.Integer.Type.Integer
  -- | progress: Progress of Action in percent
  , getFloatingIpsIdActionsResponseBody200ActionsProgress :: GHC.Types.Double
  -- | resources: Resources the Action relates to
  , getFloatingIpsIdActionsResponseBody200ActionsResources :: ([] GetFloatingIpsIdActionsResponseBody200ActionsResources)
  -- | started: Point in time when the Action was started (in ISO-8601 format)
  , getFloatingIpsIdActionsResponseBody200ActionsStarted :: Data.Text.Internal.Text
  -- | status: Status of the Action
  , getFloatingIpsIdActionsResponseBody200ActionsStatus :: GetFloatingIpsIdActionsResponseBody200ActionsStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetFloatingIpsIdActionsResponseBody200Actions
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "command" (getFloatingIpsIdActionsResponseBody200ActionsCommand obj) : (Data.Aeson..=) "error" (getFloatingIpsIdActionsResponseBody200ActionsError obj) : (Data.Aeson..=) "finished" (getFloatingIpsIdActionsResponseBody200ActionsFinished obj) : (Data.Aeson..=) "id" (getFloatingIpsIdActionsResponseBody200ActionsId obj) : (Data.Aeson..=) "progress" (getFloatingIpsIdActionsResponseBody200ActionsProgress obj) : (Data.Aeson..=) "resources" (getFloatingIpsIdActionsResponseBody200ActionsResources obj) : (Data.Aeson..=) "started" (getFloatingIpsIdActionsResponseBody200ActionsStarted obj) : (Data.Aeson..=) "status" (getFloatingIpsIdActionsResponseBody200ActionsStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "command" (getFloatingIpsIdActionsResponseBody200ActionsCommand obj) GHC.Base.<> ((Data.Aeson..=) "error" (getFloatingIpsIdActionsResponseBody200ActionsError obj) GHC.Base.<> ((Data.Aeson..=) "finished" (getFloatingIpsIdActionsResponseBody200ActionsFinished obj) GHC.Base.<> ((Data.Aeson..=) "id" (getFloatingIpsIdActionsResponseBody200ActionsId obj) GHC.Base.<> ((Data.Aeson..=) "progress" (getFloatingIpsIdActionsResponseBody200ActionsProgress obj) GHC.Base.<> ((Data.Aeson..=) "resources" (getFloatingIpsIdActionsResponseBody200ActionsResources obj) GHC.Base.<> ((Data.Aeson..=) "started" (getFloatingIpsIdActionsResponseBody200ActionsStarted obj) GHC.Base.<> (Data.Aeson..=) "status" (getFloatingIpsIdActionsResponseBody200ActionsStatus obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetFloatingIpsIdActionsResponseBody200Actions
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetFloatingIpsIdActionsResponseBody200Actions" (\obj -> (((((((GHC.Base.pure GetFloatingIpsIdActionsResponseBody200Actions GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "command")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "finished")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "started")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Defines the data type for the schema GetFloatingIpsIdActionsResponseBody200ActionsError
-- 
-- Error message for the Action if error occurred, otherwise null
data GetFloatingIpsIdActionsResponseBody200ActionsError = GetFloatingIpsIdActionsResponseBody200ActionsError {
  -- | code: Fixed machine readable code
  getFloatingIpsIdActionsResponseBody200ActionsErrorCode :: Data.Text.Internal.Text
  -- | message: Humanized error message
  , getFloatingIpsIdActionsResponseBody200ActionsErrorMessage :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetFloatingIpsIdActionsResponseBody200ActionsError
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "code" (getFloatingIpsIdActionsResponseBody200ActionsErrorCode obj) : (Data.Aeson..=) "message" (getFloatingIpsIdActionsResponseBody200ActionsErrorMessage obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "code" (getFloatingIpsIdActionsResponseBody200ActionsErrorCode obj) GHC.Base.<> (Data.Aeson..=) "message" (getFloatingIpsIdActionsResponseBody200ActionsErrorMessage obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetFloatingIpsIdActionsResponseBody200ActionsError
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetFloatingIpsIdActionsResponseBody200ActionsError" (\obj -> (GHC.Base.pure GetFloatingIpsIdActionsResponseBody200ActionsError GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Defines the data type for the schema GetFloatingIpsIdActionsResponseBody200ActionsResources
-- 
-- 
data GetFloatingIpsIdActionsResponseBody200ActionsResources = GetFloatingIpsIdActionsResponseBody200ActionsResources {
  -- | id: ID of the Resource
  getFloatingIpsIdActionsResponseBody200ActionsResourcesId :: GHC.Integer.Type.Integer
  -- | type: Type of resource referenced
  , getFloatingIpsIdActionsResponseBody200ActionsResourcesType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetFloatingIpsIdActionsResponseBody200ActionsResources
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (getFloatingIpsIdActionsResponseBody200ActionsResourcesId obj) : (Data.Aeson..=) "type" (getFloatingIpsIdActionsResponseBody200ActionsResourcesType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (getFloatingIpsIdActionsResponseBody200ActionsResourcesId obj) GHC.Base.<> (Data.Aeson..=) "type" (getFloatingIpsIdActionsResponseBody200ActionsResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetFloatingIpsIdActionsResponseBody200ActionsResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetFloatingIpsIdActionsResponseBody200ActionsResources" (\obj -> (GHC.Base.pure GetFloatingIpsIdActionsResponseBody200ActionsResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema GetFloatingIpsIdActionsResponseBody200ActionsStatus
-- 
-- Status of the Action
data GetFloatingIpsIdActionsResponseBody200ActionsStatus
    = GetFloatingIpsIdActionsResponseBody200ActionsStatusEnumOther Data.Aeson.Types.Internal.Value
    | GetFloatingIpsIdActionsResponseBody200ActionsStatusEnumTyped Data.Text.Internal.Text
    | GetFloatingIpsIdActionsResponseBody200ActionsStatusEnumStringError
    | GetFloatingIpsIdActionsResponseBody200ActionsStatusEnumStringRunning
    | GetFloatingIpsIdActionsResponseBody200ActionsStatusEnumStringSuccess
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetFloatingIpsIdActionsResponseBody200ActionsStatus
    where toJSON (GetFloatingIpsIdActionsResponseBody200ActionsStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetFloatingIpsIdActionsResponseBody200ActionsStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetFloatingIpsIdActionsResponseBody200ActionsStatusEnumStringError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error"
          toJSON (GetFloatingIpsIdActionsResponseBody200ActionsStatusEnumStringRunning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running"
          toJSON (GetFloatingIpsIdActionsResponseBody200ActionsStatusEnumStringSuccess) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success"
instance Data.Aeson.FromJSON GetFloatingIpsIdActionsResponseBody200ActionsStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error")
                                          then GetFloatingIpsIdActionsResponseBody200ActionsStatusEnumStringError
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running")
                                                then GetFloatingIpsIdActionsResponseBody200ActionsStatusEnumStringRunning
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success")
                                                      then GetFloatingIpsIdActionsResponseBody200ActionsStatusEnumStringSuccess
                                                      else GetFloatingIpsIdActionsResponseBody200ActionsStatusEnumOther val)
