-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getVolumes
module HCloud.Operations.GetVolumes where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > GET /volumes
-- 
-- Gets all existing Volumes that you have available.
getVolumes :: forall m . HCloud.Common.MonadHTTP m => GetVolumesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> HCloud.Common.HttpT m (Network.HTTP.Client.Types.Response GetVolumesResponse) -- ^ Monadic computation which returns the result of the operation
getVolumes parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetVolumesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetVolumesResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                       GetVolumesResponseBody200)
                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/volumes") [HCloud.Common.QueryParameter (Data.Text.pack "status") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getVolumesParametersQueryStatus parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                         HCloud.Common.QueryParameter (Data.Text.pack "sort") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getVolumesParametersQuerySort parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                         HCloud.Common.QueryParameter (Data.Text.pack "name") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getVolumesParametersQueryName parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                         HCloud.Common.QueryParameter (Data.Text.pack "label_selector") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getVolumesParametersQueryLabelSelector parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/volumes.GET.parameters@ in the specification.
-- 
-- 
data GetVolumesParameters = GetVolumesParameters {
  -- | queryLabel_selector: Represents the parameter named \'label_selector\'
  -- 
  -- Can be used to filter resources by labels. The response will only contain resources matching the label selector.
  getVolumesParametersQueryLabelSelector :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | queryName: Represents the parameter named \'name\'
  -- 
  -- Can be used to filter resources by their name. The response will only contain the resources matching the specified name
  , getVolumesParametersQueryName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | querySort: Represents the parameter named \'sort\'
  -- 
  -- Can be used multiple times.
  , getVolumesParametersQuerySort :: (GHC.Maybe.Maybe GetVolumesParametersQuerySort)
  -- | queryStatus: Represents the parameter named \'status\'
  -- 
  -- Can be used multiple times. The response will only contain Volumes matching the status.
  , getVolumesParametersQueryStatus :: (GHC.Maybe.Maybe GetVolumesParametersQueryStatus)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetVolumesParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("queryLabel_selector" Data.Aeson.Types.ToJSON..= getVolumesParametersQueryLabelSelector obj : "queryName" Data.Aeson.Types.ToJSON..= getVolumesParametersQueryName obj : "querySort" Data.Aeson.Types.ToJSON..= getVolumesParametersQuerySort obj : "queryStatus" Data.Aeson.Types.ToJSON..= getVolumesParametersQueryStatus obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("queryLabel_selector" Data.Aeson.Types.ToJSON..= getVolumesParametersQueryLabelSelector obj) GHC.Base.<> (("queryName" Data.Aeson.Types.ToJSON..= getVolumesParametersQueryName obj) GHC.Base.<> (("querySort" Data.Aeson.Types.ToJSON..= getVolumesParametersQuerySort obj) GHC.Base.<> ("queryStatus" Data.Aeson.Types.ToJSON..= getVolumesParametersQueryStatus obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetVolumesParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetVolumesParameters" (\obj -> (((GHC.Base.pure GetVolumesParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryLabel_selector")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryName")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "querySort")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryStatus"))
-- | Create a new 'GetVolumesParameters' with all required fields.
mkGetVolumesParameters :: GetVolumesParameters
mkGetVolumesParameters = GetVolumesParameters{getVolumesParametersQueryLabelSelector = GHC.Maybe.Nothing,
                                              getVolumesParametersQueryName = GHC.Maybe.Nothing,
                                              getVolumesParametersQuerySort = GHC.Maybe.Nothing,
                                              getVolumesParametersQueryStatus = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/volumes.GET.parameters.properties.querySort@ in the specification.
-- 
-- Represents the parameter named \'sort\'
-- 
-- Can be used multiple times.
data GetVolumesParametersQuerySort =
   GetVolumesParametersQuerySortOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetVolumesParametersQuerySortTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetVolumesParametersQuerySortEnumId -- ^ Represents the JSON value @"id"@
  | GetVolumesParametersQuerySortEnumIdAsc -- ^ Represents the JSON value @"id:asc"@
  | GetVolumesParametersQuerySortEnumIdDesc -- ^ Represents the JSON value @"id:desc"@
  | GetVolumesParametersQuerySortEnumName -- ^ Represents the JSON value @"name"@
  | GetVolumesParametersQuerySortEnumNameAsc -- ^ Represents the JSON value @"name:asc"@
  | GetVolumesParametersQuerySortEnumNameDesc -- ^ Represents the JSON value @"name:desc"@
  | GetVolumesParametersQuerySortEnumCreated -- ^ Represents the JSON value @"created"@
  | GetVolumesParametersQuerySortEnumCreatedAsc -- ^ Represents the JSON value @"created:asc"@
  | GetVolumesParametersQuerySortEnumCreatedDesc -- ^ Represents the JSON value @"created:desc"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetVolumesParametersQuerySort
    where toJSON (GetVolumesParametersQuerySortOther val) = val
          toJSON (GetVolumesParametersQuerySortTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetVolumesParametersQuerySortEnumId) = "id"
          toJSON (GetVolumesParametersQuerySortEnumIdAsc) = "id:asc"
          toJSON (GetVolumesParametersQuerySortEnumIdDesc) = "id:desc"
          toJSON (GetVolumesParametersQuerySortEnumName) = "name"
          toJSON (GetVolumesParametersQuerySortEnumNameAsc) = "name:asc"
          toJSON (GetVolumesParametersQuerySortEnumNameDesc) = "name:desc"
          toJSON (GetVolumesParametersQuerySortEnumCreated) = "created"
          toJSON (GetVolumesParametersQuerySortEnumCreatedAsc) = "created:asc"
          toJSON (GetVolumesParametersQuerySortEnumCreatedDesc) = "created:desc"
instance Data.Aeson.Types.FromJSON.FromJSON GetVolumesParametersQuerySort
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "id" -> GetVolumesParametersQuerySortEnumId
                                            | val GHC.Classes.== "id:asc" -> GetVolumesParametersQuerySortEnumIdAsc
                                            | val GHC.Classes.== "id:desc" -> GetVolumesParametersQuerySortEnumIdDesc
                                            | val GHC.Classes.== "name" -> GetVolumesParametersQuerySortEnumName
                                            | val GHC.Classes.== "name:asc" -> GetVolumesParametersQuerySortEnumNameAsc
                                            | val GHC.Classes.== "name:desc" -> GetVolumesParametersQuerySortEnumNameDesc
                                            | val GHC.Classes.== "created" -> GetVolumesParametersQuerySortEnumCreated
                                            | val GHC.Classes.== "created:asc" -> GetVolumesParametersQuerySortEnumCreatedAsc
                                            | val GHC.Classes.== "created:desc" -> GetVolumesParametersQuerySortEnumCreatedDesc
                                            | GHC.Base.otherwise -> GetVolumesParametersQuerySortOther val)
-- | Defines the enum schema located at @paths.\/volumes.GET.parameters.properties.queryStatus@ in the specification.
-- 
-- Represents the parameter named \'status\'
-- 
-- Can be used multiple times. The response will only contain Volumes matching the status.
data GetVolumesParametersQueryStatus =
   GetVolumesParametersQueryStatusOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetVolumesParametersQueryStatusTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetVolumesParametersQueryStatusEnumAvailable -- ^ Represents the JSON value @"available"@
  | GetVolumesParametersQueryStatusEnumCreating -- ^ Represents the JSON value @"creating"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetVolumesParametersQueryStatus
    where toJSON (GetVolumesParametersQueryStatusOther val) = val
          toJSON (GetVolumesParametersQueryStatusTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetVolumesParametersQueryStatusEnumAvailable) = "available"
          toJSON (GetVolumesParametersQueryStatusEnumCreating) = "creating"
instance Data.Aeson.Types.FromJSON.FromJSON GetVolumesParametersQueryStatus
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "available" -> GetVolumesParametersQueryStatusEnumAvailable
                                            | val GHC.Classes.== "creating" -> GetVolumesParametersQueryStatusEnumCreating
                                            | GHC.Base.otherwise -> GetVolumesParametersQueryStatusOther val)
-- | Represents a response of the operation 'getVolumes'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetVolumesResponseError' is used.
data GetVolumesResponse =
   GetVolumesResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetVolumesResponse200 GetVolumesResponseBody200 -- ^ The \`volumes\` key contains a list of volumes
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/volumes.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetVolumesResponseBody200 = GetVolumesResponseBody200 {
  -- | meta
  getVolumesResponseBody200Meta :: (GHC.Maybe.Maybe GetVolumesResponseBody200Meta)
  -- | volumes
  , getVolumesResponseBody200Volumes :: ([GetVolumesResponseBody200Volumes])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetVolumesResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("meta" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200Meta obj : "volumes" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200Volumes obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("meta" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200Meta obj) GHC.Base.<> ("volumes" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200Volumes obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetVolumesResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetVolumesResponseBody200" (\obj -> (GHC.Base.pure GetVolumesResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "meta")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "volumes"))
-- | Create a new 'GetVolumesResponseBody200' with all required fields.
mkGetVolumesResponseBody200 :: [GetVolumesResponseBody200Volumes] -- ^ 'getVolumesResponseBody200Volumes'
  -> GetVolumesResponseBody200
mkGetVolumesResponseBody200 getVolumesResponseBody200Volumes = GetVolumesResponseBody200{getVolumesResponseBody200Meta = GHC.Maybe.Nothing,
                                                                                         getVolumesResponseBody200Volumes = getVolumesResponseBody200Volumes}
-- | Defines the object schema located at @paths.\/volumes.GET.responses.200.content.application\/json.schema.properties.meta@ in the specification.
-- 
-- 
data GetVolumesResponseBody200Meta = GetVolumesResponseBody200Meta {
  -- | pagination
  getVolumesResponseBody200MetaPagination :: GetVolumesResponseBody200MetaPagination
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetVolumesResponseBody200Meta
    where toJSON obj = Data.Aeson.Types.Internal.object ("pagination" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200MetaPagination obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("pagination" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200MetaPagination obj)
instance Data.Aeson.Types.FromJSON.FromJSON GetVolumesResponseBody200Meta
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetVolumesResponseBody200Meta" (\obj -> GHC.Base.pure GetVolumesResponseBody200Meta GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pagination"))
-- | Create a new 'GetVolumesResponseBody200Meta' with all required fields.
mkGetVolumesResponseBody200Meta :: GetVolumesResponseBody200MetaPagination -- ^ 'getVolumesResponseBody200MetaPagination'
  -> GetVolumesResponseBody200Meta
mkGetVolumesResponseBody200Meta getVolumesResponseBody200MetaPagination = GetVolumesResponseBody200Meta{getVolumesResponseBody200MetaPagination = getVolumesResponseBody200MetaPagination}
-- | Defines the object schema located at @paths.\/volumes.GET.responses.200.content.application\/json.schema.properties.meta.properties.pagination@ in the specification.
-- 
-- 
data GetVolumesResponseBody200MetaPagination = GetVolumesResponseBody200MetaPagination {
  -- | last_page: ID of the last page available. Can be null if the current page is the last one.
  getVolumesResponseBody200MetaPaginationLastPage :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | next_page: ID of the next page. Can be null if the current page is the last one.
  , getVolumesResponseBody200MetaPaginationNextPage :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | page: Current page number
  , getVolumesResponseBody200MetaPaginationPage :: GHC.Types.Double
  -- | per_page: Maximum number of items shown per page in the response
  , getVolumesResponseBody200MetaPaginationPerPage :: GHC.Types.Double
  -- | previous_page: ID of the previous page. Can be null if the current page is the first one.
  , getVolumesResponseBody200MetaPaginationPreviousPage :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | total_entries: The total number of entries that exist in the database for this query. Nullable if unknown.
  , getVolumesResponseBody200MetaPaginationTotalEntries :: (GHC.Maybe.Maybe GHC.Types.Double)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetVolumesResponseBody200MetaPagination
    where toJSON obj = Data.Aeson.Types.Internal.object ("last_page" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200MetaPaginationLastPage obj : "next_page" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200MetaPaginationNextPage obj : "page" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200MetaPaginationPage obj : "per_page" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200MetaPaginationPerPage obj : "previous_page" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200MetaPaginationPreviousPage obj : "total_entries" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200MetaPaginationTotalEntries obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("last_page" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200MetaPaginationLastPage obj) GHC.Base.<> (("next_page" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200MetaPaginationNextPage obj) GHC.Base.<> (("page" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200MetaPaginationPage obj) GHC.Base.<> (("per_page" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200MetaPaginationPerPage obj) GHC.Base.<> (("previous_page" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200MetaPaginationPreviousPage obj) GHC.Base.<> ("total_entries" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200MetaPaginationTotalEntries obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetVolumesResponseBody200MetaPagination
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetVolumesResponseBody200MetaPagination" (\obj -> (((((GHC.Base.pure GetVolumesResponseBody200MetaPagination GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "last_page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "next_page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "per_page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "previous_page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "total_entries"))
-- | Create a new 'GetVolumesResponseBody200MetaPagination' with all required fields.
mkGetVolumesResponseBody200MetaPagination :: GHC.Maybe.Maybe GHC.Types.Double -- ^ 'getVolumesResponseBody200MetaPaginationLastPage'
  -> GHC.Maybe.Maybe GHC.Types.Double -- ^ 'getVolumesResponseBody200MetaPaginationNextPage'
  -> GHC.Types.Double -- ^ 'getVolumesResponseBody200MetaPaginationPage'
  -> GHC.Types.Double -- ^ 'getVolumesResponseBody200MetaPaginationPerPage'
  -> GHC.Maybe.Maybe GHC.Types.Double -- ^ 'getVolumesResponseBody200MetaPaginationPreviousPage'
  -> GHC.Maybe.Maybe GHC.Types.Double -- ^ 'getVolumesResponseBody200MetaPaginationTotalEntries'
  -> GetVolumesResponseBody200MetaPagination
mkGetVolumesResponseBody200MetaPagination getVolumesResponseBody200MetaPaginationLastPage getVolumesResponseBody200MetaPaginationNextPage getVolumesResponseBody200MetaPaginationPage getVolumesResponseBody200MetaPaginationPerPage getVolumesResponseBody200MetaPaginationPreviousPage getVolumesResponseBody200MetaPaginationTotalEntries = GetVolumesResponseBody200MetaPagination{getVolumesResponseBody200MetaPaginationLastPage = getVolumesResponseBody200MetaPaginationLastPage,
                                                                                                                                                                                                                                                                                                                                                                                       getVolumesResponseBody200MetaPaginationNextPage = getVolumesResponseBody200MetaPaginationNextPage,
                                                                                                                                                                                                                                                                                                                                                                                       getVolumesResponseBody200MetaPaginationPage = getVolumesResponseBody200MetaPaginationPage,
                                                                                                                                                                                                                                                                                                                                                                                       getVolumesResponseBody200MetaPaginationPerPage = getVolumesResponseBody200MetaPaginationPerPage,
                                                                                                                                                                                                                                                                                                                                                                                       getVolumesResponseBody200MetaPaginationPreviousPage = getVolumesResponseBody200MetaPaginationPreviousPage,
                                                                                                                                                                                                                                                                                                                                                                                       getVolumesResponseBody200MetaPaginationTotalEntries = getVolumesResponseBody200MetaPaginationTotalEntries}
-- | Defines the object schema located at @paths.\/volumes.GET.responses.200.content.application\/json.schema.properties.volumes.items@ in the specification.
-- 
-- 
data GetVolumesResponseBody200Volumes = GetVolumesResponseBody200Volumes {
  -- | created: Point in time when the Resource was created (in ISO-8601 format)
  getVolumesResponseBody200VolumesCreated :: Data.Text.Internal.Text
  -- | format: Filesystem of the Volume if formatted on creation, null if not formatted on creation
  , getVolumesResponseBody200VolumesFormat :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | id: ID of the Resource
  , getVolumesResponseBody200VolumesId :: GHC.Types.Int
  -- | labels: User-defined labels (key-value pairs)
  , getVolumesResponseBody200VolumesLabels :: Data.Aeson.Types.Internal.Object
  -- | linux_device: Device path on the file system for the Volume
  , getVolumesResponseBody200VolumesLinuxDevice :: Data.Text.Internal.Text
  -- | location: Location of the Volume. Volume can only be attached to Servers in the same Location.
  , getVolumesResponseBody200VolumesLocation :: GetVolumesResponseBody200VolumesLocation
  -- | name: Name of the Resource. Must be unique per Project.
  , getVolumesResponseBody200VolumesName :: Data.Text.Internal.Text
  -- | protection: Protection configuration for the Resource
  , getVolumesResponseBody200VolumesProtection :: GetVolumesResponseBody200VolumesProtection
  -- | server: ID of the Server the Volume is attached to, null if it is not attached at all
  , getVolumesResponseBody200VolumesServer :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | size: Size in GB of the Volume
  , getVolumesResponseBody200VolumesSize :: GHC.Types.Double
  -- | status: Current status of the Volume
  , getVolumesResponseBody200VolumesStatus :: GetVolumesResponseBody200VolumesStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetVolumesResponseBody200Volumes
    where toJSON obj = Data.Aeson.Types.Internal.object ("created" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesCreated obj : "format" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesFormat obj : "id" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesId obj : "labels" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesLabels obj : "linux_device" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesLinuxDevice obj : "location" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesLocation obj : "name" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesName obj : "protection" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesProtection obj : "server" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesServer obj : "size" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesSize obj : "status" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesStatus obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("created" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesCreated obj) GHC.Base.<> (("format" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesFormat obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesId obj) GHC.Base.<> (("labels" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesLabels obj) GHC.Base.<> (("linux_device" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesLinuxDevice obj) GHC.Base.<> (("location" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesLocation obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesName obj) GHC.Base.<> (("protection" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesProtection obj) GHC.Base.<> (("server" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesServer obj) GHC.Base.<> (("size" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesSize obj) GHC.Base.<> ("status" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesStatus obj)))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetVolumesResponseBody200Volumes
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetVolumesResponseBody200Volumes" (\obj -> ((((((((((GHC.Base.pure GetVolumesResponseBody200Volumes GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "format")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "labels")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "linux_device")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "location")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "protection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "server")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "size")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Create a new 'GetVolumesResponseBody200Volumes' with all required fields.
mkGetVolumesResponseBody200Volumes :: Data.Text.Internal.Text -- ^ 'getVolumesResponseBody200VolumesCreated'
  -> GHC.Maybe.Maybe Data.Text.Internal.Text -- ^ 'getVolumesResponseBody200VolumesFormat'
  -> GHC.Types.Int -- ^ 'getVolumesResponseBody200VolumesId'
  -> Data.Aeson.Types.Internal.Object -- ^ 'getVolumesResponseBody200VolumesLabels'
  -> Data.Text.Internal.Text -- ^ 'getVolumesResponseBody200VolumesLinuxDevice'
  -> GetVolumesResponseBody200VolumesLocation -- ^ 'getVolumesResponseBody200VolumesLocation'
  -> Data.Text.Internal.Text -- ^ 'getVolumesResponseBody200VolumesName'
  -> GetVolumesResponseBody200VolumesProtection -- ^ 'getVolumesResponseBody200VolumesProtection'
  -> GHC.Maybe.Maybe GHC.Types.Int -- ^ 'getVolumesResponseBody200VolumesServer'
  -> GHC.Types.Double -- ^ 'getVolumesResponseBody200VolumesSize'
  -> GetVolumesResponseBody200VolumesStatus -- ^ 'getVolumesResponseBody200VolumesStatus'
  -> GetVolumesResponseBody200Volumes
mkGetVolumesResponseBody200Volumes getVolumesResponseBody200VolumesCreated getVolumesResponseBody200VolumesFormat getVolumesResponseBody200VolumesId getVolumesResponseBody200VolumesLabels getVolumesResponseBody200VolumesLinuxDevice getVolumesResponseBody200VolumesLocation getVolumesResponseBody200VolumesName getVolumesResponseBody200VolumesProtection getVolumesResponseBody200VolumesServer getVolumesResponseBody200VolumesSize getVolumesResponseBody200VolumesStatus = GetVolumesResponseBody200Volumes{getVolumesResponseBody200VolumesCreated = getVolumesResponseBody200VolumesCreated,
getVolumesResponseBody200VolumesFormat = getVolumesResponseBody200VolumesFormat,
getVolumesResponseBody200VolumesId = getVolumesResponseBody200VolumesId,
getVolumesResponseBody200VolumesLabels = getVolumesResponseBody200VolumesLabels,
getVolumesResponseBody200VolumesLinuxDevice = getVolumesResponseBody200VolumesLinuxDevice,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       getVolumesResponseBody200VolumesLocation = getVolumesResponseBody200VolumesLocation,
getVolumesResponseBody200VolumesName = getVolumesResponseBody200VolumesName,
getVolumesResponseBody200VolumesProtection = getVolumesResponseBody200VolumesProtection,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       getVolumesResponseBody200VolumesServer = getVolumesResponseBody200VolumesServer,
getVolumesResponseBody200VolumesSize = getVolumesResponseBody200VolumesSize,
getVolumesResponseBody200VolumesStatus = getVolumesResponseBody200VolumesStatus}
-- | Defines the object schema located at @paths.\/volumes.GET.responses.200.content.application\/json.schema.properties.volumes.items.properties.location@ in the specification.
-- 
-- Location of the Volume. Volume can only be attached to Servers in the same Location.
data GetVolumesResponseBody200VolumesLocation = GetVolumesResponseBody200VolumesLocation {
  -- | city: City the Location is closest to
  getVolumesResponseBody200VolumesLocationCity :: Data.Text.Internal.Text
  -- | country: ISO 3166-1 alpha-2 code of the country the Location resides in
  , getVolumesResponseBody200VolumesLocationCountry :: Data.Text.Internal.Text
  -- | description: Description of the Location
  , getVolumesResponseBody200VolumesLocationDescription :: Data.Text.Internal.Text
  -- | id: ID of the Location
  , getVolumesResponseBody200VolumesLocationId :: GHC.Types.Double
  -- | latitude: Latitude of the city closest to the Location
  , getVolumesResponseBody200VolumesLocationLatitude :: GHC.Types.Double
  -- | longitude: Longitude of the city closest to the Location
  , getVolumesResponseBody200VolumesLocationLongitude :: GHC.Types.Double
  -- | name: Unique identifier of the Location
  , getVolumesResponseBody200VolumesLocationName :: Data.Text.Internal.Text
  -- | network_zone: Name of network zone this Location resides in
  , getVolumesResponseBody200VolumesLocationNetworkZone :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetVolumesResponseBody200VolumesLocation
    where toJSON obj = Data.Aeson.Types.Internal.object ("city" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesLocationCity obj : "country" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesLocationCountry obj : "description" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesLocationDescription obj : "id" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesLocationId obj : "latitude" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesLocationLatitude obj : "longitude" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesLocationLongitude obj : "name" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesLocationName obj : "network_zone" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesLocationNetworkZone obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("city" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesLocationCity obj) GHC.Base.<> (("country" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesLocationCountry obj) GHC.Base.<> (("description" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesLocationDescription obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesLocationId obj) GHC.Base.<> (("latitude" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesLocationLatitude obj) GHC.Base.<> (("longitude" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesLocationLongitude obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesLocationName obj) GHC.Base.<> ("network_zone" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesLocationNetworkZone obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetVolumesResponseBody200VolumesLocation
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetVolumesResponseBody200VolumesLocation" (\obj -> (((((((GHC.Base.pure GetVolumesResponseBody200VolumesLocation GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "latitude")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "longitude")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "network_zone"))
-- | Create a new 'GetVolumesResponseBody200VolumesLocation' with all required fields.
mkGetVolumesResponseBody200VolumesLocation :: Data.Text.Internal.Text -- ^ 'getVolumesResponseBody200VolumesLocationCity'
  -> Data.Text.Internal.Text -- ^ 'getVolumesResponseBody200VolumesLocationCountry'
  -> Data.Text.Internal.Text -- ^ 'getVolumesResponseBody200VolumesLocationDescription'
  -> GHC.Types.Double -- ^ 'getVolumesResponseBody200VolumesLocationId'
  -> GHC.Types.Double -- ^ 'getVolumesResponseBody200VolumesLocationLatitude'
  -> GHC.Types.Double -- ^ 'getVolumesResponseBody200VolumesLocationLongitude'
  -> Data.Text.Internal.Text -- ^ 'getVolumesResponseBody200VolumesLocationName'
  -> Data.Text.Internal.Text -- ^ 'getVolumesResponseBody200VolumesLocationNetworkZone'
  -> GetVolumesResponseBody200VolumesLocation
mkGetVolumesResponseBody200VolumesLocation getVolumesResponseBody200VolumesLocationCity getVolumesResponseBody200VolumesLocationCountry getVolumesResponseBody200VolumesLocationDescription getVolumesResponseBody200VolumesLocationId getVolumesResponseBody200VolumesLocationLatitude getVolumesResponseBody200VolumesLocationLongitude getVolumesResponseBody200VolumesLocationName getVolumesResponseBody200VolumesLocationNetworkZone = GetVolumesResponseBody200VolumesLocation{getVolumesResponseBody200VolumesLocationCity = getVolumesResponseBody200VolumesLocationCity,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      getVolumesResponseBody200VolumesLocationCountry = getVolumesResponseBody200VolumesLocationCountry,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      getVolumesResponseBody200VolumesLocationDescription = getVolumesResponseBody200VolumesLocationDescription,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      getVolumesResponseBody200VolumesLocationId = getVolumesResponseBody200VolumesLocationId,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      getVolumesResponseBody200VolumesLocationLatitude = getVolumesResponseBody200VolumesLocationLatitude,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      getVolumesResponseBody200VolumesLocationLongitude = getVolumesResponseBody200VolumesLocationLongitude,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      getVolumesResponseBody200VolumesLocationName = getVolumesResponseBody200VolumesLocationName,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      getVolumesResponseBody200VolumesLocationNetworkZone = getVolumesResponseBody200VolumesLocationNetworkZone}
-- | Defines the object schema located at @paths.\/volumes.GET.responses.200.content.application\/json.schema.properties.volumes.items.properties.protection@ in the specification.
-- 
-- Protection configuration for the Resource
data GetVolumesResponseBody200VolumesProtection = GetVolumesResponseBody200VolumesProtection {
  -- | delete: If true, prevents the Resource from being deleted
  getVolumesResponseBody200VolumesProtectionDelete :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetVolumesResponseBody200VolumesProtection
    where toJSON obj = Data.Aeson.Types.Internal.object ("delete" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesProtectionDelete obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("delete" Data.Aeson.Types.ToJSON..= getVolumesResponseBody200VolumesProtectionDelete obj)
instance Data.Aeson.Types.FromJSON.FromJSON GetVolumesResponseBody200VolumesProtection
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetVolumesResponseBody200VolumesProtection" (\obj -> GHC.Base.pure GetVolumesResponseBody200VolumesProtection GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "delete"))
-- | Create a new 'GetVolumesResponseBody200VolumesProtection' with all required fields.
mkGetVolumesResponseBody200VolumesProtection :: GHC.Types.Bool -- ^ 'getVolumesResponseBody200VolumesProtectionDelete'
  -> GetVolumesResponseBody200VolumesProtection
mkGetVolumesResponseBody200VolumesProtection getVolumesResponseBody200VolumesProtectionDelete = GetVolumesResponseBody200VolumesProtection{getVolumesResponseBody200VolumesProtectionDelete = getVolumesResponseBody200VolumesProtectionDelete}
-- | Defines the enum schema located at @paths.\/volumes.GET.responses.200.content.application\/json.schema.properties.volumes.items.properties.status@ in the specification.
-- 
-- Current status of the Volume
data GetVolumesResponseBody200VolumesStatus =
   GetVolumesResponseBody200VolumesStatusOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetVolumesResponseBody200VolumesStatusTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetVolumesResponseBody200VolumesStatusEnumCreating -- ^ Represents the JSON value @"creating"@
  | GetVolumesResponseBody200VolumesStatusEnumAvailable -- ^ Represents the JSON value @"available"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetVolumesResponseBody200VolumesStatus
    where toJSON (GetVolumesResponseBody200VolumesStatusOther val) = val
          toJSON (GetVolumesResponseBody200VolumesStatusTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetVolumesResponseBody200VolumesStatusEnumCreating) = "creating"
          toJSON (GetVolumesResponseBody200VolumesStatusEnumAvailable) = "available"
instance Data.Aeson.Types.FromJSON.FromJSON GetVolumesResponseBody200VolumesStatus
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "creating" -> GetVolumesResponseBody200VolumesStatusEnumCreating
                                            | val GHC.Classes.== "available" -> GetVolumesResponseBody200VolumesStatusEnumAvailable
                                            | GHC.Base.otherwise -> GetVolumesResponseBody200VolumesStatusOther val)
-- | > GET /volumes
-- 
-- The same as 'getVolumes' but accepts an explicit configuration.
getVolumesWithConfiguration :: forall m . HCloud.Common.MonadHTTP m => HCloud.Common.Configuration -- ^ The configuration to use in the request
  -> GetVolumesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetVolumesResponse) -- ^ Monadic computation which returns the result of the operation
getVolumesWithConfiguration config
                            parameters = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetVolumesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetVolumesResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                        GetVolumesResponseBody200)
                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/volumes") [HCloud.Common.QueryParameter (Data.Text.pack "status") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getVolumesParametersQueryStatus parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                HCloud.Common.QueryParameter (Data.Text.pack "sort") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getVolumesParametersQuerySort parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                HCloud.Common.QueryParameter (Data.Text.pack "name") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getVolumesParametersQueryName parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                HCloud.Common.QueryParameter (Data.Text.pack "label_selector") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getVolumesParametersQueryLabelSelector parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /volumes
-- 
-- The same as 'getVolumes' but returns the raw 'Data.ByteString.Char8.ByteString'.
getVolumesRaw :: forall m . HCloud.Common.MonadHTTP m => GetVolumesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> HCloud.Common.HttpT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getVolumesRaw parameters = GHC.Base.id (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/volumes") [HCloud.Common.QueryParameter (Data.Text.pack "status") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getVolumesParametersQueryStatus parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                 HCloud.Common.QueryParameter (Data.Text.pack "sort") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getVolumesParametersQuerySort parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                 HCloud.Common.QueryParameter (Data.Text.pack "name") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getVolumesParametersQueryName parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                 HCloud.Common.QueryParameter (Data.Text.pack "label_selector") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getVolumesParametersQueryLabelSelector parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /volumes
-- 
-- The same as 'getVolumes' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getVolumesWithConfigurationRaw :: forall m . HCloud.Common.MonadHTTP m => HCloud.Common.Configuration -- ^ The configuration to use in the request
  -> GetVolumesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getVolumesWithConfigurationRaw config
                               parameters = GHC.Base.id (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/volumes") [HCloud.Common.QueryParameter (Data.Text.pack "status") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getVolumesParametersQueryStatus parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                        HCloud.Common.QueryParameter (Data.Text.pack "sort") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getVolumesParametersQuerySort parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                        HCloud.Common.QueryParameter (Data.Text.pack "name") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getVolumesParametersQueryName parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                        HCloud.Common.QueryParameter (Data.Text.pack "label_selector") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getVolumesParametersQueryLabelSelector parameters) (Data.Text.pack "form") GHC.Types.False])
