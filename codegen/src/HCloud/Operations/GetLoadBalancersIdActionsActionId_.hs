-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getLoadBalancers_Id_Actions_ActionId_
module HCloud.Operations.GetLoadBalancersIdActionsActionId_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > GET /load_balancers/{id}/actions/{action_id}
-- 
-- Returns a specific Action for a Load Balancer.
getLoadBalancers_Id_Actions_ActionId_ :: forall m . HCloud.Common.MonadHTTP m => GetLoadBalancersIdActionsActionIdParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> HCloud.Common.HttpT m (Network.HTTP.Client.Types.Response GetLoadBalancersIdActionsActionIdResponse) -- ^ Monadic computation which returns the result of the operation
getLoadBalancers_Id_Actions_ActionId_ parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetLoadBalancersIdActionsActionIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetLoadBalancersIdActionsActionIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                GetLoadBalancersIdActionsActionIdResponseBody200)
                                                                                                                                                                                                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/load_balancers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel (getLoadBalancersIdActionsActionIdParametersPathId parameters))) GHC.Base.++ ("/actions/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel (getLoadBalancersIdActionsActionIdParametersPathActionId parameters))) GHC.Base.++ ""))))) GHC.Base.mempty)
-- | Defines the object schema located at @paths.\/load_balancers\/{id}\/actions\/{action_id}.GET.parameters@ in the specification.
-- 
-- 
data GetLoadBalancersIdActionsActionIdParameters = GetLoadBalancersIdActionsActionIdParameters {
  -- | pathAction_id: Represents the parameter named \'action_id\'
  -- 
  -- ID of the Action
  getLoadBalancersIdActionsActionIdParametersPathActionId :: GHC.Types.Int
  -- | pathId: Represents the parameter named \'id\'
  -- 
  -- ID of the Load Balancer
  , getLoadBalancersIdActionsActionIdParametersPathId :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetLoadBalancersIdActionsActionIdParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathAction_id" Data.Aeson.Types.ToJSON..= getLoadBalancersIdActionsActionIdParametersPathActionId obj : "pathId" Data.Aeson.Types.ToJSON..= getLoadBalancersIdActionsActionIdParametersPathId obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathAction_id" Data.Aeson.Types.ToJSON..= getLoadBalancersIdActionsActionIdParametersPathActionId obj) GHC.Base.<> ("pathId" Data.Aeson.Types.ToJSON..= getLoadBalancersIdActionsActionIdParametersPathId obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersIdActionsActionIdParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersIdActionsActionIdParameters" (\obj -> (GHC.Base.pure GetLoadBalancersIdActionsActionIdParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathAction_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathId"))
-- | Create a new 'GetLoadBalancersIdActionsActionIdParameters' with all required fields.
mkGetLoadBalancersIdActionsActionIdParameters :: GHC.Types.Int -- ^ 'getLoadBalancersIdActionsActionIdParametersPathActionId'
  -> GHC.Types.Int -- ^ 'getLoadBalancersIdActionsActionIdParametersPathId'
  -> GetLoadBalancersIdActionsActionIdParameters
mkGetLoadBalancersIdActionsActionIdParameters getLoadBalancersIdActionsActionIdParametersPathActionId getLoadBalancersIdActionsActionIdParametersPathId = GetLoadBalancersIdActionsActionIdParameters{getLoadBalancersIdActionsActionIdParametersPathActionId = getLoadBalancersIdActionsActionIdParametersPathActionId,
                                                                                                                                                                                                      getLoadBalancersIdActionsActionIdParametersPathId = getLoadBalancersIdActionsActionIdParametersPathId}
-- | Represents a response of the operation 'getLoadBalancers_Id_Actions_ActionId_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetLoadBalancersIdActionsActionIdResponseError' is used.
data GetLoadBalancersIdActionsActionIdResponse =
   GetLoadBalancersIdActionsActionIdResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetLoadBalancersIdActionsActionIdResponse200 GetLoadBalancersIdActionsActionIdResponseBody200 -- ^ The \`action\` key contains the Load Balancer Action
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/load_balancers\/{id}\/actions\/{action_id}.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetLoadBalancersIdActionsActionIdResponseBody200 = GetLoadBalancersIdActionsActionIdResponseBody200 {
  -- | action
  getLoadBalancersIdActionsActionIdResponseBody200Action :: GetLoadBalancersIdActionsActionIdResponseBody200Action
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetLoadBalancersIdActionsActionIdResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("action" Data.Aeson.Types.ToJSON..= getLoadBalancersIdActionsActionIdResponseBody200Action obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("action" Data.Aeson.Types.ToJSON..= getLoadBalancersIdActionsActionIdResponseBody200Action obj)
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersIdActionsActionIdResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersIdActionsActionIdResponseBody200" (\obj -> GHC.Base.pure GetLoadBalancersIdActionsActionIdResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "action"))
-- | Create a new 'GetLoadBalancersIdActionsActionIdResponseBody200' with all required fields.
mkGetLoadBalancersIdActionsActionIdResponseBody200 :: GetLoadBalancersIdActionsActionIdResponseBody200Action -- ^ 'getLoadBalancersIdActionsActionIdResponseBody200Action'
  -> GetLoadBalancersIdActionsActionIdResponseBody200
mkGetLoadBalancersIdActionsActionIdResponseBody200 getLoadBalancersIdActionsActionIdResponseBody200Action = GetLoadBalancersIdActionsActionIdResponseBody200{getLoadBalancersIdActionsActionIdResponseBody200Action = getLoadBalancersIdActionsActionIdResponseBody200Action}
-- | Defines the object schema located at @paths.\/load_balancers\/{id}\/actions\/{action_id}.GET.responses.200.content.application\/json.schema.properties.action@ in the specification.
-- 
-- 
data GetLoadBalancersIdActionsActionIdResponseBody200Action = GetLoadBalancersIdActionsActionIdResponseBody200Action {
  -- | command: Command executed in the Action
  getLoadBalancersIdActionsActionIdResponseBody200ActionCommand :: Data.Text.Internal.Text
  -- | error: Error message for the Action if error occurred, otherwise null
  , getLoadBalancersIdActionsActionIdResponseBody200ActionError :: (GHC.Maybe.Maybe GetLoadBalancersIdActionsActionIdResponseBody200ActionError)
  -- | finished: Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
  , getLoadBalancersIdActionsActionIdResponseBody200ActionFinished :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | id: ID of the Resource
  , getLoadBalancersIdActionsActionIdResponseBody200ActionId :: GHC.Types.Int
  -- | progress: Progress of Action in percent
  , getLoadBalancersIdActionsActionIdResponseBody200ActionProgress :: GHC.Types.Double
  -- | resources: Resources the Action relates to
  , getLoadBalancersIdActionsActionIdResponseBody200ActionResources :: ([GetLoadBalancersIdActionsActionIdResponseBody200ActionResources])
  -- | started: Point in time when the Action was started (in ISO-8601 format)
  , getLoadBalancersIdActionsActionIdResponseBody200ActionStarted :: Data.Text.Internal.Text
  -- | status: Status of the Action
  , getLoadBalancersIdActionsActionIdResponseBody200ActionStatus :: GetLoadBalancersIdActionsActionIdResponseBody200ActionStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetLoadBalancersIdActionsActionIdResponseBody200Action
    where toJSON obj = Data.Aeson.Types.Internal.object ("command" Data.Aeson.Types.ToJSON..= getLoadBalancersIdActionsActionIdResponseBody200ActionCommand obj : "error" Data.Aeson.Types.ToJSON..= getLoadBalancersIdActionsActionIdResponseBody200ActionError obj : "finished" Data.Aeson.Types.ToJSON..= getLoadBalancersIdActionsActionIdResponseBody200ActionFinished obj : "id" Data.Aeson.Types.ToJSON..= getLoadBalancersIdActionsActionIdResponseBody200ActionId obj : "progress" Data.Aeson.Types.ToJSON..= getLoadBalancersIdActionsActionIdResponseBody200ActionProgress obj : "resources" Data.Aeson.Types.ToJSON..= getLoadBalancersIdActionsActionIdResponseBody200ActionResources obj : "started" Data.Aeson.Types.ToJSON..= getLoadBalancersIdActionsActionIdResponseBody200ActionStarted obj : "status" Data.Aeson.Types.ToJSON..= getLoadBalancersIdActionsActionIdResponseBody200ActionStatus obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("command" Data.Aeson.Types.ToJSON..= getLoadBalancersIdActionsActionIdResponseBody200ActionCommand obj) GHC.Base.<> (("error" Data.Aeson.Types.ToJSON..= getLoadBalancersIdActionsActionIdResponseBody200ActionError obj) GHC.Base.<> (("finished" Data.Aeson.Types.ToJSON..= getLoadBalancersIdActionsActionIdResponseBody200ActionFinished obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= getLoadBalancersIdActionsActionIdResponseBody200ActionId obj) GHC.Base.<> (("progress" Data.Aeson.Types.ToJSON..= getLoadBalancersIdActionsActionIdResponseBody200ActionProgress obj) GHC.Base.<> (("resources" Data.Aeson.Types.ToJSON..= getLoadBalancersIdActionsActionIdResponseBody200ActionResources obj) GHC.Base.<> (("started" Data.Aeson.Types.ToJSON..= getLoadBalancersIdActionsActionIdResponseBody200ActionStarted obj) GHC.Base.<> ("status" Data.Aeson.Types.ToJSON..= getLoadBalancersIdActionsActionIdResponseBody200ActionStatus obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersIdActionsActionIdResponseBody200Action
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersIdActionsActionIdResponseBody200Action" (\obj -> (((((((GHC.Base.pure GetLoadBalancersIdActionsActionIdResponseBody200Action GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "command")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "finished")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "started")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Create a new 'GetLoadBalancersIdActionsActionIdResponseBody200Action' with all required fields.
mkGetLoadBalancersIdActionsActionIdResponseBody200Action :: Data.Text.Internal.Text -- ^ 'getLoadBalancersIdActionsActionIdResponseBody200ActionCommand'
  -> GHC.Maybe.Maybe GetLoadBalancersIdActionsActionIdResponseBody200ActionError -- ^ 'getLoadBalancersIdActionsActionIdResponseBody200ActionError'
  -> GHC.Maybe.Maybe Data.Text.Internal.Text -- ^ 'getLoadBalancersIdActionsActionIdResponseBody200ActionFinished'
  -> GHC.Types.Int -- ^ 'getLoadBalancersIdActionsActionIdResponseBody200ActionId'
  -> GHC.Types.Double -- ^ 'getLoadBalancersIdActionsActionIdResponseBody200ActionProgress'
  -> [GetLoadBalancersIdActionsActionIdResponseBody200ActionResources] -- ^ 'getLoadBalancersIdActionsActionIdResponseBody200ActionResources'
  -> Data.Text.Internal.Text -- ^ 'getLoadBalancersIdActionsActionIdResponseBody200ActionStarted'
  -> GetLoadBalancersIdActionsActionIdResponseBody200ActionStatus -- ^ 'getLoadBalancersIdActionsActionIdResponseBody200ActionStatus'
  -> GetLoadBalancersIdActionsActionIdResponseBody200Action
mkGetLoadBalancersIdActionsActionIdResponseBody200Action getLoadBalancersIdActionsActionIdResponseBody200ActionCommand getLoadBalancersIdActionsActionIdResponseBody200ActionError getLoadBalancersIdActionsActionIdResponseBody200ActionFinished getLoadBalancersIdActionsActionIdResponseBody200ActionId getLoadBalancersIdActionsActionIdResponseBody200ActionProgress getLoadBalancersIdActionsActionIdResponseBody200ActionResources getLoadBalancersIdActionsActionIdResponseBody200ActionStarted getLoadBalancersIdActionsActionIdResponseBody200ActionStatus = GetLoadBalancersIdActionsActionIdResponseBody200Action{getLoadBalancersIdActionsActionIdResponseBody200ActionCommand = getLoadBalancersIdActionsActionIdResponseBody200ActionCommand,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              getLoadBalancersIdActionsActionIdResponseBody200ActionError = getLoadBalancersIdActionsActionIdResponseBody200ActionError,
getLoadBalancersIdActionsActionIdResponseBody200ActionFinished = getLoadBalancersIdActionsActionIdResponseBody200ActionFinished,
getLoadBalancersIdActionsActionIdResponseBody200ActionId = getLoadBalancersIdActionsActionIdResponseBody200ActionId,
getLoadBalancersIdActionsActionIdResponseBody200ActionProgress = getLoadBalancersIdActionsActionIdResponseBody200ActionProgress,
getLoadBalancersIdActionsActionIdResponseBody200ActionResources = getLoadBalancersIdActionsActionIdResponseBody200ActionResources,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              getLoadBalancersIdActionsActionIdResponseBody200ActionStarted = getLoadBalancersIdActionsActionIdResponseBody200ActionStarted,
getLoadBalancersIdActionsActionIdResponseBody200ActionStatus = getLoadBalancersIdActionsActionIdResponseBody200ActionStatus}
-- | Defines the object schema located at @paths.\/load_balancers\/{id}\/actions\/{action_id}.GET.responses.200.content.application\/json.schema.properties.action.properties.error@ in the specification.
-- 
-- Error message for the Action if error occurred, otherwise null
data GetLoadBalancersIdActionsActionIdResponseBody200ActionError = GetLoadBalancersIdActionsActionIdResponseBody200ActionError {
  -- | code: Fixed machine readable code
  getLoadBalancersIdActionsActionIdResponseBody200ActionErrorCode :: Data.Text.Internal.Text
  -- | message: Humanized error message
  , getLoadBalancersIdActionsActionIdResponseBody200ActionErrorMessage :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetLoadBalancersIdActionsActionIdResponseBody200ActionError
    where toJSON obj = Data.Aeson.Types.Internal.object ("code" Data.Aeson.Types.ToJSON..= getLoadBalancersIdActionsActionIdResponseBody200ActionErrorCode obj : "message" Data.Aeson.Types.ToJSON..= getLoadBalancersIdActionsActionIdResponseBody200ActionErrorMessage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("code" Data.Aeson.Types.ToJSON..= getLoadBalancersIdActionsActionIdResponseBody200ActionErrorCode obj) GHC.Base.<> ("message" Data.Aeson.Types.ToJSON..= getLoadBalancersIdActionsActionIdResponseBody200ActionErrorMessage obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersIdActionsActionIdResponseBody200ActionError
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersIdActionsActionIdResponseBody200ActionError" (\obj -> (GHC.Base.pure GetLoadBalancersIdActionsActionIdResponseBody200ActionError GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'GetLoadBalancersIdActionsActionIdResponseBody200ActionError' with all required fields.
mkGetLoadBalancersIdActionsActionIdResponseBody200ActionError :: Data.Text.Internal.Text -- ^ 'getLoadBalancersIdActionsActionIdResponseBody200ActionErrorCode'
  -> Data.Text.Internal.Text -- ^ 'getLoadBalancersIdActionsActionIdResponseBody200ActionErrorMessage'
  -> GetLoadBalancersIdActionsActionIdResponseBody200ActionError
mkGetLoadBalancersIdActionsActionIdResponseBody200ActionError getLoadBalancersIdActionsActionIdResponseBody200ActionErrorCode getLoadBalancersIdActionsActionIdResponseBody200ActionErrorMessage = GetLoadBalancersIdActionsActionIdResponseBody200ActionError{getLoadBalancersIdActionsActionIdResponseBody200ActionErrorCode = getLoadBalancersIdActionsActionIdResponseBody200ActionErrorCode,
                                                                                                                                                                                                                                                               getLoadBalancersIdActionsActionIdResponseBody200ActionErrorMessage = getLoadBalancersIdActionsActionIdResponseBody200ActionErrorMessage}
-- | Defines the object schema located at @paths.\/load_balancers\/{id}\/actions\/{action_id}.GET.responses.200.content.application\/json.schema.properties.action.properties.resources.items@ in the specification.
-- 
-- 
data GetLoadBalancersIdActionsActionIdResponseBody200ActionResources = GetLoadBalancersIdActionsActionIdResponseBody200ActionResources {
  -- | id: ID of the Resource
  getLoadBalancersIdActionsActionIdResponseBody200ActionResourcesId :: GHC.Types.Int
  -- | type: Type of resource referenced
  , getLoadBalancersIdActionsActionIdResponseBody200ActionResourcesType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetLoadBalancersIdActionsActionIdResponseBody200ActionResources
    where toJSON obj = Data.Aeson.Types.Internal.object ("id" Data.Aeson.Types.ToJSON..= getLoadBalancersIdActionsActionIdResponseBody200ActionResourcesId obj : "type" Data.Aeson.Types.ToJSON..= getLoadBalancersIdActionsActionIdResponseBody200ActionResourcesType obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("id" Data.Aeson.Types.ToJSON..= getLoadBalancersIdActionsActionIdResponseBody200ActionResourcesId obj) GHC.Base.<> ("type" Data.Aeson.Types.ToJSON..= getLoadBalancersIdActionsActionIdResponseBody200ActionResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersIdActionsActionIdResponseBody200ActionResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersIdActionsActionIdResponseBody200ActionResources" (\obj -> (GHC.Base.pure GetLoadBalancersIdActionsActionIdResponseBody200ActionResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Create a new 'GetLoadBalancersIdActionsActionIdResponseBody200ActionResources' with all required fields.
mkGetLoadBalancersIdActionsActionIdResponseBody200ActionResources :: GHC.Types.Int -- ^ 'getLoadBalancersIdActionsActionIdResponseBody200ActionResourcesId'
  -> Data.Text.Internal.Text -- ^ 'getLoadBalancersIdActionsActionIdResponseBody200ActionResourcesType'
  -> GetLoadBalancersIdActionsActionIdResponseBody200ActionResources
mkGetLoadBalancersIdActionsActionIdResponseBody200ActionResources getLoadBalancersIdActionsActionIdResponseBody200ActionResourcesId getLoadBalancersIdActionsActionIdResponseBody200ActionResourcesType = GetLoadBalancersIdActionsActionIdResponseBody200ActionResources{getLoadBalancersIdActionsActionIdResponseBody200ActionResourcesId = getLoadBalancersIdActionsActionIdResponseBody200ActionResourcesId,
                                                                                                                                                                                                                                                                          getLoadBalancersIdActionsActionIdResponseBody200ActionResourcesType = getLoadBalancersIdActionsActionIdResponseBody200ActionResourcesType}
-- | Defines the enum schema located at @paths.\/load_balancers\/{id}\/actions\/{action_id}.GET.responses.200.content.application\/json.schema.properties.action.properties.status@ in the specification.
-- 
-- Status of the Action
data GetLoadBalancersIdActionsActionIdResponseBody200ActionStatus =
   GetLoadBalancersIdActionsActionIdResponseBody200ActionStatusOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetLoadBalancersIdActionsActionIdResponseBody200ActionStatusTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetLoadBalancersIdActionsActionIdResponseBody200ActionStatusEnumSuccess -- ^ Represents the JSON value @"success"@
  | GetLoadBalancersIdActionsActionIdResponseBody200ActionStatusEnumRunning -- ^ Represents the JSON value @"running"@
  | GetLoadBalancersIdActionsActionIdResponseBody200ActionStatusEnumError -- ^ Represents the JSON value @"error"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetLoadBalancersIdActionsActionIdResponseBody200ActionStatus
    where toJSON (GetLoadBalancersIdActionsActionIdResponseBody200ActionStatusOther val) = val
          toJSON (GetLoadBalancersIdActionsActionIdResponseBody200ActionStatusTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetLoadBalancersIdActionsActionIdResponseBody200ActionStatusEnumSuccess) = "success"
          toJSON (GetLoadBalancersIdActionsActionIdResponseBody200ActionStatusEnumRunning) = "running"
          toJSON (GetLoadBalancersIdActionsActionIdResponseBody200ActionStatusEnumError) = "error"
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersIdActionsActionIdResponseBody200ActionStatus
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "success" -> GetLoadBalancersIdActionsActionIdResponseBody200ActionStatusEnumSuccess
                                            | val GHC.Classes.== "running" -> GetLoadBalancersIdActionsActionIdResponseBody200ActionStatusEnumRunning
                                            | val GHC.Classes.== "error" -> GetLoadBalancersIdActionsActionIdResponseBody200ActionStatusEnumError
                                            | GHC.Base.otherwise -> GetLoadBalancersIdActionsActionIdResponseBody200ActionStatusOther val)
-- | > GET /load_balancers/{id}/actions/{action_id}
-- 
-- The same as 'getLoadBalancers_Id_Actions_ActionId_' but accepts an explicit configuration.
getLoadBalancers_Id_Actions_ActionId_WithConfiguration :: forall m . HCloud.Common.MonadHTTP m => HCloud.Common.Configuration -- ^ The configuration to use in the request
  -> GetLoadBalancersIdActionsActionIdParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetLoadBalancersIdActionsActionIdResponse) -- ^ Monadic computation which returns the result of the operation
getLoadBalancers_Id_Actions_ActionId_WithConfiguration config
                                                       parameters = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetLoadBalancersIdActionsActionIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetLoadBalancersIdActionsActionIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 GetLoadBalancersIdActionsActionIdResponseBody200)
                                                                                                                                                                                                                                | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/load_balancers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel (getLoadBalancersIdActionsActionIdParametersPathId parameters))) GHC.Base.++ ("/actions/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel (getLoadBalancersIdActionsActionIdParametersPathActionId parameters))) GHC.Base.++ ""))))) GHC.Base.mempty)
-- | > GET /load_balancers/{id}/actions/{action_id}
-- 
-- The same as 'getLoadBalancers_Id_Actions_ActionId_' but returns the raw 'Data.ByteString.Char8.ByteString'.
getLoadBalancers_Id_Actions_ActionId_Raw :: forall m . HCloud.Common.MonadHTTP m => GetLoadBalancersIdActionsActionIdParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> HCloud.Common.HttpT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getLoadBalancers_Id_Actions_ActionId_Raw parameters = GHC.Base.id (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/load_balancers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel (getLoadBalancersIdActionsActionIdParametersPathId parameters))) GHC.Base.++ ("/actions/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel (getLoadBalancersIdActionsActionIdParametersPathActionId parameters))) GHC.Base.++ ""))))) GHC.Base.mempty)
-- | > GET /load_balancers/{id}/actions/{action_id}
-- 
-- The same as 'getLoadBalancers_Id_Actions_ActionId_' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getLoadBalancers_Id_Actions_ActionId_WithConfigurationRaw :: forall m . HCloud.Common.MonadHTTP m => HCloud.Common.Configuration -- ^ The configuration to use in the request
  -> GetLoadBalancersIdActionsActionIdParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getLoadBalancers_Id_Actions_ActionId_WithConfigurationRaw config
                                                          parameters = GHC.Base.id (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/load_balancers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel (getLoadBalancersIdActionsActionIdParametersPathId parameters))) GHC.Base.++ ("/actions/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel (getLoadBalancersIdActionsActionIdParametersPathActionId parameters))) GHC.Base.++ ""))))) GHC.Base.mempty)
