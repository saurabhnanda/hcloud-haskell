-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation getImages
module HCloud.Operations.GetImages where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > GET /images
-- 
-- Returns all Image objects. You can select specific Image types only and sort the results by using URI parameters.
getImages :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Maybe.Maybe Data.Text.Internal.Text                                                                               -- ^ sort: Can be used multiple times.
  -> GHC.Maybe.Maybe Data.Text.Internal.Text                                                                               -- ^ type: Can be used multiple times.
  -> GHC.Maybe.Maybe Data.Text.Internal.Text                                                                               -- ^ status: Can be used multiple times. The response will only contain Images matching the status.
  -> GHC.Maybe.Maybe Data.Text.Internal.Text                                                                               -- ^ bound_to: Can be used multiple times. Server ID linked to the Image. Only available for Images of type \`backup\`
  -> GHC.Maybe.Maybe GHC.Types.Bool                                                                                        -- ^ include_deprecated: Can be used multiple times.
  -> GHC.Maybe.Maybe Data.Text.Internal.Text                                                                               -- ^ name: Can be used to filter resources by their name. The response will only contain the resources matching the specified name
  -> GHC.Maybe.Maybe Data.Text.Internal.Text                                                                               -- ^ label_selector: Can be used to filter resources by labels. The response will only contain resources matching the label selector.
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response GetImagesResponse)) -- ^ Monad containing the result of the operation
getImages config
          sort
          type'
          status
          boundTo
          includeDeprecated
          name
          labelSelector = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetImagesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetImagesResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                      GetImagesResponseBody200)
                                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/images") ((Data.Text.pack "sort",
                                                                                                                                                                                                                                                                                                                                                                                                                HCloud.Common.stringifyModel Data.Functor.<$> sort) : ((Data.Text.pack "type",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         HCloud.Common.stringifyModel Data.Functor.<$> type') : ((Data.Text.pack "status",
loud.Common.stringifyModel Data.Functor.<$> status) : ((Data.Text.pack "bound_to",
loud.Common.stringifyModel Data.Functor.<$> boundTo) : ((Data.Text.pack "include_deprecated",
loud.Common.stringifyModel Data.Functor.<$> includeDeprecated) : ((Data.Text.pack "name",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                HCloud.Common.stringifyModel Data.Functor.<$> name) : ((Data.Text.pack "label_selector",
loud.Common.stringifyModel Data.Functor.<$> labelSelector) : []))))))))
-- | > GET /images
-- 
-- The same as 'getImages' but returns the raw 'Data.ByteString.Char8.ByteString'
getImagesRaw :: forall m s . (HCloud.Common.MonadHTTP m,
                              HCloud.Common.SecurityScheme s) =>
                HCloud.Common.Configuration s ->
                GHC.Maybe.Maybe Data.Text.Internal.Text ->
                GHC.Maybe.Maybe Data.Text.Internal.Text ->
                GHC.Maybe.Maybe Data.Text.Internal.Text ->
                GHC.Maybe.Maybe Data.Text.Internal.Text ->
                GHC.Maybe.Maybe GHC.Types.Bool ->
                GHC.Maybe.Maybe Data.Text.Internal.Text ->
                GHC.Maybe.Maybe Data.Text.Internal.Text ->
                m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                      (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getImagesRaw config
             sort
             type'
             status
             boundTo
             includeDeprecated
             name
             labelSelector = GHC.Base.id (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/images") ((Data.Text.pack "sort",
                                                                                                                                                                         HCloud.Common.stringifyModel Data.Functor.<$> sort) : ((Data.Text.pack "type",
                                                                                                                                                                                                                                  HCloud.Common.stringifyModel Data.Functor.<$> type') : ((Data.Text.pack "status",
                                                                                                                                                                                                                                                                                            HCloud.Common.stringifyModel Data.Functor.<$> status) : ((Data.Text.pack "bound_to",
                                                                                                                                                                                                                                                                                                                                                       HCloud.Common.stringifyModel Data.Functor.<$> boundTo) : ((Data.Text.pack "include_deprecated",
                                                                                                                                                                                                                                                                                                                                                                                                                   HCloud.Common.stringifyModel Data.Functor.<$> includeDeprecated) : ((Data.Text.pack "name",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         HCloud.Common.stringifyModel Data.Functor.<$> name) : ((Data.Text.pack "label_selector",
loud.Common.stringifyModel Data.Functor.<$> labelSelector) : []))))))))
-- | > GET /images
-- 
-- Monadic version of 'getImages' (use with 'HCloud.Common.runWithConfiguration')
getImagesM :: forall m s . (HCloud.Common.MonadHTTP m,
                            HCloud.Common.SecurityScheme s) =>
              GHC.Maybe.Maybe Data.Text.Internal.Text ->
              GHC.Maybe.Maybe Data.Text.Internal.Text ->
              GHC.Maybe.Maybe Data.Text.Internal.Text ->
              GHC.Maybe.Maybe Data.Text.Internal.Text ->
              GHC.Maybe.Maybe GHC.Types.Bool ->
              GHC.Maybe.Maybe Data.Text.Internal.Text ->
              GHC.Maybe.Maybe Data.Text.Internal.Text ->
              Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                 m
                                                 (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                     (Network.HTTP.Client.Types.Response GetImagesResponse))
getImagesM sort
           type'
           status
           boundTo
           includeDeprecated
           name
           labelSelector = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetImagesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetImagesResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                       GetImagesResponseBody200)
                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/images") ((Data.Text.pack "sort",
                                                                                                                                                                                                                                                                                                                                                                                                           HCloud.Common.stringifyModel Data.Functor.<$> sort) : ((Data.Text.pack "type",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    HCloud.Common.stringifyModel Data.Functor.<$> type') : ((Data.Text.pack "status",
loud.Common.stringifyModel Data.Functor.<$> status) : ((Data.Text.pack "bound_to",
loud.Common.stringifyModel Data.Functor.<$> boundTo) : ((Data.Text.pack "include_deprecated",
loud.Common.stringifyModel Data.Functor.<$> includeDeprecated) : ((Data.Text.pack "name",
loud.Common.stringifyModel Data.Functor.<$> name) : ((Data.Text.pack "label_selector",
loud.Common.stringifyModel Data.Functor.<$> labelSelector) : []))))))))
-- | > GET /images
-- 
-- Monadic version of 'getImagesRaw' (use with 'HCloud.Common.runWithConfiguration')
getImagesRawM :: forall m s . (HCloud.Common.MonadHTTP m,
                               HCloud.Common.SecurityScheme s) =>
                 GHC.Maybe.Maybe Data.Text.Internal.Text ->
                 GHC.Maybe.Maybe Data.Text.Internal.Text ->
                 GHC.Maybe.Maybe Data.Text.Internal.Text ->
                 GHC.Maybe.Maybe Data.Text.Internal.Text ->
                 GHC.Maybe.Maybe GHC.Types.Bool ->
                 GHC.Maybe.Maybe Data.Text.Internal.Text ->
                 GHC.Maybe.Maybe Data.Text.Internal.Text ->
                 Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                    m
                                                    (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                        (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getImagesRawM sort
              type'
              status
              boundTo
              includeDeprecated
              name
              labelSelector = GHC.Base.id (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/images") ((Data.Text.pack "sort",
                                                                                                                                                                    HCloud.Common.stringifyModel Data.Functor.<$> sort) : ((Data.Text.pack "type",
                                                                                                                                                                                                                             HCloud.Common.stringifyModel Data.Functor.<$> type') : ((Data.Text.pack "status",
                                                                                                                                                                                                                                                                                       HCloud.Common.stringifyModel Data.Functor.<$> status) : ((Data.Text.pack "bound_to",
                                                                                                                                                                                                                                                                                                                                                  HCloud.Common.stringifyModel Data.Functor.<$> boundTo) : ((Data.Text.pack "include_deprecated",
                                                                                                                                                                                                                                                                                                                                                                                                              HCloud.Common.stringifyModel Data.Functor.<$> includeDeprecated) : ((Data.Text.pack "name",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    HCloud.Common.stringifyModel Data.Functor.<$> name) : ((Data.Text.pack "label_selector",
loud.Common.stringifyModel Data.Functor.<$> labelSelector) : []))))))))
-- | Represents a response of the operation 'getImages'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetImagesResponseError' is used.
data GetImagesResponse =                           
   GetImagesResponseError GHC.Base.String          -- ^ Means either no matching case available or a parse error
  | GetImagesResponse200 GetImagesResponseBody200  -- ^ The \`images\` key in the reply contains an array of Image objects with this structure
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema GetImagesResponseBody200
-- 
-- 
data GetImagesResponseBody200 = GetImagesResponseBody200 {
  -- | images
  getImagesResponseBody200Images :: ([] GetImagesResponseBody200Images)
  -- | meta
  , getImagesResponseBody200Meta :: (GHC.Maybe.Maybe GetImagesResponseBody200Meta)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetImagesResponseBody200
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "images" (getImagesResponseBody200Images obj) : (Data.Aeson..=) "meta" (getImagesResponseBody200Meta obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "images" (getImagesResponseBody200Images obj) GHC.Base.<> (Data.Aeson..=) "meta" (getImagesResponseBody200Meta obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetImagesResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetImagesResponseBody200" (\obj -> (GHC.Base.pure GetImagesResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "images")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "meta"))
-- | Defines the data type for the schema GetImagesResponseBody200Images
-- 
-- 
data GetImagesResponseBody200Images = GetImagesResponseBody200Images {
  -- | bound_to: ID of Server the Image is bound to. Only set for Images of type \`backup\`.
  getImagesResponseBody200ImagesBoundTo :: GHC.Integer.Type.Integer
  -- | build_id: Build ID of the Image
  , getImagesResponseBody200ImagesBuildId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | created: Point in time when the Resource was created (in ISO-8601 format)
  , getImagesResponseBody200ImagesCreated :: Data.Text.Internal.Text
  -- | created_from: Information about the Server the Image was created from
  , getImagesResponseBody200ImagesCreatedFrom :: GetImagesResponseBody200ImagesCreatedFrom
  -- | deleted: Point in time where the Image was deleted (in ISO-8601 format)
  , getImagesResponseBody200ImagesDeleted :: Data.Text.Internal.Text
  -- | deprecated: Point in time when the Image is considered to be deprecated (in ISO-8601 format)
  , getImagesResponseBody200ImagesDeprecated :: Data.Text.Internal.Text
  -- | description: Description of the Image
  , getImagesResponseBody200ImagesDescription :: Data.Text.Internal.Text
  -- | disk_size: Size of the disk contained in the Image in GB
  , getImagesResponseBody200ImagesDiskSize :: GHC.Types.Double
  -- | id: ID of the Resource
  , getImagesResponseBody200ImagesId :: GHC.Integer.Type.Integer
  -- | image_size: Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.
  , getImagesResponseBody200ImagesImageSize :: GHC.Types.Double
  -- | labels: User-defined labels (key-value pairs)
  , getImagesResponseBody200ImagesLabels :: GetImagesResponseBody200ImagesLabels
  -- | name: Unique identifier of the Image. This value is only set for system Images.
  , getImagesResponseBody200ImagesName :: Data.Text.Internal.Text
  -- | os_flavor: Flavor of operating system contained in the Image
  , getImagesResponseBody200ImagesOsFlavor :: GetImagesResponseBody200ImagesOsFlavor
  -- | os_version: Operating system version
  , getImagesResponseBody200ImagesOsVersion :: Data.Text.Internal.Text
  -- | protection: Protection configuration for the Resource
  , getImagesResponseBody200ImagesProtection :: GetImagesResponseBody200ImagesProtection
  -- | rapid_deploy: Indicates that rapid deploy of the Image is available
  , getImagesResponseBody200ImagesRapidDeploy :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | status: Whether the Image can be used or if it\'s still being created or unavailable
  , getImagesResponseBody200ImagesStatus :: GetImagesResponseBody200ImagesStatus
  -- | type: Type of the Image
  , getImagesResponseBody200ImagesType :: GetImagesResponseBody200ImagesType
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetImagesResponseBody200Images
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "bound_to" (getImagesResponseBody200ImagesBoundTo obj) : (Data.Aeson..=) "build_id" (getImagesResponseBody200ImagesBuildId obj) : (Data.Aeson..=) "created" (getImagesResponseBody200ImagesCreated obj) : (Data.Aeson..=) "created_from" (getImagesResponseBody200ImagesCreatedFrom obj) : (Data.Aeson..=) "deleted" (getImagesResponseBody200ImagesDeleted obj) : (Data.Aeson..=) "deprecated" (getImagesResponseBody200ImagesDeprecated obj) : (Data.Aeson..=) "description" (getImagesResponseBody200ImagesDescription obj) : (Data.Aeson..=) "disk_size" (getImagesResponseBody200ImagesDiskSize obj) : (Data.Aeson..=) "id" (getImagesResponseBody200ImagesId obj) : (Data.Aeson..=) "image_size" (getImagesResponseBody200ImagesImageSize obj) : (Data.Aeson..=) "labels" (getImagesResponseBody200ImagesLabels obj) : (Data.Aeson..=) "name" (getImagesResponseBody200ImagesName obj) : (Data.Aeson..=) "os_flavor" (getImagesResponseBody200ImagesOsFlavor obj) : (Data.Aeson..=) "os_version" (getImagesResponseBody200ImagesOsVersion obj) : (Data.Aeson..=) "protection" (getImagesResponseBody200ImagesProtection obj) : (Data.Aeson..=) "rapid_deploy" (getImagesResponseBody200ImagesRapidDeploy obj) : (Data.Aeson..=) "status" (getImagesResponseBody200ImagesStatus obj) : (Data.Aeson..=) "type" (getImagesResponseBody200ImagesType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "bound_to" (getImagesResponseBody200ImagesBoundTo obj) GHC.Base.<> ((Data.Aeson..=) "build_id" (getImagesResponseBody200ImagesBuildId obj) GHC.Base.<> ((Data.Aeson..=) "created" (getImagesResponseBody200ImagesCreated obj) GHC.Base.<> ((Data.Aeson..=) "created_from" (getImagesResponseBody200ImagesCreatedFrom obj) GHC.Base.<> ((Data.Aeson..=) "deleted" (getImagesResponseBody200ImagesDeleted obj) GHC.Base.<> ((Data.Aeson..=) "deprecated" (getImagesResponseBody200ImagesDeprecated obj) GHC.Base.<> ((Data.Aeson..=) "description" (getImagesResponseBody200ImagesDescription obj) GHC.Base.<> ((Data.Aeson..=) "disk_size" (getImagesResponseBody200ImagesDiskSize obj) GHC.Base.<> ((Data.Aeson..=) "id" (getImagesResponseBody200ImagesId obj) GHC.Base.<> ((Data.Aeson..=) "image_size" (getImagesResponseBody200ImagesImageSize obj) GHC.Base.<> ((Data.Aeson..=) "labels" (getImagesResponseBody200ImagesLabels obj) GHC.Base.<> ((Data.Aeson..=) "name" (getImagesResponseBody200ImagesName obj) GHC.Base.<> ((Data.Aeson..=) "os_flavor" (getImagesResponseBody200ImagesOsFlavor obj) GHC.Base.<> ((Data.Aeson..=) "os_version" (getImagesResponseBody200ImagesOsVersion obj) GHC.Base.<> ((Data.Aeson..=) "protection" (getImagesResponseBody200ImagesProtection obj) GHC.Base.<> ((Data.Aeson..=) "rapid_deploy" (getImagesResponseBody200ImagesRapidDeploy obj) GHC.Base.<> ((Data.Aeson..=) "status" (getImagesResponseBody200ImagesStatus obj) GHC.Base.<> (Data.Aeson..=) "type" (getImagesResponseBody200ImagesType obj))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetImagesResponseBody200Images
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetImagesResponseBody200Images" (\obj -> (((((((((((((((((GHC.Base.pure GetImagesResponseBody200Images GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "bound_to")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "build_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created_from")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "deleted")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "deprecated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "disk_size")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "image_size")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "labels")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "os_flavor")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "os_version")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "protection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "rapid_deploy")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the data type for the schema GetImagesResponseBody200ImagesCreated_from
-- 
-- Information about the Server the Image was created from
data GetImagesResponseBody200ImagesCreatedFrom = GetImagesResponseBody200ImagesCreatedFrom {
  -- | id: ID of the Server the Image was created from
  getImagesResponseBody200ImagesCreatedFromId :: GHC.Integer.Type.Integer
  -- | name: Server name at the time the Image was created
  , getImagesResponseBody200ImagesCreatedFromName :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetImagesResponseBody200ImagesCreatedFrom
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (getImagesResponseBody200ImagesCreatedFromId obj) : (Data.Aeson..=) "name" (getImagesResponseBody200ImagesCreatedFromName obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (getImagesResponseBody200ImagesCreatedFromId obj) GHC.Base.<> (Data.Aeson..=) "name" (getImagesResponseBody200ImagesCreatedFromName obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetImagesResponseBody200ImagesCreatedFrom
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetImagesResponseBody200ImagesCreatedFrom" (\obj -> (GHC.Base.pure GetImagesResponseBody200ImagesCreatedFrom GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name"))
-- | Defines the data type for the schema GetImagesResponseBody200ImagesLabels
-- 
-- User-defined labels (key-value pairs)
data GetImagesResponseBody200ImagesLabels = GetImagesResponseBody200ImagesLabels {
  
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetImagesResponseBody200ImagesLabels
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON GetImagesResponseBody200ImagesLabels
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetImagesResponseBody200ImagesLabels" (\obj -> GHC.Base.pure GetImagesResponseBody200ImagesLabels)
-- | Defines the enum schema GetImagesResponseBody200ImagesOs_flavor
-- 
-- Flavor of operating system contained in the Image
data GetImagesResponseBody200ImagesOsFlavor
    = GetImagesResponseBody200ImagesOsFlavorEnumOther Data.Aeson.Types.Internal.Value
    | GetImagesResponseBody200ImagesOsFlavorEnumTyped Data.Text.Internal.Text
    | GetImagesResponseBody200ImagesOsFlavorEnumStringCentos
    | GetImagesResponseBody200ImagesOsFlavorEnumStringDebian
    | GetImagesResponseBody200ImagesOsFlavorEnumStringFedora
    | GetImagesResponseBody200ImagesOsFlavorEnumStringUbuntu
    | GetImagesResponseBody200ImagesOsFlavorEnumStringUnknown
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetImagesResponseBody200ImagesOsFlavor
    where toJSON (GetImagesResponseBody200ImagesOsFlavorEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetImagesResponseBody200ImagesOsFlavorEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetImagesResponseBody200ImagesOsFlavorEnumStringCentos) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "centos"
          toJSON (GetImagesResponseBody200ImagesOsFlavorEnumStringDebian) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "debian"
          toJSON (GetImagesResponseBody200ImagesOsFlavorEnumStringFedora) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fedora"
          toJSON (GetImagesResponseBody200ImagesOsFlavorEnumStringUbuntu) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ubuntu"
          toJSON (GetImagesResponseBody200ImagesOsFlavorEnumStringUnknown) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "unknown"
instance Data.Aeson.FromJSON GetImagesResponseBody200ImagesOsFlavor
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "centos")
                                          then GetImagesResponseBody200ImagesOsFlavorEnumStringCentos
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "debian")
                                                then GetImagesResponseBody200ImagesOsFlavorEnumStringDebian
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fedora")
                                                      then GetImagesResponseBody200ImagesOsFlavorEnumStringFedora
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ubuntu")
                                                            then GetImagesResponseBody200ImagesOsFlavorEnumStringUbuntu
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "unknown")
                                                                  then GetImagesResponseBody200ImagesOsFlavorEnumStringUnknown
                                                                  else GetImagesResponseBody200ImagesOsFlavorEnumOther val)
-- | Defines the data type for the schema GetImagesResponseBody200ImagesProtection
-- 
-- Protection configuration for the Resource
data GetImagesResponseBody200ImagesProtection = GetImagesResponseBody200ImagesProtection {
  -- | delete: If true, prevents the Resource from being deleted
  getImagesResponseBody200ImagesProtectionDelete :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetImagesResponseBody200ImagesProtection
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "delete" (getImagesResponseBody200ImagesProtectionDelete obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "delete" (getImagesResponseBody200ImagesProtectionDelete obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetImagesResponseBody200ImagesProtection
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetImagesResponseBody200ImagesProtection" (\obj -> GHC.Base.pure GetImagesResponseBody200ImagesProtection GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "delete"))
-- | Defines the enum schema GetImagesResponseBody200ImagesStatus
-- 
-- Whether the Image can be used or if it\'s still being created or unavailable
data GetImagesResponseBody200ImagesStatus
    = GetImagesResponseBody200ImagesStatusEnumOther Data.Aeson.Types.Internal.Value
    | GetImagesResponseBody200ImagesStatusEnumTyped Data.Text.Internal.Text
    | GetImagesResponseBody200ImagesStatusEnumStringAvailable
    | GetImagesResponseBody200ImagesStatusEnumStringCreating
    | GetImagesResponseBody200ImagesStatusEnumStringUnavailable
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetImagesResponseBody200ImagesStatus
    where toJSON (GetImagesResponseBody200ImagesStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetImagesResponseBody200ImagesStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetImagesResponseBody200ImagesStatusEnumStringAvailable) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "available"
          toJSON (GetImagesResponseBody200ImagesStatusEnumStringCreating) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "creating"
          toJSON (GetImagesResponseBody200ImagesStatusEnumStringUnavailable) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "unavailable"
instance Data.Aeson.FromJSON GetImagesResponseBody200ImagesStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "available")
                                          then GetImagesResponseBody200ImagesStatusEnumStringAvailable
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "creating")
                                                then GetImagesResponseBody200ImagesStatusEnumStringCreating
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "unavailable")
                                                      then GetImagesResponseBody200ImagesStatusEnumStringUnavailable
                                                      else GetImagesResponseBody200ImagesStatusEnumOther val)
-- | Defines the enum schema GetImagesResponseBody200ImagesType
-- 
-- Type of the Image
data GetImagesResponseBody200ImagesType
    = GetImagesResponseBody200ImagesTypeEnumOther Data.Aeson.Types.Internal.Value
    | GetImagesResponseBody200ImagesTypeEnumTyped Data.Text.Internal.Text
    | GetImagesResponseBody200ImagesTypeEnumStringApp
    | GetImagesResponseBody200ImagesTypeEnumStringBackup
    | GetImagesResponseBody200ImagesTypeEnumStringSnapshot
    | GetImagesResponseBody200ImagesTypeEnumStringSystem
    | GetImagesResponseBody200ImagesTypeEnumStringTemporary
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetImagesResponseBody200ImagesType
    where toJSON (GetImagesResponseBody200ImagesTypeEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetImagesResponseBody200ImagesTypeEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetImagesResponseBody200ImagesTypeEnumStringApp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "app"
          toJSON (GetImagesResponseBody200ImagesTypeEnumStringBackup) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "backup"
          toJSON (GetImagesResponseBody200ImagesTypeEnumStringSnapshot) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "snapshot"
          toJSON (GetImagesResponseBody200ImagesTypeEnumStringSystem) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "system"
          toJSON (GetImagesResponseBody200ImagesTypeEnumStringTemporary) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "temporary"
instance Data.Aeson.FromJSON GetImagesResponseBody200ImagesType
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "app")
                                          then GetImagesResponseBody200ImagesTypeEnumStringApp
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "backup")
                                                then GetImagesResponseBody200ImagesTypeEnumStringBackup
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "snapshot")
                                                      then GetImagesResponseBody200ImagesTypeEnumStringSnapshot
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "system")
                                                            then GetImagesResponseBody200ImagesTypeEnumStringSystem
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "temporary")
                                                                  then GetImagesResponseBody200ImagesTypeEnumStringTemporary
                                                                  else GetImagesResponseBody200ImagesTypeEnumOther val)
-- | Defines the data type for the schema GetImagesResponseBody200Meta
-- 
-- 
data GetImagesResponseBody200Meta = GetImagesResponseBody200Meta {
  -- | pagination
  getImagesResponseBody200MetaPagination :: GetImagesResponseBody200MetaPagination
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetImagesResponseBody200Meta
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "pagination" (getImagesResponseBody200MetaPagination obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "pagination" (getImagesResponseBody200MetaPagination obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetImagesResponseBody200Meta
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetImagesResponseBody200Meta" (\obj -> GHC.Base.pure GetImagesResponseBody200Meta GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pagination"))
-- | Defines the data type for the schema GetImagesResponseBody200MetaPagination
-- 
-- 
data GetImagesResponseBody200MetaPagination = GetImagesResponseBody200MetaPagination {
  -- | last_page: ID of the last page available. Can be null if the current page is the last one.
  getImagesResponseBody200MetaPaginationLastPage :: GHC.Types.Double
  -- | next_page: ID of the next page. Can be null if the current page is the last one.
  , getImagesResponseBody200MetaPaginationNextPage :: GHC.Types.Double
  -- | page: Current page number
  , getImagesResponseBody200MetaPaginationPage :: GHC.Types.Double
  -- | per_page: Maximum number of items shown per page in the response
  , getImagesResponseBody200MetaPaginationPerPage :: GHC.Types.Double
  -- | previous_page: ID of the previous page. Can be null if the current page is the first one.
  , getImagesResponseBody200MetaPaginationPreviousPage :: GHC.Types.Double
  -- | total_entries: The total number of entries that exist in the database for this query. Nullable if unknown.
  , getImagesResponseBody200MetaPaginationTotalEntries :: GHC.Types.Double
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetImagesResponseBody200MetaPagination
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "last_page" (getImagesResponseBody200MetaPaginationLastPage obj) : (Data.Aeson..=) "next_page" (getImagesResponseBody200MetaPaginationNextPage obj) : (Data.Aeson..=) "page" (getImagesResponseBody200MetaPaginationPage obj) : (Data.Aeson..=) "per_page" (getImagesResponseBody200MetaPaginationPerPage obj) : (Data.Aeson..=) "previous_page" (getImagesResponseBody200MetaPaginationPreviousPage obj) : (Data.Aeson..=) "total_entries" (getImagesResponseBody200MetaPaginationTotalEntries obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "last_page" (getImagesResponseBody200MetaPaginationLastPage obj) GHC.Base.<> ((Data.Aeson..=) "next_page" (getImagesResponseBody200MetaPaginationNextPage obj) GHC.Base.<> ((Data.Aeson..=) "page" (getImagesResponseBody200MetaPaginationPage obj) GHC.Base.<> ((Data.Aeson..=) "per_page" (getImagesResponseBody200MetaPaginationPerPage obj) GHC.Base.<> ((Data.Aeson..=) "previous_page" (getImagesResponseBody200MetaPaginationPreviousPage obj) GHC.Base.<> (Data.Aeson..=) "total_entries" (getImagesResponseBody200MetaPaginationTotalEntries obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetImagesResponseBody200MetaPagination
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetImagesResponseBody200MetaPagination" (\obj -> (((((GHC.Base.pure GetImagesResponseBody200MetaPagination GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "last_page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "next_page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "per_page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "previous_page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "total_entries"))
