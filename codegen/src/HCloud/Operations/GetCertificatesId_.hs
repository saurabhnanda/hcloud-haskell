-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getCertificates_Id_
module HCloud.Operations.GetCertificatesId_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > GET /certificates/{id}
-- 
-- Gets a specific Certificate object.
getCertificates_Id_ :: forall m . HCloud.Common.MonadHTTP m => GHC.Types.Int -- ^ id: ID of the resource
  -> HCloud.Common.HttpT m (Network.HTTP.Client.Types.Response GetCertificatesIdResponse) -- ^ Monadic computation which returns the result of the operation
getCertificates_Id_ id = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetCertificatesIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetCertificatesIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                      GetCertificatesIdResponseBody200)
                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/certificates/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) GHC.Base.mempty)
-- | Represents a response of the operation 'getCertificates_Id_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetCertificatesIdResponseError' is used.
data GetCertificatesIdResponse =
   GetCertificatesIdResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetCertificatesIdResponse200 GetCertificatesIdResponseBody200 -- ^ The \`certificate\` key contains a Certificate object
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/certificates\/{id}.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetCertificatesIdResponseBody200 = GetCertificatesIdResponseBody200 {
  -- | certificate
  getCertificatesIdResponseBody200Certificate :: GetCertificatesIdResponseBody200Certificate
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetCertificatesIdResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("certificate" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200Certificate obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("certificate" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200Certificate obj)
instance Data.Aeson.Types.FromJSON.FromJSON GetCertificatesIdResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetCertificatesIdResponseBody200" (\obj -> GHC.Base.pure GetCertificatesIdResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "certificate"))
-- | Create a new 'GetCertificatesIdResponseBody200' with all required fields.
mkGetCertificatesIdResponseBody200 :: GetCertificatesIdResponseBody200Certificate -- ^ 'getCertificatesIdResponseBody200Certificate'
  -> GetCertificatesIdResponseBody200
mkGetCertificatesIdResponseBody200 getCertificatesIdResponseBody200Certificate = GetCertificatesIdResponseBody200{getCertificatesIdResponseBody200Certificate = getCertificatesIdResponseBody200Certificate}
-- | Defines the object schema located at @paths.\/certificates\/{id}.GET.responses.200.content.application\/json.schema.properties.certificate@ in the specification.
-- 
-- 
data GetCertificatesIdResponseBody200Certificate = GetCertificatesIdResponseBody200Certificate {
  -- | certificate: Certificate and chain in PEM format, in order so that each record directly certifies the one preceding
  getCertificatesIdResponseBody200CertificateCertificate :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | created: Point in time when the Resource was created (in ISO-8601 format)
  , getCertificatesIdResponseBody200CertificateCreated :: Data.Text.Internal.Text
  -- | domain_names: Domains and subdomains covered by the Certificate
  , getCertificatesIdResponseBody200CertificateDomainNames :: ([Data.Text.Internal.Text])
  -- | fingerprint: SHA256 fingerprint of the Certificate
  , getCertificatesIdResponseBody200CertificateFingerprint :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | id: ID of the Resource
  , getCertificatesIdResponseBody200CertificateId :: GHC.Types.Int
  -- | labels: User-defined labels (key-value pairs)
  , getCertificatesIdResponseBody200CertificateLabels :: Data.Aeson.Types.Internal.Object
  -- | name: Name of the Resource. Must be unique per Project.
  , getCertificatesIdResponseBody200CertificateName :: Data.Text.Internal.Text
  -- | not_valid_after: Point in time when the Certificate stops being valid (in ISO-8601 format)
  , getCertificatesIdResponseBody200CertificateNotValidAfter :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | not_valid_before: Point in time when the Certificate becomes valid (in ISO-8601 format)
  , getCertificatesIdResponseBody200CertificateNotValidBefore :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | status: Current status of a type \`managed\` Certificate, always *null* for type \`uploaded\` Certificates
  , getCertificatesIdResponseBody200CertificateStatus :: (GHC.Maybe.Maybe GetCertificatesIdResponseBody200CertificateStatus)
  -- | type: Type of the Certificate
  , getCertificatesIdResponseBody200CertificateType :: (GHC.Maybe.Maybe GetCertificatesIdResponseBody200CertificateType)
  -- | used_by: Resources currently using the Certificate
  , getCertificatesIdResponseBody200CertificateUsedBy :: ([GetCertificatesIdResponseBody200CertificateUsedBy])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetCertificatesIdResponseBody200Certificate
    where toJSON obj = Data.Aeson.Types.Internal.object ("certificate" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200CertificateCertificate obj : "created" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200CertificateCreated obj : "domain_names" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200CertificateDomainNames obj : "fingerprint" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200CertificateFingerprint obj : "id" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200CertificateId obj : "labels" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200CertificateLabels obj : "name" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200CertificateName obj : "not_valid_after" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200CertificateNotValidAfter obj : "not_valid_before" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200CertificateNotValidBefore obj : "status" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200CertificateStatus obj : "type" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200CertificateType obj : "used_by" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200CertificateUsedBy obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("certificate" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200CertificateCertificate obj) GHC.Base.<> (("created" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200CertificateCreated obj) GHC.Base.<> (("domain_names" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200CertificateDomainNames obj) GHC.Base.<> (("fingerprint" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200CertificateFingerprint obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200CertificateId obj) GHC.Base.<> (("labels" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200CertificateLabels obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200CertificateName obj) GHC.Base.<> (("not_valid_after" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200CertificateNotValidAfter obj) GHC.Base.<> (("not_valid_before" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200CertificateNotValidBefore obj) GHC.Base.<> (("status" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200CertificateStatus obj) GHC.Base.<> (("type" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200CertificateType obj) GHC.Base.<> ("used_by" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200CertificateUsedBy obj))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetCertificatesIdResponseBody200Certificate
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetCertificatesIdResponseBody200Certificate" (\obj -> (((((((((((GHC.Base.pure GetCertificatesIdResponseBody200Certificate GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "certificate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "domain_names")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "labels")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "not_valid_after")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "not_valid_before")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "used_by"))
-- | Create a new 'GetCertificatesIdResponseBody200Certificate' with all required fields.
mkGetCertificatesIdResponseBody200Certificate :: GHC.Maybe.Maybe Data.Text.Internal.Text -- ^ 'getCertificatesIdResponseBody200CertificateCertificate'
  -> Data.Text.Internal.Text -- ^ 'getCertificatesIdResponseBody200CertificateCreated'
  -> [Data.Text.Internal.Text] -- ^ 'getCertificatesIdResponseBody200CertificateDomainNames'
  -> GHC.Maybe.Maybe Data.Text.Internal.Text -- ^ 'getCertificatesIdResponseBody200CertificateFingerprint'
  -> GHC.Types.Int -- ^ 'getCertificatesIdResponseBody200CertificateId'
  -> Data.Aeson.Types.Internal.Object -- ^ 'getCertificatesIdResponseBody200CertificateLabels'
  -> Data.Text.Internal.Text -- ^ 'getCertificatesIdResponseBody200CertificateName'
  -> GHC.Maybe.Maybe Data.Text.Internal.Text -- ^ 'getCertificatesIdResponseBody200CertificateNotValidAfter'
  -> GHC.Maybe.Maybe Data.Text.Internal.Text -- ^ 'getCertificatesIdResponseBody200CertificateNotValidBefore'
  -> [GetCertificatesIdResponseBody200CertificateUsedBy] -- ^ 'getCertificatesIdResponseBody200CertificateUsedBy'
  -> GetCertificatesIdResponseBody200Certificate
mkGetCertificatesIdResponseBody200Certificate getCertificatesIdResponseBody200CertificateCertificate getCertificatesIdResponseBody200CertificateCreated getCertificatesIdResponseBody200CertificateDomainNames getCertificatesIdResponseBody200CertificateFingerprint getCertificatesIdResponseBody200CertificateId getCertificatesIdResponseBody200CertificateLabels getCertificatesIdResponseBody200CertificateName getCertificatesIdResponseBody200CertificateNotValidAfter getCertificatesIdResponseBody200CertificateNotValidBefore getCertificatesIdResponseBody200CertificateUsedBy = GetCertificatesIdResponseBody200Certificate{getCertificatesIdResponseBody200CertificateCertificate = getCertificatesIdResponseBody200CertificateCertificate,
getCertificatesIdResponseBody200CertificateCreated = getCertificatesIdResponseBody200CertificateCreated,
getCertificatesIdResponseBody200CertificateDomainNames = getCertificatesIdResponseBody200CertificateDomainNames,
getCertificatesIdResponseBody200CertificateFingerprint = getCertificatesIdResponseBody200CertificateFingerprint,
getCertificatesIdResponseBody200CertificateId = getCertificatesIdResponseBody200CertificateId,
getCertificatesIdResponseBody200CertificateLabels = getCertificatesIdResponseBody200CertificateLabels,
getCertificatesIdResponseBody200CertificateName = getCertificatesIdResponseBody200CertificateName,
getCertificatesIdResponseBody200CertificateNotValidAfter = getCertificatesIdResponseBody200CertificateNotValidAfter,
getCertificatesIdResponseBody200CertificateNotValidBefore = getCertificatesIdResponseBody200CertificateNotValidBefore,
getCertificatesIdResponseBody200CertificateStatus = GHC.Maybe.Nothing,
getCertificatesIdResponseBody200CertificateType = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         getCertificatesIdResponseBody200CertificateUsedBy = getCertificatesIdResponseBody200CertificateUsedBy}
-- | Defines the object schema located at @paths.\/certificates\/{id}.GET.responses.200.content.application\/json.schema.properties.certificate.properties.status@ in the specification.
-- 
-- Current status of a type \`managed\` Certificate, always *null* for type \`uploaded\` Certificates
data GetCertificatesIdResponseBody200CertificateStatus = GetCertificatesIdResponseBody200CertificateStatus {
  -- | error: If issuance or renewal reports \`failed\`, this property contains information about what happened
  getCertificatesIdResponseBody200CertificateStatusError :: (GHC.Maybe.Maybe GetCertificatesIdResponseBody200CertificateStatusError)
  -- | issuance: Status of the issuance process of the Certificate
  , getCertificatesIdResponseBody200CertificateStatusIssuance :: (GHC.Maybe.Maybe GetCertificatesIdResponseBody200CertificateStatusIssuance)
  -- | renewal: Status of the renewal process of the Certificate.
  , getCertificatesIdResponseBody200CertificateStatusRenewal :: (GHC.Maybe.Maybe GetCertificatesIdResponseBody200CertificateStatusRenewal)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetCertificatesIdResponseBody200CertificateStatus
    where toJSON obj = Data.Aeson.Types.Internal.object ("error" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200CertificateStatusError obj : "issuance" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200CertificateStatusIssuance obj : "renewal" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200CertificateStatusRenewal obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("error" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200CertificateStatusError obj) GHC.Base.<> (("issuance" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200CertificateStatusIssuance obj) GHC.Base.<> ("renewal" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200CertificateStatusRenewal obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GetCertificatesIdResponseBody200CertificateStatus
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetCertificatesIdResponseBody200CertificateStatus" (\obj -> ((GHC.Base.pure GetCertificatesIdResponseBody200CertificateStatus GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "issuance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "renewal"))
-- | Create a new 'GetCertificatesIdResponseBody200CertificateStatus' with all required fields.
mkGetCertificatesIdResponseBody200CertificateStatus :: GetCertificatesIdResponseBody200CertificateStatus
mkGetCertificatesIdResponseBody200CertificateStatus = GetCertificatesIdResponseBody200CertificateStatus{getCertificatesIdResponseBody200CertificateStatusError = GHC.Maybe.Nothing,
                                                                                                        getCertificatesIdResponseBody200CertificateStatusIssuance = GHC.Maybe.Nothing,
                                                                                                        getCertificatesIdResponseBody200CertificateStatusRenewal = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/certificates\/{id}.GET.responses.200.content.application\/json.schema.properties.certificate.properties.status.properties.error@ in the specification.
-- 
-- If issuance or renewal reports \`failed\`, this property contains information about what happened
data GetCertificatesIdResponseBody200CertificateStatusError = GetCertificatesIdResponseBody200CertificateStatusError {
  -- | code
  getCertificatesIdResponseBody200CertificateStatusErrorCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | message
  , getCertificatesIdResponseBody200CertificateStatusErrorMessage :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetCertificatesIdResponseBody200CertificateStatusError
    where toJSON obj = Data.Aeson.Types.Internal.object ("code" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200CertificateStatusErrorCode obj : "message" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200CertificateStatusErrorMessage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("code" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200CertificateStatusErrorCode obj) GHC.Base.<> ("message" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200CertificateStatusErrorMessage obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetCertificatesIdResponseBody200CertificateStatusError
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetCertificatesIdResponseBody200CertificateStatusError" (\obj -> (GHC.Base.pure GetCertificatesIdResponseBody200CertificateStatusError GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "message"))
-- | Create a new 'GetCertificatesIdResponseBody200CertificateStatusError' with all required fields.
mkGetCertificatesIdResponseBody200CertificateStatusError :: GetCertificatesIdResponseBody200CertificateStatusError
mkGetCertificatesIdResponseBody200CertificateStatusError = GetCertificatesIdResponseBody200CertificateStatusError{getCertificatesIdResponseBody200CertificateStatusErrorCode = GHC.Maybe.Nothing,
                                                                                                                  getCertificatesIdResponseBody200CertificateStatusErrorMessage = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/certificates\/{id}.GET.responses.200.content.application\/json.schema.properties.certificate.properties.status.properties.issuance@ in the specification.
-- 
-- Status of the issuance process of the Certificate
data GetCertificatesIdResponseBody200CertificateStatusIssuance =
   GetCertificatesIdResponseBody200CertificateStatusIssuanceOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetCertificatesIdResponseBody200CertificateStatusIssuanceTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetCertificatesIdResponseBody200CertificateStatusIssuanceEnumPending -- ^ Represents the JSON value @"pending"@
  | GetCertificatesIdResponseBody200CertificateStatusIssuanceEnumCompleted -- ^ Represents the JSON value @"completed"@
  | GetCertificatesIdResponseBody200CertificateStatusIssuanceEnumFailed -- ^ Represents the JSON value @"failed"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetCertificatesIdResponseBody200CertificateStatusIssuance
    where toJSON (GetCertificatesIdResponseBody200CertificateStatusIssuanceOther val) = val
          toJSON (GetCertificatesIdResponseBody200CertificateStatusIssuanceTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetCertificatesIdResponseBody200CertificateStatusIssuanceEnumPending) = "pending"
          toJSON (GetCertificatesIdResponseBody200CertificateStatusIssuanceEnumCompleted) = "completed"
          toJSON (GetCertificatesIdResponseBody200CertificateStatusIssuanceEnumFailed) = "failed"
instance Data.Aeson.Types.FromJSON.FromJSON GetCertificatesIdResponseBody200CertificateStatusIssuance
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "pending" -> GetCertificatesIdResponseBody200CertificateStatusIssuanceEnumPending
                                            | val GHC.Classes.== "completed" -> GetCertificatesIdResponseBody200CertificateStatusIssuanceEnumCompleted
                                            | val GHC.Classes.== "failed" -> GetCertificatesIdResponseBody200CertificateStatusIssuanceEnumFailed
                                            | GHC.Base.otherwise -> GetCertificatesIdResponseBody200CertificateStatusIssuanceOther val)
-- | Defines the enum schema located at @paths.\/certificates\/{id}.GET.responses.200.content.application\/json.schema.properties.certificate.properties.status.properties.renewal@ in the specification.
-- 
-- Status of the renewal process of the Certificate.
data GetCertificatesIdResponseBody200CertificateStatusRenewal =
   GetCertificatesIdResponseBody200CertificateStatusRenewalOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetCertificatesIdResponseBody200CertificateStatusRenewalTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetCertificatesIdResponseBody200CertificateStatusRenewalEnumScheduled -- ^ Represents the JSON value @"scheduled"@
  | GetCertificatesIdResponseBody200CertificateStatusRenewalEnumPending -- ^ Represents the JSON value @"pending"@
  | GetCertificatesIdResponseBody200CertificateStatusRenewalEnumFailed -- ^ Represents the JSON value @"failed"@
  | GetCertificatesIdResponseBody200CertificateStatusRenewalEnumUnavailable -- ^ Represents the JSON value @"unavailable"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetCertificatesIdResponseBody200CertificateStatusRenewal
    where toJSON (GetCertificatesIdResponseBody200CertificateStatusRenewalOther val) = val
          toJSON (GetCertificatesIdResponseBody200CertificateStatusRenewalTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetCertificatesIdResponseBody200CertificateStatusRenewalEnumScheduled) = "scheduled"
          toJSON (GetCertificatesIdResponseBody200CertificateStatusRenewalEnumPending) = "pending"
          toJSON (GetCertificatesIdResponseBody200CertificateStatusRenewalEnumFailed) = "failed"
          toJSON (GetCertificatesIdResponseBody200CertificateStatusRenewalEnumUnavailable) = "unavailable"
instance Data.Aeson.Types.FromJSON.FromJSON GetCertificatesIdResponseBody200CertificateStatusRenewal
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "scheduled" -> GetCertificatesIdResponseBody200CertificateStatusRenewalEnumScheduled
                                            | val GHC.Classes.== "pending" -> GetCertificatesIdResponseBody200CertificateStatusRenewalEnumPending
                                            | val GHC.Classes.== "failed" -> GetCertificatesIdResponseBody200CertificateStatusRenewalEnumFailed
                                            | val GHC.Classes.== "unavailable" -> GetCertificatesIdResponseBody200CertificateStatusRenewalEnumUnavailable
                                            | GHC.Base.otherwise -> GetCertificatesIdResponseBody200CertificateStatusRenewalOther val)
-- | Defines the enum schema located at @paths.\/certificates\/{id}.GET.responses.200.content.application\/json.schema.properties.certificate.properties.type@ in the specification.
-- 
-- Type of the Certificate
data GetCertificatesIdResponseBody200CertificateType =
   GetCertificatesIdResponseBody200CertificateTypeOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetCertificatesIdResponseBody200CertificateTypeTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetCertificatesIdResponseBody200CertificateTypeEnumUploaded -- ^ Represents the JSON value @"uploaded"@
  | GetCertificatesIdResponseBody200CertificateTypeEnumManaged -- ^ Represents the JSON value @"managed"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetCertificatesIdResponseBody200CertificateType
    where toJSON (GetCertificatesIdResponseBody200CertificateTypeOther val) = val
          toJSON (GetCertificatesIdResponseBody200CertificateTypeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetCertificatesIdResponseBody200CertificateTypeEnumUploaded) = "uploaded"
          toJSON (GetCertificatesIdResponseBody200CertificateTypeEnumManaged) = "managed"
instance Data.Aeson.Types.FromJSON.FromJSON GetCertificatesIdResponseBody200CertificateType
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "uploaded" -> GetCertificatesIdResponseBody200CertificateTypeEnumUploaded
                                            | val GHC.Classes.== "managed" -> GetCertificatesIdResponseBody200CertificateTypeEnumManaged
                                            | GHC.Base.otherwise -> GetCertificatesIdResponseBody200CertificateTypeOther val)
-- | Defines the object schema located at @paths.\/certificates\/{id}.GET.responses.200.content.application\/json.schema.properties.certificate.properties.used_by.items@ in the specification.
-- 
-- 
data GetCertificatesIdResponseBody200CertificateUsedBy = GetCertificatesIdResponseBody200CertificateUsedBy {
  -- | id: ID of resource referenced
  getCertificatesIdResponseBody200CertificateUsedById :: GHC.Types.Int
  -- | type: Type of resource referenced
  , getCertificatesIdResponseBody200CertificateUsedByType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetCertificatesIdResponseBody200CertificateUsedBy
    where toJSON obj = Data.Aeson.Types.Internal.object ("id" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200CertificateUsedById obj : "type" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200CertificateUsedByType obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("id" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200CertificateUsedById obj) GHC.Base.<> ("type" Data.Aeson.Types.ToJSON..= getCertificatesIdResponseBody200CertificateUsedByType obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetCertificatesIdResponseBody200CertificateUsedBy
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetCertificatesIdResponseBody200CertificateUsedBy" (\obj -> (GHC.Base.pure GetCertificatesIdResponseBody200CertificateUsedBy GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Create a new 'GetCertificatesIdResponseBody200CertificateUsedBy' with all required fields.
mkGetCertificatesIdResponseBody200CertificateUsedBy :: GHC.Types.Int -- ^ 'getCertificatesIdResponseBody200CertificateUsedById'
  -> Data.Text.Internal.Text -- ^ 'getCertificatesIdResponseBody200CertificateUsedByType'
  -> GetCertificatesIdResponseBody200CertificateUsedBy
mkGetCertificatesIdResponseBody200CertificateUsedBy getCertificatesIdResponseBody200CertificateUsedById getCertificatesIdResponseBody200CertificateUsedByType = GetCertificatesIdResponseBody200CertificateUsedBy{getCertificatesIdResponseBody200CertificateUsedById = getCertificatesIdResponseBody200CertificateUsedById,
                                                                                                                                                                                                                  getCertificatesIdResponseBody200CertificateUsedByType = getCertificatesIdResponseBody200CertificateUsedByType}
-- | > GET /certificates/{id}
-- 
-- The same as 'getCertificates_Id_' but accepts an explicit configuration.
getCertificates_Id_WithConfiguration :: forall m . HCloud.Common.MonadHTTP m => HCloud.Common.Configuration -- ^ The configuration to use in the request
  -> GHC.Types.Int -- ^ id: ID of the resource
  -> m (Network.HTTP.Client.Types.Response GetCertificatesIdResponse) -- ^ Monadic computation which returns the result of the operation
getCertificates_Id_WithConfiguration config
                                     id = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetCertificatesIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetCertificatesIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                       GetCertificatesIdResponseBody200)
                                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/certificates/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) GHC.Base.mempty)
-- | > GET /certificates/{id}
-- 
-- The same as 'getCertificates_Id_' but returns the raw 'Data.ByteString.Char8.ByteString'.
getCertificates_Id_Raw :: forall m . HCloud.Common.MonadHTTP m => GHC.Types.Int -- ^ id: ID of the resource
  -> HCloud.Common.HttpT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getCertificates_Id_Raw id = GHC.Base.id (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/certificates/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) GHC.Base.mempty)
-- | > GET /certificates/{id}
-- 
-- The same as 'getCertificates_Id_' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getCertificates_Id_WithConfigurationRaw :: forall m . HCloud.Common.MonadHTTP m => HCloud.Common.Configuration -- ^ The configuration to use in the request
  -> GHC.Types.Int -- ^ id: ID of the resource
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getCertificates_Id_WithConfigurationRaw config
                                        id = GHC.Base.id (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/certificates/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ""))) GHC.Base.mempty)
