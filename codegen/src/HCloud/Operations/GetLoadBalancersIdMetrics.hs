-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getLoadBalancers_Id_Metrics
module HCloud.Operations.GetLoadBalancersIdMetrics where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > GET /load_balancers/{id}/metrics
-- 
-- You must specify the type of metric to get: \`open_connections\`, \`connections_per_second\`, \`requests_per_second\` or \`bandwidth\`. You can also specify more than one type by comma separation, e.g. \`requests_per_second,bandwidth\`.
-- 
-- Depending on the type you will get different time series data:
-- 
-- |Type | Timeseries | Unit | Description |
-- |---- |------------|------|-------------|
-- | open_connections | open_connections | number | Open connections |
-- | connections_per_second | connections_per_second | connections\/s | Connections per second |
-- | requests_per_second | requests_per_second | requests\/s | Requests per second |
-- | bandwidth | bandwidth.in | bytes\/s | Ingress bandwidth |
-- || bandwidth.out | bytes\/s | Egress bandwidth |
-- 
-- Metrics are available for the last 30 days only.
-- 
-- If you do not provide the step argument we will automatically adjust it so that 200 samples are returned.
-- 
-- We limit the number of samples to a maximum of 500 and will adjust the step parameter accordingly.
getLoadBalancers_Id_Metrics :: forall m . HCloud.Common.MonadHTTP m => GetLoadBalancersIdMetricsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> HCloud.Common.HttpT m (Network.HTTP.Client.Types.Response GetLoadBalancersIdMetricsResponse) -- ^ Monadic computation which returns the result of the operation
getLoadBalancers_Id_Metrics parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetLoadBalancersIdMetricsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetLoadBalancersIdMetricsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                      GetLoadBalancersIdMetricsResponseBody200)
                                                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/load_balancers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel (getLoadBalancersIdMetricsParametersPathId parameters))) GHC.Base.++ "/metrics"))) [HCloud.Common.QueryParameter (Data.Text.pack "type") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getLoadBalancersIdMetricsParametersQueryType parameters)) (Data.Text.pack "form") GHC.Types.False,
loud.Common.QueryParameter (Data.Text.pack "start") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getLoadBalancersIdMetricsParametersQueryStart parameters)) (Data.Text.pack "form") GHC.Types.False,
loud.Common.QueryParameter (Data.Text.pack "end") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getLoadBalancersIdMetricsParametersQueryEnd parameters)) (Data.Text.pack "form") GHC.Types.False,
loud.Common.QueryParameter (Data.Text.pack "step") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getLoadBalancersIdMetricsParametersQueryStep parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/load_balancers\/{id}\/metrics.GET.parameters@ in the specification.
-- 
-- 
data GetLoadBalancersIdMetricsParameters = GetLoadBalancersIdMetricsParameters {
  -- | pathId: Represents the parameter named \'id\'
  -- 
  -- ID of the Load Balancer
  getLoadBalancersIdMetricsParametersPathId :: GHC.Types.Int
  -- | queryEnd: Represents the parameter named \'end\'
  -- 
  -- End of period to get Metrics for (in ISO-8601 format)
  , getLoadBalancersIdMetricsParametersQueryEnd :: Data.Text.Internal.Text
  -- | queryStart: Represents the parameter named \'start\'
  -- 
  -- Start of period to get Metrics for (in ISO-8601 format)
  , getLoadBalancersIdMetricsParametersQueryStart :: Data.Text.Internal.Text
  -- | queryStep: Represents the parameter named \'step\'
  -- 
  -- Resolution of results in seconds
  , getLoadBalancersIdMetricsParametersQueryStep :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | queryType: Represents the parameter named \'type\'
  -- 
  -- Type of metrics to get
  , getLoadBalancersIdMetricsParametersQueryType :: GetLoadBalancersIdMetricsParametersQueryType
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetLoadBalancersIdMetricsParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathId" Data.Aeson.Types.ToJSON..= getLoadBalancersIdMetricsParametersPathId obj : "queryEnd" Data.Aeson.Types.ToJSON..= getLoadBalancersIdMetricsParametersQueryEnd obj : "queryStart" Data.Aeson.Types.ToJSON..= getLoadBalancersIdMetricsParametersQueryStart obj : "queryStep" Data.Aeson.Types.ToJSON..= getLoadBalancersIdMetricsParametersQueryStep obj : "queryType" Data.Aeson.Types.ToJSON..= getLoadBalancersIdMetricsParametersQueryType obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathId" Data.Aeson.Types.ToJSON..= getLoadBalancersIdMetricsParametersPathId obj) GHC.Base.<> (("queryEnd" Data.Aeson.Types.ToJSON..= getLoadBalancersIdMetricsParametersQueryEnd obj) GHC.Base.<> (("queryStart" Data.Aeson.Types.ToJSON..= getLoadBalancersIdMetricsParametersQueryStart obj) GHC.Base.<> (("queryStep" Data.Aeson.Types.ToJSON..= getLoadBalancersIdMetricsParametersQueryStep obj) GHC.Base.<> ("queryType" Data.Aeson.Types.ToJSON..= getLoadBalancersIdMetricsParametersQueryType obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersIdMetricsParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersIdMetricsParameters" (\obj -> ((((GHC.Base.pure GetLoadBalancersIdMetricsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryEnd")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryStart")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryStep")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryType"))
-- | Create a new 'GetLoadBalancersIdMetricsParameters' with all required fields.
mkGetLoadBalancersIdMetricsParameters :: GHC.Types.Int -- ^ 'getLoadBalancersIdMetricsParametersPathId'
  -> Data.Text.Internal.Text -- ^ 'getLoadBalancersIdMetricsParametersQueryEnd'
  -> Data.Text.Internal.Text -- ^ 'getLoadBalancersIdMetricsParametersQueryStart'
  -> GetLoadBalancersIdMetricsParametersQueryType -- ^ 'getLoadBalancersIdMetricsParametersQueryType'
  -> GetLoadBalancersIdMetricsParameters
mkGetLoadBalancersIdMetricsParameters getLoadBalancersIdMetricsParametersPathId getLoadBalancersIdMetricsParametersQueryEnd getLoadBalancersIdMetricsParametersQueryStart getLoadBalancersIdMetricsParametersQueryType = GetLoadBalancersIdMetricsParameters{getLoadBalancersIdMetricsParametersPathId = getLoadBalancersIdMetricsParametersPathId,
                                                                                                                                                                                                                                                             getLoadBalancersIdMetricsParametersQueryEnd = getLoadBalancersIdMetricsParametersQueryEnd,
                                                                                                                                                                                                                                                             getLoadBalancersIdMetricsParametersQueryStart = getLoadBalancersIdMetricsParametersQueryStart,
                                                                                                                                                                                                                                                             getLoadBalancersIdMetricsParametersQueryStep = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                             getLoadBalancersIdMetricsParametersQueryType = getLoadBalancersIdMetricsParametersQueryType}
-- | Defines the enum schema located at @paths.\/load_balancers\/{id}\/metrics.GET.parameters.properties.queryType@ in the specification.
-- 
-- Represents the parameter named \'type\'
-- 
-- Type of metrics to get
data GetLoadBalancersIdMetricsParametersQueryType =
   GetLoadBalancersIdMetricsParametersQueryTypeOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetLoadBalancersIdMetricsParametersQueryTypeTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetLoadBalancersIdMetricsParametersQueryTypeEnumOpenConnections -- ^ Represents the JSON value @"open_connections"@
  | GetLoadBalancersIdMetricsParametersQueryTypeEnumConnectionsPerSecond -- ^ Represents the JSON value @"connections_per_second"@
  | GetLoadBalancersIdMetricsParametersQueryTypeEnumRequestsPerSecond -- ^ Represents the JSON value @"requests_per_second"@
  | GetLoadBalancersIdMetricsParametersQueryTypeEnumBandwidth -- ^ Represents the JSON value @"bandwidth"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetLoadBalancersIdMetricsParametersQueryType
    where toJSON (GetLoadBalancersIdMetricsParametersQueryTypeOther val) = val
          toJSON (GetLoadBalancersIdMetricsParametersQueryTypeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetLoadBalancersIdMetricsParametersQueryTypeEnumOpenConnections) = "open_connections"
          toJSON (GetLoadBalancersIdMetricsParametersQueryTypeEnumConnectionsPerSecond) = "connections_per_second"
          toJSON (GetLoadBalancersIdMetricsParametersQueryTypeEnumRequestsPerSecond) = "requests_per_second"
          toJSON (GetLoadBalancersIdMetricsParametersQueryTypeEnumBandwidth) = "bandwidth"
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersIdMetricsParametersQueryType
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "open_connections" -> GetLoadBalancersIdMetricsParametersQueryTypeEnumOpenConnections
                                            | val GHC.Classes.== "connections_per_second" -> GetLoadBalancersIdMetricsParametersQueryTypeEnumConnectionsPerSecond
                                            | val GHC.Classes.== "requests_per_second" -> GetLoadBalancersIdMetricsParametersQueryTypeEnumRequestsPerSecond
                                            | val GHC.Classes.== "bandwidth" -> GetLoadBalancersIdMetricsParametersQueryTypeEnumBandwidth
                                            | GHC.Base.otherwise -> GetLoadBalancersIdMetricsParametersQueryTypeOther val)
-- | Represents a response of the operation 'getLoadBalancers_Id_Metrics'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetLoadBalancersIdMetricsResponseError' is used.
data GetLoadBalancersIdMetricsResponse =
   GetLoadBalancersIdMetricsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetLoadBalancersIdMetricsResponse200 GetLoadBalancersIdMetricsResponseBody200 -- ^ The \`metrics\` key in the reply contains a metrics object with this structure
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/load_balancers\/{id}\/metrics.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetLoadBalancersIdMetricsResponseBody200 = GetLoadBalancersIdMetricsResponseBody200 {
  -- | metrics
  getLoadBalancersIdMetricsResponseBody200Metrics :: GetLoadBalancersIdMetricsResponseBody200Metrics
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetLoadBalancersIdMetricsResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("metrics" Data.Aeson.Types.ToJSON..= getLoadBalancersIdMetricsResponseBody200Metrics obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("metrics" Data.Aeson.Types.ToJSON..= getLoadBalancersIdMetricsResponseBody200Metrics obj)
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersIdMetricsResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersIdMetricsResponseBody200" (\obj -> GHC.Base.pure GetLoadBalancersIdMetricsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metrics"))
-- | Create a new 'GetLoadBalancersIdMetricsResponseBody200' with all required fields.
mkGetLoadBalancersIdMetricsResponseBody200 :: GetLoadBalancersIdMetricsResponseBody200Metrics -- ^ 'getLoadBalancersIdMetricsResponseBody200Metrics'
  -> GetLoadBalancersIdMetricsResponseBody200
mkGetLoadBalancersIdMetricsResponseBody200 getLoadBalancersIdMetricsResponseBody200Metrics = GetLoadBalancersIdMetricsResponseBody200{getLoadBalancersIdMetricsResponseBody200Metrics = getLoadBalancersIdMetricsResponseBody200Metrics}
-- | Defines the object schema located at @paths.\/load_balancers\/{id}\/metrics.GET.responses.200.content.application\/json.schema.properties.metrics@ in the specification.
-- 
-- 
data GetLoadBalancersIdMetricsResponseBody200Metrics = GetLoadBalancersIdMetricsResponseBody200Metrics {
  -- | end: End of period of metrics reported (in ISO-8601 format)
  getLoadBalancersIdMetricsResponseBody200MetricsEnd :: Data.Text.Internal.Text
  -- | start: Start of period of metrics reported (in ISO-8601 format)
  , getLoadBalancersIdMetricsResponseBody200MetricsStart :: Data.Text.Internal.Text
  -- | step: Resolution of results in seconds.
  , getLoadBalancersIdMetricsResponseBody200MetricsStep :: GHC.Types.Double
  -- | time_series: Hash with timeseries information, containing the name of timeseries as key
  , getLoadBalancersIdMetricsResponseBody200MetricsTimeSeries :: Data.Aeson.Types.Internal.Object
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetLoadBalancersIdMetricsResponseBody200Metrics
    where toJSON obj = Data.Aeson.Types.Internal.object ("end" Data.Aeson.Types.ToJSON..= getLoadBalancersIdMetricsResponseBody200MetricsEnd obj : "start" Data.Aeson.Types.ToJSON..= getLoadBalancersIdMetricsResponseBody200MetricsStart obj : "step" Data.Aeson.Types.ToJSON..= getLoadBalancersIdMetricsResponseBody200MetricsStep obj : "time_series" Data.Aeson.Types.ToJSON..= getLoadBalancersIdMetricsResponseBody200MetricsTimeSeries obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("end" Data.Aeson.Types.ToJSON..= getLoadBalancersIdMetricsResponseBody200MetricsEnd obj) GHC.Base.<> (("start" Data.Aeson.Types.ToJSON..= getLoadBalancersIdMetricsResponseBody200MetricsStart obj) GHC.Base.<> (("step" Data.Aeson.Types.ToJSON..= getLoadBalancersIdMetricsResponseBody200MetricsStep obj) GHC.Base.<> ("time_series" Data.Aeson.Types.ToJSON..= getLoadBalancersIdMetricsResponseBody200MetricsTimeSeries obj))))
instance Data.Aeson.Types.FromJSON.FromJSON GetLoadBalancersIdMetricsResponseBody200Metrics
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLoadBalancersIdMetricsResponseBody200Metrics" (\obj -> (((GHC.Base.pure GetLoadBalancersIdMetricsResponseBody200Metrics GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "end")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "start")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "step")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "time_series"))
-- | Create a new 'GetLoadBalancersIdMetricsResponseBody200Metrics' with all required fields.
mkGetLoadBalancersIdMetricsResponseBody200Metrics :: Data.Text.Internal.Text -- ^ 'getLoadBalancersIdMetricsResponseBody200MetricsEnd'
  -> Data.Text.Internal.Text -- ^ 'getLoadBalancersIdMetricsResponseBody200MetricsStart'
  -> GHC.Types.Double -- ^ 'getLoadBalancersIdMetricsResponseBody200MetricsStep'
  -> Data.Aeson.Types.Internal.Object -- ^ 'getLoadBalancersIdMetricsResponseBody200MetricsTimeSeries'
  -> GetLoadBalancersIdMetricsResponseBody200Metrics
mkGetLoadBalancersIdMetricsResponseBody200Metrics getLoadBalancersIdMetricsResponseBody200MetricsEnd getLoadBalancersIdMetricsResponseBody200MetricsStart getLoadBalancersIdMetricsResponseBody200MetricsStep getLoadBalancersIdMetricsResponseBody200MetricsTimeSeries = GetLoadBalancersIdMetricsResponseBody200Metrics{getLoadBalancersIdMetricsResponseBody200MetricsEnd = getLoadBalancersIdMetricsResponseBody200MetricsEnd,
                                                                                                                                                                                                                                                                                                                          getLoadBalancersIdMetricsResponseBody200MetricsStart = getLoadBalancersIdMetricsResponseBody200MetricsStart,
                                                                                                                                                                                                                                                                                                                          getLoadBalancersIdMetricsResponseBody200MetricsStep = getLoadBalancersIdMetricsResponseBody200MetricsStep,
                                                                                                                                                                                                                                                                                                                          getLoadBalancersIdMetricsResponseBody200MetricsTimeSeries = getLoadBalancersIdMetricsResponseBody200MetricsTimeSeries}
-- | > GET /load_balancers/{id}/metrics
-- 
-- The same as 'getLoadBalancers_Id_Metrics' but accepts an explicit configuration.
getLoadBalancers_Id_MetricsWithConfiguration :: forall m . HCloud.Common.MonadHTTP m => HCloud.Common.Configuration -- ^ The configuration to use in the request
  -> GetLoadBalancersIdMetricsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetLoadBalancersIdMetricsResponse) -- ^ Monadic computation which returns the result of the operation
getLoadBalancers_Id_MetricsWithConfiguration config
                                             parameters = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetLoadBalancersIdMetricsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetLoadBalancersIdMetricsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       GetLoadBalancersIdMetricsResponseBody200)
                                                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/load_balancers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel (getLoadBalancersIdMetricsParametersPathId parameters))) GHC.Base.++ "/metrics"))) [HCloud.Common.QueryParameter (Data.Text.pack "type") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getLoadBalancersIdMetricsParametersQueryType parameters)) (Data.Text.pack "form") GHC.Types.False,
loud.Common.QueryParameter (Data.Text.pack "start") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getLoadBalancersIdMetricsParametersQueryStart parameters)) (Data.Text.pack "form") GHC.Types.False,
loud.Common.QueryParameter (Data.Text.pack "end") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getLoadBalancersIdMetricsParametersQueryEnd parameters)) (Data.Text.pack "form") GHC.Types.False,
loud.Common.QueryParameter (Data.Text.pack "step") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getLoadBalancersIdMetricsParametersQueryStep parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /load_balancers/{id}/metrics
-- 
-- The same as 'getLoadBalancers_Id_Metrics' but returns the raw 'Data.ByteString.Char8.ByteString'.
getLoadBalancers_Id_MetricsRaw :: forall m . HCloud.Common.MonadHTTP m => GetLoadBalancersIdMetricsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> HCloud.Common.HttpT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getLoadBalancers_Id_MetricsRaw parameters = GHC.Base.id (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/load_balancers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel (getLoadBalancersIdMetricsParametersPathId parameters))) GHC.Base.++ "/metrics"))) [HCloud.Common.QueryParameter (Data.Text.pack "type") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getLoadBalancersIdMetricsParametersQueryType parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                        HCloud.Common.QueryParameter (Data.Text.pack "start") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getLoadBalancersIdMetricsParametersQueryStart parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                        HCloud.Common.QueryParameter (Data.Text.pack "end") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getLoadBalancersIdMetricsParametersQueryEnd parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                        HCloud.Common.QueryParameter (Data.Text.pack "step") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getLoadBalancersIdMetricsParametersQueryStep parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /load_balancers/{id}/metrics
-- 
-- The same as 'getLoadBalancers_Id_Metrics' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getLoadBalancers_Id_MetricsWithConfigurationRaw :: forall m . HCloud.Common.MonadHTTP m => HCloud.Common.Configuration -- ^ The configuration to use in the request
  -> GetLoadBalancersIdMetricsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getLoadBalancers_Id_MetricsWithConfigurationRaw config
                                                parameters = GHC.Base.id (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/load_balancers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel (getLoadBalancersIdMetricsParametersPathId parameters))) GHC.Base.++ "/metrics"))) [HCloud.Common.QueryParameter (Data.Text.pack "type") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getLoadBalancersIdMetricsParametersQueryType parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               HCloud.Common.QueryParameter (Data.Text.pack "start") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getLoadBalancersIdMetricsParametersQueryStart parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               HCloud.Common.QueryParameter (Data.Text.pack "end") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getLoadBalancersIdMetricsParametersQueryEnd parameters)) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               HCloud.Common.QueryParameter (Data.Text.pack "step") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getLoadBalancersIdMetricsParametersQueryStep parameters) (Data.Text.pack "form") GHC.Types.False])
