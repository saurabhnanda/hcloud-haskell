-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getImages_Id_Actions_ActionId_
module HCloud.Operations.GetImagesIdActionsActionId_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > GET /images/{id}/actions/{action_id}
-- 
-- Returns a specific Action for an Image.
getImages_Id_Actions_ActionId_ :: forall m . HCloud.Common.MonadHTTP m => GetImagesIdActionsActionIdParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> HCloud.Common.HttpT m (Network.HTTP.Client.Types.Response GetImagesIdActionsActionIdResponse) -- ^ Monadic computation which returns the result of the operation
getImages_Id_Actions_ActionId_ parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetImagesIdActionsActionIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetImagesIdActionsActionIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                           GetImagesIdActionsActionIdResponseBody200)
                                                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/images/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel (getImagesIdActionsActionIdParametersPathId parameters))) GHC.Base.++ ("/actions/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel (getImagesIdActionsActionIdParametersPathActionId parameters))) GHC.Base.++ ""))))) GHC.Base.mempty)
-- | Defines the object schema located at @paths.\/images\/{id}\/actions\/{action_id}.GET.parameters@ in the specification.
-- 
-- 
data GetImagesIdActionsActionIdParameters = GetImagesIdActionsActionIdParameters {
  -- | pathAction_id: Represents the parameter named \'action_id\'
  -- 
  -- ID of the Action
  getImagesIdActionsActionIdParametersPathActionId :: GHC.Types.Int
  -- | pathId: Represents the parameter named \'id\'
  -- 
  -- ID of the Image
  , getImagesIdActionsActionIdParametersPathId :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetImagesIdActionsActionIdParameters
    where toJSON obj = Data.Aeson.Types.Internal.object ("pathAction_id" Data.Aeson.Types.ToJSON..= getImagesIdActionsActionIdParametersPathActionId obj : "pathId" Data.Aeson.Types.ToJSON..= getImagesIdActionsActionIdParametersPathId obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathAction_id" Data.Aeson.Types.ToJSON..= getImagesIdActionsActionIdParametersPathActionId obj) GHC.Base.<> ("pathId" Data.Aeson.Types.ToJSON..= getImagesIdActionsActionIdParametersPathId obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetImagesIdActionsActionIdParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetImagesIdActionsActionIdParameters" (\obj -> (GHC.Base.pure GetImagesIdActionsActionIdParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathAction_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathId"))
-- | Create a new 'GetImagesIdActionsActionIdParameters' with all required fields.
mkGetImagesIdActionsActionIdParameters :: GHC.Types.Int -- ^ 'getImagesIdActionsActionIdParametersPathActionId'
  -> GHC.Types.Int -- ^ 'getImagesIdActionsActionIdParametersPathId'
  -> GetImagesIdActionsActionIdParameters
mkGetImagesIdActionsActionIdParameters getImagesIdActionsActionIdParametersPathActionId getImagesIdActionsActionIdParametersPathId = GetImagesIdActionsActionIdParameters{getImagesIdActionsActionIdParametersPathActionId = getImagesIdActionsActionIdParametersPathActionId,
                                                                                                                                                                          getImagesIdActionsActionIdParametersPathId = getImagesIdActionsActionIdParametersPathId}
-- | Represents a response of the operation 'getImages_Id_Actions_ActionId_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetImagesIdActionsActionIdResponseError' is used.
data GetImagesIdActionsActionIdResponse =
   GetImagesIdActionsActionIdResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetImagesIdActionsActionIdResponse200 GetImagesIdActionsActionIdResponseBody200 -- ^ The \`action\` key contains the Image Action
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/images\/{id}\/actions\/{action_id}.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetImagesIdActionsActionIdResponseBody200 = GetImagesIdActionsActionIdResponseBody200 {
  -- | action
  getImagesIdActionsActionIdResponseBody200Action :: GetImagesIdActionsActionIdResponseBody200Action
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetImagesIdActionsActionIdResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("action" Data.Aeson.Types.ToJSON..= getImagesIdActionsActionIdResponseBody200Action obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("action" Data.Aeson.Types.ToJSON..= getImagesIdActionsActionIdResponseBody200Action obj)
instance Data.Aeson.Types.FromJSON.FromJSON GetImagesIdActionsActionIdResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetImagesIdActionsActionIdResponseBody200" (\obj -> GHC.Base.pure GetImagesIdActionsActionIdResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "action"))
-- | Create a new 'GetImagesIdActionsActionIdResponseBody200' with all required fields.
mkGetImagesIdActionsActionIdResponseBody200 :: GetImagesIdActionsActionIdResponseBody200Action -- ^ 'getImagesIdActionsActionIdResponseBody200Action'
  -> GetImagesIdActionsActionIdResponseBody200
mkGetImagesIdActionsActionIdResponseBody200 getImagesIdActionsActionIdResponseBody200Action = GetImagesIdActionsActionIdResponseBody200{getImagesIdActionsActionIdResponseBody200Action = getImagesIdActionsActionIdResponseBody200Action}
-- | Defines the object schema located at @paths.\/images\/{id}\/actions\/{action_id}.GET.responses.200.content.application\/json.schema.properties.action@ in the specification.
-- 
-- 
data GetImagesIdActionsActionIdResponseBody200Action = GetImagesIdActionsActionIdResponseBody200Action {
  -- | command: Command executed in the Action
  getImagesIdActionsActionIdResponseBody200ActionCommand :: Data.Text.Internal.Text
  -- | error: Error message for the Action if error occurred, otherwise null
  , getImagesIdActionsActionIdResponseBody200ActionError :: (GHC.Maybe.Maybe GetImagesIdActionsActionIdResponseBody200ActionError)
  -- | finished: Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
  , getImagesIdActionsActionIdResponseBody200ActionFinished :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | id: ID of the Resource
  , getImagesIdActionsActionIdResponseBody200ActionId :: GHC.Types.Int
  -- | progress: Progress of Action in percent
  , getImagesIdActionsActionIdResponseBody200ActionProgress :: GHC.Types.Double
  -- | resources: Resources the Action relates to
  , getImagesIdActionsActionIdResponseBody200ActionResources :: ([GetImagesIdActionsActionIdResponseBody200ActionResources])
  -- | started: Point in time when the Action was started (in ISO-8601 format)
  , getImagesIdActionsActionIdResponseBody200ActionStarted :: Data.Text.Internal.Text
  -- | status: Status of the Action
  , getImagesIdActionsActionIdResponseBody200ActionStatus :: GetImagesIdActionsActionIdResponseBody200ActionStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetImagesIdActionsActionIdResponseBody200Action
    where toJSON obj = Data.Aeson.Types.Internal.object ("command" Data.Aeson.Types.ToJSON..= getImagesIdActionsActionIdResponseBody200ActionCommand obj : "error" Data.Aeson.Types.ToJSON..= getImagesIdActionsActionIdResponseBody200ActionError obj : "finished" Data.Aeson.Types.ToJSON..= getImagesIdActionsActionIdResponseBody200ActionFinished obj : "id" Data.Aeson.Types.ToJSON..= getImagesIdActionsActionIdResponseBody200ActionId obj : "progress" Data.Aeson.Types.ToJSON..= getImagesIdActionsActionIdResponseBody200ActionProgress obj : "resources" Data.Aeson.Types.ToJSON..= getImagesIdActionsActionIdResponseBody200ActionResources obj : "started" Data.Aeson.Types.ToJSON..= getImagesIdActionsActionIdResponseBody200ActionStarted obj : "status" Data.Aeson.Types.ToJSON..= getImagesIdActionsActionIdResponseBody200ActionStatus obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("command" Data.Aeson.Types.ToJSON..= getImagesIdActionsActionIdResponseBody200ActionCommand obj) GHC.Base.<> (("error" Data.Aeson.Types.ToJSON..= getImagesIdActionsActionIdResponseBody200ActionError obj) GHC.Base.<> (("finished" Data.Aeson.Types.ToJSON..= getImagesIdActionsActionIdResponseBody200ActionFinished obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= getImagesIdActionsActionIdResponseBody200ActionId obj) GHC.Base.<> (("progress" Data.Aeson.Types.ToJSON..= getImagesIdActionsActionIdResponseBody200ActionProgress obj) GHC.Base.<> (("resources" Data.Aeson.Types.ToJSON..= getImagesIdActionsActionIdResponseBody200ActionResources obj) GHC.Base.<> (("started" Data.Aeson.Types.ToJSON..= getImagesIdActionsActionIdResponseBody200ActionStarted obj) GHC.Base.<> ("status" Data.Aeson.Types.ToJSON..= getImagesIdActionsActionIdResponseBody200ActionStatus obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetImagesIdActionsActionIdResponseBody200Action
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetImagesIdActionsActionIdResponseBody200Action" (\obj -> (((((((GHC.Base.pure GetImagesIdActionsActionIdResponseBody200Action GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "command")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "finished")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "started")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Create a new 'GetImagesIdActionsActionIdResponseBody200Action' with all required fields.
mkGetImagesIdActionsActionIdResponseBody200Action :: Data.Text.Internal.Text -- ^ 'getImagesIdActionsActionIdResponseBody200ActionCommand'
  -> GHC.Maybe.Maybe GetImagesIdActionsActionIdResponseBody200ActionError -- ^ 'getImagesIdActionsActionIdResponseBody200ActionError'
  -> GHC.Maybe.Maybe Data.Text.Internal.Text -- ^ 'getImagesIdActionsActionIdResponseBody200ActionFinished'
  -> GHC.Types.Int -- ^ 'getImagesIdActionsActionIdResponseBody200ActionId'
  -> GHC.Types.Double -- ^ 'getImagesIdActionsActionIdResponseBody200ActionProgress'
  -> [GetImagesIdActionsActionIdResponseBody200ActionResources] -- ^ 'getImagesIdActionsActionIdResponseBody200ActionResources'
  -> Data.Text.Internal.Text -- ^ 'getImagesIdActionsActionIdResponseBody200ActionStarted'
  -> GetImagesIdActionsActionIdResponseBody200ActionStatus -- ^ 'getImagesIdActionsActionIdResponseBody200ActionStatus'
  -> GetImagesIdActionsActionIdResponseBody200Action
mkGetImagesIdActionsActionIdResponseBody200Action getImagesIdActionsActionIdResponseBody200ActionCommand getImagesIdActionsActionIdResponseBody200ActionError getImagesIdActionsActionIdResponseBody200ActionFinished getImagesIdActionsActionIdResponseBody200ActionId getImagesIdActionsActionIdResponseBody200ActionProgress getImagesIdActionsActionIdResponseBody200ActionResources getImagesIdActionsActionIdResponseBody200ActionStarted getImagesIdActionsActionIdResponseBody200ActionStatus = GetImagesIdActionsActionIdResponseBody200Action{getImagesIdActionsActionIdResponseBody200ActionCommand = getImagesIdActionsActionIdResponseBody200ActionCommand,
getImagesIdActionsActionIdResponseBody200ActionError = getImagesIdActionsActionIdResponseBody200ActionError,
getImagesIdActionsActionIdResponseBody200ActionFinished = getImagesIdActionsActionIdResponseBody200ActionFinished,
getImagesIdActionsActionIdResponseBody200ActionId = getImagesIdActionsActionIdResponseBody200ActionId,
getImagesIdActionsActionIdResponseBody200ActionProgress = getImagesIdActionsActionIdResponseBody200ActionProgress,
getImagesIdActionsActionIdResponseBody200ActionResources = getImagesIdActionsActionIdResponseBody200ActionResources,
getImagesIdActionsActionIdResponseBody200ActionStarted = getImagesIdActionsActionIdResponseBody200ActionStarted,
getImagesIdActionsActionIdResponseBody200ActionStatus = getImagesIdActionsActionIdResponseBody200ActionStatus}
-- | Defines the object schema located at @paths.\/images\/{id}\/actions\/{action_id}.GET.responses.200.content.application\/json.schema.properties.action.properties.error@ in the specification.
-- 
-- Error message for the Action if error occurred, otherwise null
data GetImagesIdActionsActionIdResponseBody200ActionError = GetImagesIdActionsActionIdResponseBody200ActionError {
  -- | code: Fixed machine readable code
  getImagesIdActionsActionIdResponseBody200ActionErrorCode :: Data.Text.Internal.Text
  -- | message: Humanized error message
  , getImagesIdActionsActionIdResponseBody200ActionErrorMessage :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetImagesIdActionsActionIdResponseBody200ActionError
    where toJSON obj = Data.Aeson.Types.Internal.object ("code" Data.Aeson.Types.ToJSON..= getImagesIdActionsActionIdResponseBody200ActionErrorCode obj : "message" Data.Aeson.Types.ToJSON..= getImagesIdActionsActionIdResponseBody200ActionErrorMessage obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("code" Data.Aeson.Types.ToJSON..= getImagesIdActionsActionIdResponseBody200ActionErrorCode obj) GHC.Base.<> ("message" Data.Aeson.Types.ToJSON..= getImagesIdActionsActionIdResponseBody200ActionErrorMessage obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetImagesIdActionsActionIdResponseBody200ActionError
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetImagesIdActionsActionIdResponseBody200ActionError" (\obj -> (GHC.Base.pure GetImagesIdActionsActionIdResponseBody200ActionError GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Create a new 'GetImagesIdActionsActionIdResponseBody200ActionError' with all required fields.
mkGetImagesIdActionsActionIdResponseBody200ActionError :: Data.Text.Internal.Text -- ^ 'getImagesIdActionsActionIdResponseBody200ActionErrorCode'
  -> Data.Text.Internal.Text -- ^ 'getImagesIdActionsActionIdResponseBody200ActionErrorMessage'
  -> GetImagesIdActionsActionIdResponseBody200ActionError
mkGetImagesIdActionsActionIdResponseBody200ActionError getImagesIdActionsActionIdResponseBody200ActionErrorCode getImagesIdActionsActionIdResponseBody200ActionErrorMessage = GetImagesIdActionsActionIdResponseBody200ActionError{getImagesIdActionsActionIdResponseBody200ActionErrorCode = getImagesIdActionsActionIdResponseBody200ActionErrorCode,
                                                                                                                                                                                                                                   getImagesIdActionsActionIdResponseBody200ActionErrorMessage = getImagesIdActionsActionIdResponseBody200ActionErrorMessage}
-- | Defines the object schema located at @paths.\/images\/{id}\/actions\/{action_id}.GET.responses.200.content.application\/json.schema.properties.action.properties.resources.items@ in the specification.
-- 
-- 
data GetImagesIdActionsActionIdResponseBody200ActionResources = GetImagesIdActionsActionIdResponseBody200ActionResources {
  -- | id: ID of the Resource
  getImagesIdActionsActionIdResponseBody200ActionResourcesId :: GHC.Types.Int
  -- | type: Type of resource referenced
  , getImagesIdActionsActionIdResponseBody200ActionResourcesType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetImagesIdActionsActionIdResponseBody200ActionResources
    where toJSON obj = Data.Aeson.Types.Internal.object ("id" Data.Aeson.Types.ToJSON..= getImagesIdActionsActionIdResponseBody200ActionResourcesId obj : "type" Data.Aeson.Types.ToJSON..= getImagesIdActionsActionIdResponseBody200ActionResourcesType obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("id" Data.Aeson.Types.ToJSON..= getImagesIdActionsActionIdResponseBody200ActionResourcesId obj) GHC.Base.<> ("type" Data.Aeson.Types.ToJSON..= getImagesIdActionsActionIdResponseBody200ActionResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetImagesIdActionsActionIdResponseBody200ActionResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetImagesIdActionsActionIdResponseBody200ActionResources" (\obj -> (GHC.Base.pure GetImagesIdActionsActionIdResponseBody200ActionResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Create a new 'GetImagesIdActionsActionIdResponseBody200ActionResources' with all required fields.
mkGetImagesIdActionsActionIdResponseBody200ActionResources :: GHC.Types.Int -- ^ 'getImagesIdActionsActionIdResponseBody200ActionResourcesId'
  -> Data.Text.Internal.Text -- ^ 'getImagesIdActionsActionIdResponseBody200ActionResourcesType'
  -> GetImagesIdActionsActionIdResponseBody200ActionResources
mkGetImagesIdActionsActionIdResponseBody200ActionResources getImagesIdActionsActionIdResponseBody200ActionResourcesId getImagesIdActionsActionIdResponseBody200ActionResourcesType = GetImagesIdActionsActionIdResponseBody200ActionResources{getImagesIdActionsActionIdResponseBody200ActionResourcesId = getImagesIdActionsActionIdResponseBody200ActionResourcesId,
                                                                                                                                                                                                                                              getImagesIdActionsActionIdResponseBody200ActionResourcesType = getImagesIdActionsActionIdResponseBody200ActionResourcesType}
-- | Defines the enum schema located at @paths.\/images\/{id}\/actions\/{action_id}.GET.responses.200.content.application\/json.schema.properties.action.properties.status@ in the specification.
-- 
-- Status of the Action
data GetImagesIdActionsActionIdResponseBody200ActionStatus =
   GetImagesIdActionsActionIdResponseBody200ActionStatusOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetImagesIdActionsActionIdResponseBody200ActionStatusTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetImagesIdActionsActionIdResponseBody200ActionStatusEnumSuccess -- ^ Represents the JSON value @"success"@
  | GetImagesIdActionsActionIdResponseBody200ActionStatusEnumRunning -- ^ Represents the JSON value @"running"@
  | GetImagesIdActionsActionIdResponseBody200ActionStatusEnumError -- ^ Represents the JSON value @"error"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetImagesIdActionsActionIdResponseBody200ActionStatus
    where toJSON (GetImagesIdActionsActionIdResponseBody200ActionStatusOther val) = val
          toJSON (GetImagesIdActionsActionIdResponseBody200ActionStatusTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetImagesIdActionsActionIdResponseBody200ActionStatusEnumSuccess) = "success"
          toJSON (GetImagesIdActionsActionIdResponseBody200ActionStatusEnumRunning) = "running"
          toJSON (GetImagesIdActionsActionIdResponseBody200ActionStatusEnumError) = "error"
instance Data.Aeson.Types.FromJSON.FromJSON GetImagesIdActionsActionIdResponseBody200ActionStatus
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "success" -> GetImagesIdActionsActionIdResponseBody200ActionStatusEnumSuccess
                                            | val GHC.Classes.== "running" -> GetImagesIdActionsActionIdResponseBody200ActionStatusEnumRunning
                                            | val GHC.Classes.== "error" -> GetImagesIdActionsActionIdResponseBody200ActionStatusEnumError
                                            | GHC.Base.otherwise -> GetImagesIdActionsActionIdResponseBody200ActionStatusOther val)
-- | > GET /images/{id}/actions/{action_id}
-- 
-- The same as 'getImages_Id_Actions_ActionId_' but accepts an explicit configuration.
getImages_Id_Actions_ActionId_WithConfiguration :: forall m . HCloud.Common.MonadHTTP m => HCloud.Common.Configuration -- ^ The configuration to use in the request
  -> GetImagesIdActionsActionIdParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetImagesIdActionsActionIdResponse) -- ^ Monadic computation which returns the result of the operation
getImages_Id_Actions_ActionId_WithConfiguration config
                                                parameters = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetImagesIdActionsActionIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetImagesIdActionsActionIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            GetImagesIdActionsActionIdResponseBody200)
                                                                                                                                                                                                                  | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/images/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel (getImagesIdActionsActionIdParametersPathId parameters))) GHC.Base.++ ("/actions/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel (getImagesIdActionsActionIdParametersPathActionId parameters))) GHC.Base.++ ""))))) GHC.Base.mempty)
-- | > GET /images/{id}/actions/{action_id}
-- 
-- The same as 'getImages_Id_Actions_ActionId_' but returns the raw 'Data.ByteString.Char8.ByteString'.
getImages_Id_Actions_ActionId_Raw :: forall m . HCloud.Common.MonadHTTP m => GetImagesIdActionsActionIdParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> HCloud.Common.HttpT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getImages_Id_Actions_ActionId_Raw parameters = GHC.Base.id (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/images/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel (getImagesIdActionsActionIdParametersPathId parameters))) GHC.Base.++ ("/actions/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel (getImagesIdActionsActionIdParametersPathActionId parameters))) GHC.Base.++ ""))))) GHC.Base.mempty)
-- | > GET /images/{id}/actions/{action_id}
-- 
-- The same as 'getImages_Id_Actions_ActionId_' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getImages_Id_Actions_ActionId_WithConfigurationRaw :: forall m . HCloud.Common.MonadHTTP m => HCloud.Common.Configuration -- ^ The configuration to use in the request
  -> GetImagesIdActionsActionIdParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getImages_Id_Actions_ActionId_WithConfigurationRaw config
                                                   parameters = GHC.Base.id (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/images/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel (getImagesIdActionsActionIdParametersPathId parameters))) GHC.Base.++ ("/actions/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel (getImagesIdActionsActionIdParametersPathActionId parameters))) GHC.Base.++ ""))))) GHC.Base.mempty)
