-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation getImages_Id_Actions_ActionId_
module HCloud.Operations.GetImagesIdActionsActionId_ where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > GET /images/{id}/actions/{action_id}
-- 
-- Returns a specific Action for an Image.
getImages_Id_Actions_ActionId_ :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer                                                                                                                   -- ^ id: ID of the Image
  -> GHC.Integer.Type.Integer                                                                                                                   -- ^ action_id: ID of the Action
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response GetImagesIdActionsActionIdResponse))     -- ^ Monad containing the result of the operation
getImages_Id_Actions_ActionId_ config
                               id
                               actionId = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetImagesIdActionsActionIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetImagesIdActionsActionIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        GetImagesIdActionsActionIdResponseBody200)
                                                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/images/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ("/actions/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel actionId)) GHC.Base.++ ""))))) [])
-- | > GET /images/{id}/actions/{action_id}
-- 
-- The same as 'getImages_Id_Actions_ActionId_' but returns the raw 'Data.ByteString.Char8.ByteString'
getImages_Id_Actions_ActionId_Raw :: forall m s . (HCloud.Common.MonadHTTP m,
                                                   HCloud.Common.SecurityScheme s) =>
                                     HCloud.Common.Configuration s ->
                                     GHC.Integer.Type.Integer ->
                                     GHC.Integer.Type.Integer ->
                                     m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                           (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getImages_Id_Actions_ActionId_Raw config
                                  id
                                  actionId = GHC.Base.id (HCloud.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/images/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ("/actions/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel actionId)) GHC.Base.++ ""))))) [])
-- | > GET /images/{id}/actions/{action_id}
-- 
-- Monadic version of 'getImages_Id_Actions_ActionId_' (use with 'HCloud.Common.runWithConfiguration')
getImages_Id_Actions_ActionId_M :: forall m s . (HCloud.Common.MonadHTTP m,
                                                 HCloud.Common.SecurityScheme s) =>
                                   GHC.Integer.Type.Integer ->
                                   GHC.Integer.Type.Integer ->
                                   Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                      m
                                                                      (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                          (Network.HTTP.Client.Types.Response GetImagesIdActionsActionIdResponse))
getImages_Id_Actions_ActionId_M id
                                actionId = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetImagesIdActionsActionIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetImagesIdActionsActionIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         GetImagesIdActionsActionIdResponseBody200)
                                                                                                                                                                                                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/images/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ("/actions/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel actionId)) GHC.Base.++ ""))))) [])
-- | > GET /images/{id}/actions/{action_id}
-- 
-- Monadic version of 'getImages_Id_Actions_ActionId_Raw' (use with 'HCloud.Common.runWithConfiguration')
getImages_Id_Actions_ActionId_RawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                    HCloud.Common.SecurityScheme s) =>
                                      GHC.Integer.Type.Integer ->
                                      GHC.Integer.Type.Integer ->
                                      Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                         m
                                                                         (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                             (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
getImages_Id_Actions_ActionId_RawM id
                                   actionId = GHC.Base.id (HCloud.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/images/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ ("/actions/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel actionId)) GHC.Base.++ ""))))) [])
-- | Represents a response of the operation 'getImages_Id_Actions_ActionId_'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetImagesIdActionsActionIdResponseError' is used.
data GetImagesIdActionsActionIdResponse =                                            
   GetImagesIdActionsActionIdResponseError GHC.Base.String                           -- ^ Means either no matching case available or a parse error
  | GetImagesIdActionsActionIdResponse200 GetImagesIdActionsActionIdResponseBody200  -- ^ The \`action\` key contains the Image Action
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema GetImagesIdActionsActionIdResponseBody200
-- 
-- 
data GetImagesIdActionsActionIdResponseBody200 = GetImagesIdActionsActionIdResponseBody200 {
  -- | action
  getImagesIdActionsActionIdResponseBody200Action :: GetImagesIdActionsActionIdResponseBody200Action
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetImagesIdActionsActionIdResponseBody200
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "action" (getImagesIdActionsActionIdResponseBody200Action obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "action" (getImagesIdActionsActionIdResponseBody200Action obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetImagesIdActionsActionIdResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetImagesIdActionsActionIdResponseBody200" (\obj -> GHC.Base.pure GetImagesIdActionsActionIdResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "action"))
-- | Defines the data type for the schema GetImagesIdActionsActionIdResponseBody200Action
-- 
-- 
data GetImagesIdActionsActionIdResponseBody200Action = GetImagesIdActionsActionIdResponseBody200Action {
  -- | command: Command executed in the Action
  getImagesIdActionsActionIdResponseBody200ActionCommand :: Data.Text.Internal.Text
  -- | error: Error message for the Action if error occurred, otherwise null
  , getImagesIdActionsActionIdResponseBody200ActionError :: GetImagesIdActionsActionIdResponseBody200ActionError
  -- | finished: Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
  , getImagesIdActionsActionIdResponseBody200ActionFinished :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , getImagesIdActionsActionIdResponseBody200ActionId :: GHC.Integer.Type.Integer
  -- | progress: Progress of Action in percent
  , getImagesIdActionsActionIdResponseBody200ActionProgress :: GHC.Types.Double
  -- | resources: Resources the Action relates to
  , getImagesIdActionsActionIdResponseBody200ActionResources :: ([] GetImagesIdActionsActionIdResponseBody200ActionResources)
  -- | started: Point in time when the Action was started (in ISO-8601 format)
  , getImagesIdActionsActionIdResponseBody200ActionStarted :: Data.Text.Internal.Text
  -- | status: Status of the Action
  , getImagesIdActionsActionIdResponseBody200ActionStatus :: GetImagesIdActionsActionIdResponseBody200ActionStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetImagesIdActionsActionIdResponseBody200Action
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "command" (getImagesIdActionsActionIdResponseBody200ActionCommand obj) : (Data.Aeson..=) "error" (getImagesIdActionsActionIdResponseBody200ActionError obj) : (Data.Aeson..=) "finished" (getImagesIdActionsActionIdResponseBody200ActionFinished obj) : (Data.Aeson..=) "id" (getImagesIdActionsActionIdResponseBody200ActionId obj) : (Data.Aeson..=) "progress" (getImagesIdActionsActionIdResponseBody200ActionProgress obj) : (Data.Aeson..=) "resources" (getImagesIdActionsActionIdResponseBody200ActionResources obj) : (Data.Aeson..=) "started" (getImagesIdActionsActionIdResponseBody200ActionStarted obj) : (Data.Aeson..=) "status" (getImagesIdActionsActionIdResponseBody200ActionStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "command" (getImagesIdActionsActionIdResponseBody200ActionCommand obj) GHC.Base.<> ((Data.Aeson..=) "error" (getImagesIdActionsActionIdResponseBody200ActionError obj) GHC.Base.<> ((Data.Aeson..=) "finished" (getImagesIdActionsActionIdResponseBody200ActionFinished obj) GHC.Base.<> ((Data.Aeson..=) "id" (getImagesIdActionsActionIdResponseBody200ActionId obj) GHC.Base.<> ((Data.Aeson..=) "progress" (getImagesIdActionsActionIdResponseBody200ActionProgress obj) GHC.Base.<> ((Data.Aeson..=) "resources" (getImagesIdActionsActionIdResponseBody200ActionResources obj) GHC.Base.<> ((Data.Aeson..=) "started" (getImagesIdActionsActionIdResponseBody200ActionStarted obj) GHC.Base.<> (Data.Aeson..=) "status" (getImagesIdActionsActionIdResponseBody200ActionStatus obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON GetImagesIdActionsActionIdResponseBody200Action
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetImagesIdActionsActionIdResponseBody200Action" (\obj -> (((((((GHC.Base.pure GetImagesIdActionsActionIdResponseBody200Action GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "command")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "finished")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "started")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Defines the data type for the schema GetImagesIdActionsActionIdResponseBody200ActionError
-- 
-- Error message for the Action if error occurred, otherwise null
data GetImagesIdActionsActionIdResponseBody200ActionError = GetImagesIdActionsActionIdResponseBody200ActionError {
  -- | code: Fixed machine readable code
  getImagesIdActionsActionIdResponseBody200ActionErrorCode :: Data.Text.Internal.Text
  -- | message: Humanized error message
  , getImagesIdActionsActionIdResponseBody200ActionErrorMessage :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetImagesIdActionsActionIdResponseBody200ActionError
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "code" (getImagesIdActionsActionIdResponseBody200ActionErrorCode obj) : (Data.Aeson..=) "message" (getImagesIdActionsActionIdResponseBody200ActionErrorMessage obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "code" (getImagesIdActionsActionIdResponseBody200ActionErrorCode obj) GHC.Base.<> (Data.Aeson..=) "message" (getImagesIdActionsActionIdResponseBody200ActionErrorMessage obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetImagesIdActionsActionIdResponseBody200ActionError
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetImagesIdActionsActionIdResponseBody200ActionError" (\obj -> (GHC.Base.pure GetImagesIdActionsActionIdResponseBody200ActionError GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Defines the data type for the schema GetImagesIdActionsActionIdResponseBody200ActionResources
-- 
-- 
data GetImagesIdActionsActionIdResponseBody200ActionResources = GetImagesIdActionsActionIdResponseBody200ActionResources {
  -- | id: ID of the Resource
  getImagesIdActionsActionIdResponseBody200ActionResourcesId :: GHC.Integer.Type.Integer
  -- | type: Type of resource referenced
  , getImagesIdActionsActionIdResponseBody200ActionResourcesType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetImagesIdActionsActionIdResponseBody200ActionResources
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (getImagesIdActionsActionIdResponseBody200ActionResourcesId obj) : (Data.Aeson..=) "type" (getImagesIdActionsActionIdResponseBody200ActionResourcesType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (getImagesIdActionsActionIdResponseBody200ActionResourcesId obj) GHC.Base.<> (Data.Aeson..=) "type" (getImagesIdActionsActionIdResponseBody200ActionResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON GetImagesIdActionsActionIdResponseBody200ActionResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetImagesIdActionsActionIdResponseBody200ActionResources" (\obj -> (GHC.Base.pure GetImagesIdActionsActionIdResponseBody200ActionResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema GetImagesIdActionsActionIdResponseBody200ActionStatus
-- 
-- Status of the Action
data GetImagesIdActionsActionIdResponseBody200ActionStatus
    = GetImagesIdActionsActionIdResponseBody200ActionStatusEnumOther Data.Aeson.Types.Internal.Value
    | GetImagesIdActionsActionIdResponseBody200ActionStatusEnumTyped Data.Text.Internal.Text
    | GetImagesIdActionsActionIdResponseBody200ActionStatusEnumStringError
    | GetImagesIdActionsActionIdResponseBody200ActionStatusEnumStringRunning
    | GetImagesIdActionsActionIdResponseBody200ActionStatusEnumStringSuccess
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON GetImagesIdActionsActionIdResponseBody200ActionStatus
    where toJSON (GetImagesIdActionsActionIdResponseBody200ActionStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetImagesIdActionsActionIdResponseBody200ActionStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (GetImagesIdActionsActionIdResponseBody200ActionStatusEnumStringError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error"
          toJSON (GetImagesIdActionsActionIdResponseBody200ActionStatusEnumStringRunning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running"
          toJSON (GetImagesIdActionsActionIdResponseBody200ActionStatusEnumStringSuccess) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success"
instance Data.Aeson.FromJSON GetImagesIdActionsActionIdResponseBody200ActionStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error")
                                          then GetImagesIdActionsActionIdResponseBody200ActionStatusEnumStringError
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running")
                                                then GetImagesIdActionsActionIdResponseBody200ActionStatusEnumStringRunning
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success")
                                                      then GetImagesIdActionsActionIdResponseBody200ActionStatusEnumStringSuccess
                                                      else GetImagesIdActionsActionIdResponseBody200ActionStatusEnumOther val)
