-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DeriveGeneric #-}

-- | Contains the different functions to run the operation postServers_Id_ActionsChangeType
module HCloud.Operations.PostServersIdActionsChangeType where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified HCloud.Common
import HCloud.Types

-- | > POST /servers/{id}/actions/change_type
-- 
-- Changes the type (Cores, RAM and disk sizes) of a Server.
-- 
-- Server must be powered off for this command to succeed.
-- 
-- This copies the content of its disk, and starts it again.
-- 
-- You can only migrate to Server types with the same \`storage_type\` and equal or bigger disks. Shrinking disks is not possible as it might destroy data.
-- 
-- If the disk gets upgraded, the Server type can not be downgraded any more. If you plan to downgrade the Server type, set \`upgrade_disk\` to \`false\`.
-- 
-- \#\#\#\# Call specific error codes
-- 
-- | Code                          | Description                                                          |
-- |-------------------------------|----------------------------------------------------------------------|
-- | \`invalid_server_type\`         | The server type does not fit for the given server or is deprecated   |
-- | \`server_not_stopped\`          | The action requires a stopped server                                 |
postServers_Id_ActionsChangeType :: forall m s . (HCloud.Common.MonadHTTP m, HCloud.Common.SecurityScheme s) => HCloud.Common.Configuration s  -- ^ The configuration to use in the request
  -> GHC.Integer.Type.Integer                                                                                                                     -- ^ id: ID of the Server
  -> GHC.Maybe.Maybe PostServersIdActionsChangeTypeRequestBody                                                                                    -- ^ The request body to send
  -> m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response PostServersIdActionsChangeTypeResponse))   -- ^ Monad containing the result of the operation
postServers_Id_ActionsChangeType config
                                 id
                                 body = GHC.Base.fmap (GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostServersIdActionsChangeTypeResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostServersIdActionsChangeTypeResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              PostServersIdActionsChangeTypeResponseBody201)
                                                                                                                                                                                                                | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0)) (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/servers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/change_type"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /servers/{id}/actions/change_type
-- 
-- The same as 'postServers_Id_ActionsChangeType' but returns the raw 'Data.ByteString.Char8.ByteString'
postServers_Id_ActionsChangeTypeRaw :: forall m s . (HCloud.Common.MonadHTTP m,
                                                     HCloud.Common.SecurityScheme s) =>
                                       HCloud.Common.Configuration s ->
                                       GHC.Integer.Type.Integer ->
                                       GHC.Maybe.Maybe PostServersIdActionsChangeTypeRequestBody ->
                                       m (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                             (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postServers_Id_ActionsChangeTypeRaw config
                                    id
                                    body = GHC.Base.id (HCloud.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/servers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/change_type"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /servers/{id}/actions/change_type
-- 
-- Monadic version of 'postServers_Id_ActionsChangeType' (use with 'HCloud.Common.runWithConfiguration')
postServers_Id_ActionsChangeTypeM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                   HCloud.Common.SecurityScheme s) =>
                                     GHC.Integer.Type.Integer ->
                                     GHC.Maybe.Maybe PostServersIdActionsChangeTypeRequestBody ->
                                     Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                        m
                                                                        (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                            (Network.HTTP.Client.Types.Response PostServersIdActionsChangeTypeResponse))
postServers_Id_ActionsChangeTypeM id
                                  body = GHC.Base.fmap (GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostServersIdActionsChangeTypeResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> PostServersIdActionsChangeTypeResponse201 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               PostServersIdActionsChangeTypeResponseBody201)
                                                                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2)) (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/servers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/change_type"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | > POST /servers/{id}/actions/change_type
-- 
-- Monadic version of 'postServers_Id_ActionsChangeTypeRaw' (use with 'HCloud.Common.runWithConfiguration')
postServers_Id_ActionsChangeTypeRawM :: forall m s . (HCloud.Common.MonadHTTP m,
                                                      HCloud.Common.SecurityScheme s) =>
                                        GHC.Integer.Type.Integer ->
                                        GHC.Maybe.Maybe PostServersIdActionsChangeTypeRequestBody ->
                                        Control.Monad.Trans.Reader.ReaderT (HCloud.Common.Configuration s)
                                                                           m
                                                                           (Data.Either.Either Network.HTTP.Client.Types.HttpException
                                                                                               (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString))
postServers_Id_ActionsChangeTypeRawM id
                                     body = GHC.Base.id (HCloud.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/servers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ HCloud.Common.stringifyModel id)) GHC.Base.++ "/actions/change_type"))) [] body HCloud.Common.RequestBodyEncodingJSON)
-- | Defines the data type for the schema postServers_Id_ActionsChangeTypeRequestBody
-- 
-- 
data PostServersIdActionsChangeTypeRequestBody = PostServersIdActionsChangeTypeRequestBody {
  -- | server_type: ID or name of Server type the Server should migrate to
  postServersIdActionsChangeTypeRequestBodyServerType :: Data.Text.Internal.Text
  -- | upgrade_disk: If false, do not upgrade the disk (this allows downgrading the Server type later)
  , postServersIdActionsChangeTypeRequestBodyUpgradeDisk :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsChangeTypeRequestBody
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "server_type" (postServersIdActionsChangeTypeRequestBodyServerType obj) : (Data.Aeson..=) "upgrade_disk" (postServersIdActionsChangeTypeRequestBodyUpgradeDisk obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "server_type" (postServersIdActionsChangeTypeRequestBodyServerType obj) GHC.Base.<> (Data.Aeson..=) "upgrade_disk" (postServersIdActionsChangeTypeRequestBodyUpgradeDisk obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersIdActionsChangeTypeRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersIdActionsChangeTypeRequestBody" (\obj -> (GHC.Base.pure PostServersIdActionsChangeTypeRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "server_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "upgrade_disk"))
-- | Represents a response of the operation 'postServers_Id_ActionsChangeType'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostServersIdActionsChangeTypeResponseError' is used.
data PostServersIdActionsChangeTypeResponse =                                                
   PostServersIdActionsChangeTypeResponseError GHC.Base.String                               -- ^ Means either no matching case available or a parse error
  | PostServersIdActionsChangeTypeResponse201 PostServersIdActionsChangeTypeResponseBody201  -- ^ The \`action\` key in the reply contains an Action object with this structure
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the data type for the schema PostServersIdActionsChangeTypeResponseBody201
-- 
-- 
data PostServersIdActionsChangeTypeResponseBody201 = PostServersIdActionsChangeTypeResponseBody201 {
  -- | action
  postServersIdActionsChangeTypeResponseBody201Action :: PostServersIdActionsChangeTypeResponseBody201Action
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsChangeTypeResponseBody201
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "action" (postServersIdActionsChangeTypeResponseBody201Action obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "action" (postServersIdActionsChangeTypeResponseBody201Action obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersIdActionsChangeTypeResponseBody201
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersIdActionsChangeTypeResponseBody201" (\obj -> GHC.Base.pure PostServersIdActionsChangeTypeResponseBody201 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "action"))
-- | Defines the data type for the schema PostServersIdActionsChangeTypeResponseBody201Action
-- 
-- 
data PostServersIdActionsChangeTypeResponseBody201Action = PostServersIdActionsChangeTypeResponseBody201Action {
  -- | command: Command executed in the Action
  postServersIdActionsChangeTypeResponseBody201ActionCommand :: Data.Text.Internal.Text
  -- | error: Error message for the Action if error occurred, otherwise null
  , postServersIdActionsChangeTypeResponseBody201ActionError :: PostServersIdActionsChangeTypeResponseBody201ActionError
  -- | finished: Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
  , postServersIdActionsChangeTypeResponseBody201ActionFinished :: Data.Text.Internal.Text
  -- | id: ID of the Resource
  , postServersIdActionsChangeTypeResponseBody201ActionId :: GHC.Integer.Type.Integer
  -- | progress: Progress of Action in percent
  , postServersIdActionsChangeTypeResponseBody201ActionProgress :: GHC.Types.Double
  -- | resources: Resources the Action relates to
  , postServersIdActionsChangeTypeResponseBody201ActionResources :: ([] PostServersIdActionsChangeTypeResponseBody201ActionResources)
  -- | started: Point in time when the Action was started (in ISO-8601 format)
  , postServersIdActionsChangeTypeResponseBody201ActionStarted :: Data.Text.Internal.Text
  -- | status: Status of the Action
  , postServersIdActionsChangeTypeResponseBody201ActionStatus :: PostServersIdActionsChangeTypeResponseBody201ActionStatus
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsChangeTypeResponseBody201Action
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "command" (postServersIdActionsChangeTypeResponseBody201ActionCommand obj) : (Data.Aeson..=) "error" (postServersIdActionsChangeTypeResponseBody201ActionError obj) : (Data.Aeson..=) "finished" (postServersIdActionsChangeTypeResponseBody201ActionFinished obj) : (Data.Aeson..=) "id" (postServersIdActionsChangeTypeResponseBody201ActionId obj) : (Data.Aeson..=) "progress" (postServersIdActionsChangeTypeResponseBody201ActionProgress obj) : (Data.Aeson..=) "resources" (postServersIdActionsChangeTypeResponseBody201ActionResources obj) : (Data.Aeson..=) "started" (postServersIdActionsChangeTypeResponseBody201ActionStarted obj) : (Data.Aeson..=) "status" (postServersIdActionsChangeTypeResponseBody201ActionStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "command" (postServersIdActionsChangeTypeResponseBody201ActionCommand obj) GHC.Base.<> ((Data.Aeson..=) "error" (postServersIdActionsChangeTypeResponseBody201ActionError obj) GHC.Base.<> ((Data.Aeson..=) "finished" (postServersIdActionsChangeTypeResponseBody201ActionFinished obj) GHC.Base.<> ((Data.Aeson..=) "id" (postServersIdActionsChangeTypeResponseBody201ActionId obj) GHC.Base.<> ((Data.Aeson..=) "progress" (postServersIdActionsChangeTypeResponseBody201ActionProgress obj) GHC.Base.<> ((Data.Aeson..=) "resources" (postServersIdActionsChangeTypeResponseBody201ActionResources obj) GHC.Base.<> ((Data.Aeson..=) "started" (postServersIdActionsChangeTypeResponseBody201ActionStarted obj) GHC.Base.<> (Data.Aeson..=) "status" (postServersIdActionsChangeTypeResponseBody201ActionStatus obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersIdActionsChangeTypeResponseBody201Action
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersIdActionsChangeTypeResponseBody201Action" (\obj -> (((((((GHC.Base.pure PostServersIdActionsChangeTypeResponseBody201Action GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "command")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "finished")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "progress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "resources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "started")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Defines the data type for the schema PostServersIdActionsChangeTypeResponseBody201ActionError
-- 
-- Error message for the Action if error occurred, otherwise null
data PostServersIdActionsChangeTypeResponseBody201ActionError = PostServersIdActionsChangeTypeResponseBody201ActionError {
  -- | code: Fixed machine readable code
  postServersIdActionsChangeTypeResponseBody201ActionErrorCode :: Data.Text.Internal.Text
  -- | message: Humanized error message
  , postServersIdActionsChangeTypeResponseBody201ActionErrorMessage :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsChangeTypeResponseBody201ActionError
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "code" (postServersIdActionsChangeTypeResponseBody201ActionErrorCode obj) : (Data.Aeson..=) "message" (postServersIdActionsChangeTypeResponseBody201ActionErrorMessage obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "code" (postServersIdActionsChangeTypeResponseBody201ActionErrorCode obj) GHC.Base.<> (Data.Aeson..=) "message" (postServersIdActionsChangeTypeResponseBody201ActionErrorMessage obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersIdActionsChangeTypeResponseBody201ActionError
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersIdActionsChangeTypeResponseBody201ActionError" (\obj -> (GHC.Base.pure PostServersIdActionsChangeTypeResponseBody201ActionError GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message"))
-- | Defines the data type for the schema PostServersIdActionsChangeTypeResponseBody201ActionResources
-- 
-- 
data PostServersIdActionsChangeTypeResponseBody201ActionResources = PostServersIdActionsChangeTypeResponseBody201ActionResources {
  -- | id: ID of the Resource
  postServersIdActionsChangeTypeResponseBody201ActionResourcesId :: GHC.Integer.Type.Integer
  -- | type: Type of resource referenced
  , postServersIdActionsChangeTypeResponseBody201ActionResourcesType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsChangeTypeResponseBody201ActionResources
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (postServersIdActionsChangeTypeResponseBody201ActionResourcesId obj) : (Data.Aeson..=) "type" (postServersIdActionsChangeTypeResponseBody201ActionResourcesType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (postServersIdActionsChangeTypeResponseBody201ActionResourcesId obj) GHC.Base.<> (Data.Aeson..=) "type" (postServersIdActionsChangeTypeResponseBody201ActionResourcesType obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostServersIdActionsChangeTypeResponseBody201ActionResources
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostServersIdActionsChangeTypeResponseBody201ActionResources" (\obj -> (GHC.Base.pure PostServersIdActionsChangeTypeResponseBody201ActionResources GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Defines the enum schema PostServersIdActionsChangeTypeResponseBody201ActionStatus
-- 
-- Status of the Action
data PostServersIdActionsChangeTypeResponseBody201ActionStatus
    = PostServersIdActionsChangeTypeResponseBody201ActionStatusEnumOther Data.Aeson.Types.Internal.Value
    | PostServersIdActionsChangeTypeResponseBody201ActionStatusEnumTyped Data.Text.Internal.Text
    | PostServersIdActionsChangeTypeResponseBody201ActionStatusEnumStringError
    | PostServersIdActionsChangeTypeResponseBody201ActionStatusEnumStringRunning
    | PostServersIdActionsChangeTypeResponseBody201ActionStatusEnumStringSuccess
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PostServersIdActionsChangeTypeResponseBody201ActionStatus
    where toJSON (PostServersIdActionsChangeTypeResponseBody201ActionStatusEnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostServersIdActionsChangeTypeResponseBody201ActionStatusEnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PostServersIdActionsChangeTypeResponseBody201ActionStatusEnumStringError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error"
          toJSON (PostServersIdActionsChangeTypeResponseBody201ActionStatusEnumStringRunning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running"
          toJSON (PostServersIdActionsChangeTypeResponseBody201ActionStatusEnumStringSuccess) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success"
instance Data.Aeson.FromJSON PostServersIdActionsChangeTypeResponseBody201ActionStatus
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "error")
                                          then PostServersIdActionsChangeTypeResponseBody201ActionStatusEnumStringError
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "running")
                                                then PostServersIdActionsChangeTypeResponseBody201ActionStatusEnumStringRunning
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "success")
                                                      then PostServersIdActionsChangeTypeResponseBody201ActionStatusEnumStringSuccess
                                                      else PostServersIdActionsChangeTypeResponseBody201ActionStatusEnumOther val)
